
receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003770  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003938  08003938  00013938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003950  08003950  00020008  2**0
                  CONTENTS
  4 .ARM          00000008  08003950  08003950  00013950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003958  08003958  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003958  08003958  00013958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08003960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000008  08003968  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003968  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e29a  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002028  00000000  00000000  0002e2d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d58  00000000  00000000  00030300  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c30  00000000  00000000  00031058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024ca0  00000000  00000000  00031c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c60b  00000000  00000000  00056928  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e5c9f  00000000  00000000  00062f33  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00148bd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003660  00000000  00000000  00148c50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000008 	.word	0x20000008
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003920 	.word	0x08003920

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000000c 	.word	0x2000000c
 8000204:	08003920 	.word	0x08003920

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f8d6 	bl	80006ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f002 ffba 	bl	800349c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000528:	f002 ff94 	bl	8003454 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800052c:	2300      	movs	r3, #0
}
 800052e:	4618      	mov	r0, r3
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <HAL_IncTick+0x20>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <HAL_IncTick+0x24>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4413      	add	r3, r2
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <HAL_IncTick+0x24>)
 8000546:	6013      	str	r3, [r2, #0]
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000000 	.word	0x20000000
 8000558:	20000028 	.word	0x20000028

0800055c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  return uwTick;
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <HAL_GetTick+0x14>)
 8000562:	681b      	ldr	r3, [r3, #0]
}
 8000564:	4618      	mov	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	20000028 	.word	0x20000028

08000574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	f003 0307 	and.w	r3, r3, #7
 8000582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <__NVIC_SetPriorityGrouping+0x40>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800058a:	68ba      	ldr	r2, [r7, #8]
 800058c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000590:	4013      	ands	r3, r2
 8000592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <__NVIC_SetPriorityGrouping+0x44>)
 800059e:	4313      	orrs	r3, r2
 80005a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005a2:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <__NVIC_SetPriorityGrouping+0x40>)
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	60d3      	str	r3, [r2, #12]
}
 80005a8:	bf00      	nop
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	e000ed00 	.word	0xe000ed00
 80005b8:	05fa0000 	.word	0x05fa0000

080005bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <__NVIC_GetPriorityGrouping+0x18>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	0a1b      	lsrs	r3, r3, #8
 80005c6:	f003 0307 	and.w	r3, r3, #7
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	db0b      	blt.n	8000602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	f003 021f 	and.w	r2, r3, #31
 80005f0:	4907      	ldr	r1, [pc, #28]	; (8000610 <__NVIC_EnableIRQ+0x38>)
 80005f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f6:	095b      	lsrs	r3, r3, #5
 80005f8:	2001      	movs	r0, #1
 80005fa:	fa00 f202 	lsl.w	r2, r0, r2
 80005fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000e100 	.word	0xe000e100

08000614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	6039      	str	r1, [r7, #0]
 800061e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000624:	2b00      	cmp	r3, #0
 8000626:	db0a      	blt.n	800063e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	b2da      	uxtb	r2, r3
 800062c:	490c      	ldr	r1, [pc, #48]	; (8000660 <__NVIC_SetPriority+0x4c>)
 800062e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000632:	0112      	lsls	r2, r2, #4
 8000634:	b2d2      	uxtb	r2, r2
 8000636:	440b      	add	r3, r1
 8000638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800063c:	e00a      	b.n	8000654 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4908      	ldr	r1, [pc, #32]	; (8000664 <__NVIC_SetPriority+0x50>)
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	f003 030f 	and.w	r3, r3, #15
 800064a:	3b04      	subs	r3, #4
 800064c:	0112      	lsls	r2, r2, #4
 800064e:	b2d2      	uxtb	r2, r2
 8000650:	440b      	add	r3, r1
 8000652:	761a      	strb	r2, [r3, #24]
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000e100 	.word	0xe000e100
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000668:	b480      	push	{r7}
 800066a:	b089      	sub	sp, #36	; 0x24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	f1c3 0307 	rsb	r3, r3, #7
 8000682:	2b04      	cmp	r3, #4
 8000684:	bf28      	it	cs
 8000686:	2304      	movcs	r3, #4
 8000688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	3304      	adds	r3, #4
 800068e:	2b06      	cmp	r3, #6
 8000690:	d902      	bls.n	8000698 <NVIC_EncodePriority+0x30>
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	3b03      	subs	r3, #3
 8000696:	e000      	b.n	800069a <NVIC_EncodePriority+0x32>
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	f04f 32ff 	mov.w	r2, #4294967295
 80006a0:	69bb      	ldr	r3, [r7, #24]
 80006a2:	fa02 f303 	lsl.w	r3, r2, r3
 80006a6:	43da      	mvns	r2, r3
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	401a      	ands	r2, r3
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006b0:	f04f 31ff 	mov.w	r1, #4294967295
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ba:	43d9      	mvns	r1, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c0:	4313      	orrs	r3, r2
         );
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3724      	adds	r7, #36	; 0x24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff ff4c 	bl	8000574 <__NVIC_SetPriorityGrouping>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
 80006f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006f6:	f7ff ff61 	bl	80005bc <__NVIC_GetPriorityGrouping>
 80006fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	68b9      	ldr	r1, [r7, #8]
 8000700:	6978      	ldr	r0, [r7, #20]
 8000702:	f7ff ffb1 	bl	8000668 <NVIC_EncodePriority>
 8000706:	4602      	mov	r2, r0
 8000708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800070c:	4611      	mov	r1, r2
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff80 	bl	8000614 <__NVIC_SetPriority>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff54 	bl	80005d8 <__NVIC_EnableIRQ>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b02      	cmp	r3, #2
 800074a:	d004      	beq.n	8000756 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2280      	movs	r2, #128	; 0x80
 8000750:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
 8000754:	e00c      	b.n	8000770 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2205      	movs	r2, #5
 800075a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f022 0201 	bic.w	r2, r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800076e:	2300      	movs	r3, #0
}
 8000770:	4618      	mov	r0, r3
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800077c:	b480      	push	{r7}
 800077e:	b089      	sub	sp, #36	; 0x24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
 800079a:	e175      	b.n	8000a88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800079c:	2201      	movs	r2, #1
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	697a      	ldr	r2, [r7, #20]
 80007ac:	4013      	ands	r3, r2
 80007ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007b0:	693a      	ldr	r2, [r7, #16]
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	f040 8164 	bne.w	8000a82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d003      	beq.n	80007ca <HAL_GPIO_Init+0x4e>
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	2b12      	cmp	r3, #18
 80007c8:	d123      	bne.n	8000812 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	08da      	lsrs	r2, r3, #3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	3208      	adds	r2, #8
 80007d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	220f      	movs	r2, #15
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	43db      	mvns	r3, r3
 80007e8:	69ba      	ldr	r2, [r7, #24]
 80007ea:	4013      	ands	r3, r2
 80007ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	691a      	ldr	r2, [r3, #16]
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	f003 0307 	and.w	r3, r3, #7
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	fa02 f303 	lsl.w	r3, r2, r3
 80007fe:	69ba      	ldr	r2, [r7, #24]
 8000800:	4313      	orrs	r3, r2
 8000802:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	08da      	lsrs	r2, r3, #3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3208      	adds	r2, #8
 800080c:	69b9      	ldr	r1, [r7, #24]
 800080e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	2203      	movs	r2, #3
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	43db      	mvns	r3, r3
 8000824:	69ba      	ldr	r2, [r7, #24]
 8000826:	4013      	ands	r3, r2
 8000828:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f003 0203 	and.w	r2, r3, #3
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	69ba      	ldr	r2, [r7, #24]
 800083c:	4313      	orrs	r3, r2
 800083e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	69ba      	ldr	r2, [r7, #24]
 8000844:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d00b      	beq.n	8000866 <HAL_GPIO_Init+0xea>
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b02      	cmp	r3, #2
 8000854:	d007      	beq.n	8000866 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800085a:	2b11      	cmp	r3, #17
 800085c:	d003      	beq.n	8000866 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b12      	cmp	r3, #18
 8000864:	d130      	bne.n	80008c8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	2203      	movs	r2, #3
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	43db      	mvns	r3, r3
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	4013      	ands	r3, r2
 800087c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	68da      	ldr	r2, [r3, #12]
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	69ba      	ldr	r2, [r7, #24]
 800088c:	4313      	orrs	r3, r2
 800088e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800089c:	2201      	movs	r2, #1
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	43db      	mvns	r3, r3
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	4013      	ands	r3, r2
 80008aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	091b      	lsrs	r3, r3, #4
 80008b2:	f003 0201 	and.w	r2, r3, #1
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	4313      	orrs	r3, r2
 80008c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	69ba      	ldr	r2, [r7, #24]
 80008c6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	2203      	movs	r2, #3
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	43db      	mvns	r3, r3
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	4013      	ands	r3, r2
 80008de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	689a      	ldr	r2, [r3, #8]
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	69ba      	ldr	r2, [r7, #24]
 80008f6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000900:	2b00      	cmp	r3, #0
 8000902:	f000 80be 	beq.w	8000a82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b65      	ldr	r3, [pc, #404]	; (8000a9c <HAL_GPIO_Init+0x320>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	4a64      	ldr	r2, [pc, #400]	; (8000a9c <HAL_GPIO_Init+0x320>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6453      	str	r3, [r2, #68]	; 0x44
 8000912:	4b62      	ldr	r3, [pc, #392]	; (8000a9c <HAL_GPIO_Init+0x320>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800091e:	4a60      	ldr	r2, [pc, #384]	; (8000aa0 <HAL_GPIO_Init+0x324>)
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	089b      	lsrs	r3, r3, #2
 8000924:	3302      	adds	r3, #2
 8000926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800092a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	f003 0303 	and.w	r3, r3, #3
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	220f      	movs	r2, #15
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	43db      	mvns	r3, r3
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	4013      	ands	r3, r2
 8000940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a57      	ldr	r2, [pc, #348]	; (8000aa4 <HAL_GPIO_Init+0x328>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d037      	beq.n	80009ba <HAL_GPIO_Init+0x23e>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a56      	ldr	r2, [pc, #344]	; (8000aa8 <HAL_GPIO_Init+0x32c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d031      	beq.n	80009b6 <HAL_GPIO_Init+0x23a>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a55      	ldr	r2, [pc, #340]	; (8000aac <HAL_GPIO_Init+0x330>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d02b      	beq.n	80009b2 <HAL_GPIO_Init+0x236>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a54      	ldr	r2, [pc, #336]	; (8000ab0 <HAL_GPIO_Init+0x334>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d025      	beq.n	80009ae <HAL_GPIO_Init+0x232>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a53      	ldr	r2, [pc, #332]	; (8000ab4 <HAL_GPIO_Init+0x338>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d01f      	beq.n	80009aa <HAL_GPIO_Init+0x22e>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a52      	ldr	r2, [pc, #328]	; (8000ab8 <HAL_GPIO_Init+0x33c>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d019      	beq.n	80009a6 <HAL_GPIO_Init+0x22a>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a51      	ldr	r2, [pc, #324]	; (8000abc <HAL_GPIO_Init+0x340>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d013      	beq.n	80009a2 <HAL_GPIO_Init+0x226>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a50      	ldr	r2, [pc, #320]	; (8000ac0 <HAL_GPIO_Init+0x344>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d00d      	beq.n	800099e <HAL_GPIO_Init+0x222>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a4f      	ldr	r2, [pc, #316]	; (8000ac4 <HAL_GPIO_Init+0x348>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d007      	beq.n	800099a <HAL_GPIO_Init+0x21e>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a4e      	ldr	r2, [pc, #312]	; (8000ac8 <HAL_GPIO_Init+0x34c>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d101      	bne.n	8000996 <HAL_GPIO_Init+0x21a>
 8000992:	2309      	movs	r3, #9
 8000994:	e012      	b.n	80009bc <HAL_GPIO_Init+0x240>
 8000996:	230a      	movs	r3, #10
 8000998:	e010      	b.n	80009bc <HAL_GPIO_Init+0x240>
 800099a:	2308      	movs	r3, #8
 800099c:	e00e      	b.n	80009bc <HAL_GPIO_Init+0x240>
 800099e:	2307      	movs	r3, #7
 80009a0:	e00c      	b.n	80009bc <HAL_GPIO_Init+0x240>
 80009a2:	2306      	movs	r3, #6
 80009a4:	e00a      	b.n	80009bc <HAL_GPIO_Init+0x240>
 80009a6:	2305      	movs	r3, #5
 80009a8:	e008      	b.n	80009bc <HAL_GPIO_Init+0x240>
 80009aa:	2304      	movs	r3, #4
 80009ac:	e006      	b.n	80009bc <HAL_GPIO_Init+0x240>
 80009ae:	2303      	movs	r3, #3
 80009b0:	e004      	b.n	80009bc <HAL_GPIO_Init+0x240>
 80009b2:	2302      	movs	r3, #2
 80009b4:	e002      	b.n	80009bc <HAL_GPIO_Init+0x240>
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <HAL_GPIO_Init+0x240>
 80009ba:	2300      	movs	r3, #0
 80009bc:	69fa      	ldr	r2, [r7, #28]
 80009be:	f002 0203 	and.w	r2, r2, #3
 80009c2:	0092      	lsls	r2, r2, #2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	69ba      	ldr	r2, [r7, #24]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80009cc:	4934      	ldr	r1, [pc, #208]	; (8000aa0 <HAL_GPIO_Init+0x324>)
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	089b      	lsrs	r3, r3, #2
 80009d2:	3302      	adds	r3, #2
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009da:	4b3c      	ldr	r3, [pc, #240]	; (8000acc <HAL_GPIO_Init+0x350>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	43db      	mvns	r3, r3
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	4013      	ands	r3, r2
 80009e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d003      	beq.n	80009fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80009f6:	69ba      	ldr	r2, [r7, #24]
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009fe:	4a33      	ldr	r2, [pc, #204]	; (8000acc <HAL_GPIO_Init+0x350>)
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a04:	4b31      	ldr	r3, [pc, #196]	; (8000acc <HAL_GPIO_Init+0x350>)
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	4013      	ands	r3, r2
 8000a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d003      	beq.n	8000a28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a28:	4a28      	ldr	r2, [pc, #160]	; (8000acc <HAL_GPIO_Init+0x350>)
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a2e:	4b27      	ldr	r3, [pc, #156]	; (8000acc <HAL_GPIO_Init+0x350>)
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	43db      	mvns	r3, r3
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d003      	beq.n	8000a52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a52:	4a1e      	ldr	r2, [pc, #120]	; (8000acc <HAL_GPIO_Init+0x350>)
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a58:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <HAL_GPIO_Init+0x350>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	43db      	mvns	r3, r3
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	4013      	ands	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d003      	beq.n	8000a7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a7c:	4a13      	ldr	r2, [pc, #76]	; (8000acc <HAL_GPIO_Init+0x350>)
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3301      	adds	r3, #1
 8000a86:	61fb      	str	r3, [r7, #28]
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	2b0f      	cmp	r3, #15
 8000a8c:	f67f ae86 	bls.w	800079c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000a90:	bf00      	nop
 8000a92:	3724      	adds	r7, #36	; 0x24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40013800 	.word	0x40013800
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020400 	.word	0x40020400
 8000aac:	40020800 	.word	0x40020800
 8000ab0:	40020c00 	.word	0x40020c00
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40021400 	.word	0x40021400
 8000abc:	40021800 	.word	0x40021800
 8000ac0:	40021c00 	.word	0x40021c00
 8000ac4:	40022000 	.word	0x40022000
 8000ac8:	40022400 	.word	0x40022400
 8000acc:	40013c00 	.word	0x40013c00

08000ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	807b      	strh	r3, [r7, #2]
 8000adc:	4613      	mov	r3, r2
 8000ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ae0:	787b      	ldrb	r3, [r7, #1]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d003      	beq.n	8000aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ae6:	887a      	ldrh	r2, [r7, #2]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000aec:	e003      	b.n	8000af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000aee:	887b      	ldrh	r3, [r7, #2]
 8000af0:	041a      	lsls	r2, r3, #16
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	619a      	str	r2, [r3, #24]
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40007000 	.word	0x40007000

08000b24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d101      	bne.n	8000b3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e25c      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f000 8087 	beq.w	8000c56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b48:	4b96      	ldr	r3, [pc, #600]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f003 030c 	and.w	r3, r3, #12
 8000b50:	2b04      	cmp	r3, #4
 8000b52:	d00c      	beq.n	8000b6e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b54:	4b93      	ldr	r3, [pc, #588]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	f003 030c 	and.w	r3, r3, #12
 8000b5c:	2b08      	cmp	r3, #8
 8000b5e:	d112      	bne.n	8000b86 <HAL_RCC_OscConfig+0x62>
 8000b60:	4b90      	ldr	r3, [pc, #576]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b6c:	d10b      	bne.n	8000b86 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b6e:	4b8d      	ldr	r3, [pc, #564]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d06c      	beq.n	8000c54 <HAL_RCC_OscConfig+0x130>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d168      	bne.n	8000c54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e236      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b8e:	d106      	bne.n	8000b9e <HAL_RCC_OscConfig+0x7a>
 8000b90:	4b84      	ldr	r3, [pc, #528]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a83      	ldr	r2, [pc, #524]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	e02e      	b.n	8000bfc <HAL_RCC_OscConfig+0xd8>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d10c      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x9c>
 8000ba6:	4b7f      	ldr	r3, [pc, #508]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a7e      	ldr	r2, [pc, #504]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	4b7c      	ldr	r3, [pc, #496]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a7b      	ldr	r2, [pc, #492]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000bb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bbc:	6013      	str	r3, [r2, #0]
 8000bbe:	e01d      	b.n	8000bfc <HAL_RCC_OscConfig+0xd8>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bc8:	d10c      	bne.n	8000be4 <HAL_RCC_OscConfig+0xc0>
 8000bca:	4b76      	ldr	r3, [pc, #472]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a75      	ldr	r2, [pc, #468]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	4b73      	ldr	r3, [pc, #460]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a72      	ldr	r2, [pc, #456]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	e00b      	b.n	8000bfc <HAL_RCC_OscConfig+0xd8>
 8000be4:	4b6f      	ldr	r3, [pc, #444]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a6e      	ldr	r2, [pc, #440]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	4b6c      	ldr	r3, [pc, #432]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a6b      	ldr	r2, [pc, #428]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d013      	beq.n	8000c2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c04:	f7ff fcaa 	bl	800055c <HAL_GetTick>
 8000c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c0a:	e008      	b.n	8000c1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c0c:	f7ff fca6 	bl	800055c <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b64      	cmp	r3, #100	; 0x64
 8000c18:	d901      	bls.n	8000c1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e1ea      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c1e:	4b61      	ldr	r3, [pc, #388]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f0      	beq.n	8000c0c <HAL_RCC_OscConfig+0xe8>
 8000c2a:	e014      	b.n	8000c56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c2c:	f7ff fc96 	bl	800055c <HAL_GetTick>
 8000c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c32:	e008      	b.n	8000c46 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c34:	f7ff fc92 	bl	800055c <HAL_GetTick>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	2b64      	cmp	r3, #100	; 0x64
 8000c40:	d901      	bls.n	8000c46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000c42:	2303      	movs	r3, #3
 8000c44:	e1d6      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c46:	4b57      	ldr	r3, [pc, #348]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d1f0      	bne.n	8000c34 <HAL_RCC_OscConfig+0x110>
 8000c52:	e000      	b.n	8000c56 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d069      	beq.n	8000d36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c62:	4b50      	ldr	r3, [pc, #320]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	f003 030c 	and.w	r3, r3, #12
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d00b      	beq.n	8000c86 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c6e:	4b4d      	ldr	r3, [pc, #308]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	f003 030c 	and.w	r3, r3, #12
 8000c76:	2b08      	cmp	r3, #8
 8000c78:	d11c      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x190>
 8000c7a:	4b4a      	ldr	r3, [pc, #296]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d116      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c86:	4b47      	ldr	r3, [pc, #284]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d005      	beq.n	8000c9e <HAL_RCC_OscConfig+0x17a>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d001      	beq.n	8000c9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e1aa      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c9e:	4b41      	ldr	r3, [pc, #260]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	493d      	ldr	r1, [pc, #244]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cb2:	e040      	b.n	8000d36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d023      	beq.n	8000d04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cbc:	4b39      	ldr	r3, [pc, #228]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a38      	ldr	r2, [pc, #224]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cc8:	f7ff fc48 	bl	800055c <HAL_GetTick>
 8000ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cd0:	f7ff fc44 	bl	800055c <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e188      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce2:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0f0      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cee:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	4929      	ldr	r1, [pc, #164]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	600b      	str	r3, [r1, #0]
 8000d02:	e018      	b.n	8000d36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d04:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a26      	ldr	r2, [pc, #152]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000d0a:	f023 0301 	bic.w	r3, r3, #1
 8000d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d10:	f7ff fc24 	bl	800055c <HAL_GetTick>
 8000d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d16:	e008      	b.n	8000d2a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d18:	f7ff fc20 	bl	800055c <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d901      	bls.n	8000d2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e164      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1f0      	bne.n	8000d18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0308 	and.w	r3, r3, #8
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d038      	beq.n	8000db4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d019      	beq.n	8000d7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d4a:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d4e:	4a15      	ldr	r2, [pc, #84]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d56:	f7ff fc01 	bl	800055c <HAL_GetTick>
 8000d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d5c:	e008      	b.n	8000d70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d5e:	f7ff fbfd 	bl	800055c <HAL_GetTick>
 8000d62:	4602      	mov	r2, r0
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d901      	bls.n	8000d70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e141      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d0f0      	beq.n	8000d5e <HAL_RCC_OscConfig+0x23a>
 8000d7c:	e01a      	b.n	8000db4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d82:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000d84:	f023 0301 	bic.w	r3, r3, #1
 8000d88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d8a:	f7ff fbe7 	bl	800055c <HAL_GetTick>
 8000d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d90:	e00a      	b.n	8000da8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d92:	f7ff fbe3 	bl	800055c <HAL_GetTick>
 8000d96:	4602      	mov	r2, r0
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d903      	bls.n	8000da8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000da0:	2303      	movs	r3, #3
 8000da2:	e127      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
 8000da4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da8:	4b94      	ldr	r3, [pc, #592]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1ee      	bne.n	8000d92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f000 80a4 	beq.w	8000f0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dc2:	4b8e      	ldr	r3, [pc, #568]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10d      	bne.n	8000dea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	4b8b      	ldr	r3, [pc, #556]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	4a8a      	ldr	r2, [pc, #552]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dda:	4b88      	ldr	r3, [pc, #544]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000de6:	2301      	movs	r3, #1
 8000de8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dea:	4b85      	ldr	r3, [pc, #532]	; (8001000 <HAL_RCC_OscConfig+0x4dc>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d118      	bne.n	8000e28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000df6:	4b82      	ldr	r3, [pc, #520]	; (8001000 <HAL_RCC_OscConfig+0x4dc>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a81      	ldr	r2, [pc, #516]	; (8001000 <HAL_RCC_OscConfig+0x4dc>)
 8000dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e02:	f7ff fbab 	bl	800055c <HAL_GetTick>
 8000e06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e08:	e008      	b.n	8000e1c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000e0a:	f7ff fba7 	bl	800055c <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	2b64      	cmp	r3, #100	; 0x64
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e0eb      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e1c:	4b78      	ldr	r3, [pc, #480]	; (8001000 <HAL_RCC_OscConfig+0x4dc>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d0f0      	beq.n	8000e0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d106      	bne.n	8000e3e <HAL_RCC_OscConfig+0x31a>
 8000e30:	4b72      	ldr	r3, [pc, #456]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e34:	4a71      	ldr	r2, [pc, #452]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e3c:	e02d      	b.n	8000e9a <HAL_RCC_OscConfig+0x376>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d10c      	bne.n	8000e60 <HAL_RCC_OscConfig+0x33c>
 8000e46:	4b6d      	ldr	r3, [pc, #436]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e4a:	4a6c      	ldr	r2, [pc, #432]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e4c:	f023 0301 	bic.w	r3, r3, #1
 8000e50:	6713      	str	r3, [r2, #112]	; 0x70
 8000e52:	4b6a      	ldr	r3, [pc, #424]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e56:	4a69      	ldr	r2, [pc, #420]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e58:	f023 0304 	bic.w	r3, r3, #4
 8000e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e5e:	e01c      	b.n	8000e9a <HAL_RCC_OscConfig+0x376>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	2b05      	cmp	r3, #5
 8000e66:	d10c      	bne.n	8000e82 <HAL_RCC_OscConfig+0x35e>
 8000e68:	4b64      	ldr	r3, [pc, #400]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e6c:	4a63      	ldr	r2, [pc, #396]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e6e:	f043 0304 	orr.w	r3, r3, #4
 8000e72:	6713      	str	r3, [r2, #112]	; 0x70
 8000e74:	4b61      	ldr	r3, [pc, #388]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e78:	4a60      	ldr	r2, [pc, #384]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e80:	e00b      	b.n	8000e9a <HAL_RCC_OscConfig+0x376>
 8000e82:	4b5e      	ldr	r3, [pc, #376]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e86:	4a5d      	ldr	r2, [pc, #372]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e88:	f023 0301 	bic.w	r3, r3, #1
 8000e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e8e:	4b5b      	ldr	r3, [pc, #364]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e92:	4a5a      	ldr	r2, [pc, #360]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e94:	f023 0304 	bic.w	r3, r3, #4
 8000e98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d015      	beq.n	8000ece <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ea2:	f7ff fb5b 	bl	800055c <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea8:	e00a      	b.n	8000ec0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eaa:	f7ff fb57 	bl	800055c <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e099      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec0:	4b4e      	ldr	r3, [pc, #312]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d0ee      	beq.n	8000eaa <HAL_RCC_OscConfig+0x386>
 8000ecc:	e014      	b.n	8000ef8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ece:	f7ff fb45 	bl	800055c <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ed4:	e00a      	b.n	8000eec <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ed6:	f7ff fb41 	bl	800055c <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e083      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eec:	4b43      	ldr	r3, [pc, #268]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1ee      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d105      	bne.n	8000f0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000efe:	4b3f      	ldr	r3, [pc, #252]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a3e      	ldr	r2, [pc, #248]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d06f      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f12:	4b3a      	ldr	r3, [pc, #232]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 030c 	and.w	r3, r3, #12
 8000f1a:	2b08      	cmp	r3, #8
 8000f1c:	d067      	beq.n	8000fee <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d149      	bne.n	8000fba <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f26:	4b35      	ldr	r3, [pc, #212]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a34      	ldr	r2, [pc, #208]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000f2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f32:	f7ff fb13 	bl	800055c <HAL_GetTick>
 8000f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f38:	e008      	b.n	8000f4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f3a:	f7ff fb0f 	bl	800055c <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e053      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f4c:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f0      	bne.n	8000f3a <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69da      	ldr	r2, [r3, #28]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	431a      	orrs	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f66:	019b      	lsls	r3, r3, #6
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6e:	085b      	lsrs	r3, r3, #1
 8000f70:	3b01      	subs	r3, #1
 8000f72:	041b      	lsls	r3, r3, #16
 8000f74:	431a      	orrs	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7a:	061b      	lsls	r3, r3, #24
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	4a1f      	ldr	r2, [pc, #124]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000f80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f84:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a1c      	ldr	r2, [pc, #112]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000f8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f92:	f7ff fae3 	bl	800055c <HAL_GetTick>
 8000f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f98:	e008      	b.n	8000fac <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f9a:	f7ff fadf 	bl	800055c <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e023      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0f0      	beq.n	8000f9a <HAL_RCC_OscConfig+0x476>
 8000fb8:	e01b      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a0f      	ldr	r2, [pc, #60]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000fc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc6:	f7ff fac9 	bl	800055c <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fce:	f7ff fac5 	bl	800055c <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e009      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f0      	bne.n	8000fce <HAL_RCC_OscConfig+0x4aa>
 8000fec:	e001      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e000      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40007000 	.word	0x40007000

08001004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e0ce      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800101c:	4b69      	ldr	r3, [pc, #420]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	429a      	cmp	r2, r3
 8001028:	d910      	bls.n	800104c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800102a:	4b66      	ldr	r3, [pc, #408]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f023 020f 	bic.w	r2, r3, #15
 8001032:	4964      	ldr	r1, [pc, #400]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	4313      	orrs	r3, r2
 8001038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800103a:	4b62      	ldr	r3, [pc, #392]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d001      	beq.n	800104c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e0b6      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d020      	beq.n	800109a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001064:	4b58      	ldr	r3, [pc, #352]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	4a57      	ldr	r2, [pc, #348]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800106a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800106e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800107c:	4b52      	ldr	r3, [pc, #328]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	4a51      	ldr	r2, [pc, #324]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001082:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001086:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001088:	4b4f      	ldr	r3, [pc, #316]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	494c      	ldr	r1, [pc, #304]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001096:	4313      	orrs	r3, r2
 8001098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d040      	beq.n	8001128 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d107      	bne.n	80010be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ae:	4b46      	ldr	r3, [pc, #280]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d115      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e07d      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d107      	bne.n	80010d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010c6:	4b40      	ldr	r3, [pc, #256]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d109      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e071      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d6:	4b3c      	ldr	r3, [pc, #240]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e069      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e6:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f023 0203 	bic.w	r2, r3, #3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	4935      	ldr	r1, [pc, #212]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010f4:	4313      	orrs	r3, r2
 80010f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010f8:	f7ff fa30 	bl	800055c <HAL_GetTick>
 80010fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010fe:	e00a      	b.n	8001116 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001100:	f7ff fa2c 	bl	800055c <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	f241 3288 	movw	r2, #5000	; 0x1388
 800110e:	4293      	cmp	r3, r2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e051      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001116:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 020c 	and.w	r2, r3, #12
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	429a      	cmp	r2, r3
 8001126:	d1eb      	bne.n	8001100 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 030f 	and.w	r3, r3, #15
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d210      	bcs.n	8001158 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f023 020f 	bic.w	r2, r3, #15
 800113e:	4921      	ldr	r1, [pc, #132]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	4313      	orrs	r3, r2
 8001144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d001      	beq.n	8001158 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e030      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b00      	cmp	r3, #0
 8001162:	d008      	beq.n	8001176 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	4915      	ldr	r1, [pc, #84]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001172:	4313      	orrs	r3, r2
 8001174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	490d      	ldr	r1, [pc, #52]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001192:	4313      	orrs	r3, r2
 8001194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001196:	f000 f81d 	bl	80011d4 <HAL_RCC_GetSysClockFreq>
 800119a:	4601      	mov	r1, r0
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	091b      	lsrs	r3, r3, #4
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	4a09      	ldr	r2, [pc, #36]	; (80011cc <HAL_RCC_ClockConfig+0x1c8>)
 80011a8:	5cd3      	ldrb	r3, [r2, r3]
 80011aa:	fa21 f303 	lsr.w	r3, r1, r3
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <HAL_RCC_ClockConfig+0x1cc>)
 80011b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80011b2:	2000      	movs	r0, #0
 80011b4:	f002 f972 	bl	800349c <HAL_InitTick>

  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023c00 	.word	0x40023c00
 80011c8:	40023800 	.word	0x40023800
 80011cc:	08003938 	.word	0x08003938
 80011d0:	20000004 	.word	0x20000004

080011d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011ea:	4b50      	ldr	r3, [pc, #320]	; (800132c <HAL_RCC_GetSysClockFreq+0x158>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	d007      	beq.n	8001206 <HAL_RCC_GetSysClockFreq+0x32>
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d008      	beq.n	800120c <HAL_RCC_GetSysClockFreq+0x38>
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f040 808d 	bne.w	800131a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001200:	4b4b      	ldr	r3, [pc, #300]	; (8001330 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001202:	60bb      	str	r3, [r7, #8]
       break;
 8001204:	e08c      	b.n	8001320 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001206:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <HAL_RCC_GetSysClockFreq+0x160>)
 8001208:	60bb      	str	r3, [r7, #8]
      break;
 800120a:	e089      	b.n	8001320 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800120c:	4b47      	ldr	r3, [pc, #284]	; (800132c <HAL_RCC_GetSysClockFreq+0x158>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001214:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001216:	4b45      	ldr	r3, [pc, #276]	; (800132c <HAL_RCC_GetSysClockFreq+0x158>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d023      	beq.n	800126a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001222:	4b42      	ldr	r3, [pc, #264]	; (800132c <HAL_RCC_GetSysClockFreq+0x158>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	099b      	lsrs	r3, r3, #6
 8001228:	f04f 0400 	mov.w	r4, #0
 800122c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	ea03 0501 	and.w	r5, r3, r1
 8001238:	ea04 0602 	and.w	r6, r4, r2
 800123c:	4a3d      	ldr	r2, [pc, #244]	; (8001334 <HAL_RCC_GetSysClockFreq+0x160>)
 800123e:	fb02 f106 	mul.w	r1, r2, r6
 8001242:	2200      	movs	r2, #0
 8001244:	fb02 f205 	mul.w	r2, r2, r5
 8001248:	440a      	add	r2, r1
 800124a:	493a      	ldr	r1, [pc, #232]	; (8001334 <HAL_RCC_GetSysClockFreq+0x160>)
 800124c:	fba5 0101 	umull	r0, r1, r5, r1
 8001250:	1853      	adds	r3, r2, r1
 8001252:	4619      	mov	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f04f 0400 	mov.w	r4, #0
 800125a:	461a      	mov	r2, r3
 800125c:	4623      	mov	r3, r4
 800125e:	f7fe ffdb 	bl	8000218 <__aeabi_uldivmod>
 8001262:	4603      	mov	r3, r0
 8001264:	460c      	mov	r4, r1
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	e049      	b.n	80012fe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800126a:	4b30      	ldr	r3, [pc, #192]	; (800132c <HAL_RCC_GetSysClockFreq+0x158>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	099b      	lsrs	r3, r3, #6
 8001270:	f04f 0400 	mov.w	r4, #0
 8001274:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	ea03 0501 	and.w	r5, r3, r1
 8001280:	ea04 0602 	and.w	r6, r4, r2
 8001284:	4629      	mov	r1, r5
 8001286:	4632      	mov	r2, r6
 8001288:	f04f 0300 	mov.w	r3, #0
 800128c:	f04f 0400 	mov.w	r4, #0
 8001290:	0154      	lsls	r4, r2, #5
 8001292:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001296:	014b      	lsls	r3, r1, #5
 8001298:	4619      	mov	r1, r3
 800129a:	4622      	mov	r2, r4
 800129c:	1b49      	subs	r1, r1, r5
 800129e:	eb62 0206 	sbc.w	r2, r2, r6
 80012a2:	f04f 0300 	mov.w	r3, #0
 80012a6:	f04f 0400 	mov.w	r4, #0
 80012aa:	0194      	lsls	r4, r2, #6
 80012ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012b0:	018b      	lsls	r3, r1, #6
 80012b2:	1a5b      	subs	r3, r3, r1
 80012b4:	eb64 0402 	sbc.w	r4, r4, r2
 80012b8:	f04f 0100 	mov.w	r1, #0
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	00e2      	lsls	r2, r4, #3
 80012c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80012c6:	00d9      	lsls	r1, r3, #3
 80012c8:	460b      	mov	r3, r1
 80012ca:	4614      	mov	r4, r2
 80012cc:	195b      	adds	r3, r3, r5
 80012ce:	eb44 0406 	adc.w	r4, r4, r6
 80012d2:	f04f 0100 	mov.w	r1, #0
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	02a2      	lsls	r2, r4, #10
 80012dc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80012e0:	0299      	lsls	r1, r3, #10
 80012e2:	460b      	mov	r3, r1
 80012e4:	4614      	mov	r4, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	4621      	mov	r1, r4
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f04f 0400 	mov.w	r4, #0
 80012f0:	461a      	mov	r2, r3
 80012f2:	4623      	mov	r3, r4
 80012f4:	f7fe ff90 	bl	8000218 <__aeabi_uldivmod>
 80012f8:	4603      	mov	r3, r0
 80012fa:	460c      	mov	r4, r1
 80012fc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_RCC_GetSysClockFreq+0x158>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	0c1b      	lsrs	r3, r3, #16
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	3301      	adds	r3, #1
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	fbb2 f3f3 	udiv	r3, r2, r3
 8001316:	60bb      	str	r3, [r7, #8]
      break;
 8001318:	e002      	b.n	8001320 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_RCC_GetSysClockFreq+0x15c>)
 800131c:	60bb      	str	r3, [r7, #8]
      break;
 800131e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001320:	68bb      	ldr	r3, [r7, #8]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	00f42400 	.word	0x00f42400
 8001334:	017d7840 	.word	0x017d7840

08001338 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <HAL_RCC_GetHCLKFreq+0x14>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000004 	.word	0x20000004

08001350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001354:	f7ff fff0 	bl	8001338 <HAL_RCC_GetHCLKFreq>
 8001358:	4601      	mov	r1, r0
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	0a9b      	lsrs	r3, r3, #10
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	4a03      	ldr	r2, [pc, #12]	; (8001374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001366:	5cd3      	ldrb	r3, [r2, r3]
 8001368:	fa21 f303 	lsr.w	r3, r1, r3
}
 800136c:	4618      	mov	r0, r3
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40023800 	.word	0x40023800
 8001374:	08003948 	.word	0x08003948

08001378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800137c:	f7ff ffdc 	bl	8001338 <HAL_RCC_GetHCLKFreq>
 8001380:	4601      	mov	r1, r0
 8001382:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	0b5b      	lsrs	r3, r3, #13
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	4a03      	ldr	r2, [pc, #12]	; (800139c <HAL_RCC_GetPCLK2Freq+0x24>)
 800138e:	5cd3      	ldrb	r3, [r2, r3]
 8001390:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001394:	4618      	mov	r0, r3
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40023800 	.word	0x40023800
 800139c:	08003948 	.word	0x08003948

080013a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	220f      	movs	r2, #15
 80013ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_RCC_GetClockConfig+0x5c>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0203 	and.w	r2, r3, #3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <HAL_RCC_GetClockConfig+0x5c>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <HAL_RCC_GetClockConfig+0x5c>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_RCC_GetClockConfig+0x5c>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	08db      	lsrs	r3, r3, #3
 80013da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <HAL_RCC_GetClockConfig+0x60>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 020f 	and.w	r2, r3, #15
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	601a      	str	r2, [r3, #0]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40023c00 	.word	0x40023c00

08001404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b00      	cmp	r3, #0
 800142a:	d012      	beq.n	8001452 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800142c:	4b69      	ldr	r3, [pc, #420]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	4a68      	ldr	r2, [pc, #416]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001432:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001436:	6093      	str	r3, [r2, #8]
 8001438:	4b66      	ldr	r3, [pc, #408]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001440:	4964      	ldr	r1, [pc, #400]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001442:	4313      	orrs	r3, r2
 8001444:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800144e:	2301      	movs	r3, #1
 8001450:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d017      	beq.n	800148e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800145e:	4b5d      	ldr	r3, [pc, #372]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001464:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800146c:	4959      	ldr	r1, [pc, #356]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800146e:	4313      	orrs	r3, r2
 8001470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001478:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800147c:	d101      	bne.n	8001482 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800147e:	2301      	movs	r3, #1
 8001480:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800148a:	2301      	movs	r3, #1
 800148c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d017      	beq.n	80014ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800149a:	4b4e      	ldr	r3, [pc, #312]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800149c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	494a      	ldr	r1, [pc, #296]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014b8:	d101      	bne.n	80014be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80014ba:	2301      	movs	r3, #1
 80014bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80014c6:	2301      	movs	r3, #1
 80014c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80014d6:	2301      	movs	r3, #1
 80014d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0320 	and.w	r3, r3, #32
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 808b 	beq.w	80015fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80014e8:	4b3a      	ldr	r3, [pc, #232]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	4a39      	ldr	r2, [pc, #228]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f2:	6413      	str	r3, [r2, #64]	; 0x40
 80014f4:	4b37      	ldr	r3, [pc, #220]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001500:	4b35      	ldr	r3, [pc, #212]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a34      	ldr	r2, [pc, #208]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800150c:	f7ff f826 	bl	800055c <HAL_GetTick>
 8001510:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001514:	f7ff f822 	bl	800055c <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b64      	cmp	r3, #100	; 0x64
 8001520:	d901      	bls.n	8001526 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e355      	b.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001526:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f0      	beq.n	8001514 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001532:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800153a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d035      	beq.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	429a      	cmp	r2, r3
 800154e:	d02e      	beq.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001558:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800155a:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800155c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155e:	4a1d      	ldr	r2, [pc, #116]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001564:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156a:	4a1a      	ldr	r2, [pc, #104]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800156c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001570:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001572:	4a18      	ldr	r2, [pc, #96]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800157a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	2b01      	cmp	r3, #1
 8001582:	d114      	bne.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7fe ffea 	bl	800055c <HAL_GetTick>
 8001588:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158a:	e00a      	b.n	80015a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800158c:	f7fe ffe6 	bl	800055c <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	f241 3288 	movw	r2, #5000	; 0x1388
 800159a:	4293      	cmp	r3, r2
 800159c:	d901      	bls.n	80015a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e317      	b.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0ee      	beq.n	800158c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80015ba:	d111      	bne.n	80015e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80015ca:	400b      	ands	r3, r1
 80015cc:	4901      	ldr	r1, [pc, #4]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	608b      	str	r3, [r1, #8]
 80015d2:	e00b      	b.n	80015ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40007000 	.word	0x40007000
 80015dc:	0ffffcff 	.word	0x0ffffcff
 80015e0:	4bb0      	ldr	r3, [pc, #704]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	4aaf      	ldr	r2, [pc, #700]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80015ea:	6093      	str	r3, [r2, #8]
 80015ec:	4bad      	ldr	r3, [pc, #692]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f8:	49aa      	ldr	r1, [pc, #680]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	2b00      	cmp	r3, #0
 8001608:	d010      	beq.n	800162c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800160a:	4ba6      	ldr	r3, [pc, #664]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800160c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001610:	4aa4      	ldr	r2, [pc, #656]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001616:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800161a:	4ba2      	ldr	r3, [pc, #648]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800161c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001624:	499f      	ldr	r1, [pc, #636]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001626:	4313      	orrs	r3, r2
 8001628:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00a      	beq.n	800164e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001638:	4b9a      	ldr	r3, [pc, #616]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800163a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001646:	4997      	ldr	r1, [pc, #604]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001648:	4313      	orrs	r3, r2
 800164a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00a      	beq.n	8001670 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800165a:	4b92      	ldr	r3, [pc, #584]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800165c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001660:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001668:	498e      	ldr	r1, [pc, #568]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800166a:	4313      	orrs	r3, r2
 800166c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00a      	beq.n	8001692 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800167c:	4b89      	ldr	r3, [pc, #548]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800167e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001682:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800168a:	4986      	ldr	r1, [pc, #536]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800168c:	4313      	orrs	r3, r2
 800168e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00a      	beq.n	80016b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800169e:	4b81      	ldr	r3, [pc, #516]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ac:	497d      	ldr	r1, [pc, #500]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00a      	beq.n	80016d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80016c0:	4b78      	ldr	r3, [pc, #480]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c6:	f023 0203 	bic.w	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	4975      	ldr	r1, [pc, #468]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00a      	beq.n	80016f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80016e2:	4b70      	ldr	r3, [pc, #448]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e8:	f023 020c 	bic.w	r2, r3, #12
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f0:	496c      	ldr	r1, [pc, #432]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00a      	beq.n	800171a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001704:	4b67      	ldr	r3, [pc, #412]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	4964      	ldr	r1, [pc, #400]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001714:	4313      	orrs	r3, r2
 8001716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00a      	beq.n	800173c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001726:	4b5f      	ldr	r3, [pc, #380]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001734:	495b      	ldr	r1, [pc, #364]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001736:	4313      	orrs	r3, r2
 8001738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00a      	beq.n	800175e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001748:	4b56      	ldr	r3, [pc, #344]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800174a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001756:	4953      	ldr	r1, [pc, #332]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001758:	4313      	orrs	r3, r2
 800175a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00a      	beq.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800176a:	4b4e      	ldr	r3, [pc, #312]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800176c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001770:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001778:	494a      	ldr	r1, [pc, #296]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800177a:	4313      	orrs	r3, r2
 800177c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00a      	beq.n	80017a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800178c:	4b45      	ldr	r3, [pc, #276]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800178e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001792:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179a:	4942      	ldr	r1, [pc, #264]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800179c:	4313      	orrs	r3, r2
 800179e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00a      	beq.n	80017c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80017ae:	4b3d      	ldr	r3, [pc, #244]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017bc:	4939      	ldr	r1, [pc, #228]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00a      	beq.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80017d0:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80017de:	4931      	ldr	r1, [pc, #196]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d011      	beq.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80017f2:	4b2c      	ldr	r3, [pc, #176]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001800:	4928      	ldr	r1, [pc, #160]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001802:	4313      	orrs	r3, r2
 8001804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800180c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001810:	d101      	bne.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001812:	2301      	movs	r3, #1
 8001814:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001822:	2301      	movs	r3, #1
 8001824:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00a      	beq.n	8001848 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001832:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001838:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001840:	4918      	ldr	r1, [pc, #96]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001842:	4313      	orrs	r3, r2
 8001844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00b      	beq.n	800186c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001864:	490f      	ldr	r1, [pc, #60]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001866:	4313      	orrs	r3, r2
 8001868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d005      	beq.n	800187e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800187a:	f040 80d8 	bne.w	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001884:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001888:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800188a:	f7fe fe67 	bl	800055c <HAL_GetTick>
 800188e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001890:	e00a      	b.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001892:	f7fe fe63 	bl	800055c <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b64      	cmp	r3, #100	; 0x64
 800189e:	d903      	bls.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e196      	b.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80018a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80018a8:	4b6c      	ldr	r3, [pc, #432]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1ee      	bne.n	8001892 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d021      	beq.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d11d      	bne.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80018c8:	4b64      	ldr	r3, [pc, #400]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80018ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018ce:	0c1b      	lsrs	r3, r3, #16
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80018d6:	4b61      	ldr	r3, [pc, #388]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80018d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018dc:	0e1b      	lsrs	r3, r3, #24
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	019a      	lsls	r2, r3, #6
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	041b      	lsls	r3, r3, #16
 80018ee:	431a      	orrs	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	061b      	lsls	r3, r3, #24
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	071b      	lsls	r3, r3, #28
 80018fc:	4957      	ldr	r1, [pc, #348]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d004      	beq.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001914:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001918:	d00a      	beq.n	8001930 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001922:	2b00      	cmp	r3, #0
 8001924:	d02e      	beq.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800192e:	d129      	bne.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001930:	4b4a      	ldr	r3, [pc, #296]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001936:	0c1b      	lsrs	r3, r3, #16
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800193e:	4b47      	ldr	r3, [pc, #284]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001944:	0f1b      	lsrs	r3, r3, #28
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	019a      	lsls	r2, r3, #6
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	061b      	lsls	r3, r3, #24
 800195e:	431a      	orrs	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	071b      	lsls	r3, r3, #28
 8001964:	493d      	ldr	r1, [pc, #244]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001966:	4313      	orrs	r3, r2
 8001968:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800196c:	4b3b      	ldr	r3, [pc, #236]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800196e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001972:	f023 021f 	bic.w	r2, r3, #31
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	3b01      	subs	r3, #1
 800197c:	4937      	ldr	r1, [pc, #220]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800197e:	4313      	orrs	r3, r2
 8001980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d01d      	beq.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001990:	4b32      	ldr	r3, [pc, #200]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001996:	0e1b      	lsrs	r3, r3, #24
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800199e:	4b2f      	ldr	r3, [pc, #188]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019a4:	0f1b      	lsrs	r3, r3, #28
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	019a      	lsls	r2, r3, #6
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	041b      	lsls	r3, r3, #16
 80019b8:	431a      	orrs	r2, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	061b      	lsls	r3, r3, #24
 80019be:	431a      	orrs	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	071b      	lsls	r3, r3, #28
 80019c4:	4925      	ldr	r1, [pc, #148]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d011      	beq.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	019a      	lsls	r2, r3, #6
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	041b      	lsls	r3, r3, #16
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	061b      	lsls	r3, r3, #24
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	071b      	lsls	r3, r3, #28
 80019f4:	4919      	ldr	r1, [pc, #100]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80019fc:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a16      	ldr	r2, [pc, #88]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a08:	f7fe fda8 	bl	800055c <HAL_GetTick>
 8001a0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001a10:	f7fe fda4 	bl	800055c <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b64      	cmp	r3, #100	; 0x64
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e0d7      	b.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	f040 80cd 	bne.w	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a08      	ldr	r2, [pc, #32]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a42:	f7fe fd8b 	bl	800055c <HAL_GetTick>
 8001a46:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001a4a:	f7fe fd87 	bl	800055c <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b64      	cmp	r3, #100	; 0x64
 8001a56:	d903      	bls.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e0ba      	b.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001a5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001a60:	4b5e      	ldr	r3, [pc, #376]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a6c:	d0ed      	beq.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d02e      	beq.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d12a      	bne.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001a96:	4b51      	ldr	r3, [pc, #324]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9c:	0c1b      	lsrs	r3, r3, #16
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001aa4:	4b4d      	ldr	r3, [pc, #308]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aaa:	0f1b      	lsrs	r3, r3, #28
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	019a      	lsls	r2, r3, #6
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	041b      	lsls	r3, r3, #16
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	061b      	lsls	r3, r3, #24
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	071b      	lsls	r3, r3, #28
 8001aca:	4944      	ldr	r1, [pc, #272]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001ad2:	4b42      	ldr	r3, [pc, #264]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ad8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	021b      	lsls	r3, r3, #8
 8001ae4:	493d      	ldr	r1, [pc, #244]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d022      	beq.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b00:	d11d      	bne.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001b02:	4b36      	ldr	r3, [pc, #216]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b08:	0e1b      	lsrs	r3, r3, #24
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001b10:	4b32      	ldr	r3, [pc, #200]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b16:	0f1b      	lsrs	r3, r3, #28
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	019a      	lsls	r2, r3, #6
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	041b      	lsls	r3, r3, #16
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	061b      	lsls	r3, r3, #24
 8001b30:	431a      	orrs	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	071b      	lsls	r3, r3, #28
 8001b36:	4929      	ldr	r1, [pc, #164]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d028      	beq.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001b4a:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b50:	0e1b      	lsrs	r3, r3, #24
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001b58:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5e:	0c1b      	lsrs	r3, r3, #16
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	019a      	lsls	r2, r3, #6
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	041b      	lsls	r3, r3, #16
 8001b70:	431a      	orrs	r2, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	061b      	lsls	r3, r3, #24
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	071b      	lsls	r3, r3, #28
 8001b7e:	4917      	ldr	r1, [pc, #92]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	4911      	ldr	r1, [pc, #68]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ba8:	f7fe fcd8 	bl	800055c <HAL_GetTick>
 8001bac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001bb0:	f7fe fcd4 	bl	800055c <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	; 0x64
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e007      	b.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bce:	d1ef      	bne.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3720      	adds	r7, #32
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800

08001be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e01d      	b.n	8001c2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d106      	bne.n	8001c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f001 fd74 	bl	80036f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4610      	mov	r0, r2
 8001c20:	f000 fa36 	bl	8002090 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <HAL_TIM_Base_Start_IT+0x50>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b06      	cmp	r3, #6
 8001c60:	d00b      	beq.n	8001c7a <HAL_TIM_Base_Start_IT+0x42>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c68:	d007      	beq.n	8001c7a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 0201 	orr.w	r2, r2, #1
 8001c78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	00010007 	.word	0x00010007

08001c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d122      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d11b      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f06f 0202 	mvn.w	r2, #2
 8001cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f9c0 	bl	8002054 <HAL_TIM_IC_CaptureCallback>
 8001cd4:	e005      	b.n	8001ce2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f9b2 	bl	8002040 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f9c3 	bl	8002068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d122      	bne.n	8001d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d11b      	bne.n	8001d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0204 	mvn.w	r2, #4
 8001d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2202      	movs	r2, #2
 8001d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f996 	bl	8002054 <HAL_TIM_IC_CaptureCallback>
 8001d28:	e005      	b.n	8001d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f988 	bl	8002040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f999 	bl	8002068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d122      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d11b      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0208 	mvn.w	r2, #8
 8001d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2204      	movs	r2, #4
 8001d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f96c 	bl	8002054 <HAL_TIM_IC_CaptureCallback>
 8001d7c:	e005      	b.n	8001d8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f95e 	bl	8002040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f96f 	bl	8002068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b10      	cmp	r3, #16
 8001d9c:	d122      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f003 0310 	and.w	r3, r3, #16
 8001da8:	2b10      	cmp	r3, #16
 8001daa:	d11b      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0210 	mvn.w	r2, #16
 8001db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2208      	movs	r2, #8
 8001dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f942 	bl	8002054 <HAL_TIM_IC_CaptureCallback>
 8001dd0:	e005      	b.n	8001dde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f934 	bl	8002040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f945 	bl	8002068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d10e      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d107      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0201 	mvn.w	r2, #1
 8001e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f001 fafc 	bl	8003408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1a:	2b80      	cmp	r3, #128	; 0x80
 8001e1c:	d10e      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e28:	2b80      	cmp	r3, #128	; 0x80
 8001e2a:	d107      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 faca 	bl	80023d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e4a:	d10e      	bne.n	8001e6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e56:	2b80      	cmp	r3, #128	; 0x80
 8001e58:	d107      	bne.n	8001e6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 fabd 	bl	80023e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e74:	2b40      	cmp	r3, #64	; 0x40
 8001e76:	d10e      	bne.n	8001e96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e82:	2b40      	cmp	r3, #64	; 0x40
 8001e84:	d107      	bne.n	8001e96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f8f3 	bl	800207c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	2b20      	cmp	r3, #32
 8001ea2:	d10e      	bne.n	8001ec2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	d107      	bne.n	8001ec2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f06f 0220 	mvn.w	r2, #32
 8001eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 fa7d 	bl	80023bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_TIM_ConfigClockSource+0x18>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e0a6      	b.n	8002032 <HAL_TIM_ConfigClockSource+0x166>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4b4f      	ldr	r3, [pc, #316]	; (800203c <HAL_TIM_ConfigClockSource+0x170>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b40      	cmp	r3, #64	; 0x40
 8001f1a:	d067      	beq.n	8001fec <HAL_TIM_ConfigClockSource+0x120>
 8001f1c:	2b40      	cmp	r3, #64	; 0x40
 8001f1e:	d80b      	bhi.n	8001f38 <HAL_TIM_ConfigClockSource+0x6c>
 8001f20:	2b10      	cmp	r3, #16
 8001f22:	d073      	beq.n	800200c <HAL_TIM_ConfigClockSource+0x140>
 8001f24:	2b10      	cmp	r3, #16
 8001f26:	d802      	bhi.n	8001f2e <HAL_TIM_ConfigClockSource+0x62>
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d06f      	beq.n	800200c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001f2c:	e078      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	d06c      	beq.n	800200c <HAL_TIM_ConfigClockSource+0x140>
 8001f32:	2b30      	cmp	r3, #48	; 0x30
 8001f34:	d06a      	beq.n	800200c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001f36:	e073      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f38:	2b70      	cmp	r3, #112	; 0x70
 8001f3a:	d00d      	beq.n	8001f58 <HAL_TIM_ConfigClockSource+0x8c>
 8001f3c:	2b70      	cmp	r3, #112	; 0x70
 8001f3e:	d804      	bhi.n	8001f4a <HAL_TIM_ConfigClockSource+0x7e>
 8001f40:	2b50      	cmp	r3, #80	; 0x50
 8001f42:	d033      	beq.n	8001fac <HAL_TIM_ConfigClockSource+0xe0>
 8001f44:	2b60      	cmp	r3, #96	; 0x60
 8001f46:	d041      	beq.n	8001fcc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001f48:	e06a      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f4e:	d066      	beq.n	800201e <HAL_TIM_ConfigClockSource+0x152>
 8001f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f54:	d017      	beq.n	8001f86 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001f56:	e063      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	6899      	ldr	r1, [r3, #8]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f000 f9ac 	bl	80022c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f7a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	609a      	str	r2, [r3, #8]
      break;
 8001f84:	e04c      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6899      	ldr	r1, [r3, #8]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f000 f995 	bl	80022c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fa8:	609a      	str	r2, [r3, #8]
      break;
 8001faa:	e039      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	6859      	ldr	r1, [r3, #4]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	f000 f909 	bl	80021d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2150      	movs	r1, #80	; 0x50
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 f962 	bl	800228e <TIM_ITRx_SetConfig>
      break;
 8001fca:	e029      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	6859      	ldr	r1, [r3, #4]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	f000 f928 	bl	800222e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2160      	movs	r1, #96	; 0x60
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 f952 	bl	800228e <TIM_ITRx_SetConfig>
      break;
 8001fea:	e019      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	f000 f8e9 	bl	80021d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2140      	movs	r1, #64	; 0x40
 8002004:	4618      	mov	r0, r3
 8002006:	f000 f942 	bl	800228e <TIM_ITRx_SetConfig>
      break;
 800200a:	e009      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4619      	mov	r1, r3
 8002016:	4610      	mov	r0, r2
 8002018:	f000 f939 	bl	800228e <TIM_ITRx_SetConfig>
      break;
 800201c:	e000      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800201e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	fffeff88 	.word	0xfffeff88

08002040 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a40      	ldr	r2, [pc, #256]	; (80021a4 <TIM_Base_SetConfig+0x114>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d013      	beq.n	80020d0 <TIM_Base_SetConfig+0x40>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ae:	d00f      	beq.n	80020d0 <TIM_Base_SetConfig+0x40>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a3d      	ldr	r2, [pc, #244]	; (80021a8 <TIM_Base_SetConfig+0x118>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d00b      	beq.n	80020d0 <TIM_Base_SetConfig+0x40>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a3c      	ldr	r2, [pc, #240]	; (80021ac <TIM_Base_SetConfig+0x11c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d007      	beq.n	80020d0 <TIM_Base_SetConfig+0x40>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a3b      	ldr	r2, [pc, #236]	; (80021b0 <TIM_Base_SetConfig+0x120>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d003      	beq.n	80020d0 <TIM_Base_SetConfig+0x40>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a3a      	ldr	r2, [pc, #232]	; (80021b4 <TIM_Base_SetConfig+0x124>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d108      	bne.n	80020e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a2f      	ldr	r2, [pc, #188]	; (80021a4 <TIM_Base_SetConfig+0x114>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d02b      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f0:	d027      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a2c      	ldr	r2, [pc, #176]	; (80021a8 <TIM_Base_SetConfig+0x118>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d023      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a2b      	ldr	r2, [pc, #172]	; (80021ac <TIM_Base_SetConfig+0x11c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d01f      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a2a      	ldr	r2, [pc, #168]	; (80021b0 <TIM_Base_SetConfig+0x120>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d01b      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a29      	ldr	r2, [pc, #164]	; (80021b4 <TIM_Base_SetConfig+0x124>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d017      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a28      	ldr	r2, [pc, #160]	; (80021b8 <TIM_Base_SetConfig+0x128>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a27      	ldr	r2, [pc, #156]	; (80021bc <TIM_Base_SetConfig+0x12c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00f      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a26      	ldr	r2, [pc, #152]	; (80021c0 <TIM_Base_SetConfig+0x130>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00b      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a25      	ldr	r2, [pc, #148]	; (80021c4 <TIM_Base_SetConfig+0x134>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d007      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a24      	ldr	r2, [pc, #144]	; (80021c8 <TIM_Base_SetConfig+0x138>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d003      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a23      	ldr	r2, [pc, #140]	; (80021cc <TIM_Base_SetConfig+0x13c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d108      	bne.n	8002154 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4313      	orrs	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	4313      	orrs	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <TIM_Base_SetConfig+0x114>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d003      	beq.n	8002188 <TIM_Base_SetConfig+0xf8>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a0c      	ldr	r2, [pc, #48]	; (80021b4 <TIM_Base_SetConfig+0x124>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d103      	bne.n	8002190 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	615a      	str	r2, [r3, #20]
}
 8002196:	bf00      	nop
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40010000 	.word	0x40010000
 80021a8:	40000400 	.word	0x40000400
 80021ac:	40000800 	.word	0x40000800
 80021b0:	40000c00 	.word	0x40000c00
 80021b4:	40010400 	.word	0x40010400
 80021b8:	40014000 	.word	0x40014000
 80021bc:	40014400 	.word	0x40014400
 80021c0:	40014800 	.word	0x40014800
 80021c4:	40001800 	.word	0x40001800
 80021c8:	40001c00 	.word	0x40001c00
 80021cc:	40002000 	.word	0x40002000

080021d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	f023 0201 	bic.w	r2, r3, #1
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f023 030a 	bic.w	r3, r3, #10
 800220c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	4313      	orrs	r3, r2
 8002214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	621a      	str	r2, [r3, #32]
}
 8002222:	bf00      	nop
 8002224:	371c      	adds	r7, #28
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800222e:	b480      	push	{r7}
 8002230:	b087      	sub	sp, #28
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	f023 0210 	bic.w	r2, r3, #16
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002258:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	031b      	lsls	r3, r3, #12
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	4313      	orrs	r3, r2
 8002262:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800226a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	621a      	str	r2, [r3, #32]
}
 8002282:	bf00      	nop
 8002284:	371c      	adds	r7, #28
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800228e:	b480      	push	{r7}
 8002290:	b085      	sub	sp, #20
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f043 0307 	orr.w	r3, r3, #7
 80022b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	609a      	str	r2, [r3, #8]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	021a      	lsls	r2, r3, #8
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	609a      	str	r2, [r3, #8]
}
 80022f8:	bf00      	nop
 80022fa:	371c      	adds	r7, #28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002318:	2302      	movs	r3, #2
 800231a:	e045      	b.n	80023a8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1c      	ldr	r2, [pc, #112]	; (80023b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d004      	beq.n	8002350 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1b      	ldr	r2, [pc, #108]	; (80023b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d108      	bne.n	8002362 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002356:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4313      	orrs	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002368:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4313      	orrs	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800237a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	4313      	orrs	r3, r2
 8002384:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	40010000 	.word	0x40010000
 80023b8:	40010400 	.word	0x40010400

080023bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e040      	b.n	800248c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240e:	2b00      	cmp	r3, #0
 8002410:	d106      	bne.n	8002420 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f001 f9c0 	bl	80037a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2224      	movs	r2, #36	; 0x24
 8002424:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0201 	bic.w	r2, r2, #1
 8002434:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 faba 	bl	80029b0 <UART_SetConfig>
 800243c:	4603      	mov	r3, r0
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e022      	b.n	800248c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fd52 	bl	8002ef8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002462:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002472:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0201 	orr.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 fdd9 	bl	800303c <UART_CheckIdleState>
 800248a:	4603      	mov	r3, r0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08a      	sub	sp, #40	; 0x28
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	4613      	mov	r3, r2
 80024a2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d17f      	bne.n	80025ac <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <HAL_UART_Transmit+0x24>
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e078      	b.n	80025ae <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_UART_Transmit+0x36>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e071      	b.n	80025ae <HAL_UART_Transmit+0x11a>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2221      	movs	r2, #33	; 0x21
 80024dc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80024de:	f7fe f83d 	bl	800055c <HAL_GetTick>
 80024e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	88fa      	ldrh	r2, [r7, #6]
 80024e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	88fa      	ldrh	r2, [r7, #6]
 80024f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024fc:	d108      	bne.n	8002510 <HAL_UART_Transmit+0x7c>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d104      	bne.n	8002510 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	e003      	b.n	8002518 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002514:	2300      	movs	r3, #0
 8002516:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002518:	e02c      	b.n	8002574 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2200      	movs	r2, #0
 8002522:	2180      	movs	r1, #128	; 0x80
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 fdb8 	bl	800309a <UART_WaitOnFlagUntilTimeout>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e03c      	b.n	80025ae <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10b      	bne.n	8002552 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002548:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	3302      	adds	r3, #2
 800254e:	61bb      	str	r3, [r7, #24]
 8002550:	e007      	b.n	8002562 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	781a      	ldrb	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	3301      	adds	r3, #1
 8002560:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002568:	b29b      	uxth	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800257a:	b29b      	uxth	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1cc      	bne.n	800251a <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2200      	movs	r2, #0
 8002588:	2140      	movs	r1, #64	; 0x40
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 fd85 	bl	800309a <UART_WaitOnFlagUntilTimeout>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e009      	b.n	80025ae <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2220      	movs	r2, #32
 800259e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e000      	b.n	80025ae <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80025ac:	2302      	movs	r3, #2
  }
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3720      	adds	r7, #32
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b08a      	sub	sp, #40	; 0x28
 80025ba:	af02      	add	r7, sp, #8
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	4613      	mov	r3, r2
 80025c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025ca:	2b20      	cmp	r3, #32
 80025cc:	f040 80ba 	bne.w	8002744 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_UART_Receive+0x26>
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0b2      	b.n	8002746 <HAL_UART_Receive+0x190>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_UART_Receive+0x38>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e0ab      	b.n	8002746 <HAL_UART_Receive+0x190>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2222      	movs	r2, #34	; 0x22
 8002600:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002602:	f7fd ffab 	bl	800055c <HAL_GetTick>
 8002606:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	88fa      	ldrh	r2, [r7, #6]
 800260c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	88fa      	ldrh	r2, [r7, #6]
 8002614:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002620:	d10e      	bne.n	8002640 <HAL_UART_Receive+0x8a>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d105      	bne.n	8002636 <HAL_UART_Receive+0x80>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002630:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002634:	e02d      	b.n	8002692 <HAL_UART_Receive+0xdc>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	22ff      	movs	r2, #255	; 0xff
 800263a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800263e:	e028      	b.n	8002692 <HAL_UART_Receive+0xdc>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10d      	bne.n	8002664 <HAL_UART_Receive+0xae>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d104      	bne.n	800265a <HAL_UART_Receive+0xa4>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	22ff      	movs	r2, #255	; 0xff
 8002654:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002658:	e01b      	b.n	8002692 <HAL_UART_Receive+0xdc>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	227f      	movs	r2, #127	; 0x7f
 800265e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002662:	e016      	b.n	8002692 <HAL_UART_Receive+0xdc>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800266c:	d10d      	bne.n	800268a <HAL_UART_Receive+0xd4>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d104      	bne.n	8002680 <HAL_UART_Receive+0xca>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	227f      	movs	r2, #127	; 0x7f
 800267a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800267e:	e008      	b.n	8002692 <HAL_UART_Receive+0xdc>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	223f      	movs	r2, #63	; 0x3f
 8002684:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002688:	e003      	b.n	8002692 <HAL_UART_Receive+0xdc>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002698:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a2:	d108      	bne.n	80026b6 <HAL_UART_Receive+0x100>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d104      	bne.n	80026b6 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	61bb      	str	r3, [r7, #24]
 80026b4:	e003      	b.n	80026be <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80026be:	e032      	b.n	8002726 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	2200      	movs	r2, #0
 80026c8:	2120      	movs	r1, #32
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 fce5 	bl	800309a <UART_WaitOnFlagUntilTimeout>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e035      	b.n	8002746 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10c      	bne.n	80026fa <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	8a7b      	ldrh	r3, [r7, #18]
 80026ea:	4013      	ands	r3, r2
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	3302      	adds	r3, #2
 80026f6:	61bb      	str	r3, [r7, #24]
 80026f8:	e00c      	b.n	8002714 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	b2da      	uxtb	r2, r3
 8002702:	8a7b      	ldrh	r3, [r7, #18]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	4013      	ands	r3, r2
 8002708:	b2da      	uxtb	r2, r3
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3301      	adds	r3, #1
 8002712:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800271a:	b29b      	uxth	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800272c:	b29b      	uxth	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1c6      	bne.n	80026c0 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2220      	movs	r2, #32
 8002736:	679a      	str	r2, [r3, #120]	; 0x78

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	e000      	b.n	8002746 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8002744:	2302      	movs	r3, #2
  }
}
 8002746:	4618      	mov	r0, r3
 8002748:	3720      	adds	r7, #32
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d113      	bne.n	80027a6 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f003 0320 	and.w	r3, r3, #32
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00e      	beq.n	80027a6 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	f003 0320 	and.w	r3, r3, #32
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 80eb 	beq.w	8002972 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	4798      	blx	r3
      }
      return;
 80027a4:	e0e5      	b.n	8002972 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80c0 	beq.w	800292e <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d105      	bne.n	80027c4 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 80b5 	beq.w	800292e <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00e      	beq.n	80027ec <HAL_UART_IRQHandler+0x9c>
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d009      	beq.n	80027ec <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2201      	movs	r2, #1
 80027de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027e4:	f043 0201 	orr.w	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00e      	beq.n	8002814 <HAL_UART_IRQHandler+0xc4>
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d009      	beq.n	8002814 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2202      	movs	r2, #2
 8002806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800280c:	f043 0204 	orr.w	r2, r3, #4
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00e      	beq.n	800283c <HAL_UART_IRQHandler+0xec>
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d009      	beq.n	800283c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2204      	movs	r2, #4
 800282e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002834:	f043 0202 	orr.w	r2, r3, #2
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d013      	beq.n	800286e <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	2b00      	cmp	r3, #0
 800284e:	d104      	bne.n	800285a <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002856:	2b00      	cmp	r3, #0
 8002858:	d009      	beq.n	800286e <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2208      	movs	r2, #8
 8002860:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002866:	f043 0208 	orr.w	r2, r3, #8
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002872:	2b00      	cmp	r3, #0
 8002874:	d07f      	beq.n	8002976 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00c      	beq.n	800289a <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	2b00      	cmp	r3, #0
 8002888:	d007      	beq.n	800289a <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800289e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028aa:	2b40      	cmp	r3, #64	; 0x40
 80028ac:	d004      	beq.n	80028b8 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d031      	beq.n	800291c <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 fc36 	bl	800312a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c8:	2b40      	cmp	r3, #64	; 0x40
 80028ca:	d123      	bne.n	8002914 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028da:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028e8:	4a26      	ldr	r2, [pc, #152]	; (8002984 <HAL_UART_IRQHandler+0x234>)
 80028ea:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fd ff21 	bl	8000738 <HAL_DMA_Abort_IT>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d016      	beq.n	800292a <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002906:	4610      	mov	r0, r2
 8002908:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800290a:	e00e      	b.n	800292a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f845 	bl	800299c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002912:	e00a      	b.n	800292a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f841 	bl	800299c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800291a:	e006      	b.n	800292a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f83d 	bl	800299c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002928:	e025      	b.n	8002976 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800292a:	bf00      	nop
    return;
 800292c:	e023      	b.n	8002976 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00d      	beq.n	8002954 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293e:	2b00      	cmp	r3, #0
 8002940:	d008      	beq.n	8002954 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002946:	2b00      	cmp	r3, #0
 8002948:	d017      	beq.n	800297a <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	4798      	blx	r3
    }
    return;
 8002952:	e012      	b.n	800297a <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00e      	beq.n	800297c <HAL_UART_IRQHandler+0x22c>
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002964:	2b00      	cmp	r3, #0
 8002966:	d009      	beq.n	800297c <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 fc14 	bl	8003196 <UART_EndTransmit_IT>
    return;
 800296e:	bf00      	nop
 8002970:	e004      	b.n	800297c <HAL_UART_IRQHandler+0x22c>
      return;
 8002972:	bf00      	nop
 8002974:	e002      	b.n	800297c <HAL_UART_IRQHandler+0x22c>
    return;
 8002976:	bf00      	nop
 8002978:	e000      	b.n	800297c <HAL_UART_IRQHandler+0x22c>
    return;
 800297a:	bf00      	nop
  }

}
 800297c:	3720      	adds	r7, #32
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	0800316b 	.word	0x0800316b

08002988 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	4bb1      	ldr	r3, [pc, #708]	; (8002ca4 <UART_SetConfig+0x2f4>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	6939      	ldr	r1, [r7, #16]
 80029e8:	430b      	orrs	r3, r1
 80029ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a9f      	ldr	r2, [pc, #636]	; (8002ca8 <UART_SetConfig+0x2f8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d121      	bne.n	8002a74 <UART_SetConfig+0xc4>
 8002a30:	4b9e      	ldr	r3, [pc, #632]	; (8002cac <UART_SetConfig+0x2fc>)
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d816      	bhi.n	8002a6c <UART_SetConfig+0xbc>
 8002a3e:	a201      	add	r2, pc, #4	; (adr r2, 8002a44 <UART_SetConfig+0x94>)
 8002a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a44:	08002a55 	.word	0x08002a55
 8002a48:	08002a61 	.word	0x08002a61
 8002a4c:	08002a5b 	.word	0x08002a5b
 8002a50:	08002a67 	.word	0x08002a67
 8002a54:	2301      	movs	r3, #1
 8002a56:	77fb      	strb	r3, [r7, #31]
 8002a58:	e151      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	77fb      	strb	r3, [r7, #31]
 8002a5e:	e14e      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002a60:	2304      	movs	r3, #4
 8002a62:	77fb      	strb	r3, [r7, #31]
 8002a64:	e14b      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002a66:	2308      	movs	r3, #8
 8002a68:	77fb      	strb	r3, [r7, #31]
 8002a6a:	e148      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002a6c:	2310      	movs	r3, #16
 8002a6e:	77fb      	strb	r3, [r7, #31]
 8002a70:	bf00      	nop
 8002a72:	e144      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a8d      	ldr	r2, [pc, #564]	; (8002cb0 <UART_SetConfig+0x300>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d134      	bne.n	8002ae8 <UART_SetConfig+0x138>
 8002a7e:	4b8b      	ldr	r3, [pc, #556]	; (8002cac <UART_SetConfig+0x2fc>)
 8002a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a84:	f003 030c 	and.w	r3, r3, #12
 8002a88:	2b0c      	cmp	r3, #12
 8002a8a:	d829      	bhi.n	8002ae0 <UART_SetConfig+0x130>
 8002a8c:	a201      	add	r2, pc, #4	; (adr r2, 8002a94 <UART_SetConfig+0xe4>)
 8002a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a92:	bf00      	nop
 8002a94:	08002ac9 	.word	0x08002ac9
 8002a98:	08002ae1 	.word	0x08002ae1
 8002a9c:	08002ae1 	.word	0x08002ae1
 8002aa0:	08002ae1 	.word	0x08002ae1
 8002aa4:	08002ad5 	.word	0x08002ad5
 8002aa8:	08002ae1 	.word	0x08002ae1
 8002aac:	08002ae1 	.word	0x08002ae1
 8002ab0:	08002ae1 	.word	0x08002ae1
 8002ab4:	08002acf 	.word	0x08002acf
 8002ab8:	08002ae1 	.word	0x08002ae1
 8002abc:	08002ae1 	.word	0x08002ae1
 8002ac0:	08002ae1 	.word	0x08002ae1
 8002ac4:	08002adb 	.word	0x08002adb
 8002ac8:	2300      	movs	r3, #0
 8002aca:	77fb      	strb	r3, [r7, #31]
 8002acc:	e117      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	77fb      	strb	r3, [r7, #31]
 8002ad2:	e114      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	77fb      	strb	r3, [r7, #31]
 8002ad8:	e111      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002ada:	2308      	movs	r3, #8
 8002adc:	77fb      	strb	r3, [r7, #31]
 8002ade:	e10e      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002ae0:	2310      	movs	r3, #16
 8002ae2:	77fb      	strb	r3, [r7, #31]
 8002ae4:	bf00      	nop
 8002ae6:	e10a      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a71      	ldr	r2, [pc, #452]	; (8002cb4 <UART_SetConfig+0x304>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d120      	bne.n	8002b34 <UART_SetConfig+0x184>
 8002af2:	4b6e      	ldr	r3, [pc, #440]	; (8002cac <UART_SetConfig+0x2fc>)
 8002af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002afc:	2b10      	cmp	r3, #16
 8002afe:	d00f      	beq.n	8002b20 <UART_SetConfig+0x170>
 8002b00:	2b10      	cmp	r3, #16
 8002b02:	d802      	bhi.n	8002b0a <UART_SetConfig+0x15a>
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <UART_SetConfig+0x164>
 8002b08:	e010      	b.n	8002b2c <UART_SetConfig+0x17c>
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d005      	beq.n	8002b1a <UART_SetConfig+0x16a>
 8002b0e:	2b30      	cmp	r3, #48	; 0x30
 8002b10:	d009      	beq.n	8002b26 <UART_SetConfig+0x176>
 8002b12:	e00b      	b.n	8002b2c <UART_SetConfig+0x17c>
 8002b14:	2300      	movs	r3, #0
 8002b16:	77fb      	strb	r3, [r7, #31]
 8002b18:	e0f1      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	77fb      	strb	r3, [r7, #31]
 8002b1e:	e0ee      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002b20:	2304      	movs	r3, #4
 8002b22:	77fb      	strb	r3, [r7, #31]
 8002b24:	e0eb      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002b26:	2308      	movs	r3, #8
 8002b28:	77fb      	strb	r3, [r7, #31]
 8002b2a:	e0e8      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002b2c:	2310      	movs	r3, #16
 8002b2e:	77fb      	strb	r3, [r7, #31]
 8002b30:	bf00      	nop
 8002b32:	e0e4      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a5f      	ldr	r2, [pc, #380]	; (8002cb8 <UART_SetConfig+0x308>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d120      	bne.n	8002b80 <UART_SetConfig+0x1d0>
 8002b3e:	4b5b      	ldr	r3, [pc, #364]	; (8002cac <UART_SetConfig+0x2fc>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b48:	2b40      	cmp	r3, #64	; 0x40
 8002b4a:	d00f      	beq.n	8002b6c <UART_SetConfig+0x1bc>
 8002b4c:	2b40      	cmp	r3, #64	; 0x40
 8002b4e:	d802      	bhi.n	8002b56 <UART_SetConfig+0x1a6>
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <UART_SetConfig+0x1b0>
 8002b54:	e010      	b.n	8002b78 <UART_SetConfig+0x1c8>
 8002b56:	2b80      	cmp	r3, #128	; 0x80
 8002b58:	d005      	beq.n	8002b66 <UART_SetConfig+0x1b6>
 8002b5a:	2bc0      	cmp	r3, #192	; 0xc0
 8002b5c:	d009      	beq.n	8002b72 <UART_SetConfig+0x1c2>
 8002b5e:	e00b      	b.n	8002b78 <UART_SetConfig+0x1c8>
 8002b60:	2300      	movs	r3, #0
 8002b62:	77fb      	strb	r3, [r7, #31]
 8002b64:	e0cb      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002b66:	2302      	movs	r3, #2
 8002b68:	77fb      	strb	r3, [r7, #31]
 8002b6a:	e0c8      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002b6c:	2304      	movs	r3, #4
 8002b6e:	77fb      	strb	r3, [r7, #31]
 8002b70:	e0c5      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002b72:	2308      	movs	r3, #8
 8002b74:	77fb      	strb	r3, [r7, #31]
 8002b76:	e0c2      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002b78:	2310      	movs	r3, #16
 8002b7a:	77fb      	strb	r3, [r7, #31]
 8002b7c:	bf00      	nop
 8002b7e:	e0be      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a4d      	ldr	r2, [pc, #308]	; (8002cbc <UART_SetConfig+0x30c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d124      	bne.n	8002bd4 <UART_SetConfig+0x224>
 8002b8a:	4b48      	ldr	r3, [pc, #288]	; (8002cac <UART_SetConfig+0x2fc>)
 8002b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b98:	d012      	beq.n	8002bc0 <UART_SetConfig+0x210>
 8002b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b9e:	d802      	bhi.n	8002ba6 <UART_SetConfig+0x1f6>
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d007      	beq.n	8002bb4 <UART_SetConfig+0x204>
 8002ba4:	e012      	b.n	8002bcc <UART_SetConfig+0x21c>
 8002ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002baa:	d006      	beq.n	8002bba <UART_SetConfig+0x20a>
 8002bac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bb0:	d009      	beq.n	8002bc6 <UART_SetConfig+0x216>
 8002bb2:	e00b      	b.n	8002bcc <UART_SetConfig+0x21c>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	77fb      	strb	r3, [r7, #31]
 8002bb8:	e0a1      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	77fb      	strb	r3, [r7, #31]
 8002bbe:	e09e      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002bc0:	2304      	movs	r3, #4
 8002bc2:	77fb      	strb	r3, [r7, #31]
 8002bc4:	e09b      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002bc6:	2308      	movs	r3, #8
 8002bc8:	77fb      	strb	r3, [r7, #31]
 8002bca:	e098      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002bcc:	2310      	movs	r3, #16
 8002bce:	77fb      	strb	r3, [r7, #31]
 8002bd0:	bf00      	nop
 8002bd2:	e094      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a39      	ldr	r2, [pc, #228]	; (8002cc0 <UART_SetConfig+0x310>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d124      	bne.n	8002c28 <UART_SetConfig+0x278>
 8002bde:	4b33      	ldr	r3, [pc, #204]	; (8002cac <UART_SetConfig+0x2fc>)
 8002be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bec:	d012      	beq.n	8002c14 <UART_SetConfig+0x264>
 8002bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf2:	d802      	bhi.n	8002bfa <UART_SetConfig+0x24a>
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d007      	beq.n	8002c08 <UART_SetConfig+0x258>
 8002bf8:	e012      	b.n	8002c20 <UART_SetConfig+0x270>
 8002bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bfe:	d006      	beq.n	8002c0e <UART_SetConfig+0x25e>
 8002c00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c04:	d009      	beq.n	8002c1a <UART_SetConfig+0x26a>
 8002c06:	e00b      	b.n	8002c20 <UART_SetConfig+0x270>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	77fb      	strb	r3, [r7, #31]
 8002c0c:	e077      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	77fb      	strb	r3, [r7, #31]
 8002c12:	e074      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002c14:	2304      	movs	r3, #4
 8002c16:	77fb      	strb	r3, [r7, #31]
 8002c18:	e071      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002c1a:	2308      	movs	r3, #8
 8002c1c:	77fb      	strb	r3, [r7, #31]
 8002c1e:	e06e      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002c20:	2310      	movs	r3, #16
 8002c22:	77fb      	strb	r3, [r7, #31]
 8002c24:	bf00      	nop
 8002c26:	e06a      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a25      	ldr	r2, [pc, #148]	; (8002cc4 <UART_SetConfig+0x314>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d124      	bne.n	8002c7c <UART_SetConfig+0x2cc>
 8002c32:	4b1e      	ldr	r3, [pc, #120]	; (8002cac <UART_SetConfig+0x2fc>)
 8002c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c38:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c40:	d012      	beq.n	8002c68 <UART_SetConfig+0x2b8>
 8002c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c46:	d802      	bhi.n	8002c4e <UART_SetConfig+0x29e>
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d007      	beq.n	8002c5c <UART_SetConfig+0x2ac>
 8002c4c:	e012      	b.n	8002c74 <UART_SetConfig+0x2c4>
 8002c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c52:	d006      	beq.n	8002c62 <UART_SetConfig+0x2b2>
 8002c54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c58:	d009      	beq.n	8002c6e <UART_SetConfig+0x2be>
 8002c5a:	e00b      	b.n	8002c74 <UART_SetConfig+0x2c4>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	77fb      	strb	r3, [r7, #31]
 8002c60:	e04d      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002c62:	2302      	movs	r3, #2
 8002c64:	77fb      	strb	r3, [r7, #31]
 8002c66:	e04a      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002c68:	2304      	movs	r3, #4
 8002c6a:	77fb      	strb	r3, [r7, #31]
 8002c6c:	e047      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002c6e:	2308      	movs	r3, #8
 8002c70:	77fb      	strb	r3, [r7, #31]
 8002c72:	e044      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002c74:	2310      	movs	r3, #16
 8002c76:	77fb      	strb	r3, [r7, #31]
 8002c78:	bf00      	nop
 8002c7a:	e040      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a11      	ldr	r2, [pc, #68]	; (8002cc8 <UART_SetConfig+0x318>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d139      	bne.n	8002cfa <UART_SetConfig+0x34a>
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <UART_SetConfig+0x2fc>)
 8002c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c94:	d027      	beq.n	8002ce6 <UART_SetConfig+0x336>
 8002c96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c9a:	d817      	bhi.n	8002ccc <UART_SetConfig+0x31c>
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d01c      	beq.n	8002cda <UART_SetConfig+0x32a>
 8002ca0:	e027      	b.n	8002cf2 <UART_SetConfig+0x342>
 8002ca2:	bf00      	nop
 8002ca4:	efff69f3 	.word	0xefff69f3
 8002ca8:	40011000 	.word	0x40011000
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40004400 	.word	0x40004400
 8002cb4:	40004800 	.word	0x40004800
 8002cb8:	40004c00 	.word	0x40004c00
 8002cbc:	40005000 	.word	0x40005000
 8002cc0:	40011400 	.word	0x40011400
 8002cc4:	40007800 	.word	0x40007800
 8002cc8:	40007c00 	.word	0x40007c00
 8002ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cd0:	d006      	beq.n	8002ce0 <UART_SetConfig+0x330>
 8002cd2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002cd6:	d009      	beq.n	8002cec <UART_SetConfig+0x33c>
 8002cd8:	e00b      	b.n	8002cf2 <UART_SetConfig+0x342>
 8002cda:	2300      	movs	r3, #0
 8002cdc:	77fb      	strb	r3, [r7, #31]
 8002cde:	e00e      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	77fb      	strb	r3, [r7, #31]
 8002ce4:	e00b      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	77fb      	strb	r3, [r7, #31]
 8002cea:	e008      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002cec:	2308      	movs	r3, #8
 8002cee:	77fb      	strb	r3, [r7, #31]
 8002cf0:	e005      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002cf2:	2310      	movs	r3, #16
 8002cf4:	77fb      	strb	r3, [r7, #31]
 8002cf6:	bf00      	nop
 8002cf8:	e001      	b.n	8002cfe <UART_SetConfig+0x34e>
 8002cfa:	2310      	movs	r3, #16
 8002cfc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d06:	d17c      	bne.n	8002e02 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8002d08:	7ffb      	ldrb	r3, [r7, #31]
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d859      	bhi.n	8002dc2 <UART_SetConfig+0x412>
 8002d0e:	a201      	add	r2, pc, #4	; (adr r2, 8002d14 <UART_SetConfig+0x364>)
 8002d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d14:	08002d39 	.word	0x08002d39
 8002d18:	08002d57 	.word	0x08002d57
 8002d1c:	08002d75 	.word	0x08002d75
 8002d20:	08002dc3 	.word	0x08002dc3
 8002d24:	08002d8d 	.word	0x08002d8d
 8002d28:	08002dc3 	.word	0x08002dc3
 8002d2c:	08002dc3 	.word	0x08002dc3
 8002d30:	08002dc3 	.word	0x08002dc3
 8002d34:	08002dab 	.word	0x08002dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d38:	f7fe fb0a 	bl	8001350 <HAL_RCC_GetPCLK1Freq>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	005a      	lsls	r2, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	085b      	lsrs	r3, r3, #1
 8002d46:	441a      	add	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	61bb      	str	r3, [r7, #24]
        break;
 8002d54:	e038      	b.n	8002dc8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d56:	f7fe fb0f 	bl	8001378 <HAL_RCC_GetPCLK2Freq>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	005a      	lsls	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	085b      	lsrs	r3, r3, #1
 8002d64:	441a      	add	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	61bb      	str	r3, [r7, #24]
        break;
 8002d72:	e029      	b.n	8002dc8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	085a      	lsrs	r2, r3, #1
 8002d7a:	4b5d      	ldr	r3, [pc, #372]	; (8002ef0 <UART_SetConfig+0x540>)
 8002d7c:	4413      	add	r3, r2
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6852      	ldr	r2, [r2, #4]
 8002d82:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	61bb      	str	r3, [r7, #24]
        break;
 8002d8a:	e01d      	b.n	8002dc8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d8c:	f7fe fa22 	bl	80011d4 <HAL_RCC_GetSysClockFreq>
 8002d90:	4603      	mov	r3, r0
 8002d92:	005a      	lsls	r2, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	085b      	lsrs	r3, r3, #1
 8002d9a:	441a      	add	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	61bb      	str	r3, [r7, #24]
        break;
 8002da8:	e00e      	b.n	8002dc8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	085b      	lsrs	r3, r3, #1
 8002db0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	61bb      	str	r3, [r7, #24]
        break;
 8002dc0:	e002      	b.n	8002dc8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	75fb      	strb	r3, [r7, #23]
        break;
 8002dc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	2b0f      	cmp	r3, #15
 8002dcc:	d916      	bls.n	8002dfc <UART_SetConfig+0x44c>
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd4:	d212      	bcs.n	8002dfc <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	f023 030f 	bic.w	r3, r3, #15
 8002dde:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	085b      	lsrs	r3, r3, #1
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	89fb      	ldrh	r3, [r7, #14]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	89fa      	ldrh	r2, [r7, #14]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	e06e      	b.n	8002eda <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	75fb      	strb	r3, [r7, #23]
 8002e00:	e06b      	b.n	8002eda <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8002e02:	7ffb      	ldrb	r3, [r7, #31]
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d857      	bhi.n	8002eb8 <UART_SetConfig+0x508>
 8002e08:	a201      	add	r2, pc, #4	; (adr r2, 8002e10 <UART_SetConfig+0x460>)
 8002e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0e:	bf00      	nop
 8002e10:	08002e35 	.word	0x08002e35
 8002e14:	08002e51 	.word	0x08002e51
 8002e18:	08002e6d 	.word	0x08002e6d
 8002e1c:	08002eb9 	.word	0x08002eb9
 8002e20:	08002e85 	.word	0x08002e85
 8002e24:	08002eb9 	.word	0x08002eb9
 8002e28:	08002eb9 	.word	0x08002eb9
 8002e2c:	08002eb9 	.word	0x08002eb9
 8002e30:	08002ea1 	.word	0x08002ea1
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002e34:	f7fe fa8c 	bl	8001350 <HAL_RCC_GetPCLK1Freq>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	085b      	lsrs	r3, r3, #1
 8002e40:	441a      	add	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	61bb      	str	r3, [r7, #24]
        break;
 8002e4e:	e036      	b.n	8002ebe <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002e50:	f7fe fa92 	bl	8001378 <HAL_RCC_GetPCLK2Freq>
 8002e54:	4602      	mov	r2, r0
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	085b      	lsrs	r3, r3, #1
 8002e5c:	441a      	add	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	61bb      	str	r3, [r7, #24]
        break;
 8002e6a:	e028      	b.n	8002ebe <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	085a      	lsrs	r2, r3, #1
 8002e72:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <UART_SetConfig+0x544>)
 8002e74:	4413      	add	r3, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6852      	ldr	r2, [r2, #4]
 8002e7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	61bb      	str	r3, [r7, #24]
        break;
 8002e82:	e01c      	b.n	8002ebe <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e84:	f7fe f9a6 	bl	80011d4 <HAL_RCC_GetSysClockFreq>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	085b      	lsrs	r3, r3, #1
 8002e90:	441a      	add	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	61bb      	str	r3, [r7, #24]
        break;
 8002e9e:	e00e      	b.n	8002ebe <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	61bb      	str	r3, [r7, #24]
        break;
 8002eb6:	e002      	b.n	8002ebe <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	75fb      	strb	r3, [r7, #23]
        break;
 8002ebc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	2b0f      	cmp	r3, #15
 8002ec2:	d908      	bls.n	8002ed6 <UART_SetConfig+0x526>
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eca:	d204      	bcs.n	8002ed6 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	60da      	str	r2, [r3, #12]
 8002ed4:	e001      	b.n	8002eda <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3720      	adds	r7, #32
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	01e84800 	.word	0x01e84800
 8002ef4:	00f42400 	.word	0x00f42400

08002ef8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	f003 0320 	and.w	r3, r3, #32
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d01a      	beq.n	800300e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ff6:	d10a      	bne.n	800300e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	605a      	str	r2, [r3, #4]
  }
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af02      	add	r7, sp, #8
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800304a:	f7fd fa87 	bl	800055c <HAL_GetTick>
 800304e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b08      	cmp	r3, #8
 800305c:	d10e      	bne.n	800307c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800305e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f814 	bl	800309a <UART_WaitOnFlagUntilTimeout>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e00a      	b.n	8003092 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2220      	movs	r2, #32
 8003086:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b084      	sub	sp, #16
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	603b      	str	r3, [r7, #0]
 80030a6:	4613      	mov	r3, r2
 80030a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030aa:	e02a      	b.n	8003102 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b2:	d026      	beq.n	8003102 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b4:	f7fd fa52 	bl	800055c <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d302      	bcc.n	80030ca <UART_WaitOnFlagUntilTimeout+0x30>
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d11b      	bne.n	8003102 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030d8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0201 	bic.w	r2, r2, #1
 80030e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e00f      	b.n	8003122 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69da      	ldr	r2, [r3, #28]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4013      	ands	r3, r2
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	429a      	cmp	r2, r3
 8003110:	bf0c      	ite	eq
 8003112:	2301      	moveq	r3, #1
 8003114:	2300      	movne	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	429a      	cmp	r2, r3
 800311e:	d0c5      	beq.n	80030ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003140:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0201 	bic.w	r2, r2, #1
 8003150:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b084      	sub	sp, #16
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003176:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7ff fc07 	bl	800299c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800318e:	bf00      	nop
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ac:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff fbe4 	bl	8002988 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08a      	sub	sp, #40	; 0x28
 80031cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ce:	f107 0314 	add.w	r3, r7, #20
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	605a      	str	r2, [r3, #4]
 80031d8:	609a      	str	r2, [r3, #8]
 80031da:	60da      	str	r2, [r3, #12]
 80031dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031de:	4b29      	ldr	r3, [pc, #164]	; (8003284 <MX_GPIO_Init+0xbc>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	4a28      	ldr	r2, [pc, #160]	; (8003284 <MX_GPIO_Init+0xbc>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ea:	4b26      	ldr	r3, [pc, #152]	; (8003284 <MX_GPIO_Init+0xbc>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031f6:	4b23      	ldr	r3, [pc, #140]	; (8003284 <MX_GPIO_Init+0xbc>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	4a22      	ldr	r2, [pc, #136]	; (8003284 <MX_GPIO_Init+0xbc>)
 80031fc:	f043 0302 	orr.w	r3, r3, #2
 8003200:	6313      	str	r3, [r2, #48]	; 0x30
 8003202:	4b20      	ldr	r3, [pc, #128]	; (8003284 <MX_GPIO_Init+0xbc>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800320e:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <MX_GPIO_Init+0xbc>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	4a1c      	ldr	r2, [pc, #112]	; (8003284 <MX_GPIO_Init+0xbc>)
 8003214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003218:	6313      	str	r3, [r2, #48]	; 0x30
 800321a:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <MX_GPIO_Init+0xbc>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	60bb      	str	r3, [r7, #8]
 8003224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003226:	4b17      	ldr	r3, [pc, #92]	; (8003284 <MX_GPIO_Init+0xbc>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	4a16      	ldr	r2, [pc, #88]	; (8003284 <MX_GPIO_Init+0xbc>)
 800322c:	f043 0304 	orr.w	r3, r3, #4
 8003230:	6313      	str	r3, [r2, #48]	; 0x30
 8003232:	4b14      	ldr	r3, [pc, #80]	; (8003284 <MX_GPIO_Init+0xbc>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	607b      	str	r3, [r7, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <MX_GPIO_Init+0xbc>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	4a10      	ldr	r2, [pc, #64]	; (8003284 <MX_GPIO_Init+0xbc>)
 8003244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003248:	6313      	str	r3, [r2, #48]	; 0x30
 800324a:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <MX_GPIO_Init+0xbc>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003256:	2200      	movs	r2, #0
 8003258:	2102      	movs	r1, #2
 800325a:	480b      	ldr	r0, [pc, #44]	; (8003288 <MX_GPIO_Init+0xc0>)
 800325c:	f7fd fc38 	bl	8000ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8003260:	2302      	movs	r3, #2
 8003262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003264:	2301      	movs	r3, #1
 8003266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003268:	2300      	movs	r3, #0
 800326a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326c:	2300      	movs	r3, #0
 800326e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8003270:	f107 0314 	add.w	r3, r7, #20
 8003274:	4619      	mov	r1, r3
 8003276:	4804      	ldr	r0, [pc, #16]	; (8003288 <MX_GPIO_Init+0xc0>)
 8003278:	f7fd fa80 	bl	800077c <HAL_GPIO_Init>

}
 800327c:	bf00      	nop
 800327e:	3728      	adds	r7, #40	; 0x28
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40023800 	.word	0x40023800
 8003288:	40022000 	.word	0x40022000

0800328c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003290:	f7fd f942 	bl	8000518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003294:	f000 f82c 	bl	80032f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003298:	f7ff ff96 	bl	80031c8 <MX_GPIO_Init>
  MX_TIM5_Init();
 800329c:	f000 f9da 	bl	8003654 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80032a0:	f000 fa4e 	bl	8003740 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 80032a4:	480f      	ldr	r0, [pc, #60]	; (80032e4 <main+0x58>)
 80032a6:	f7fe fcc7 	bl	8001c38 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive(&huart1, (uint8_t*)&buffer_bela, 1, 1000);
 80032aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ae:	2201      	movs	r2, #1
 80032b0:	490d      	ldr	r1, [pc, #52]	; (80032e8 <main+0x5c>)
 80032b2:	480e      	ldr	r0, [pc, #56]	; (80032ec <main+0x60>)
 80032b4:	f7ff f97f 	bl	80025b6 <HAL_UART_Receive>
	  /*char tmp[100] = "Hello bela\r\n";
	  HAL_UART_Transmit(&huart1, tmp, strlen(tmp), 1000);
	  HAL_Delay(1000);*/
	  buffer_bela[1] = '\r';
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <main+0x5c>)
 80032ba:	220d      	movs	r2, #13
 80032bc:	705a      	strb	r2, [r3, #1]
	  buffer_bela[2] = '\n';
 80032be:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <main+0x5c>)
 80032c0:	220a      	movs	r2, #10
 80032c2:	709a      	strb	r2, [r3, #2]
	  buffer_bela[3] = '\0';
 80032c4:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <main+0x5c>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	70da      	strb	r2, [r3, #3]
	  HAL_UART_Transmit(&huart1, (uint8_t*)&buffer_bela, strlen(buffer_bela), 1000);
 80032ca:	4807      	ldr	r0, [pc, #28]	; (80032e8 <main+0x5c>)
 80032cc:	f7fc ff9c 	bl	8000208 <strlen>
 80032d0:	4603      	mov	r3, r0
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032d8:	4903      	ldr	r1, [pc, #12]	; (80032e8 <main+0x5c>)
 80032da:	4804      	ldr	r0, [pc, #16]	; (80032ec <main+0x60>)
 80032dc:	f7ff f8da 	bl	8002494 <HAL_UART_Transmit>
  {
 80032e0:	e7e3      	b.n	80032aa <main+0x1e>
 80032e2:	bf00      	nop
 80032e4:	20000070 	.word	0x20000070
 80032e8:	2000002c 	.word	0x2000002c
 80032ec:	200000b0 	.word	0x200000b0

080032f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b0b4      	sub	sp, #208	; 0xd0
 80032f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80032fa:	2230      	movs	r2, #48	; 0x30
 80032fc:	2100      	movs	r1, #0
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fb06 	bl	8003910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003304:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003314:	f107 0308 	add.w	r3, r7, #8
 8003318:	2284      	movs	r2, #132	; 0x84
 800331a:	2100      	movs	r1, #0
 800331c:	4618      	mov	r0, r3
 800331e:	f000 faf7 	bl	8003910 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8003322:	f7fd fbef 	bl	8000b04 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	4b36      	ldr	r3, [pc, #216]	; (8003400 <SystemClock_Config+0x110>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	4a35      	ldr	r2, [pc, #212]	; (8003400 <SystemClock_Config+0x110>)
 800332c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003330:	6413      	str	r3, [r2, #64]	; 0x40
 8003332:	4b33      	ldr	r3, [pc, #204]	; (8003400 <SystemClock_Config+0x110>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333a:	607b      	str	r3, [r7, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800333e:	4b31      	ldr	r3, [pc, #196]	; (8003404 <SystemClock_Config+0x114>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003346:	4a2f      	ldr	r2, [pc, #188]	; (8003404 <SystemClock_Config+0x114>)
 8003348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b2d      	ldr	r3, [pc, #180]	; (8003404 <SystemClock_Config+0x114>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800335a:	2302      	movs	r3, #2
 800335c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003360:	2301      	movs	r3, #1
 8003362:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003366:	2310      	movs	r3, #16
 8003368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800336c:	2302      	movs	r3, #2
 800336e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003372:	2300      	movs	r3, #0
 8003374:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 10;
 8003378:	230a      	movs	r3, #10
 800337a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 210;
 800337e:	23d2      	movs	r3, #210	; 0xd2
 8003380:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003384:	2302      	movs	r3, #2
 8003386:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800338a:	2302      	movs	r3, #2
 800338c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003390:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003394:	4618      	mov	r0, r3
 8003396:	f7fd fbc5 	bl	8000b24 <HAL_RCC_OscConfig>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80033a0:	f000 f850 	bl	8003444 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033a4:	230f      	movs	r3, #15
 80033a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033aa:	2302      	movs	r3, #2
 80033ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033b0:	2300      	movs	r3, #0
 80033b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80033b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80033ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80033be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80033c6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80033ca:	2105      	movs	r1, #5
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd fe19 	bl	8001004 <HAL_RCC_ClockConfig>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <SystemClock_Config+0xec>
  {
    Error_Handler();
 80033d8:	f000 f834 	bl	8003444 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80033dc:	2340      	movs	r3, #64	; 0x40
 80033de:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80033e0:	2300      	movs	r3, #0
 80033e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033e4:	f107 0308 	add.w	r3, r7, #8
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fe f80b 	bl	8001404 <HAL_RCCEx_PeriphCLKConfig>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80033f4:	f000 f826 	bl	8003444 <Error_Handler>
  }
}
 80033f8:	bf00      	nop
 80033fa:	37d0      	adds	r7, #208	; 0xd0
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40023800 	.word	0x40023800
 8003404:	40007000 	.word	0x40007000

08003408 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a08      	ldr	r2, [pc, #32]	; (8003438 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d101      	bne.n	800341e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800341a:	f7fd f88b 	bl	8000534 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM5) {
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a06      	ldr	r2, [pc, #24]	; (800343c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d102      	bne.n	800342e <HAL_TIM_PeriodElapsedCallback+0x26>
  		  check_system = 1;
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800342a:	2201      	movs	r2, #1
 800342c:	601a      	str	r2, [r3, #0]
  	  }
  /* USER CODE END Callback 1 */
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40002000 	.word	0x40002000
 800343c:	40000c00 	.word	0x40000c00
 8003440:	20000024 	.word	0x20000024

08003444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003448:	bf00      	nop
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
	...

08003454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800345a:	4b0f      	ldr	r3, [pc, #60]	; (8003498 <HAL_MspInit+0x44>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	4a0e      	ldr	r2, [pc, #56]	; (8003498 <HAL_MspInit+0x44>)
 8003460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003464:	6413      	str	r3, [r2, #64]	; 0x40
 8003466:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <HAL_MspInit+0x44>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	607b      	str	r3, [r7, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003472:	4b09      	ldr	r3, [pc, #36]	; (8003498 <HAL_MspInit+0x44>)
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003476:	4a08      	ldr	r2, [pc, #32]	; (8003498 <HAL_MspInit+0x44>)
 8003478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800347c:	6453      	str	r3, [r2, #68]	; 0x44
 800347e:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_MspInit+0x44>)
 8003480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800

0800349c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08c      	sub	sp, #48	; 0x30
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 80034ac:	2200      	movs	r2, #0
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	202d      	movs	r0, #45	; 0x2d
 80034b2:	f7fd f917 	bl	80006e4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 80034b6:	202d      	movs	r0, #45	; 0x2d
 80034b8:	f7fd f930 	bl	800071c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80034bc:	4b1f      	ldr	r3, [pc, #124]	; (800353c <HAL_InitTick+0xa0>)
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	4a1e      	ldr	r2, [pc, #120]	; (800353c <HAL_InitTick+0xa0>)
 80034c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c6:	6413      	str	r3, [r2, #64]	; 0x40
 80034c8:	4b1c      	ldr	r3, [pc, #112]	; (800353c <HAL_InitTick+0xa0>)
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034d4:	f107 0210 	add.w	r2, r7, #16
 80034d8:	f107 0314 	add.w	r3, r7, #20
 80034dc:	4611      	mov	r1, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd ff5e 	bl	80013a0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80034e4:	f7fd ff34 	bl	8001350 <HAL_RCC_GetPCLK1Freq>
 80034e8:	4603      	mov	r3, r0
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80034ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f0:	4a13      	ldr	r2, [pc, #76]	; (8003540 <HAL_InitTick+0xa4>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	0c9b      	lsrs	r3, r3, #18
 80034f8:	3b01      	subs	r3, #1
 80034fa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80034fc:	4b11      	ldr	r3, [pc, #68]	; (8003544 <HAL_InitTick+0xa8>)
 80034fe:	4a12      	ldr	r2, [pc, #72]	; (8003548 <HAL_InitTick+0xac>)
 8003500:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8003502:	4b10      	ldr	r3, [pc, #64]	; (8003544 <HAL_InitTick+0xa8>)
 8003504:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003508:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800350a:	4a0e      	ldr	r2, [pc, #56]	; (8003544 <HAL_InitTick+0xa8>)
 800350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350e:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <HAL_InitTick+0xa8>)
 8003512:	2200      	movs	r2, #0
 8003514:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003516:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <HAL_InitTick+0xa8>)
 8003518:	2200      	movs	r2, #0
 800351a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 800351c:	4809      	ldr	r0, [pc, #36]	; (8003544 <HAL_InitTick+0xa8>)
 800351e:	f7fe fb5f 	bl	8001be0 <HAL_TIM_Base_Init>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d104      	bne.n	8003532 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8003528:	4806      	ldr	r0, [pc, #24]	; (8003544 <HAL_InitTick+0xa8>)
 800352a:	f7fe fb85 	bl	8001c38 <HAL_TIM_Base_Start_IT>
 800352e:	4603      	mov	r3, r0
 8003530:	e000      	b.n	8003534 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
}
 8003534:	4618      	mov	r0, r3
 8003536:	3730      	adds	r7, #48	; 0x30
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40023800 	.word	0x40023800
 8003540:	431bde83 	.word	0x431bde83
 8003544:	20000030 	.word	0x20000030
 8003548:	40002000 	.word	0x40002000

0800354c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003550:	bf00      	nop
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800355a:	b480      	push	{r7}
 800355c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800355e:	e7fe      	b.n	800355e <HardFault_Handler+0x4>

08003560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003564:	e7fe      	b.n	8003564 <MemManage_Handler+0x4>

08003566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003566:	b480      	push	{r7}
 8003568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800356a:	e7fe      	b.n	800356a <BusFault_Handler+0x4>

0800356c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003570:	e7fe      	b.n	8003570 <UsageFault_Handler+0x4>

08003572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003572:	b480      	push	{r7}
 8003574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800358e:	b480      	push	{r7}
 8003590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035b0:	4802      	ldr	r0, [pc, #8]	; (80035bc <USART1_IRQHandler+0x10>)
 80035b2:	f7ff f8cd 	bl	8002750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035b6:	bf00      	nop
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	200000b0 	.word	0x200000b0

080035c0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80035c4:	4802      	ldr	r0, [pc, #8]	; (80035d0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80035c6:	f7fe fb61 	bl	8001c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80035ca:	bf00      	nop
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20000030 	.word	0x20000030

080035d4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80035d8:	4802      	ldr	r0, [pc, #8]	; (80035e4 <TIM5_IRQHandler+0x10>)
 80035da:	f7fe fb57 	bl	8001c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20000070 	.word	0x20000070

080035e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035ec:	4b15      	ldr	r3, [pc, #84]	; (8003644 <SystemInit+0x5c>)
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f2:	4a14      	ldr	r2, [pc, #80]	; (8003644 <SystemInit+0x5c>)
 80035f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80035fc:	4b12      	ldr	r3, [pc, #72]	; (8003648 <SystemInit+0x60>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a11      	ldr	r2, [pc, #68]	; (8003648 <SystemInit+0x60>)
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003608:	4b0f      	ldr	r3, [pc, #60]	; (8003648 <SystemInit+0x60>)
 800360a:	2200      	movs	r2, #0
 800360c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800360e:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <SystemInit+0x60>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	490d      	ldr	r1, [pc, #52]	; (8003648 <SystemInit+0x60>)
 8003614:	4b0d      	ldr	r3, [pc, #52]	; (800364c <SystemInit+0x64>)
 8003616:	4013      	ands	r3, r2
 8003618:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800361a:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <SystemInit+0x60>)
 800361c:	4a0c      	ldr	r2, [pc, #48]	; (8003650 <SystemInit+0x68>)
 800361e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003620:	4b09      	ldr	r3, [pc, #36]	; (8003648 <SystemInit+0x60>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a08      	ldr	r2, [pc, #32]	; (8003648 <SystemInit+0x60>)
 8003626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800362a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800362c:	4b06      	ldr	r3, [pc, #24]	; (8003648 <SystemInit+0x60>)
 800362e:	2200      	movs	r2, #0
 8003630:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003632:	4b04      	ldr	r3, [pc, #16]	; (8003644 <SystemInit+0x5c>)
 8003634:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003638:	609a      	str	r2, [r3, #8]
#endif
}
 800363a:	bf00      	nop
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	e000ed00 	.word	0xe000ed00
 8003648:	40023800 	.word	0x40023800
 800364c:	fef6ffff 	.word	0xfef6ffff
 8003650:	24003010 	.word	0x24003010

08003654 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800365a:	f107 0310 	add.w	r3, r7, #16
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	605a      	str	r2, [r3, #4]
 8003664:	609a      	str	r2, [r3, #8]
 8003666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003668:	1d3b      	adds	r3, r7, #4
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	605a      	str	r2, [r3, #4]
 8003670:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8003672:	4b1e      	ldr	r3, [pc, #120]	; (80036ec <MX_TIM5_Init+0x98>)
 8003674:	4a1e      	ldr	r2, [pc, #120]	; (80036f0 <MX_TIM5_Init+0x9c>)
 8003676:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400;
 8003678:	4b1c      	ldr	r3, [pc, #112]	; (80036ec <MX_TIM5_Init+0x98>)
 800367a:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800367e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003680:	4b1a      	ldr	r3, [pc, #104]	; (80036ec <MX_TIM5_Init+0x98>)
 8003682:	2200      	movs	r2, #0
 8003684:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000;
 8003686:	4b19      	ldr	r3, [pc, #100]	; (80036ec <MX_TIM5_Init+0x98>)
 8003688:	f242 7210 	movw	r2, #10000	; 0x2710
 800368c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800368e:	4b17      	ldr	r3, [pc, #92]	; (80036ec <MX_TIM5_Init+0x98>)
 8003690:	2200      	movs	r2, #0
 8003692:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003694:	4b15      	ldr	r3, [pc, #84]	; (80036ec <MX_TIM5_Init+0x98>)
 8003696:	2200      	movs	r2, #0
 8003698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800369a:	4814      	ldr	r0, [pc, #80]	; (80036ec <MX_TIM5_Init+0x98>)
 800369c:	f7fe faa0 	bl	8001be0 <HAL_TIM_Base_Init>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80036a6:	f7ff fecd 	bl	8003444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80036b0:	f107 0310 	add.w	r3, r7, #16
 80036b4:	4619      	mov	r1, r3
 80036b6:	480d      	ldr	r0, [pc, #52]	; (80036ec <MX_TIM5_Init+0x98>)
 80036b8:	f7fe fc08 	bl	8001ecc <HAL_TIM_ConfigClockSource>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80036c2:	f7ff febf 	bl	8003444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036c6:	2300      	movs	r3, #0
 80036c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80036ce:	1d3b      	adds	r3, r7, #4
 80036d0:	4619      	mov	r1, r3
 80036d2:	4806      	ldr	r0, [pc, #24]	; (80036ec <MX_TIM5_Init+0x98>)
 80036d4:	f7fe fe16 	bl	8002304 <HAL_TIMEx_MasterConfigSynchronization>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80036de:	f7ff feb1 	bl	8003444 <Error_Handler>
  }

}
 80036e2:	bf00      	nop
 80036e4:	3720      	adds	r7, #32
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000070 	.word	0x20000070
 80036f0:	40000c00 	.word	0x40000c00

080036f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a0d      	ldr	r2, [pc, #52]	; (8003738 <HAL_TIM_Base_MspInit+0x44>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d113      	bne.n	800372e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003706:	4b0d      	ldr	r3, [pc, #52]	; (800373c <HAL_TIM_Base_MspInit+0x48>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	4a0c      	ldr	r2, [pc, #48]	; (800373c <HAL_TIM_Base_MspInit+0x48>)
 800370c:	f043 0308 	orr.w	r3, r3, #8
 8003710:	6413      	str	r3, [r2, #64]	; 0x40
 8003712:	4b0a      	ldr	r3, [pc, #40]	; (800373c <HAL_TIM_Base_MspInit+0x48>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 800371e:	2200      	movs	r2, #0
 8003720:	2101      	movs	r1, #1
 8003722:	2032      	movs	r0, #50	; 0x32
 8003724:	f7fc ffde 	bl	80006e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003728:	2032      	movs	r0, #50	; 0x32
 800372a:	f7fc fff7 	bl	800071c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40000c00 	.word	0x40000c00
 800373c:	40023800 	.word	0x40023800

08003740 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003744:	4b14      	ldr	r3, [pc, #80]	; (8003798 <MX_USART1_UART_Init+0x58>)
 8003746:	4a15      	ldr	r2, [pc, #84]	; (800379c <MX_USART1_UART_Init+0x5c>)
 8003748:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800374a:	4b13      	ldr	r3, [pc, #76]	; (8003798 <MX_USART1_UART_Init+0x58>)
 800374c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003750:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003752:	4b11      	ldr	r3, [pc, #68]	; (8003798 <MX_USART1_UART_Init+0x58>)
 8003754:	2200      	movs	r2, #0
 8003756:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003758:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <MX_USART1_UART_Init+0x58>)
 800375a:	2200      	movs	r2, #0
 800375c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800375e:	4b0e      	ldr	r3, [pc, #56]	; (8003798 <MX_USART1_UART_Init+0x58>)
 8003760:	2200      	movs	r2, #0
 8003762:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <MX_USART1_UART_Init+0x58>)
 8003766:	220c      	movs	r2, #12
 8003768:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800376a:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <MX_USART1_UART_Init+0x58>)
 800376c:	2200      	movs	r2, #0
 800376e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003770:	4b09      	ldr	r3, [pc, #36]	; (8003798 <MX_USART1_UART_Init+0x58>)
 8003772:	2200      	movs	r2, #0
 8003774:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003776:	4b08      	ldr	r3, [pc, #32]	; (8003798 <MX_USART1_UART_Init+0x58>)
 8003778:	2200      	movs	r2, #0
 800377a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800377c:	4b06      	ldr	r3, [pc, #24]	; (8003798 <MX_USART1_UART_Init+0x58>)
 800377e:	2200      	movs	r2, #0
 8003780:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003782:	4805      	ldr	r0, [pc, #20]	; (8003798 <MX_USART1_UART_Init+0x58>)
 8003784:	f7fe fe38 	bl	80023f8 <HAL_UART_Init>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800378e:	f7ff fe59 	bl	8003444 <Error_Handler>
  }

}
 8003792:	bf00      	nop
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	200000b0 	.word	0x200000b0
 800379c:	40011000 	.word	0x40011000

080037a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08a      	sub	sp, #40	; 0x28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a8:	f107 0314 	add.w	r3, r7, #20
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	60da      	str	r2, [r3, #12]
 80037b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a29      	ldr	r2, [pc, #164]	; (8003864 <HAL_UART_MspInit+0xc4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d14c      	bne.n	800385c <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037c2:	4b29      	ldr	r3, [pc, #164]	; (8003868 <HAL_UART_MspInit+0xc8>)
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	4a28      	ldr	r2, [pc, #160]	; (8003868 <HAL_UART_MspInit+0xc8>)
 80037c8:	f043 0310 	orr.w	r3, r3, #16
 80037cc:	6453      	str	r3, [r2, #68]	; 0x44
 80037ce:	4b26      	ldr	r3, [pc, #152]	; (8003868 <HAL_UART_MspInit+0xc8>)
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	f003 0310 	and.w	r3, r3, #16
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037da:	4b23      	ldr	r3, [pc, #140]	; (8003868 <HAL_UART_MspInit+0xc8>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	4a22      	ldr	r2, [pc, #136]	; (8003868 <HAL_UART_MspInit+0xc8>)
 80037e0:	f043 0302 	orr.w	r3, r3, #2
 80037e4:	6313      	str	r3, [r2, #48]	; 0x30
 80037e6:	4b20      	ldr	r3, [pc, #128]	; (8003868 <HAL_UART_MspInit+0xc8>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f2:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <HAL_UART_MspInit+0xc8>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	4a1c      	ldr	r2, [pc, #112]	; (8003868 <HAL_UART_MspInit+0xc8>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6313      	str	r3, [r2, #48]	; 0x30
 80037fe:	4b1a      	ldr	r3, [pc, #104]	; (8003868 <HAL_UART_MspInit+0xc8>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	60bb      	str	r3, [r7, #8]
 8003808:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800380a:	2380      	movs	r3, #128	; 0x80
 800380c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380e:	2302      	movs	r3, #2
 8003810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003812:	2300      	movs	r3, #0
 8003814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003816:	2303      	movs	r3, #3
 8003818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800381a:	2307      	movs	r3, #7
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800381e:	f107 0314 	add.w	r3, r7, #20
 8003822:	4619      	mov	r1, r3
 8003824:	4811      	ldr	r0, [pc, #68]	; (800386c <HAL_UART_MspInit+0xcc>)
 8003826:	f7fc ffa9 	bl	800077c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800382a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800382e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003830:	2302      	movs	r3, #2
 8003832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003834:	2300      	movs	r3, #0
 8003836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003838:	2303      	movs	r3, #3
 800383a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800383c:	2307      	movs	r3, #7
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003840:	f107 0314 	add.w	r3, r7, #20
 8003844:	4619      	mov	r1, r3
 8003846:	480a      	ldr	r0, [pc, #40]	; (8003870 <HAL_UART_MspInit+0xd0>)
 8003848:	f7fc ff98 	bl	800077c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800384c:	2200      	movs	r2, #0
 800384e:	2100      	movs	r1, #0
 8003850:	2025      	movs	r0, #37	; 0x25
 8003852:	f7fc ff47 	bl	80006e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003856:	2025      	movs	r0, #37	; 0x25
 8003858:	f7fc ff60 	bl	800071c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800385c:	bf00      	nop
 800385e:	3728      	adds	r7, #40	; 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40011000 	.word	0x40011000
 8003868:	40023800 	.word	0x40023800
 800386c:	40020400 	.word	0x40020400
 8003870:	40020000 	.word	0x40020000

08003874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003878:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800387a:	e003      	b.n	8003884 <LoopCopyDataInit>

0800387c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800387c:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800387e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003880:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003882:	3104      	adds	r1, #4

08003884 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003884:	480b      	ldr	r0, [pc, #44]	; (80038b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003886:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003888:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800388a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800388c:	d3f6      	bcc.n	800387c <CopyDataInit>
  ldr  r2, =_sbss
 800388e:	4a0b      	ldr	r2, [pc, #44]	; (80038bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003890:	e002      	b.n	8003898 <LoopFillZerobss>

08003892 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003892:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003894:	f842 3b04 	str.w	r3, [r2], #4

08003898 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003898:	4b09      	ldr	r3, [pc, #36]	; (80038c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800389a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800389c:	d3f9      	bcc.n	8003892 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800389e:	f7ff fea3 	bl	80035e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038a2:	f000 f811 	bl	80038c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038a6:	f7ff fcf1 	bl	800328c <main>
  bx  lr    
 80038aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80038ac:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80038b0:	08003960 	.word	0x08003960
  ldr  r0, =_sdata
 80038b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80038b8:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 80038bc:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 80038c0:	20000130 	.word	0x20000130

080038c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038c4:	e7fe      	b.n	80038c4 <ADC_IRQHandler>
	...

080038c8 <__libc_init_array>:
 80038c8:	b570      	push	{r4, r5, r6, lr}
 80038ca:	4e0d      	ldr	r6, [pc, #52]	; (8003900 <__libc_init_array+0x38>)
 80038cc:	4c0d      	ldr	r4, [pc, #52]	; (8003904 <__libc_init_array+0x3c>)
 80038ce:	1ba4      	subs	r4, r4, r6
 80038d0:	10a4      	asrs	r4, r4, #2
 80038d2:	2500      	movs	r5, #0
 80038d4:	42a5      	cmp	r5, r4
 80038d6:	d109      	bne.n	80038ec <__libc_init_array+0x24>
 80038d8:	4e0b      	ldr	r6, [pc, #44]	; (8003908 <__libc_init_array+0x40>)
 80038da:	4c0c      	ldr	r4, [pc, #48]	; (800390c <__libc_init_array+0x44>)
 80038dc:	f000 f820 	bl	8003920 <_init>
 80038e0:	1ba4      	subs	r4, r4, r6
 80038e2:	10a4      	asrs	r4, r4, #2
 80038e4:	2500      	movs	r5, #0
 80038e6:	42a5      	cmp	r5, r4
 80038e8:	d105      	bne.n	80038f6 <__libc_init_array+0x2e>
 80038ea:	bd70      	pop	{r4, r5, r6, pc}
 80038ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038f0:	4798      	blx	r3
 80038f2:	3501      	adds	r5, #1
 80038f4:	e7ee      	b.n	80038d4 <__libc_init_array+0xc>
 80038f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038fa:	4798      	blx	r3
 80038fc:	3501      	adds	r5, #1
 80038fe:	e7f2      	b.n	80038e6 <__libc_init_array+0x1e>
 8003900:	08003958 	.word	0x08003958
 8003904:	08003958 	.word	0x08003958
 8003908:	08003958 	.word	0x08003958
 800390c:	0800395c 	.word	0x0800395c

08003910 <memset>:
 8003910:	4402      	add	r2, r0
 8003912:	4603      	mov	r3, r0
 8003914:	4293      	cmp	r3, r2
 8003916:	d100      	bne.n	800391a <memset+0xa>
 8003918:	4770      	bx	lr
 800391a:	f803 1b01 	strb.w	r1, [r3], #1
 800391e:	e7f9      	b.n	8003914 <memset+0x4>

08003920 <_init>:
 8003920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003922:	bf00      	nop
 8003924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003926:	bc08      	pop	{r3}
 8003928:	469e      	mov	lr, r3
 800392a:	4770      	bx	lr

0800392c <_fini>:
 800392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392e:	bf00      	nop
 8003930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003932:	bc08      	pop	{r3}
 8003934:	469e      	mov	lr, r3
 8003936:	4770      	bx	lr
