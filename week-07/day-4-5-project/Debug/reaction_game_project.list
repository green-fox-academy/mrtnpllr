
reaction_game_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8ec  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800bab4  0800bab4  0001bab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bacc  0800bacc  00020008  2**0
                  CONTENTS
  4 .ARM          00000008  0800bacc  0800bacc  0001bacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bad4  0800bad4  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bad4  0800bad4  0001bad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bad8  0800bad8  0001bad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  0800badc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e78  20000008  0800bae4  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e80  0800bae4  00020e80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002debb  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005495  00000000  00000000  0004def3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002590  00000000  00000000  00053388  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002320  00000000  00000000  00055918  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00009169  00000000  00000000  00057c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025730  00000000  00000000  00060da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011d3f5  00000000  00000000  000864d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a38c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a11c  00000000  00000000  001a3944  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000008 	.word	0x20000008
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800ba9c 	.word	0x0800ba9c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000000c 	.word	0x2000000c
 8000204:	0800ba9c 	.word	0x0800ba9c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fb6a 	bl	8000be6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	2000      	movs	r0, #0
 8000514:	f00b f800 	bl	800b518 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f00a f94c 	bl	800a7b4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000000 	.word	0x20000000
 8000548:	20000038 	.word	0x20000038

0800054c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000038 	.word	0x20000038

08000564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff ffee 	bl	800054c <HAL_GetTick>
 8000570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057c:	d005      	beq.n	800058a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <HAL_Delay+0x40>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4413      	add	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800058a:	bf00      	nop
 800058c:	f7ff ffde 	bl	800054c <HAL_GetTick>
 8000590:	4602      	mov	r2, r0
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	429a      	cmp	r2, r3
 800059a:	d8f7      	bhi.n	800058c <HAL_Delay+0x28>
  {
  }
}
 800059c:	bf00      	nop
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005b0:	2300      	movs	r3, #0
 80005b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d101      	bne.n	80005be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
 80005bc:	e031      	b.n	8000622 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d109      	bne.n	80005da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f00a f918 	bl	800a7fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2200      	movs	r2, #0
 80005d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005de:	f003 0310 	and.w	r3, r3, #16
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d116      	bne.n	8000614 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <HAL_ADC_Init+0x84>)
 80005ec:	4013      	ands	r3, r2
 80005ee:	f043 0202 	orr.w	r2, r3, #2
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f000 f94e 	bl	8000898 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2200      	movs	r2, #0
 8000600:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000606:	f023 0303 	bic.w	r3, r3, #3
 800060a:	f043 0201 	orr.w	r2, r3, #1
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	641a      	str	r2, [r3, #64]	; 0x40
 8000612:	e001      	b.n	8000618 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000614:	2301      	movs	r3, #1
 8000616:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	ffffeefd 	.word	0xffffeefd

08000630 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000644:	2b01      	cmp	r3, #1
 8000646:	d101      	bne.n	800064c <HAL_ADC_ConfigChannel+0x1c>
 8000648:	2302      	movs	r3, #2
 800064a:	e115      	b.n	8000878 <HAL_ADC_ConfigChannel+0x248>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2201      	movs	r2, #1
 8000650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b09      	cmp	r3, #9
 800065a:	d935      	bls.n	80006c8 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	68d9      	ldr	r1, [r3, #12]
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	b29b      	uxth	r3, r3
 8000668:	461a      	mov	r2, r3
 800066a:	4613      	mov	r3, r2
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	4413      	add	r3, r2
 8000670:	3b1e      	subs	r3, #30
 8000672:	2207      	movs	r2, #7
 8000674:	fa02 f303 	lsl.w	r3, r2, r3
 8000678:	43da      	mvns	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	400a      	ands	r2, r1
 8000680:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a7f      	ldr	r2, [pc, #508]	; (8000884 <HAL_ADC_ConfigChannel+0x254>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d10a      	bne.n	80006a2 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	68d9      	ldr	r1, [r3, #12]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	061a      	lsls	r2, r3, #24
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	430a      	orrs	r2, r1
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	e035      	b.n	800070e <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	68d9      	ldr	r1, [r3, #12]
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	689a      	ldr	r2, [r3, #8]
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	4618      	mov	r0, r3
 80006b4:	4603      	mov	r3, r0
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	4403      	add	r3, r0
 80006ba:	3b1e      	subs	r3, #30
 80006bc:	409a      	lsls	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	430a      	orrs	r2, r1
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	e022      	b.n	800070e <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6919      	ldr	r1, [r3, #16]
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	461a      	mov	r2, r3
 80006d6:	4613      	mov	r3, r2
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	4413      	add	r3, r2
 80006dc:	2207      	movs	r2, #7
 80006de:	fa02 f303 	lsl.w	r3, r2, r3
 80006e2:	43da      	mvns	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	400a      	ands	r2, r1
 80006ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	6919      	ldr	r1, [r3, #16]
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	4618      	mov	r0, r3
 80006fe:	4603      	mov	r3, r0
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	4403      	add	r3, r0
 8000704:	409a      	lsls	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	430a      	orrs	r2, r1
 800070c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	2b06      	cmp	r3, #6
 8000714:	d824      	bhi.n	8000760 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	685a      	ldr	r2, [r3, #4]
 8000720:	4613      	mov	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	3b05      	subs	r3, #5
 8000728:	221f      	movs	r2, #31
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	43da      	mvns	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	400a      	ands	r2, r1
 8000736:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	b29b      	uxth	r3, r3
 8000744:	4618      	mov	r0, r3
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	685a      	ldr	r2, [r3, #4]
 800074a:	4613      	mov	r3, r2
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	4413      	add	r3, r2
 8000750:	3b05      	subs	r3, #5
 8000752:	fa00 f203 	lsl.w	r2, r0, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	430a      	orrs	r2, r1
 800075c:	635a      	str	r2, [r3, #52]	; 0x34
 800075e:	e04c      	b.n	80007fa <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	2b0c      	cmp	r3, #12
 8000766:	d824      	bhi.n	80007b2 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	4613      	mov	r3, r2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	3b23      	subs	r3, #35	; 0x23
 800077a:	221f      	movs	r2, #31
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	43da      	mvns	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	400a      	ands	r2, r1
 8000788:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	b29b      	uxth	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	685a      	ldr	r2, [r3, #4]
 800079c:	4613      	mov	r3, r2
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	4413      	add	r3, r2
 80007a2:	3b23      	subs	r3, #35	; 0x23
 80007a4:	fa00 f203 	lsl.w	r2, r0, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	430a      	orrs	r2, r1
 80007ae:	631a      	str	r2, [r3, #48]	; 0x30
 80007b0:	e023      	b.n	80007fa <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	685a      	ldr	r2, [r3, #4]
 80007bc:	4613      	mov	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	3b41      	subs	r3, #65	; 0x41
 80007c4:	221f      	movs	r2, #31
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	400a      	ands	r2, r1
 80007d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	4618      	mov	r0, r3
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	4613      	mov	r3, r2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4413      	add	r3, r2
 80007ec:	3b41      	subs	r3, #65	; 0x41
 80007ee:	fa00 f203 	lsl.w	r2, r0, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	430a      	orrs	r2, r1
 80007f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a22      	ldr	r2, [pc, #136]	; (8000888 <HAL_ADC_ConfigChannel+0x258>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d109      	bne.n	8000818 <HAL_ADC_ConfigChannel+0x1e8>
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b12      	cmp	r3, #18
 800080a:	d105      	bne.n	8000818 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <HAL_ADC_ConfigChannel+0x25c>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	4a1e      	ldr	r2, [pc, #120]	; (800088c <HAL_ADC_ConfigChannel+0x25c>)
 8000812:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000816:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a1a      	ldr	r2, [pc, #104]	; (8000888 <HAL_ADC_ConfigChannel+0x258>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d125      	bne.n	800086e <HAL_ADC_ConfigChannel+0x23e>
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <HAL_ADC_ConfigChannel+0x254>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d003      	beq.n	8000834 <HAL_ADC_ConfigChannel+0x204>
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b11      	cmp	r3, #17
 8000832:	d11c      	bne.n	800086e <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_ADC_ConfigChannel+0x25c>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	4a14      	ldr	r2, [pc, #80]	; (800088c <HAL_ADC_ConfigChannel+0x25c>)
 800083a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800083e:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <HAL_ADC_ConfigChannel+0x254>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d111      	bne.n	800086e <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <HAL_ADC_ConfigChannel+0x260>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a11      	ldr	r2, [pc, #68]	; (8000894 <HAL_ADC_ConfigChannel+0x264>)
 8000850:	fba2 2303 	umull	r2, r3, r2, r3
 8000854:	0c9a      	lsrs	r2, r3, #18
 8000856:	4613      	mov	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	4413      	add	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000860:	e002      	b.n	8000868 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	3b01      	subs	r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1f9      	bne.n	8000862 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000876:	2300      	movs	r3, #0
}
 8000878:	4618      	mov	r0, r3
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	10000012 	.word	0x10000012
 8000888:	40012000 	.word	0x40012000
 800088c:	40012300 	.word	0x40012300
 8000890:	20000004 	.word	0x20000004
 8000894:	431bde83 	.word	0x431bde83

08000898 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80008a0:	4b78      	ldr	r3, [pc, #480]	; (8000a84 <ADC_Init+0x1ec>)
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	4a77      	ldr	r2, [pc, #476]	; (8000a84 <ADC_Init+0x1ec>)
 80008a6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80008aa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80008ac:	4b75      	ldr	r3, [pc, #468]	; (8000a84 <ADC_Init+0x1ec>)
 80008ae:	685a      	ldr	r2, [r3, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	4973      	ldr	r1, [pc, #460]	; (8000a84 <ADC_Init+0x1ec>)
 80008b6:	4313      	orrs	r3, r2
 80008b8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	6859      	ldr	r1, [r3, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	021a      	lsls	r2, r3, #8
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	430a      	orrs	r2, r1
 80008dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	685a      	ldr	r2, [r3, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80008ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	6859      	ldr	r1, [r3, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	689a      	ldr	r2, [r3, #8]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	430a      	orrs	r2, r1
 80008fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	689a      	ldr	r2, [r3, #8]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800090e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	6899      	ldr	r1, [r3, #8]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	68da      	ldr	r2, [r3, #12]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	430a      	orrs	r2, r1
 8000920:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000926:	4a58      	ldr	r2, [pc, #352]	; (8000a88 <ADC_Init+0x1f0>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d022      	beq.n	8000972 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	689a      	ldr	r2, [r3, #8]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800093a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	6899      	ldr	r1, [r3, #8]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	430a      	orrs	r2, r1
 800094c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	689a      	ldr	r2, [r3, #8]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800095c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	6899      	ldr	r1, [r3, #8]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	430a      	orrs	r2, r1
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	e00f      	b.n	8000992 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000980:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	689a      	ldr	r2, [r3, #8]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000990:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	689a      	ldr	r2, [r3, #8]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f022 0202 	bic.w	r2, r2, #2
 80009a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	6899      	ldr	r1, [r3, #8]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	005a      	lsls	r2, r3, #1
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	430a      	orrs	r2, r1
 80009b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d01b      	beq.n	80009f8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	685a      	ldr	r2, [r3, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80009ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	685a      	ldr	r2, [r3, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80009de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	6859      	ldr	r1, [r3, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ea:	3b01      	subs	r3, #1
 80009ec:	035a      	lsls	r2, r3, #13
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	430a      	orrs	r2, r1
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	e007      	b.n	8000a08 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	685a      	ldr	r2, [r3, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000a16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	051a      	lsls	r2, r3, #20
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	6899      	ldr	r1, [r3, #8]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a4a:	025a      	lsls	r2, r3, #9
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	430a      	orrs	r2, r1
 8000a52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	6899      	ldr	r1, [r3, #8]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	029a      	lsls	r2, r3, #10
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	430a      	orrs	r2, r1
 8000a76:	609a      	str	r2, [r3, #8]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	40012300 	.word	0x40012300
 8000a88:	0f000001 	.word	0x0f000001

08000a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <__NVIC_SetPriorityGrouping+0x40>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	; (8000acc <__NVIC_SetPriorityGrouping+0x40>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00
 8000ad0:	05fa0000 	.word	0x05fa0000

08000ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <__NVIC_GetPriorityGrouping+0x18>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	f003 0307 	and.w	r3, r3, #7
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	db0b      	blt.n	8000b1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	f003 021f 	and.w	r2, r3, #31
 8000b08:	4907      	ldr	r1, [pc, #28]	; (8000b28 <__NVIC_EnableIRQ+0x38>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	095b      	lsrs	r3, r3, #5
 8000b10:	2001      	movs	r0, #1
 8000b12:	fa00 f202 	lsl.w	r2, r0, r2
 8000b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100

08000b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	db0a      	blt.n	8000b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	490c      	ldr	r1, [pc, #48]	; (8000b78 <__NVIC_SetPriority+0x4c>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	0112      	lsls	r2, r2, #4
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	440b      	add	r3, r1
 8000b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b54:	e00a      	b.n	8000b6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4908      	ldr	r1, [pc, #32]	; (8000b7c <__NVIC_SetPriority+0x50>)
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	3b04      	subs	r3, #4
 8000b64:	0112      	lsls	r2, r2, #4
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	440b      	add	r3, r1
 8000b6a:	761a      	strb	r2, [r3, #24]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000e100 	.word	0xe000e100
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	; 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f1c3 0307 	rsb	r3, r3, #7
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	bf28      	it	cs
 8000b9e:	2304      	movcs	r3, #4
 8000ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	2b06      	cmp	r3, #6
 8000ba8:	d902      	bls.n	8000bb0 <NVIC_EncodePriority+0x30>
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3b03      	subs	r3, #3
 8000bae:	e000      	b.n	8000bb2 <NVIC_EncodePriority+0x32>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43d9      	mvns	r1, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	4313      	orrs	r3, r2
         );
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3724      	adds	r7, #36	; 0x24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ff4c 	bl	8000a8c <__NVIC_SetPriorityGrouping>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
 8000c08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0e:	f7ff ff61 	bl	8000ad4 <__NVIC_GetPriorityGrouping>
 8000c12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	68b9      	ldr	r1, [r7, #8]
 8000c18:	6978      	ldr	r0, [r7, #20]
 8000c1a:	f7ff ffb1 	bl	8000b80 <NVIC_EncodePriority>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff ff80 	bl	8000b2c <__NVIC_SetPriority>
}
 8000c2c:	bf00      	nop
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff54 	bl	8000af0 <__NVIC_EnableIRQ>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e054      	b.n	8000d0c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7f5b      	ldrb	r3, [r3, #29]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d105      	bne.n	8000c78 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f009 fe02 	bl	800a87c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	791b      	ldrb	r3, [r3, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d10c      	bne.n	8000ca0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a22      	ldr	r2, [pc, #136]	; (8000d14 <HAL_CRC_Init+0xc4>)
 8000c8c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 0218 	bic.w	r2, r2, #24
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	e00c      	b.n	8000cba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6899      	ldr	r1, [r3, #8]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 f834 	bl	8000d18 <HAL_CRCEx_Polynomial_Set>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e028      	b.n	8000d0c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	795b      	ldrb	r3, [r3, #5]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d105      	bne.n	8000cce <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8000cca:	611a      	str	r2, [r3, #16]
 8000ccc:	e004      	b.n	8000cd8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	6912      	ldr	r2, [r2, #16]
 8000cd6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	695a      	ldr	r2, [r3, #20]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	430a      	orrs	r2, r1
 8000cec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	699a      	ldr	r2, [r3, #24]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	430a      	orrs	r2, r1
 8000d02:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2201      	movs	r2, #1
 8000d08:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	04c11db7 	.word	0x04c11db7

08000d18 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000d28:	231f      	movs	r3, #31
 8000d2a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000d2c:	bf00      	nop
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	1e5a      	subs	r2, r3, #1
 8000d32:	613a      	str	r2, [r7, #16]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d009      	beq.n	8000d4c <HAL_CRCEx_Polynomial_Set+0x34>
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	f003 031f 	and.w	r3, r3, #31
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	fa22 f303 	lsr.w	r3, r2, r3
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d0f0      	beq.n	8000d2e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b18      	cmp	r3, #24
 8000d50:	d846      	bhi.n	8000de0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8000d52:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <HAL_CRCEx_Polynomial_Set+0x40>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000de7 	.word	0x08000de7
 8000d5c:	08000de1 	.word	0x08000de1
 8000d60:	08000de1 	.word	0x08000de1
 8000d64:	08000de1 	.word	0x08000de1
 8000d68:	08000de1 	.word	0x08000de1
 8000d6c:	08000de1 	.word	0x08000de1
 8000d70:	08000de1 	.word	0x08000de1
 8000d74:	08000de1 	.word	0x08000de1
 8000d78:	08000dd5 	.word	0x08000dd5
 8000d7c:	08000de1 	.word	0x08000de1
 8000d80:	08000de1 	.word	0x08000de1
 8000d84:	08000de1 	.word	0x08000de1
 8000d88:	08000de1 	.word	0x08000de1
 8000d8c:	08000de1 	.word	0x08000de1
 8000d90:	08000de1 	.word	0x08000de1
 8000d94:	08000de1 	.word	0x08000de1
 8000d98:	08000dc9 	.word	0x08000dc9
 8000d9c:	08000de1 	.word	0x08000de1
 8000da0:	08000de1 	.word	0x08000de1
 8000da4:	08000de1 	.word	0x08000de1
 8000da8:	08000de1 	.word	0x08000de1
 8000dac:	08000de1 	.word	0x08000de1
 8000db0:	08000de1 	.word	0x08000de1
 8000db4:	08000de1 	.word	0x08000de1
 8000db8:	08000dbd 	.word	0x08000dbd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	2b06      	cmp	r3, #6
 8000dc0:	d913      	bls.n	8000dea <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000dc6:	e010      	b.n	8000dea <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	2b07      	cmp	r3, #7
 8000dcc:	d90f      	bls.n	8000dee <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000dd2:	e00c      	b.n	8000dee <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	2b0f      	cmp	r3, #15
 8000dd8:	d90b      	bls.n	8000df2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000dde:	e008      	b.n	8000df2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	75fb      	strb	r3, [r7, #23]
      break;
 8000de4:	e006      	b.n	8000df4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000de6:	bf00      	nop
 8000de8:	e004      	b.n	8000df4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000dea:	bf00      	nop
 8000dec:	e002      	b.n	8000df4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000dee:	bf00      	nop
 8000df0:	e000      	b.n	8000df4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000df2:	bf00      	nop
  }
  if (status == HAL_OK)
 8000df4:	7dfb      	ldrb	r3, [r7, #23]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d10d      	bne.n	8000e16 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	f023 0118 	bic.w	r1, r3, #24
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	430a      	orrs	r2, r1
 8000e14:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	371c      	adds	r7, #28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d101      	bne.n	8000e36 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e062      	b.n	8000efc <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d102      	bne.n	8000e48 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f009 fd3a 	bl	800a8bc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6819      	ldr	r1, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <HAL_DCMI_Init+0xe0>)
 8000e5c:	400b      	ands	r3, r1
 8000e5e:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6819      	ldr	r1, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000e74:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000e80:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000e8c:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e92:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000e98:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9e:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000ea4:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b10      	cmp	r3, #16
 8000eb4:	d112      	bne.n	8000edc <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	7f1b      	ldrb	r3, [r3, #28]
 8000eba:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	7f5b      	ldrb	r3, [r3, #29]
 8000ec0:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000ec2:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7f9b      	ldrb	r3, [r3, #30]
 8000ec8:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8000eca:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7fdb      	ldrb	r3, [r3, #31]
 8000ed2:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8000ed8:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000eda:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	68da      	ldr	r2, [r3, #12]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 021e 	orr.w	r2, r2, #30
 8000eea:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	ffe0f007 	.word	0xffe0f007

08000f08 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e039      	b.n	8000f8e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d106      	bne.n	8000f34 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f009 fd82 	bl	800aa38 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2202      	movs	r2, #2
 8000f38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f58:	f023 0107 	bic.w	r1, r3, #7
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	430a      	orrs	r2, r1
 8000f66:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_DMA2D_Init+0x90>)
 8000f70:	4013      	ands	r3, r2
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68d1      	ldr	r1, [r2, #12]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	6812      	ldr	r2, [r2, #0]
 8000f7a:	430b      	orrs	r3, r1
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	ffffc000 	.word	0xffffc000

08000f9c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d026      	beq.n	800100c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d021      	beq.n	800100c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fd6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fdc:	f043 0201 	orr.w	r2, r3, #1
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2204      	movs	r2, #4
 8000ff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0320 	and.w	r3, r3, #32
 8001012:	2b00      	cmp	r3, #0
 8001014:	d026      	beq.n	8001064 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d021      	beq.n	8001064 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800102e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2220      	movs	r2, #32
 8001036:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800103c:	f043 0202 	orr.w	r2, r3, #2
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2204      	movs	r2, #4
 8001048:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	2b00      	cmp	r3, #0
 800106c:	d026      	beq.n	80010bc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001074:	2b00      	cmp	r3, #0
 8001076:	d021      	beq.n	80010bc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001086:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2208      	movs	r2, #8
 800108e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001094:	f043 0204 	orr.w	r2, r3, #4
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2204      	movs	r2, #4
 80010a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d013      	beq.n	80010ee <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00e      	beq.n	80010ee <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010de:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2204      	movs	r2, #4
 80010e6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 f853 	bl	8001194 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d024      	beq.n	8001142 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d01f      	beq.n	8001142 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001110:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2202      	movs	r2, #2
 8001118:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2201      	movs	r2, #1
 8001126:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f003 0310 	and.w	r3, r3, #16
 8001148:	2b00      	cmp	r3, #0
 800114a:	d01f      	beq.n	800118c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d01a      	beq.n	800118c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001164:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2210      	movs	r2, #16
 800116c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 f80e 	bl	80011a8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80011bc:	b480      	push	{r7}
 80011be:	b087      	sub	sp, #28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d101      	bne.n	80011dc <HAL_DMA2D_ConfigLayer+0x20>
 80011d8:	2302      	movs	r3, #2
 80011da:	e079      	b.n	80012d0 <HAL_DMA2D_ConfigLayer+0x114>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2202      	movs	r2, #2
 80011e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	3318      	adds	r3, #24
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	041b      	lsls	r3, r3, #16
 8001202:	4313      	orrs	r3, r2
 8001204:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001206:	4b35      	ldr	r3, [pc, #212]	; (80012dc <HAL_DMA2D_ConfigLayer+0x120>)
 8001208:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b0a      	cmp	r3, #10
 8001210:	d003      	beq.n	800121a <HAL_DMA2D_ConfigLayer+0x5e>
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b09      	cmp	r3, #9
 8001218:	d107      	bne.n	800122a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4313      	orrs	r3, r2
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	e005      	b.n	8001236 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	061b      	lsls	r3, r3, #24
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	4313      	orrs	r3, r2
 8001234:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d120      	bne.n	800127e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	43db      	mvns	r3, r3
 8001246:	ea02 0103 	and.w	r1, r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	430a      	orrs	r2, r1
 8001252:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	6812      	ldr	r2, [r2, #0]
 800125c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b0a      	cmp	r3, #10
 8001264:	d003      	beq.n	800126e <HAL_DMA2D_ConfigLayer+0xb2>
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b09      	cmp	r3, #9
 800126c:	d127      	bne.n	80012be <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
 800127c:	e01f      	b.n	80012be <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	69da      	ldr	r2, [r3, #28]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43db      	mvns	r3, r3
 8001288:	ea02 0103 	and.w	r1, r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	430a      	orrs	r2, r1
 8001294:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b0a      	cmp	r3, #10
 80012a6:	d003      	beq.n	80012b0 <HAL_DMA2D_ConfigLayer+0xf4>
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b09      	cmp	r3, #9
 80012ae:	d106      	bne.n	80012be <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80012bc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	371c      	adds	r7, #28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	ff03000f 	.word	0xff03000f

080012e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	e175      	b.n	80015ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001300:	2201      	movs	r2, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	429a      	cmp	r2, r3
 800131a:	f040 8164 	bne.w	80015e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x4e>
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b12      	cmp	r3, #18
 800132c:	d123      	bne.n	8001376 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	08da      	lsrs	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3208      	adds	r2, #8
 8001336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	691a      	ldr	r2, [r3, #16]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	08da      	lsrs	r2, r3, #3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3208      	adds	r2, #8
 8001370:	69b9      	ldr	r1, [r7, #24]
 8001372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	2203      	movs	r2, #3
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 0203 	and.w	r2, r3, #3
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d00b      	beq.n	80013ca <HAL_GPIO_Init+0xea>
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013be:	2b11      	cmp	r3, #17
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b12      	cmp	r3, #18
 80013c8:	d130      	bne.n	800142c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	2203      	movs	r2, #3
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001400:	2201      	movs	r2, #1
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	f003 0201 	and.w	r2, r3, #1
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80be 	beq.w	80015e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	4b65      	ldr	r3, [pc, #404]	; (8001600 <HAL_GPIO_Init+0x320>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	4a64      	ldr	r2, [pc, #400]	; (8001600 <HAL_GPIO_Init+0x320>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001474:	6453      	str	r3, [r2, #68]	; 0x44
 8001476:	4b62      	ldr	r3, [pc, #392]	; (8001600 <HAL_GPIO_Init+0x320>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001482:	4a60      	ldr	r2, [pc, #384]	; (8001604 <HAL_GPIO_Init+0x324>)
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3302      	adds	r3, #2
 800148a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a57      	ldr	r2, [pc, #348]	; (8001608 <HAL_GPIO_Init+0x328>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d037      	beq.n	800151e <HAL_GPIO_Init+0x23e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a56      	ldr	r2, [pc, #344]	; (800160c <HAL_GPIO_Init+0x32c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d031      	beq.n	800151a <HAL_GPIO_Init+0x23a>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a55      	ldr	r2, [pc, #340]	; (8001610 <HAL_GPIO_Init+0x330>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d02b      	beq.n	8001516 <HAL_GPIO_Init+0x236>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a54      	ldr	r2, [pc, #336]	; (8001614 <HAL_GPIO_Init+0x334>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d025      	beq.n	8001512 <HAL_GPIO_Init+0x232>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a53      	ldr	r2, [pc, #332]	; (8001618 <HAL_GPIO_Init+0x338>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d01f      	beq.n	800150e <HAL_GPIO_Init+0x22e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a52      	ldr	r2, [pc, #328]	; (800161c <HAL_GPIO_Init+0x33c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d019      	beq.n	800150a <HAL_GPIO_Init+0x22a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a51      	ldr	r2, [pc, #324]	; (8001620 <HAL_GPIO_Init+0x340>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <HAL_GPIO_Init+0x226>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a50      	ldr	r2, [pc, #320]	; (8001624 <HAL_GPIO_Init+0x344>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d00d      	beq.n	8001502 <HAL_GPIO_Init+0x222>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4f      	ldr	r2, [pc, #316]	; (8001628 <HAL_GPIO_Init+0x348>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d007      	beq.n	80014fe <HAL_GPIO_Init+0x21e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4e      	ldr	r2, [pc, #312]	; (800162c <HAL_GPIO_Init+0x34c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_GPIO_Init+0x21a>
 80014f6:	2309      	movs	r3, #9
 80014f8:	e012      	b.n	8001520 <HAL_GPIO_Init+0x240>
 80014fa:	230a      	movs	r3, #10
 80014fc:	e010      	b.n	8001520 <HAL_GPIO_Init+0x240>
 80014fe:	2308      	movs	r3, #8
 8001500:	e00e      	b.n	8001520 <HAL_GPIO_Init+0x240>
 8001502:	2307      	movs	r3, #7
 8001504:	e00c      	b.n	8001520 <HAL_GPIO_Init+0x240>
 8001506:	2306      	movs	r3, #6
 8001508:	e00a      	b.n	8001520 <HAL_GPIO_Init+0x240>
 800150a:	2305      	movs	r3, #5
 800150c:	e008      	b.n	8001520 <HAL_GPIO_Init+0x240>
 800150e:	2304      	movs	r3, #4
 8001510:	e006      	b.n	8001520 <HAL_GPIO_Init+0x240>
 8001512:	2303      	movs	r3, #3
 8001514:	e004      	b.n	8001520 <HAL_GPIO_Init+0x240>
 8001516:	2302      	movs	r3, #2
 8001518:	e002      	b.n	8001520 <HAL_GPIO_Init+0x240>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <HAL_GPIO_Init+0x240>
 800151e:	2300      	movs	r3, #0
 8001520:	69fa      	ldr	r2, [r7, #28]
 8001522:	f002 0203 	and.w	r2, r2, #3
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	4093      	lsls	r3, r2
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001530:	4934      	ldr	r1, [pc, #208]	; (8001604 <HAL_GPIO_Init+0x324>)
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	3302      	adds	r3, #2
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800153e:	4b3c      	ldr	r3, [pc, #240]	; (8001630 <HAL_GPIO_Init+0x350>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <HAL_GPIO_Init+0x350>)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001568:	4b31      	ldr	r3, [pc, #196]	; (8001630 <HAL_GPIO_Init+0x350>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800158c:	4a28      	ldr	r2, [pc, #160]	; (8001630 <HAL_GPIO_Init+0x350>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001592:	4b27      	ldr	r3, [pc, #156]	; (8001630 <HAL_GPIO_Init+0x350>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015b6:	4a1e      	ldr	r2, [pc, #120]	; (8001630 <HAL_GPIO_Init+0x350>)
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <HAL_GPIO_Init+0x350>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015e0:	4a13      	ldr	r2, [pc, #76]	; (8001630 <HAL_GPIO_Init+0x350>)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3301      	adds	r3, #1
 80015ea:	61fb      	str	r3, [r7, #28]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	2b0f      	cmp	r3, #15
 80015f0:	f67f ae86 	bls.w	8001300 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80015f4:	bf00      	nop
 80015f6:	3724      	adds	r7, #36	; 0x24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	40023800 	.word	0x40023800
 8001604:	40013800 	.word	0x40013800
 8001608:	40020000 	.word	0x40020000
 800160c:	40020400 	.word	0x40020400
 8001610:	40020800 	.word	0x40020800
 8001614:	40020c00 	.word	0x40020c00
 8001618:	40021000 	.word	0x40021000
 800161c:	40021400 	.word	0x40021400
 8001620:	40021800 	.word	0x40021800
 8001624:	40021c00 	.word	0x40021c00
 8001628:	40022000 	.word	0x40022000
 800162c:	40022400 	.word	0x40022400
 8001630:	40013c00 	.word	0x40013c00

08001634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
 8001640:	4613      	mov	r3, r2
 8001642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001644:	787b      	ldrb	r3, [r7, #1]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001650:	e003      	b.n	800165a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001652:	887b      	ldrh	r3, [r7, #2]
 8001654:	041a      	lsls	r2, r3, #16
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	619a      	str	r2, [r3, #24]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001674:	695a      	ldr	r2, [r3, #20]
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	4013      	ands	r3, r2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d006      	beq.n	800168c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800167e:	4a05      	ldr	r2, [pc, #20]	; (8001694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	4618      	mov	r0, r3
 8001688:	f009 f866 	bl	800a758 <HAL_GPIO_EXTI_Callback>
  }
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40013c00 	.word	0x40013c00

08001698 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b089      	sub	sp, #36	; 0x24
 800169c:	af04      	add	r7, sp, #16
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	4608      	mov	r0, r1
 80016a2:	4611      	mov	r1, r2
 80016a4:	461a      	mov	r2, r3
 80016a6:	4603      	mov	r3, r0
 80016a8:	70fb      	strb	r3, [r7, #3]
 80016aa:	460b      	mov	r3, r1
 80016ac:	70bb      	strb	r3, [r7, #2]
 80016ae:	4613      	mov	r3, r2
 80016b0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d101      	bne.n	80016c0 <HAL_HCD_HC_Init+0x28>
 80016bc:	2302      	movs	r3, #2
 80016be:	e07f      	b.n	80017c0 <HAL_HCD_HC_Init+0x128>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80016c8:	78fa      	ldrb	r2, [r7, #3]
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	440b      	add	r3, r1
 80016d6:	333d      	adds	r3, #61	; 0x3d
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016dc:	78fa      	ldrb	r2, [r7, #3]
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	440b      	add	r3, r1
 80016ea:	3338      	adds	r3, #56	; 0x38
 80016ec:	787a      	ldrb	r2, [r7, #1]
 80016ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80016f0:	78fa      	ldrb	r2, [r7, #3]
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	440b      	add	r3, r1
 80016fe:	3340      	adds	r3, #64	; 0x40
 8001700:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001702:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001704:	78fa      	ldrb	r2, [r7, #3]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	440b      	add	r3, r1
 8001712:	3339      	adds	r3, #57	; 0x39
 8001714:	78fa      	ldrb	r2, [r7, #3]
 8001716:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001718:	78fa      	ldrb	r2, [r7, #3]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	440b      	add	r3, r1
 8001726:	333f      	adds	r3, #63	; 0x3f
 8001728:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800172c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800172e:	78fa      	ldrb	r2, [r7, #3]
 8001730:	78bb      	ldrb	r3, [r7, #2]
 8001732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001736:	b2d8      	uxtb	r0, r3
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	440b      	add	r3, r1
 8001744:	333a      	adds	r3, #58	; 0x3a
 8001746:	4602      	mov	r2, r0
 8001748:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800174a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800174e:	2b00      	cmp	r3, #0
 8001750:	da0a      	bge.n	8001768 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001752:	78fa      	ldrb	r2, [r7, #3]
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	333b      	adds	r3, #59	; 0x3b
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
 8001766:	e009      	b.n	800177c <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001768:	78fa      	ldrb	r2, [r7, #3]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	333b      	adds	r3, #59	; 0x3b
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800177c:	78fa      	ldrb	r2, [r7, #3]
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	440b      	add	r3, r1
 800178a:	333c      	adds	r3, #60	; 0x3c
 800178c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001790:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6818      	ldr	r0, [r3, #0]
 8001796:	787c      	ldrb	r4, [r7, #1]
 8001798:	78ba      	ldrb	r2, [r7, #2]
 800179a:	78f9      	ldrb	r1, [r7, #3]
 800179c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800179e:	9302      	str	r3, [sp, #8]
 80017a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	4623      	mov	r3, r4
 80017ae:	f006 f867 	bl	8007880 <USB_HC_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80017be:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd90      	pop	{r4, r7, pc}

080017c8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	4608      	mov	r0, r1
 80017d2:	4611      	mov	r1, r2
 80017d4:	461a      	mov	r2, r3
 80017d6:	4603      	mov	r3, r0
 80017d8:	70fb      	strb	r3, [r7, #3]
 80017da:	460b      	mov	r3, r1
 80017dc:	70bb      	strb	r3, [r7, #2]
 80017de:	4613      	mov	r3, r2
 80017e0:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80017e2:	78fa      	ldrb	r2, [r7, #3]
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	440b      	add	r3, r1
 80017f0:	333b      	adds	r3, #59	; 0x3b
 80017f2:	78ba      	ldrb	r2, [r7, #2]
 80017f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017f6:	78fa      	ldrb	r2, [r7, #3]
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	440b      	add	r3, r1
 8001804:	333f      	adds	r3, #63	; 0x3f
 8001806:	787a      	ldrb	r2, [r7, #1]
 8001808:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800180a:	7c3b      	ldrb	r3, [r7, #16]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10a      	bne.n	8001826 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001810:	78fa      	ldrb	r2, [r7, #3]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	440b      	add	r3, r1
 800181e:	3342      	adds	r3, #66	; 0x42
 8001820:	2203      	movs	r2, #3
 8001822:	701a      	strb	r2, [r3, #0]
 8001824:	e009      	b.n	800183a <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001826:	78fa      	ldrb	r2, [r7, #3]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	3342      	adds	r3, #66	; 0x42
 8001836:	2202      	movs	r2, #2
 8001838:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800183a:	787b      	ldrb	r3, [r7, #1]
 800183c:	2b03      	cmp	r3, #3
 800183e:	f200 80d6 	bhi.w	80019ee <HAL_HCD_HC_SubmitRequest+0x226>
 8001842:	a201      	add	r2, pc, #4	; (adr r2, 8001848 <HAL_HCD_HC_SubmitRequest+0x80>)
 8001844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001848:	08001859 	.word	0x08001859
 800184c:	080019d9 	.word	0x080019d9
 8001850:	080018c5 	.word	0x080018c5
 8001854:	0800194f 	.word	0x0800194f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001858:	7c3b      	ldrb	r3, [r7, #16]
 800185a:	2b01      	cmp	r3, #1
 800185c:	f040 80c9 	bne.w	80019f2 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001860:	78bb      	ldrb	r3, [r7, #2]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 80c5 	bne.w	80019f2 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001868:	8b3b      	ldrh	r3, [r7, #24]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800186e:	78fa      	ldrb	r2, [r7, #3]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	440b      	add	r3, r1
 800187c:	3351      	adds	r3, #81	; 0x51
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001882:	78fa      	ldrb	r2, [r7, #3]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	440b      	add	r3, r1
 8001890:	3351      	adds	r3, #81	; 0x51
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10a      	bne.n	80018ae <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001898:	78fa      	ldrb	r2, [r7, #3]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	440b      	add	r3, r1
 80018a6:	3342      	adds	r3, #66	; 0x42
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018ac:	e0a1      	b.n	80019f2 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ae:	78fa      	ldrb	r2, [r7, #3]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	440b      	add	r3, r1
 80018bc:	3342      	adds	r3, #66	; 0x42
 80018be:	2202      	movs	r2, #2
 80018c0:	701a      	strb	r2, [r3, #0]
      break;
 80018c2:	e096      	b.n	80019f2 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018c4:	78bb      	ldrb	r3, [r7, #2]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d120      	bne.n	800190c <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018ca:	78fa      	ldrb	r2, [r7, #3]
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	440b      	add	r3, r1
 80018d8:	3351      	adds	r3, #81	; 0x51
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10a      	bne.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018e0:	78fa      	ldrb	r2, [r7, #3]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	440b      	add	r3, r1
 80018ee:	3342      	adds	r3, #66	; 0x42
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018f4:	e07e      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018f6:	78fa      	ldrb	r2, [r7, #3]
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	440b      	add	r3, r1
 8001904:	3342      	adds	r3, #66	; 0x42
 8001906:	2202      	movs	r2, #2
 8001908:	701a      	strb	r2, [r3, #0]
      break;
 800190a:	e073      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800190c:	78fa      	ldrb	r2, [r7, #3]
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	440b      	add	r3, r1
 800191a:	3350      	adds	r3, #80	; 0x50
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10a      	bne.n	8001938 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001922:	78fa      	ldrb	r2, [r7, #3]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	440b      	add	r3, r1
 8001930:	3342      	adds	r3, #66	; 0x42
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
      break;
 8001936:	e05d      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001938:	78fa      	ldrb	r2, [r7, #3]
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	440b      	add	r3, r1
 8001946:	3342      	adds	r3, #66	; 0x42
 8001948:	2202      	movs	r2, #2
 800194a:	701a      	strb	r2, [r3, #0]
      break;
 800194c:	e052      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800194e:	78bb      	ldrb	r3, [r7, #2]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d120      	bne.n	8001996 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001954:	78fa      	ldrb	r2, [r7, #3]
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	440b      	add	r3, r1
 8001962:	3351      	adds	r3, #81	; 0x51
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10a      	bne.n	8001980 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800196a:	78fa      	ldrb	r2, [r7, #3]
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	440b      	add	r3, r1
 8001978:	3342      	adds	r3, #66	; 0x42
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800197e:	e039      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	440b      	add	r3, r1
 800198e:	3342      	adds	r3, #66	; 0x42
 8001990:	2202      	movs	r2, #2
 8001992:	701a      	strb	r2, [r3, #0]
      break;
 8001994:	e02e      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001996:	78fa      	ldrb	r2, [r7, #3]
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	440b      	add	r3, r1
 80019a4:	3350      	adds	r3, #80	; 0x50
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10a      	bne.n	80019c2 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019ac:	78fa      	ldrb	r2, [r7, #3]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	440b      	add	r3, r1
 80019ba:	3342      	adds	r3, #66	; 0x42
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
      break;
 80019c0:	e018      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019c2:	78fa      	ldrb	r2, [r7, #3]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	440b      	add	r3, r1
 80019d0:	3342      	adds	r3, #66	; 0x42
 80019d2:	2202      	movs	r2, #2
 80019d4:	701a      	strb	r2, [r3, #0]
      break;
 80019d6:	e00d      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	440b      	add	r3, r1
 80019e6:	3342      	adds	r3, #66	; 0x42
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
      break;
 80019ec:	e002      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80019ee:	bf00      	nop
 80019f0:	e000      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80019f2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	440b      	add	r3, r1
 8001a02:	3344      	adds	r3, #68	; 0x44
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a08:	78fa      	ldrb	r2, [r7, #3]
 8001a0a:	8b39      	ldrh	r1, [r7, #24]
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	4403      	add	r3, r0
 8001a18:	3348      	adds	r3, #72	; 0x48
 8001a1a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a1c:	78fa      	ldrb	r2, [r7, #3]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	440b      	add	r3, r1
 8001a2a:	335c      	adds	r3, #92	; 0x5c
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a30:	78fa      	ldrb	r2, [r7, #3]
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	440b      	add	r3, r1
 8001a3e:	334c      	adds	r3, #76	; 0x4c
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a44:	78fa      	ldrb	r2, [r7, #3]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	440b      	add	r3, r1
 8001a52:	3339      	adds	r3, #57	; 0x39
 8001a54:	78fa      	ldrb	r2, [r7, #3]
 8001a56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a58:	78fa      	ldrb	r2, [r7, #3]
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	440b      	add	r3, r1
 8001a66:	335d      	adds	r3, #93	; 0x5d
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	3338      	adds	r3, #56	; 0x38
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	18d1      	adds	r1, r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	461a      	mov	r2, r3
 8001a88:	f006 f804 	bl	8007a94 <USB_HC_StartXfer>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop

08001a98 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f005 fe23 	bl	80076fa <USB_GetMode>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	f040 80f1 	bne.w	8001c9e <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f005 fe07 	bl	80076d4 <USB_ReadInterrupts>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80e7 	beq.w	8001c9c <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f005 fdfe 	bl	80076d4 <USB_ReadInterrupts>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ade:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ae2:	d104      	bne.n	8001aee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001aec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f005 fdee 	bl	80076d4 <USB_ReadInterrupts>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b02:	d104      	bne.n	8001b0e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f005 fdde 	bl	80076d4 <USB_ReadInterrupts>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b22:	d104      	bne.n	8001b2e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f005 fdce 	bl	80076d4 <USB_ReadInterrupts>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d103      	bne.n	8001b4a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2202      	movs	r2, #2
 8001b48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f005 fdc0 	bl	80076d4 <USB_ReadInterrupts>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b5e:	d117      	bne.n	8001b90 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001b6e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001b72:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f009 fde3 	bl	800b740 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2101      	movs	r1, #1
 8001b80:	4618      	mov	r0, r3
 8001b82:	f005 fdc8 	bl	8007716 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f005 fd9d 	bl	80076d4 <USB_ReadInterrupts>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba4:	d102      	bne.n	8001bac <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f001 f8a6 	bl	8002cf8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f005 fd8f 	bl	80076d4 <USB_ReadInterrupts>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d106      	bne.n	8001bce <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f009 fda1 	bl	800b708 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2208      	movs	r2, #8
 8001bcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f005 fd7e 	bl	80076d4 <USB_ReadInterrupts>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001be2:	d138      	bne.n	8001c56 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f006 f897 	bl	8007d1c <USB_HC_ReadInterrupt>
 8001bee:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	e025      	b.n	8001c42 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 030f 	and.w	r3, r3, #15
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d018      	beq.n	8001c3c <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	015a      	lsls	r2, r3, #5
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4413      	add	r3, r2
 8001c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c20:	d106      	bne.n	8001c30 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4619      	mov	r1, r3
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f8ac 	bl	8001d86 <HCD_HC_IN_IRQHandler>
 8001c2e:	e005      	b.n	8001c3c <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	4619      	mov	r1, r3
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 fc3c 	bl	80024b4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d3d4      	bcc.n	8001bf6 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f005 fd3a 	bl	80076d4 <USB_ReadInterrupts>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d101      	bne.n	8001c6e <HAL_HCD_IRQHandler+0x1d6>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_HCD_IRQHandler+0x1d8>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d014      	beq.n	8001c9e <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699a      	ldr	r2, [r3, #24]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0210 	bic.w	r2, r2, #16
 8001c82:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 ff8b 	bl	8002ba0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699a      	ldr	r2, [r3, #24]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0210 	orr.w	r2, r2, #16
 8001c98:	619a      	str	r2, [r3, #24]
 8001c9a:	e000      	b.n	8001c9e <HAL_HCD_IRQHandler+0x206>
      return;
 8001c9c:	bf00      	nop
    }
  }
}
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_HCD_Start+0x16>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e013      	b.n	8001ce2 <HAL_HCD_Start+0x3e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f005 fc3c 	bl	8007544 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f005 fd83 	bl	80077de <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_HCD_Stop+0x16>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e00d      	b.n	8001d1c <HAL_HCD_Stop+0x32>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f006 f951 	bl	8007fb4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f005 fd2a 	bl	800778a <USB_ResetPort>
 8001d36:	4603      	mov	r3, r0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d4c:	78fa      	ldrb	r2, [r7, #3]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	440b      	add	r3, r1
 8001d5a:	335c      	adds	r3, #92	; 0x5c
 8001d5c:	781b      	ldrb	r3, [r3, #0]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f005 fd6a 	bl	8007850 <USB_GetHostSpeed>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	015a      	lsls	r2, r3, #5
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4413      	add	r3, r2
 8001da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d119      	bne.n	8001dea <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	015a      	lsls	r2, r3, #5
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	015a      	lsls	r2, r3, #5
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4413      	add	r3, r2
 8001dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	0151      	lsls	r1, r2, #5
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	440a      	add	r2, r1
 8001dde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001de2:	f043 0302 	orr.w	r3, r3, #2
 8001de6:	60d3      	str	r3, [r2, #12]
 8001de8:	e095      	b.n	8001f16 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 0320 	and.w	r3, r3, #32
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	d109      	bne.n	8001e14 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	015a      	lsls	r2, r3, #5
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4413      	add	r3, r2
 8001e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	2320      	movs	r3, #32
 8001e10:	6093      	str	r3, [r2, #8]
 8001e12:	e080      	b.n	8001f16 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d134      	bne.n	8001e94 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	015a      	lsls	r2, r3, #5
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4413      	add	r3, r2
 8001e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	0151      	lsls	r1, r2, #5
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	440a      	add	r2, r1
 8001e40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	440b      	add	r3, r1
 8001e58:	335d      	adds	r3, #93	; 0x5d
 8001e5a:	2205      	movs	r2, #5
 8001e5c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	015a      	lsls	r2, r3, #5
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4413      	add	r3, r2
 8001e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	2310      	movs	r3, #16
 8001e6e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	015a      	lsls	r2, r3, #5
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4413      	add	r3, r2
 8001e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	2308      	movs	r3, #8
 8001e80:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f005 ff56 	bl	8007d3e <USB_HC_Halt>
 8001e92:	e040      	b.n	8001f16 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	015a      	lsls	r2, r3, #5
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eaa:	d134      	bne.n	8001f16 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	0151      	lsls	r1, r2, #5
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	440a      	add	r2, r1
 8001ec2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ec6:	f043 0302 	orr.w	r3, r3, #2
 8001eca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f005 ff31 	bl	8007d3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	015a      	lsls	r2, r3, #5
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee8:	461a      	mov	r2, r3
 8001eea:	2310      	movs	r3, #16
 8001eec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	440b      	add	r3, r1
 8001efc:	335d      	adds	r3, #93	; 0x5d
 8001efe:	2208      	movs	r2, #8
 8001f00:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	015a      	lsls	r2, r3, #5
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4413      	add	r3, r2
 8001f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f14:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	015a      	lsls	r2, r3, #5
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f2c:	d122      	bne.n	8001f74 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	0151      	lsls	r1, r2, #5
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	440a      	add	r2, r1
 8001f44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f48:	f043 0302 	orr.w	r3, r3, #2
 8001f4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f005 fef0 	bl	8007d3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	015a      	lsls	r2, r3, #5
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f70:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f72:	e29b      	b.n	80024ac <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	f040 80c1 	bne.w	800210e <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01b      	beq.n	8001fcc <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3348      	adds	r3, #72	; 0x48
 8001fa4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	0159      	lsls	r1, r3, #5
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	440b      	add	r3, r1
 8001fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001fb8:	1ad1      	subs	r1, r2, r3
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4403      	add	r3, r0
 8001fc8:	334c      	adds	r3, #76	; 0x4c
 8001fca:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	440b      	add	r3, r1
 8001fda:	335d      	adds	r3, #93	; 0x5d
 8001fdc:	2201      	movs	r2, #1
 8001fde:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	440b      	add	r3, r1
 8001fee:	3358      	adds	r3, #88	; 0x58
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002000:	461a      	mov	r2, r3
 8002002:	2301      	movs	r3, #1
 8002004:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	440b      	add	r3, r1
 8002014:	333f      	adds	r3, #63	; 0x3f
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00a      	beq.n	8002032 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	440b      	add	r3, r1
 800202a:	333f      	adds	r3, #63	; 0x3f
 800202c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800202e:	2b02      	cmp	r3, #2
 8002030:	d121      	bne.n	8002076 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4413      	add	r3, r2
 800203a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	0151      	lsls	r1, r2, #5
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	440a      	add	r2, r1
 8002048:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800204c:	f043 0302 	orr.w	r3, r3, #2
 8002050:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f005 fe6e 	bl	8007d3e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4413      	add	r3, r2
 800206a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206e:	461a      	mov	r2, r3
 8002070:	2310      	movs	r3, #16
 8002072:	6093      	str	r3, [r2, #8]
 8002074:	e034      	b.n	80020e0 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	333f      	adds	r3, #63	; 0x3f
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b03      	cmp	r3, #3
 800208a:	d129      	bne.n	80020e0 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	0151      	lsls	r1, r2, #5
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	440a      	add	r2, r1
 80020a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020aa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	440b      	add	r3, r1
 80020ba:	335c      	adds	r3, #92	; 0x5c
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	b2d8      	uxtb	r0, r3
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	440b      	add	r3, r1
 80020d2:	335c      	adds	r3, #92	; 0x5c
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	4601      	mov	r1, r0
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f009 fb3e 	bl	800b75c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	440b      	add	r3, r1
 80020ee:	3350      	adds	r3, #80	; 0x50
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	f083 0301 	eor.w	r3, r3, #1
 80020f6:	b2d8      	uxtb	r0, r3
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	440b      	add	r3, r1
 8002106:	3350      	adds	r3, #80	; 0x50
 8002108:	4602      	mov	r2, r0
 800210a:	701a      	strb	r2, [r3, #0]
}
 800210c:	e1ce      	b.n	80024ac <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	015a      	lsls	r2, r3, #5
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4413      	add	r3, r2
 8002116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b02      	cmp	r3, #2
 8002122:	f040 80f1 	bne.w	8002308 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	0151      	lsls	r1, r2, #5
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	440a      	add	r2, r1
 800213c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002140:	f023 0302 	bic.w	r3, r3, #2
 8002144:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	440b      	add	r3, r1
 8002154:	335d      	adds	r3, #93	; 0x5d
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d10a      	bne.n	8002172 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	440b      	add	r3, r1
 800216a:	335c      	adds	r3, #92	; 0x5c
 800216c:	2201      	movs	r2, #1
 800216e:	701a      	strb	r2, [r3, #0]
 8002170:	e0b0      	b.n	80022d4 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	440b      	add	r3, r1
 8002180:	335d      	adds	r3, #93	; 0x5d
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b05      	cmp	r3, #5
 8002186:	d10a      	bne.n	800219e <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	440b      	add	r3, r1
 8002196:	335c      	adds	r3, #92	; 0x5c
 8002198:	2205      	movs	r2, #5
 800219a:	701a      	strb	r2, [r3, #0]
 800219c:	e09a      	b.n	80022d4 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	440b      	add	r3, r1
 80021ac:	335d      	adds	r3, #93	; 0x5d
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b06      	cmp	r3, #6
 80021b2:	d00a      	beq.n	80021ca <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	440b      	add	r3, r1
 80021c2:	335d      	adds	r3, #93	; 0x5d
 80021c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d156      	bne.n	8002278 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	440b      	add	r3, r1
 80021d8:	3358      	adds	r3, #88	; 0x58
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	1c59      	adds	r1, r3, #1
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4403      	add	r3, r0
 80021ec:	3358      	adds	r3, #88	; 0x58
 80021ee:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	440b      	add	r3, r1
 80021fe:	3358      	adds	r3, #88	; 0x58
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b03      	cmp	r3, #3
 8002204:	d914      	bls.n	8002230 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	440b      	add	r3, r1
 8002214:	3358      	adds	r3, #88	; 0x58
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	440b      	add	r3, r1
 8002228:	335c      	adds	r3, #92	; 0x5c
 800222a:	2204      	movs	r2, #4
 800222c:	701a      	strb	r2, [r3, #0]
 800222e:	e009      	b.n	8002244 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	440b      	add	r3, r1
 800223e:	335c      	adds	r3, #92	; 0x5c
 8002240:	2202      	movs	r2, #2
 8002242:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	015a      	lsls	r2, r3, #5
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4413      	add	r3, r2
 800224c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800225a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002262:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	015a      	lsls	r2, r3, #5
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4413      	add	r3, r2
 800226c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002270:	461a      	mov	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e02d      	b.n	80022d4 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	440b      	add	r3, r1
 8002286:	335d      	adds	r3, #93	; 0x5d
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b03      	cmp	r3, #3
 800228c:	d122      	bne.n	80022d4 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	335c      	adds	r3, #92	; 0x5c
 800229e:	2202      	movs	r2, #2
 80022a0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022b8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022c0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ce:	461a      	mov	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	015a      	lsls	r2, r3, #5
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4413      	add	r3, r2
 80022dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e0:	461a      	mov	r2, r3
 80022e2:	2302      	movs	r3, #2
 80022e4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	b2d8      	uxtb	r0, r3
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	440b      	add	r3, r1
 80022f8:	335c      	adds	r3, #92	; 0x5c
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4601      	mov	r1, r0
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f009 fa2b 	bl	800b75c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002306:	e0d1      	b.n	80024ac <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4413      	add	r3, r2
 8002310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231a:	2b80      	cmp	r3, #128	; 0x80
 800231c:	d13e      	bne.n	800239c <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4413      	add	r3, r2
 8002326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	0151      	lsls	r1, r2, #5
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	440a      	add	r2, r1
 8002334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002338:	f043 0302 	orr.w	r3, r3, #2
 800233c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	440b      	add	r3, r1
 800234c:	3358      	adds	r3, #88	; 0x58
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	1c59      	adds	r1, r3, #1
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4403      	add	r3, r0
 8002360:	3358      	adds	r3, #88	; 0x58
 8002362:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	440b      	add	r3, r1
 8002372:	335d      	adds	r3, #93	; 0x5d
 8002374:	2206      	movs	r2, #6
 8002376:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f005 fcdb 	bl	8007d3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4413      	add	r3, r2
 8002390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002394:	461a      	mov	r2, r3
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	6093      	str	r3, [r2, #8]
}
 800239a:	e087      	b.n	80024ac <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b10      	cmp	r3, #16
 80023b0:	d17c      	bne.n	80024ac <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	440b      	add	r3, r1
 80023c0:	333f      	adds	r3, #63	; 0x3f
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d122      	bne.n	800240e <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	440b      	add	r3, r1
 80023d6:	3358      	adds	r3, #88	; 0x58
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	0151      	lsls	r1, r2, #5
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	440a      	add	r2, r1
 80023f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023f6:	f043 0302 	orr.w	r3, r3, #2
 80023fa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	4611      	mov	r1, r2
 8002406:	4618      	mov	r0, r3
 8002408:	f005 fc99 	bl	8007d3e <USB_HC_Halt>
 800240c:	e045      	b.n	800249a <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	440b      	add	r3, r1
 800241c:	333f      	adds	r3, #63	; 0x3f
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00a      	beq.n	800243a <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	440b      	add	r3, r1
 8002432:	333f      	adds	r3, #63	; 0x3f
 8002434:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002436:	2b02      	cmp	r3, #2
 8002438:	d12f      	bne.n	800249a <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	440b      	add	r3, r1
 8002448:	3358      	adds	r3, #88	; 0x58
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d121      	bne.n	800249a <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	440b      	add	r3, r1
 8002464:	335d      	adds	r3, #93	; 0x5d
 8002466:	2203      	movs	r2, #3
 8002468:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	015a      	lsls	r2, r3, #5
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4413      	add	r3, r2
 8002472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	0151      	lsls	r1, r2, #5
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	440a      	add	r2, r1
 8002480:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002484:	f043 0302 	orr.w	r3, r3, #2
 8002488:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	4611      	mov	r1, r2
 8002494:	4618      	mov	r0, r3
 8002496:	f005 fc52 	bl	8007d3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a6:	461a      	mov	r2, r3
 80024a8:	2310      	movs	r3, #16
 80024aa:	6093      	str	r3, [r2, #8]
}
 80024ac:	bf00      	nop
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d119      	bne.n	8002518 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f0:	461a      	mov	r2, r3
 80024f2:	2304      	movs	r3, #4
 80024f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	015a      	lsls	r2, r3, #5
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	0151      	lsls	r1, r2, #5
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	440a      	add	r2, r1
 800250c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002510:	f043 0302 	orr.w	r3, r3, #2
 8002514:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002516:	e33e      	b.n	8002b96 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4413      	add	r3, r2
 8002520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	2b20      	cmp	r3, #32
 800252c:	d141      	bne.n	80025b2 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4413      	add	r3, r2
 8002536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253a:	461a      	mov	r2, r3
 800253c:	2320      	movs	r3, #32
 800253e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	333d      	adds	r3, #61	; 0x3d
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b01      	cmp	r3, #1
 8002554:	f040 831f 	bne.w	8002b96 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	440b      	add	r3, r1
 8002566:	333d      	adds	r3, #61	; 0x3d
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	440b      	add	r3, r1
 800257a:	335c      	adds	r3, #92	; 0x5c
 800257c:	2202      	movs	r2, #2
 800257e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4413      	add	r3, r2
 8002588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	0151      	lsls	r1, r2, #5
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	440a      	add	r2, r1
 8002596:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800259a:	f043 0302 	orr.w	r3, r3, #2
 800259e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f005 fbc7 	bl	8007d3e <USB_HC_Halt>
}
 80025b0:	e2f1      	b.n	8002b96 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c4:	2b40      	cmp	r3, #64	; 0x40
 80025c6:	d13f      	bne.n	8002648 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	440b      	add	r3, r1
 80025d6:	335d      	adds	r3, #93	; 0x5d
 80025d8:	2204      	movs	r2, #4
 80025da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	440b      	add	r3, r1
 80025ea:	333d      	adds	r3, #61	; 0x3d
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	440b      	add	r3, r1
 80025fe:	3358      	adds	r3, #88	; 0x58
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	0151      	lsls	r1, r2, #5
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	440a      	add	r2, r1
 800261a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800261e:	f043 0302 	orr.w	r3, r3, #2
 8002622:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	4611      	mov	r1, r2
 800262e:	4618      	mov	r0, r3
 8002630:	f005 fb85 	bl	8007d3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002640:	461a      	mov	r2, r3
 8002642:	2340      	movs	r3, #64	; 0x40
 8002644:	6093      	str	r3, [r2, #8]
}
 8002646:	e2a6      	b.n	8002b96 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4413      	add	r3, r2
 8002650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800265e:	d122      	bne.n	80026a6 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4413      	add	r3, r2
 8002668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	0151      	lsls	r1, r2, #5
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	440a      	add	r2, r1
 8002676:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800267a:	f043 0302 	orr.w	r3, r3, #2
 800267e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f005 fb57 	bl	8007d3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4413      	add	r3, r2
 8002698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269c:	461a      	mov	r2, r3
 800269e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026a2:	6093      	str	r3, [r2, #8]
}
 80026a4:	e277      	b.n	8002b96 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d135      	bne.n	8002728 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	440b      	add	r3, r1
 80026ca:	3358      	adds	r3, #88	; 0x58
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	0151      	lsls	r1, r2, #5
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	440a      	add	r2, r1
 80026e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026ea:	f043 0302 	orr.w	r3, r3, #2
 80026ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	4611      	mov	r1, r2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f005 fb1f 	bl	8007d3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	461a      	mov	r2, r3
 800270e:	2301      	movs	r3, #1
 8002710:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	440b      	add	r3, r1
 8002720:	335d      	adds	r3, #93	; 0x5d
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]
}
 8002726:	e236      	b.n	8002b96 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4413      	add	r3, r2
 8002730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b08      	cmp	r3, #8
 800273c:	d12b      	bne.n	8002796 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4413      	add	r3, r2
 8002746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274a:	461a      	mov	r2, r3
 800274c:	2308      	movs	r3, #8
 800274e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	0151      	lsls	r1, r2, #5
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	440a      	add	r2, r1
 8002766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800276a:	f043 0302 	orr.w	r3, r3, #2
 800276e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f005 fadf 	bl	8007d3e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	440b      	add	r3, r1
 800278e:	335d      	adds	r3, #93	; 0x5d
 8002790:	2205      	movs	r2, #5
 8002792:	701a      	strb	r2, [r3, #0]
}
 8002794:	e1ff      	b.n	8002b96 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4413      	add	r3, r2
 800279e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	2b10      	cmp	r3, #16
 80027aa:	d155      	bne.n	8002858 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	440b      	add	r3, r1
 80027ba:	3358      	adds	r3, #88	; 0x58
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	440b      	add	r3, r1
 80027ce:	335d      	adds	r3, #93	; 0x5d
 80027d0:	2203      	movs	r2, #3
 80027d2:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	440b      	add	r3, r1
 80027e2:	333d      	adds	r3, #61	; 0x3d
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d114      	bne.n	8002814 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	440b      	add	r3, r1
 80027f8:	333c      	adds	r3, #60	; 0x3c
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d109      	bne.n	8002814 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	440b      	add	r3, r1
 800280e:	333d      	adds	r3, #61	; 0x3d
 8002810:	2201      	movs	r2, #1
 8002812:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4413      	add	r3, r2
 800281c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	0151      	lsls	r1, r2, #5
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	440a      	add	r2, r1
 800282a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800282e:	f043 0302 	orr.w	r3, r3, #2
 8002832:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	4611      	mov	r1, r2
 800283e:	4618      	mov	r0, r3
 8002840:	f005 fa7d 	bl	8007d3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4413      	add	r3, r2
 800284c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002850:	461a      	mov	r2, r3
 8002852:	2310      	movs	r3, #16
 8002854:	6093      	str	r3, [r2, #8]
}
 8002856:	e19e      	b.n	8002b96 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4413      	add	r3, r2
 8002860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286a:	2b80      	cmp	r3, #128	; 0x80
 800286c:	d12b      	bne.n	80028c6 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4413      	add	r3, r2
 8002876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	0151      	lsls	r1, r2, #5
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	440a      	add	r2, r1
 8002884:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	4611      	mov	r1, r2
 8002898:	4618      	mov	r0, r3
 800289a:	f005 fa50 	bl	8007d3e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	440b      	add	r3, r1
 80028ac:	335d      	adds	r3, #93	; 0x5d
 80028ae:	2206      	movs	r2, #6
 80028b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	015a      	lsls	r2, r3, #5
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028be:	461a      	mov	r2, r3
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	6093      	str	r3, [r2, #8]
}
 80028c4:	e167      	b.n	8002b96 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028dc:	d135      	bne.n	800294a <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	0151      	lsls	r1, r2, #5
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	440a      	add	r2, r1
 80028f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028f8:	f043 0302 	orr.w	r3, r3, #2
 80028fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	4611      	mov	r1, r2
 8002908:	4618      	mov	r0, r3
 800290a:	f005 fa18 	bl	8007d3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291a:	461a      	mov	r2, r3
 800291c:	2310      	movs	r3, #16
 800291e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	461a      	mov	r2, r3
 800292e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002932:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	440b      	add	r3, r1
 8002942:	335d      	adds	r3, #93	; 0x5d
 8002944:	2208      	movs	r2, #8
 8002946:	701a      	strb	r2, [r3, #0]
}
 8002948:	e125      	b.n	8002b96 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b02      	cmp	r3, #2
 800295e:	f040 811a 	bne.w	8002b96 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	015a      	lsls	r2, r3, #5
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	4413      	add	r3, r2
 800296a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	0151      	lsls	r1, r2, #5
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	440a      	add	r2, r1
 8002978:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800297c:	f023 0302 	bic.w	r3, r3, #2
 8002980:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	440b      	add	r3, r1
 8002990:	335d      	adds	r3, #93	; 0x5d
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d137      	bne.n	8002a08 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	335c      	adds	r3, #92	; 0x5c
 80029a8:	2201      	movs	r2, #1
 80029aa:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	440b      	add	r3, r1
 80029ba:	333f      	adds	r3, #63	; 0x3f
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d00b      	beq.n	80029da <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	440b      	add	r3, r1
 80029d0:	333f      	adds	r3, #63	; 0x3f
 80029d2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	f040 80c5 	bne.w	8002b64 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	440b      	add	r3, r1
 80029e8:	3351      	adds	r3, #81	; 0x51
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	f083 0301 	eor.w	r3, r3, #1
 80029f0:	b2d8      	uxtb	r0, r3
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	440b      	add	r3, r1
 8002a00:	3351      	adds	r3, #81	; 0x51
 8002a02:	4602      	mov	r2, r0
 8002a04:	701a      	strb	r2, [r3, #0]
 8002a06:	e0ad      	b.n	8002b64 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	440b      	add	r3, r1
 8002a16:	335d      	adds	r3, #93	; 0x5d
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d10a      	bne.n	8002a34 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	335c      	adds	r3, #92	; 0x5c
 8002a2e:	2202      	movs	r2, #2
 8002a30:	701a      	strb	r2, [r3, #0]
 8002a32:	e097      	b.n	8002b64 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	440b      	add	r3, r1
 8002a42:	335d      	adds	r3, #93	; 0x5d
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d10a      	bne.n	8002a60 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	440b      	add	r3, r1
 8002a58:	335c      	adds	r3, #92	; 0x5c
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	701a      	strb	r2, [r3, #0]
 8002a5e:	e081      	b.n	8002b64 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	440b      	add	r3, r1
 8002a6e:	335d      	adds	r3, #93	; 0x5d
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	d10a      	bne.n	8002a8c <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	440b      	add	r3, r1
 8002a84:	335c      	adds	r3, #92	; 0x5c
 8002a86:	2205      	movs	r2, #5
 8002a88:	701a      	strb	r2, [r3, #0]
 8002a8a:	e06b      	b.n	8002b64 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	440b      	add	r3, r1
 8002a9a:	335d      	adds	r3, #93	; 0x5d
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b06      	cmp	r3, #6
 8002aa0:	d00a      	beq.n	8002ab8 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	440b      	add	r3, r1
 8002ab0:	335d      	adds	r3, #93	; 0x5d
 8002ab2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d155      	bne.n	8002b64 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	440b      	add	r3, r1
 8002ac6:	3358      	adds	r3, #88	; 0x58
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	1c59      	adds	r1, r3, #1
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4403      	add	r3, r0
 8002ada:	3358      	adds	r3, #88	; 0x58
 8002adc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	440b      	add	r3, r1
 8002aec:	3358      	adds	r3, #88	; 0x58
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d914      	bls.n	8002b1e <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	440b      	add	r3, r1
 8002b02:	3358      	adds	r3, #88	; 0x58
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	440b      	add	r3, r1
 8002b16:	335c      	adds	r3, #92	; 0x5c
 8002b18:	2204      	movs	r2, #4
 8002b1a:	701a      	strb	r2, [r3, #0]
 8002b1c:	e009      	b.n	8002b32 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	440b      	add	r3, r1
 8002b2c:	335c      	adds	r3, #92	; 0x5c
 8002b2e:	2202      	movs	r2, #2
 8002b30:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	015a      	lsls	r2, r3, #5
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b48:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b50:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b70:	461a      	mov	r2, r3
 8002b72:	2302      	movs	r3, #2
 8002b74:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	b2d8      	uxtb	r0, r3
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	440b      	add	r3, r1
 8002b88:	335c      	adds	r3, #92	; 0x5c
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4601      	mov	r1, r0
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f008 fde3 	bl	800b75c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b96:	bf00      	nop
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	0c5b      	lsrs	r3, r3, #17
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	091b      	lsrs	r3, r3, #4
 8002bd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bd4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d003      	beq.n	8002be4 <HCD_RXQLVL_IRQHandler+0x44>
 8002bdc:	2b05      	cmp	r3, #5
 8002bde:	f000 8082 	beq.w	8002ce6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002be2:	e083      	b.n	8002cec <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d07f      	beq.n	8002cea <HCD_RXQLVL_IRQHandler+0x14a>
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	3344      	adds	r3, #68	; 0x44
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d074      	beq.n	8002cea <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	440b      	add	r3, r1
 8002c12:	3344      	adds	r3, #68	; 0x44
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	b292      	uxth	r2, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f004 fd31 	bl	8007682 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	3344      	adds	r3, #68	; 0x44
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	18d1      	adds	r1, r2, r3
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	4403      	add	r3, r0
 8002c44:	3344      	adds	r3, #68	; 0x44
 8002c46:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	440b      	add	r3, r1
 8002c56:	334c      	adds	r3, #76	; 0x4c
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	18d1      	adds	r1, r2, r3
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4403      	add	r3, r0
 8002c6c:	334c      	adds	r3, #76	; 0x4c
 8002c6e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7c:	691a      	ldr	r2, [r3, #16]
 8002c7e:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <HCD_RXQLVL_IRQHandler+0x154>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d031      	beq.n	8002cea <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c9c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ca4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	440b      	add	r3, r1
 8002cc6:	3350      	adds	r3, #80	; 0x50
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	f083 0301 	eor.w	r3, r3, #1
 8002cce:	b2d8      	uxtb	r0, r3
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	440b      	add	r3, r1
 8002cde:	3350      	adds	r3, #80	; 0x50
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	701a      	strb	r2, [r3, #0]
      break;
 8002ce4:	e001      	b.n	8002cea <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002ce6:	bf00      	nop
 8002ce8:	e000      	b.n	8002cec <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002cea:	bf00      	nop
  }
}
 8002cec:	bf00      	nop
 8002cee:	3728      	adds	r7, #40	; 0x28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	1ff80000 	.word	0x1ff80000

08002cf8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d24:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d113      	bne.n	8002d58 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d10a      	bne.n	8002d50 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699a      	ldr	r2, [r3, #24]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002d48:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f008 fcea 	bl	800b724 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f043 0302 	orr.w	r3, r3, #2
 8002d56:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d147      	bne.n	8002df2 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f043 0308 	orr.w	r3, r3, #8
 8002d68:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d129      	bne.n	8002dc8 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d113      	bne.n	8002da4 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d86:	d106      	bne.n	8002d96 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2102      	movs	r1, #2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f004 fcc1 	bl	8007716 <USB_InitFSLSPClkSel>
 8002d94:	e011      	b.n	8002dba <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f004 fcba 	bl	8007716 <USB_InitFSLSPClkSel>
 8002da2:	e00a      	b.n	8002dba <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d106      	bne.n	8002dba <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002db2:	461a      	mov	r2, r3
 8002db4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002db8:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f008 fcdc 	bl	800b778 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f008 fcaf 	bl	800b724 <HAL_HCD_Connect_Callback>
 8002dc6:	e014      	b.n	8002df2 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f008 fce3 	bl	800b794 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002ddc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002de0:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699a      	ldr	r2, [r3, #24]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002df0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	d103      	bne.n	8002e04 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f043 0320 	orr.w	r3, r3, #32
 8002e02:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	6013      	str	r3, [r2, #0]
}
 8002e10:	bf00      	nop
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e07f      	b.n	8002f2a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d106      	bne.n	8002e44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f007 fe20 	bl	800aa84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2224      	movs	r2, #36	; 0x24
 8002e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0201 	bic.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d107      	bne.n	8002e92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	e006      	b.n	8002ea0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d104      	bne.n	8002eb2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eb0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_I2C_Init+0x11c>)
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ed0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691a      	ldr	r2, [r3, #16]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	ea42 0103 	orr.w	r1, r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	021a      	lsls	r2, r3, #8
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69d9      	ldr	r1, [r3, #28]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1a      	ldr	r2, [r3, #32]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	02008000 	.word	0x02008000

08002f38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	d138      	bne.n	8002fc0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e032      	b.n	8002fc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2224      	movs	r2, #36	; 0x24
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0201 	bic.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6819      	ldr	r1, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	e000      	b.n	8002fc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fc0:	2302      	movs	r3, #2
  }
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b085      	sub	sp, #20
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d139      	bne.n	8003058 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e033      	b.n	800305a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2224      	movs	r2, #36	; 0x24
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0201 	bic.w	r2, r2, #1
 8003010:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003020:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	021b      	lsls	r3, r3, #8
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	e000      	b.n	800305a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003058:	2302      	movs	r3, #2
  }
}
 800305a:	4618      	mov	r0, r3
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
	...

08003068 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e0bf      	b.n	80031fa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f007 fd70 	bl	800ab74 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80030aa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6999      	ldr	r1, [r3, #24]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80030c0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6899      	ldr	r1, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	4b4a      	ldr	r3, [pc, #296]	; (8003204 <HAL_LTDC_Init+0x19c>)
 80030dc:	400b      	ands	r3, r1
 80030de:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	041b      	lsls	r3, r3, #16
 80030e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6899      	ldr	r1, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699a      	ldr	r2, [r3, #24]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68d9      	ldr	r1, [r3, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4b3e      	ldr	r3, [pc, #248]	; (8003204 <HAL_LTDC_Init+0x19c>)
 800310a:	400b      	ands	r3, r1
 800310c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	041b      	lsls	r3, r3, #16
 8003114:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68d9      	ldr	r1, [r3, #12]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1a      	ldr	r2, [r3, #32]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6919      	ldr	r1, [r3, #16]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	4b33      	ldr	r3, [pc, #204]	; (8003204 <HAL_LTDC_Init+0x19c>)
 8003138:	400b      	ands	r3, r1
 800313a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	041b      	lsls	r3, r3, #16
 8003142:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6919      	ldr	r1, [r3, #16]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6959      	ldr	r1, [r3, #20]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4b27      	ldr	r3, [pc, #156]	; (8003204 <HAL_LTDC_Init+0x19c>)
 8003166:	400b      	ands	r3, r1
 8003168:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	041b      	lsls	r3, r3, #16
 8003170:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6959      	ldr	r1, [r3, #20]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800318e:	021b      	lsls	r3, r3, #8
 8003190:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003198:	041b      	lsls	r3, r3, #16
 800319a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80031aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0206 	orr.w	r2, r2, #6
 80031d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	f000f800 	.word	0xf000f800

08003208 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 0304 	and.w	r3, r3, #4
 8003226:	2b00      	cmp	r3, #0
 8003228:	d023      	beq.n	8003272 <HAL_LTDC_IRQHandler+0x6a>
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d01e      	beq.n	8003272 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0204 	bic.w	r2, r2, #4
 8003242:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2204      	movs	r2, #4
 800324a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003252:	f043 0201 	orr.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2204      	movs	r2, #4
 8003260:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f86f 	bl	8003350 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d023      	beq.n	80032c4 <HAL_LTDC_IRQHandler+0xbc>
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d01e      	beq.n	80032c4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0202 	bic.w	r2, r2, #2
 8003294:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2202      	movs	r2, #2
 800329c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032a4:	f043 0202 	orr.w	r2, r3, #2
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2204      	movs	r2, #4
 80032b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f846 	bl	8003350 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d01b      	beq.n	8003306 <HAL_LTDC_IRQHandler+0xfe>
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d016      	beq.n	8003306 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0201 	bic.w	r2, r2, #1
 80032e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2201      	movs	r2, #1
 80032ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f82f 	bl	8003364 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d01b      	beq.n	8003348 <HAL_LTDC_IRQHandler+0x140>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d016      	beq.n	8003348 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0208 	bic.w	r2, r2, #8
 8003328:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2208      	movs	r2, #8
 8003330:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f818 	bl	8003378 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003348:	bf00      	nop
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800338c:	b5b0      	push	{r4, r5, r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_LTDC_ConfigLayer+0x1a>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e02c      	b.n	8003400 <HAL_LTDC_ConfigLayer+0x74>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2202      	movs	r2, #2
 80033b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2134      	movs	r1, #52	; 0x34
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	4614      	mov	r4, r2
 80033ca:	461d      	mov	r5, r3
 80033cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033d8:	682b      	ldr	r3, [r5, #0]
 80033da:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 f811 	bl	8003408 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2201      	movs	r2, #1
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bdb0      	pop	{r4, r5, r7, pc}

08003408 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	; 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	0c1b      	lsrs	r3, r3, #16
 8003420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003424:	4413      	add	r3, r2
 8003426:	041b      	lsls	r3, r3, #16
 8003428:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	01db      	lsls	r3, r3, #7
 8003434:	4413      	add	r3, r2
 8003436:	3384      	adds	r3, #132	; 0x84
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	4611      	mov	r1, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	01d2      	lsls	r2, r2, #7
 8003444:	440a      	add	r2, r1
 8003446:	3284      	adds	r2, #132	; 0x84
 8003448:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800344c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	0c1b      	lsrs	r3, r3, #16
 800345a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800345e:	4413      	add	r3, r2
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4619      	mov	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	01db      	lsls	r3, r3, #7
 800346c:	440b      	add	r3, r1
 800346e:	3384      	adds	r3, #132	; 0x84
 8003470:	4619      	mov	r1, r3
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	4313      	orrs	r3, r2
 8003476:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003486:	4413      	add	r3, r2
 8003488:	041b      	lsls	r3, r3, #16
 800348a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	01db      	lsls	r3, r3, #7
 8003496:	4413      	add	r3, r2
 8003498:	3384      	adds	r3, #132	; 0x84
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	4611      	mov	r1, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	01d2      	lsls	r2, r2, #7
 80034a6:	440a      	add	r2, r1
 80034a8:	3284      	adds	r2, #132	; 0x84
 80034aa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80034ae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034be:	4413      	add	r3, r2
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4619      	mov	r1, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	01db      	lsls	r3, r3, #7
 80034cc:	440b      	add	r3, r1
 80034ce:	3384      	adds	r3, #132	; 0x84
 80034d0:	4619      	mov	r1, r3
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	01db      	lsls	r3, r3, #7
 80034e2:	4413      	add	r3, r2
 80034e4:	3384      	adds	r3, #132	; 0x84
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	4611      	mov	r1, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	01d2      	lsls	r2, r2, #7
 80034f2:	440a      	add	r2, r1
 80034f4:	3284      	adds	r2, #132	; 0x84
 80034f6:	f023 0307 	bic.w	r3, r3, #7
 80034fa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	461a      	mov	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	01db      	lsls	r3, r3, #7
 8003506:	4413      	add	r3, r2
 8003508:	3384      	adds	r3, #132	; 0x84
 800350a:	461a      	mov	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003522:	041b      	lsls	r3, r3, #16
 8003524:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	061b      	lsls	r3, r3, #24
 800352c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	01db      	lsls	r3, r3, #7
 8003538:	4413      	add	r3, r2
 800353a:	3384      	adds	r3, #132	; 0x84
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	01db      	lsls	r3, r3, #7
 8003548:	4413      	add	r3, r2
 800354a:	3384      	adds	r3, #132	; 0x84
 800354c:	461a      	mov	r2, r3
 800354e:	2300      	movs	r3, #0
 8003550:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003558:	461a      	mov	r2, r3
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	431a      	orrs	r2, r3
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	431a      	orrs	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4619      	mov	r1, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	01db      	lsls	r3, r3, #7
 800356c:	440b      	add	r3, r1
 800356e:	3384      	adds	r3, #132	; 0x84
 8003570:	4619      	mov	r1, r3
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	01db      	lsls	r3, r3, #7
 8003582:	4413      	add	r3, r2
 8003584:	3384      	adds	r3, #132	; 0x84
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	4611      	mov	r1, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	01d2      	lsls	r2, r2, #7
 8003592:	440a      	add	r2, r1
 8003594:	3284      	adds	r2, #132	; 0x84
 8003596:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800359a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	01db      	lsls	r3, r3, #7
 80035a6:	4413      	add	r3, r2
 80035a8:	3384      	adds	r3, #132	; 0x84
 80035aa:	461a      	mov	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	01db      	lsls	r3, r3, #7
 80035bc:	4413      	add	r3, r2
 80035be:	3384      	adds	r3, #132	; 0x84
 80035c0:	69da      	ldr	r2, [r3, #28]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4619      	mov	r1, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	01db      	lsls	r3, r3, #7
 80035cc:	440b      	add	r3, r1
 80035ce:	3384      	adds	r3, #132	; 0x84
 80035d0:	4619      	mov	r1, r3
 80035d2:	4b58      	ldr	r3, [pc, #352]	; (8003734 <LTDC_SetConfig+0x32c>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	69da      	ldr	r2, [r3, #28]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	68f9      	ldr	r1, [r7, #12]
 80035e2:	6809      	ldr	r1, [r1, #0]
 80035e4:	4608      	mov	r0, r1
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	01c9      	lsls	r1, r1, #7
 80035ea:	4401      	add	r1, r0
 80035ec:	3184      	adds	r1, #132	; 0x84
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	01db      	lsls	r3, r3, #7
 80035fc:	4413      	add	r3, r2
 80035fe:	3384      	adds	r3, #132	; 0x84
 8003600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	01db      	lsls	r3, r3, #7
 800360c:	4413      	add	r3, r2
 800360e:	3384      	adds	r3, #132	; 0x84
 8003610:	461a      	mov	r2, r3
 8003612:	2300      	movs	r3, #0
 8003614:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	01db      	lsls	r3, r3, #7
 8003620:	4413      	add	r3, r2
 8003622:	3384      	adds	r3, #132	; 0x84
 8003624:	461a      	mov	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d102      	bne.n	800363a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003634:	2304      	movs	r3, #4
 8003636:	61fb      	str	r3, [r7, #28]
 8003638:	e01b      	b.n	8003672 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d102      	bne.n	8003648 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003642:	2303      	movs	r3, #3
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	e014      	b.n	8003672 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2b04      	cmp	r3, #4
 800364e:	d00b      	beq.n	8003668 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003654:	2b02      	cmp	r3, #2
 8003656:	d007      	beq.n	8003668 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800365c:	2b03      	cmp	r3, #3
 800365e:	d003      	beq.n	8003668 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003664:	2b07      	cmp	r3, #7
 8003666:	d102      	bne.n	800366e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003668:	2302      	movs	r3, #2
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	e001      	b.n	8003672 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800366e:	2301      	movs	r3, #1
 8003670:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	01db      	lsls	r3, r3, #7
 800367c:	4413      	add	r3, r2
 800367e:	3384      	adds	r3, #132	; 0x84
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	6812      	ldr	r2, [r2, #0]
 8003686:	4611      	mov	r1, r2
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	01d2      	lsls	r2, r2, #7
 800368c:	440a      	add	r2, r1
 800368e:	3284      	adds	r2, #132	; 0x84
 8003690:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003694:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	69fa      	ldr	r2, [r7, #28]
 800369c:	fb02 f303 	mul.w	r3, r2, r3
 80036a0:	041a      	lsls	r2, r3, #16
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	6859      	ldr	r1, [r3, #4]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	1acb      	subs	r3, r1, r3
 80036ac:	69f9      	ldr	r1, [r7, #28]
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	3303      	adds	r3, #3
 80036b4:	68f9      	ldr	r1, [r7, #12]
 80036b6:	6809      	ldr	r1, [r1, #0]
 80036b8:	4608      	mov	r0, r1
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	01c9      	lsls	r1, r1, #7
 80036be:	4401      	add	r1, r0
 80036c0:	3184      	adds	r1, #132	; 0x84
 80036c2:	4313      	orrs	r3, r2
 80036c4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	01db      	lsls	r3, r3, #7
 80036d0:	4413      	add	r3, r2
 80036d2:	3384      	adds	r3, #132	; 0x84
 80036d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4619      	mov	r1, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	01db      	lsls	r3, r3, #7
 80036e0:	440b      	add	r3, r1
 80036e2:	3384      	adds	r3, #132	; 0x84
 80036e4:	4619      	mov	r1, r3
 80036e6:	4b14      	ldr	r3, [pc, #80]	; (8003738 <LTDC_SetConfig+0x330>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	01db      	lsls	r3, r3, #7
 80036f6:	4413      	add	r3, r2
 80036f8:	3384      	adds	r3, #132	; 0x84
 80036fa:	461a      	mov	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	01db      	lsls	r3, r3, #7
 800370c:	4413      	add	r3, r2
 800370e:	3384      	adds	r3, #132	; 0x84
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	4611      	mov	r1, r2
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	01d2      	lsls	r2, r2, #7
 800371c:	440a      	add	r2, r1
 800371e:	3284      	adds	r2, #132	; 0x84
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	6013      	str	r3, [r2, #0]
}
 8003726:	bf00      	nop
 8003728:	3724      	adds	r7, #36	; 0x24
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	fffff8f8 	.word	0xfffff8f8
 8003738:	fffff800 	.word	0xfffff800

0800373c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a04      	ldr	r2, [pc, #16]	; (8003758 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374a:	6013      	str	r3, [r2, #0]
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40007000 	.word	0x40007000

0800375c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003766:	4b23      	ldr	r3, [pc, #140]	; (80037f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	4a22      	ldr	r2, [pc, #136]	; (80037f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003770:	6413      	str	r3, [r2, #64]	; 0x40
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800377e:	4b1e      	ldr	r3, [pc, #120]	; (80037f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1d      	ldr	r2, [pc, #116]	; (80037f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003788:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800378a:	f7fc fedf 	bl	800054c <HAL_GetTick>
 800378e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003790:	e009      	b.n	80037a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003792:	f7fc fedb 	bl	800054c <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037a0:	d901      	bls.n	80037a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e022      	b.n	80037ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037a6:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b2:	d1ee      	bne.n	8003792 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80037b4:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a0f      	ldr	r2, [pc, #60]	; (80037f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037c0:	f7fc fec4 	bl	800054c <HAL_GetTick>
 80037c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037c6:	e009      	b.n	80037dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037c8:	f7fc fec0 	bl	800054c <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037d6:	d901      	bls.n	80037dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e007      	b.n	80037ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037dc:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037e8:	d1ee      	bne.n	80037c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40007000 	.word	0x40007000

080037fc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af02      	add	r7, sp, #8
 8003802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003808:	f7fc fea0 	bl	800054c <HAL_GetTick>
 800380c:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e073      	b.n	8003900 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_QSPI_Init+0x2c>
 8003824:	2302      	movs	r3, #2
 8003826:	e06b      	b.n	8003900 <HAL_QSPI_Init+0x104>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10b      	bne.n	8003854 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f007 fa5d 	bl	800ad04 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 800384a:	f241 3188 	movw	r1, #5000	; 0x1388
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f85e 	bl	8003910 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	3b01      	subs	r3, #1
 8003864:	021a      	lsls	r2, r3, #8
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2200      	movs	r2, #0
 8003878:	2120      	movs	r1, #32
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f856 	bl	800392c <QSPI_WaitFlagStateUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d135      	bne.n	80038f6 <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <HAL_QSPI_Init+0x10c>)
 8003892:	4013      	ands	r3, r2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6852      	ldr	r2, [r2, #4]
 8003898:	0611      	lsls	r1, r2, #24
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	68d2      	ldr	r2, [r2, #12]
 800389e:	4311      	orrs	r1, r2
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	69d2      	ldr	r2, [r2, #28]
 80038a4:	4311      	orrs	r1, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6a12      	ldr	r2, [r2, #32]
 80038aa:	4311      	orrs	r1, r2
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6812      	ldr	r2, [r2, #0]
 80038b0:	430b      	orrs	r3, r1
 80038b2:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	4b14      	ldr	r3, [pc, #80]	; (800390c <HAL_QSPI_Init+0x110>)
 80038bc:	4013      	ands	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6912      	ldr	r2, [r2, #16]
 80038c2:	0411      	lsls	r1, r2, #16
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6952      	ldr	r2, [r2, #20]
 80038c8:	4311      	orrs	r1, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6992      	ldr	r2, [r2, #24]
 80038ce:	4311      	orrs	r1, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	430b      	orrs	r3, r1
 80038d6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	00ffff2f 	.word	0x00ffff2f
 800390c:	ffe0f8fe 	.word	0xffe0f8fe

08003910 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	4613      	mov	r3, r2
 800393a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800393c:	e01a      	b.n	8003974 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003944:	d016      	beq.n	8003974 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d007      	beq.n	800395c <QSPI_WaitFlagStateUntilTimeout+0x30>
 800394c:	f7fc fdfe 	bl	800054c <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	429a      	cmp	r2, r3
 800395a:	d20b      	bcs.n	8003974 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2204      	movs	r2, #4
 8003960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003968:	f043 0201 	orr.w	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e00e      	b.n	8003992 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	bf14      	ite	ne
 8003982:	2301      	movne	r3, #1
 8003984:	2300      	moveq	r3, #0
 8003986:	b2db      	uxtb	r3, r3
 8003988:	461a      	mov	r2, r3
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	429a      	cmp	r2, r3
 800398e:	d1d6      	bne.n	800393e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80039a4:	2300      	movs	r3, #0
 80039a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e25c      	b.n	8003e6c <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 8087 	beq.w	8003ace <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039c0:	4b96      	ldr	r3, [pc, #600]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 030c 	and.w	r3, r3, #12
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d00c      	beq.n	80039e6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039cc:	4b93      	ldr	r3, [pc, #588]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 030c 	and.w	r3, r3, #12
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d112      	bne.n	80039fe <HAL_RCC_OscConfig+0x62>
 80039d8:	4b90      	ldr	r3, [pc, #576]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e4:	d10b      	bne.n	80039fe <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e6:	4b8d      	ldr	r3, [pc, #564]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d06c      	beq.n	8003acc <HAL_RCC_OscConfig+0x130>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d168      	bne.n	8003acc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e236      	b.n	8003e6c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a06:	d106      	bne.n	8003a16 <HAL_RCC_OscConfig+0x7a>
 8003a08:	4b84      	ldr	r3, [pc, #528]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a83      	ldr	r2, [pc, #524]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	e02e      	b.n	8003a74 <HAL_RCC_OscConfig+0xd8>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x9c>
 8003a1e:	4b7f      	ldr	r3, [pc, #508]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a7e      	ldr	r2, [pc, #504]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4b7c      	ldr	r3, [pc, #496]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a7b      	ldr	r2, [pc, #492]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e01d      	b.n	8003a74 <HAL_RCC_OscConfig+0xd8>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a40:	d10c      	bne.n	8003a5c <HAL_RCC_OscConfig+0xc0>
 8003a42:	4b76      	ldr	r3, [pc, #472]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a75      	ldr	r2, [pc, #468]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	4b73      	ldr	r3, [pc, #460]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a72      	ldr	r2, [pc, #456]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	e00b      	b.n	8003a74 <HAL_RCC_OscConfig+0xd8>
 8003a5c:	4b6f      	ldr	r3, [pc, #444]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a6e      	ldr	r2, [pc, #440]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	4b6c      	ldr	r3, [pc, #432]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a6b      	ldr	r2, [pc, #428]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d013      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7c:	f7fc fd66 	bl	800054c <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a84:	f7fc fd62 	bl	800054c <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b64      	cmp	r3, #100	; 0x64
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e1ea      	b.n	8003e6c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a96:	4b61      	ldr	r3, [pc, #388]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f0      	beq.n	8003a84 <HAL_RCC_OscConfig+0xe8>
 8003aa2:	e014      	b.n	8003ace <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa4:	f7fc fd52 	bl	800054c <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aac:	f7fc fd4e 	bl	800054c <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b64      	cmp	r3, #100	; 0x64
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e1d6      	b.n	8003e6c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003abe:	4b57      	ldr	r3, [pc, #348]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x110>
 8003aca:	e000      	b.n	8003ace <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d069      	beq.n	8003bae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ada:	4b50      	ldr	r3, [pc, #320]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00b      	beq.n	8003afe <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ae6:	4b4d      	ldr	r3, [pc, #308]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 030c 	and.w	r3, r3, #12
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d11c      	bne.n	8003b2c <HAL_RCC_OscConfig+0x190>
 8003af2:	4b4a      	ldr	r3, [pc, #296]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d116      	bne.n	8003b2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afe:	4b47      	ldr	r3, [pc, #284]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_RCC_OscConfig+0x17a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d001      	beq.n	8003b16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e1aa      	b.n	8003e6c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b16:	4b41      	ldr	r3, [pc, #260]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	493d      	ldr	r1, [pc, #244]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b2a:	e040      	b.n	8003bae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d023      	beq.n	8003b7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b34:	4b39      	ldr	r3, [pc, #228]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a38      	ldr	r2, [pc, #224]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b40:	f7fc fd04 	bl	800054c <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b48:	f7fc fd00 	bl	800054c <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e188      	b.n	8003e6c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5a:	4b30      	ldr	r3, [pc, #192]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b66:	4b2d      	ldr	r3, [pc, #180]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4929      	ldr	r1, [pc, #164]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]
 8003b7a:	e018      	b.n	8003bae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b7c:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a26      	ldr	r2, [pc, #152]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003b82:	f023 0301 	bic.w	r3, r3, #1
 8003b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fc fce0 	bl	800054c <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b90:	f7fc fcdc 	bl	800054c <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e164      	b.n	8003e6c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba2:	4b1e      	ldr	r3, [pc, #120]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f0      	bne.n	8003b90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d038      	beq.n	8003c2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d019      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc2:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc6:	4a15      	ldr	r2, [pc, #84]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bce:	f7fc fcbd 	bl	800054c <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bd6:	f7fc fcb9 	bl	800054c <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e141      	b.n	8003e6c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be8:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0f0      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x23a>
 8003bf4:	e01a      	b.n	8003c2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bf6:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bfa:	4a08      	ldr	r2, [pc, #32]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c02:	f7fc fca3 	bl	800054c <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c08:	e00a      	b.n	8003c20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c0a:	f7fc fc9f 	bl	800054c <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d903      	bls.n	8003c20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e127      	b.n	8003e6c <HAL_RCC_OscConfig+0x4d0>
 8003c1c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c20:	4b94      	ldr	r3, [pc, #592]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1ee      	bne.n	8003c0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80a4 	beq.w	8003d82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c3a:	4b8e      	ldr	r3, [pc, #568]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10d      	bne.n	8003c62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c46:	4b8b      	ldr	r3, [pc, #556]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	4a8a      	ldr	r2, [pc, #552]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c50:	6413      	str	r3, [r2, #64]	; 0x40
 8003c52:	4b88      	ldr	r3, [pc, #544]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c62:	4b85      	ldr	r3, [pc, #532]	; (8003e78 <HAL_RCC_OscConfig+0x4dc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d118      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c6e:	4b82      	ldr	r3, [pc, #520]	; (8003e78 <HAL_RCC_OscConfig+0x4dc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a81      	ldr	r2, [pc, #516]	; (8003e78 <HAL_RCC_OscConfig+0x4dc>)
 8003c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c7a:	f7fc fc67 	bl	800054c <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c82:	f7fc fc63 	bl	800054c <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b64      	cmp	r3, #100	; 0x64
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e0eb      	b.n	8003e6c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c94:	4b78      	ldr	r3, [pc, #480]	; (8003e78 <HAL_RCC_OscConfig+0x4dc>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x31a>
 8003ca8:	4b72      	ldr	r3, [pc, #456]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	4a71      	ldr	r2, [pc, #452]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003cae:	f043 0301 	orr.w	r3, r3, #1
 8003cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb4:	e02d      	b.n	8003d12 <HAL_RCC_OscConfig+0x376>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x33c>
 8003cbe:	4b6d      	ldr	r3, [pc, #436]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc2:	4a6c      	ldr	r2, [pc, #432]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cca:	4b6a      	ldr	r3, [pc, #424]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	4a69      	ldr	r2, [pc, #420]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003cd0:	f023 0304 	bic.w	r3, r3, #4
 8003cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd6:	e01c      	b.n	8003d12 <HAL_RCC_OscConfig+0x376>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b05      	cmp	r3, #5
 8003cde:	d10c      	bne.n	8003cfa <HAL_RCC_OscConfig+0x35e>
 8003ce0:	4b64      	ldr	r3, [pc, #400]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce4:	4a63      	ldr	r2, [pc, #396]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003ce6:	f043 0304 	orr.w	r3, r3, #4
 8003cea:	6713      	str	r3, [r2, #112]	; 0x70
 8003cec:	4b61      	ldr	r3, [pc, #388]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf0:	4a60      	ldr	r2, [pc, #384]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf8:	e00b      	b.n	8003d12 <HAL_RCC_OscConfig+0x376>
 8003cfa:	4b5e      	ldr	r3, [pc, #376]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfe:	4a5d      	ldr	r2, [pc, #372]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	6713      	str	r3, [r2, #112]	; 0x70
 8003d06:	4b5b      	ldr	r3, [pc, #364]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0a:	4a5a      	ldr	r2, [pc, #360]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003d0c:	f023 0304 	bic.w	r3, r3, #4
 8003d10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d015      	beq.n	8003d46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1a:	f7fc fc17 	bl	800054c <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d20:	e00a      	b.n	8003d38 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d22:	f7fc fc13 	bl	800054c <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e099      	b.n	8003e6c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d38:	4b4e      	ldr	r3, [pc, #312]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0ee      	beq.n	8003d22 <HAL_RCC_OscConfig+0x386>
 8003d44:	e014      	b.n	8003d70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d46:	f7fc fc01 	bl	800054c <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d4c:	e00a      	b.n	8003d64 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d4e:	f7fc fbfd 	bl	800054c <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e083      	b.n	8003e6c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d64:	4b43      	ldr	r3, [pc, #268]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1ee      	bne.n	8003d4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d70:	7dfb      	ldrb	r3, [r7, #23]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d105      	bne.n	8003d82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d76:	4b3f      	ldr	r3, [pc, #252]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	4a3e      	ldr	r2, [pc, #248]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d06f      	beq.n	8003e6a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d8a:	4b3a      	ldr	r3, [pc, #232]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d067      	beq.n	8003e66 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d149      	bne.n	8003e32 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9e:	4b35      	ldr	r3, [pc, #212]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a34      	ldr	r2, [pc, #208]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003da4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003daa:	f7fc fbcf 	bl	800054c <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db2:	f7fc fbcb 	bl	800054c <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e053      	b.n	8003e6c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc4:	4b2b      	ldr	r3, [pc, #172]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1f0      	bne.n	8003db2 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	019b      	lsls	r3, r3, #6
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de6:	085b      	lsrs	r3, r3, #1
 8003de8:	3b01      	subs	r3, #1
 8003dea:	041b      	lsls	r3, r3, #16
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	061b      	lsls	r3, r3, #24
 8003df4:	4313      	orrs	r3, r2
 8003df6:	4a1f      	ldr	r2, [pc, #124]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003df8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003dfc:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a1c      	ldr	r2, [pc, #112]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003e04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0a:	f7fc fb9f 	bl	800054c <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e12:	f7fc fb9b 	bl	800054c <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e023      	b.n	8003e6c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e24:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0f0      	beq.n	8003e12 <HAL_RCC_OscConfig+0x476>
 8003e30:	e01b      	b.n	8003e6a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e32:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a0f      	ldr	r2, [pc, #60]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003e38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3e:	f7fc fb85 	bl	800054c <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e46:	f7fc fb81 	bl	800054c <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e009      	b.n	8003e6c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e58:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <HAL_RCC_OscConfig+0x4d8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1f0      	bne.n	8003e46 <HAL_RCC_OscConfig+0x4aa>
 8003e64:	e001      	b.n	8003e6a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e000      	b.n	8003e6c <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40023800 	.word	0x40023800
 8003e78:	40007000 	.word	0x40007000

08003e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0ce      	b.n	8004032 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e94:	4b69      	ldr	r3, [pc, #420]	; (800403c <HAL_RCC_ClockConfig+0x1c0>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d910      	bls.n	8003ec4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea2:	4b66      	ldr	r3, [pc, #408]	; (800403c <HAL_RCC_ClockConfig+0x1c0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 020f 	bic.w	r2, r3, #15
 8003eaa:	4964      	ldr	r1, [pc, #400]	; (800403c <HAL_RCC_ClockConfig+0x1c0>)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb2:	4b62      	ldr	r3, [pc, #392]	; (800403c <HAL_RCC_ClockConfig+0x1c0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d001      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e0b6      	b.n	8004032 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d020      	beq.n	8003f12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003edc:	4b58      	ldr	r3, [pc, #352]	; (8004040 <HAL_RCC_ClockConfig+0x1c4>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	4a57      	ldr	r2, [pc, #348]	; (8004040 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ee6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ef4:	4b52      	ldr	r3, [pc, #328]	; (8004040 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	4a51      	ldr	r2, [pc, #324]	; (8004040 <HAL_RCC_ClockConfig+0x1c4>)
 8003efa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003efe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f00:	4b4f      	ldr	r3, [pc, #316]	; (8004040 <HAL_RCC_ClockConfig+0x1c4>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	494c      	ldr	r1, [pc, #304]	; (8004040 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d040      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f26:	4b46      	ldr	r3, [pc, #280]	; (8004040 <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d115      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e07d      	b.n	8004032 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d107      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f3e:	4b40      	ldr	r3, [pc, #256]	; (8004040 <HAL_RCC_ClockConfig+0x1c4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d109      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e071      	b.n	8004032 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4e:	4b3c      	ldr	r3, [pc, #240]	; (8004040 <HAL_RCC_ClockConfig+0x1c4>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e069      	b.n	8004032 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f5e:	4b38      	ldr	r3, [pc, #224]	; (8004040 <HAL_RCC_ClockConfig+0x1c4>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f023 0203 	bic.w	r2, r3, #3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4935      	ldr	r1, [pc, #212]	; (8004040 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f70:	f7fc faec 	bl	800054c <HAL_GetTick>
 8003f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	e00a      	b.n	8003f8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f78:	f7fc fae8 	bl	800054c <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e051      	b.n	8004032 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8e:	4b2c      	ldr	r3, [pc, #176]	; (8004040 <HAL_RCC_ClockConfig+0x1c4>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 020c 	and.w	r2, r3, #12
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d1eb      	bne.n	8003f78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fa0:	4b26      	ldr	r3, [pc, #152]	; (800403c <HAL_RCC_ClockConfig+0x1c0>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d210      	bcs.n	8003fd0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fae:	4b23      	ldr	r3, [pc, #140]	; (800403c <HAL_RCC_ClockConfig+0x1c0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 020f 	bic.w	r2, r3, #15
 8003fb6:	4921      	ldr	r1, [pc, #132]	; (800403c <HAL_RCC_ClockConfig+0x1c0>)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fbe:	4b1f      	ldr	r3, [pc, #124]	; (800403c <HAL_RCC_ClockConfig+0x1c0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d001      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e030      	b.n	8004032 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d008      	beq.n	8003fee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fdc:	4b18      	ldr	r3, [pc, #96]	; (8004040 <HAL_RCC_ClockConfig+0x1c4>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4915      	ldr	r1, [pc, #84]	; (8004040 <HAL_RCC_ClockConfig+0x1c4>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d009      	beq.n	800400e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ffa:	4b11      	ldr	r3, [pc, #68]	; (8004040 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	490d      	ldr	r1, [pc, #52]	; (8004040 <HAL_RCC_ClockConfig+0x1c4>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800400e:	f000 f81d 	bl	800404c <HAL_RCC_GetSysClockFreq>
 8004012:	4601      	mov	r1, r0
 8004014:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <HAL_RCC_ClockConfig+0x1c4>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	091b      	lsrs	r3, r3, #4
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	4a09      	ldr	r2, [pc, #36]	; (8004044 <HAL_RCC_ClockConfig+0x1c8>)
 8004020:	5cd3      	ldrb	r3, [r2, r3]
 8004022:	fa21 f303 	lsr.w	r3, r1, r3
 8004026:	4a08      	ldr	r2, [pc, #32]	; (8004048 <HAL_RCC_ClockConfig+0x1cc>)
 8004028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800402a:	2000      	movs	r0, #0
 800402c:	f007 fa74 	bl	800b518 <HAL_InitTick>

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40023c00 	.word	0x40023c00
 8004040:	40023800 	.word	0x40023800
 8004044:	0800bab4 	.word	0x0800bab4
 8004048:	20000004 	.word	0x20000004

0800404c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800404c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004052:	2300      	movs	r3, #0
 8004054:	607b      	str	r3, [r7, #4]
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	2300      	movs	r3, #0
 800405c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800405e:	2300      	movs	r3, #0
 8004060:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004062:	4b50      	ldr	r3, [pc, #320]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b04      	cmp	r3, #4
 800406c:	d007      	beq.n	800407e <HAL_RCC_GetSysClockFreq+0x32>
 800406e:	2b08      	cmp	r3, #8
 8004070:	d008      	beq.n	8004084 <HAL_RCC_GetSysClockFreq+0x38>
 8004072:	2b00      	cmp	r3, #0
 8004074:	f040 808d 	bne.w	8004192 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004078:	4b4b      	ldr	r3, [pc, #300]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800407a:	60bb      	str	r3, [r7, #8]
       break;
 800407c:	e08c      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800407e:	4b4b      	ldr	r3, [pc, #300]	; (80041ac <HAL_RCC_GetSysClockFreq+0x160>)
 8004080:	60bb      	str	r3, [r7, #8]
      break;
 8004082:	e089      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004084:	4b47      	ldr	r3, [pc, #284]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800408c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800408e:	4b45      	ldr	r3, [pc, #276]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d023      	beq.n	80040e2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800409a:	4b42      	ldr	r3, [pc, #264]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x158>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	099b      	lsrs	r3, r3, #6
 80040a0:	f04f 0400 	mov.w	r4, #0
 80040a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	ea03 0501 	and.w	r5, r3, r1
 80040b0:	ea04 0602 	and.w	r6, r4, r2
 80040b4:	4a3d      	ldr	r2, [pc, #244]	; (80041ac <HAL_RCC_GetSysClockFreq+0x160>)
 80040b6:	fb02 f106 	mul.w	r1, r2, r6
 80040ba:	2200      	movs	r2, #0
 80040bc:	fb02 f205 	mul.w	r2, r2, r5
 80040c0:	440a      	add	r2, r1
 80040c2:	493a      	ldr	r1, [pc, #232]	; (80041ac <HAL_RCC_GetSysClockFreq+0x160>)
 80040c4:	fba5 0101 	umull	r0, r1, r5, r1
 80040c8:	1853      	adds	r3, r2, r1
 80040ca:	4619      	mov	r1, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f04f 0400 	mov.w	r4, #0
 80040d2:	461a      	mov	r2, r3
 80040d4:	4623      	mov	r3, r4
 80040d6:	f7fc f897 	bl	8000208 <__aeabi_uldivmod>
 80040da:	4603      	mov	r3, r0
 80040dc:	460c      	mov	r4, r1
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	e049      	b.n	8004176 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e2:	4b30      	ldr	r3, [pc, #192]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x158>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	099b      	lsrs	r3, r3, #6
 80040e8:	f04f 0400 	mov.w	r4, #0
 80040ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	ea03 0501 	and.w	r5, r3, r1
 80040f8:	ea04 0602 	and.w	r6, r4, r2
 80040fc:	4629      	mov	r1, r5
 80040fe:	4632      	mov	r2, r6
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	f04f 0400 	mov.w	r4, #0
 8004108:	0154      	lsls	r4, r2, #5
 800410a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800410e:	014b      	lsls	r3, r1, #5
 8004110:	4619      	mov	r1, r3
 8004112:	4622      	mov	r2, r4
 8004114:	1b49      	subs	r1, r1, r5
 8004116:	eb62 0206 	sbc.w	r2, r2, r6
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	f04f 0400 	mov.w	r4, #0
 8004122:	0194      	lsls	r4, r2, #6
 8004124:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004128:	018b      	lsls	r3, r1, #6
 800412a:	1a5b      	subs	r3, r3, r1
 800412c:	eb64 0402 	sbc.w	r4, r4, r2
 8004130:	f04f 0100 	mov.w	r1, #0
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	00e2      	lsls	r2, r4, #3
 800413a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800413e:	00d9      	lsls	r1, r3, #3
 8004140:	460b      	mov	r3, r1
 8004142:	4614      	mov	r4, r2
 8004144:	195b      	adds	r3, r3, r5
 8004146:	eb44 0406 	adc.w	r4, r4, r6
 800414a:	f04f 0100 	mov.w	r1, #0
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	02a2      	lsls	r2, r4, #10
 8004154:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004158:	0299      	lsls	r1, r3, #10
 800415a:	460b      	mov	r3, r1
 800415c:	4614      	mov	r4, r2
 800415e:	4618      	mov	r0, r3
 8004160:	4621      	mov	r1, r4
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f04f 0400 	mov.w	r4, #0
 8004168:	461a      	mov	r2, r3
 800416a:	4623      	mov	r3, r4
 800416c:	f7fc f84c 	bl	8000208 <__aeabi_uldivmod>
 8004170:	4603      	mov	r3, r0
 8004172:	460c      	mov	r4, r1
 8004174:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8004176:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	0c1b      	lsrs	r3, r3, #16
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	3301      	adds	r3, #1
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	fbb2 f3f3 	udiv	r3, r2, r3
 800418e:	60bb      	str	r3, [r7, #8]
      break;
 8004190:	e002      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004192:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004194:	60bb      	str	r3, [r7, #8]
      break;
 8004196:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004198:	68bb      	ldr	r3, [r7, #8]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40023800 	.word	0x40023800
 80041a8:	00f42400 	.word	0x00f42400
 80041ac:	017d7840 	.word	0x017d7840

080041b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b4:	4b03      	ldr	r3, [pc, #12]	; (80041c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041b6:	681b      	ldr	r3, [r3, #0]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	20000004 	.word	0x20000004

080041c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041cc:	f7ff fff0 	bl	80041b0 <HAL_RCC_GetHCLKFreq>
 80041d0:	4601      	mov	r1, r0
 80041d2:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	0a9b      	lsrs	r3, r3, #10
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	4a03      	ldr	r2, [pc, #12]	; (80041ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80041de:	5cd3      	ldrb	r3, [r2, r3]
 80041e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40023800 	.word	0x40023800
 80041ec:	0800bac4 	.word	0x0800bac4

080041f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041f4:	f7ff ffdc 	bl	80041b0 <HAL_RCC_GetHCLKFreq>
 80041f8:	4601      	mov	r1, r0
 80041fa:	4b05      	ldr	r3, [pc, #20]	; (8004210 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	0b5b      	lsrs	r3, r3, #13
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	4a03      	ldr	r2, [pc, #12]	; (8004214 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004206:	5cd3      	ldrb	r3, [r2, r3]
 8004208:	fa21 f303 	lsr.w	r3, r1, r3
}
 800420c:	4618      	mov	r0, r3
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40023800 	.word	0x40023800
 8004214:	0800bac4 	.word	0x0800bac4

08004218 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	220f      	movs	r2, #15
 8004226:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004228:	4b12      	ldr	r3, [pc, #72]	; (8004274 <HAL_RCC_GetClockConfig+0x5c>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 0203 	and.w	r2, r3, #3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004234:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <HAL_RCC_GetClockConfig+0x5c>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004240:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <HAL_RCC_GetClockConfig+0x5c>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800424c:	4b09      	ldr	r3, [pc, #36]	; (8004274 <HAL_RCC_GetClockConfig+0x5c>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	08db      	lsrs	r3, r3, #3
 8004252:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800425a:	4b07      	ldr	r3, [pc, #28]	; (8004278 <HAL_RCC_GetClockConfig+0x60>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 020f 	and.w	r2, r3, #15
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	601a      	str	r2, [r3, #0]
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40023800 	.word	0x40023800
 8004278:	40023c00 	.word	0x40023c00

0800427c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004290:	2300      	movs	r3, #0
 8004292:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d012      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042a4:	4b69      	ldr	r3, [pc, #420]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	4a68      	ldr	r2, [pc, #416]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80042ae:	6093      	str	r3, [r2, #8]
 80042b0:	4b66      	ldr	r3, [pc, #408]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b8:	4964      	ldr	r1, [pc, #400]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80042c6:	2301      	movs	r3, #1
 80042c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d017      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042d6:	4b5d      	ldr	r3, [pc, #372]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e4:	4959      	ldr	r1, [pc, #356]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042f4:	d101      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80042f6:	2301      	movs	r3, #1
 80042f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004302:	2301      	movs	r3, #1
 8004304:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d017      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004312:	4b4e      	ldr	r3, [pc, #312]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004318:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	494a      	ldr	r1, [pc, #296]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004330:	d101      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004332:	2301      	movs	r3, #1
 8004334:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800433e:	2301      	movs	r3, #1
 8004340:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800434e:	2301      	movs	r3, #1
 8004350:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 808b 	beq.w	8004476 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004360:	4b3a      	ldr	r3, [pc, #232]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	4a39      	ldr	r2, [pc, #228]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800436a:	6413      	str	r3, [r2, #64]	; 0x40
 800436c:	4b37      	ldr	r3, [pc, #220]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004374:	60bb      	str	r3, [r7, #8]
 8004376:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004378:	4b35      	ldr	r3, [pc, #212]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a34      	ldr	r2, [pc, #208]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800437e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004382:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004384:	f7fc f8e2 	bl	800054c <HAL_GetTick>
 8004388:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800438a:	e008      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800438c:	f7fc f8de 	bl	800054c <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b64      	cmp	r3, #100	; 0x64
 8004398:	d901      	bls.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e355      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800439e:	4b2c      	ldr	r3, [pc, #176]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043aa:	4b28      	ldr	r3, [pc, #160]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d035      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d02e      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043c8:	4b20      	ldr	r3, [pc, #128]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043d2:	4b1e      	ldr	r3, [pc, #120]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d6:	4a1d      	ldr	r2, [pc, #116]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043de:	4b1b      	ldr	r3, [pc, #108]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	4a1a      	ldr	r2, [pc, #104]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80043ea:	4a18      	ldr	r2, [pc, #96]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043f0:	4b16      	ldr	r3, [pc, #88]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d114      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fc:	f7fc f8a6 	bl	800054c <HAL_GetTick>
 8004400:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004402:	e00a      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004404:	f7fc f8a2 	bl	800054c <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e317      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441a:	4b0c      	ldr	r3, [pc, #48]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0ee      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004432:	d111      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004434:	4b05      	ldr	r3, [pc, #20]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004440:	4b04      	ldr	r3, [pc, #16]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004442:	400b      	ands	r3, r1
 8004444:	4901      	ldr	r1, [pc, #4]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004446:	4313      	orrs	r3, r2
 8004448:	608b      	str	r3, [r1, #8]
 800444a:	e00b      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800444c:	40023800 	.word	0x40023800
 8004450:	40007000 	.word	0x40007000
 8004454:	0ffffcff 	.word	0x0ffffcff
 8004458:	4bb0      	ldr	r3, [pc, #704]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	4aaf      	ldr	r2, [pc, #700]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800445e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004462:	6093      	str	r3, [r2, #8]
 8004464:	4bad      	ldr	r3, [pc, #692]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004466:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004470:	49aa      	ldr	r1, [pc, #680]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004472:	4313      	orrs	r3, r2
 8004474:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b00      	cmp	r3, #0
 8004480:	d010      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004482:	4ba6      	ldr	r3, [pc, #664]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004488:	4aa4      	ldr	r2, [pc, #656]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800448a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800448e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004492:	4ba2      	ldr	r3, [pc, #648]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004494:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449c:	499f      	ldr	r1, [pc, #636]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044b0:	4b9a      	ldr	r3, [pc, #616]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80044b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044be:	4997      	ldr	r1, [pc, #604]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044d2:	4b92      	ldr	r3, [pc, #584]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80044d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044e0:	498e      	ldr	r1, [pc, #568]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044f4:	4b89      	ldr	r3, [pc, #548]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004502:	4986      	ldr	r1, [pc, #536]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004516:	4b81      	ldr	r3, [pc, #516]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004524:	497d      	ldr	r1, [pc, #500]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004538:	4b78      	ldr	r3, [pc, #480]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453e:	f023 0203 	bic.w	r2, r3, #3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004546:	4975      	ldr	r1, [pc, #468]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800455a:	4b70      	ldr	r3, [pc, #448]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800455c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004560:	f023 020c 	bic.w	r2, r3, #12
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004568:	496c      	ldr	r1, [pc, #432]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800457c:	4b67      	ldr	r3, [pc, #412]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800457e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004582:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458a:	4964      	ldr	r1, [pc, #400]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800459e:	4b5f      	ldr	r3, [pc, #380]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ac:	495b      	ldr	r1, [pc, #364]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045c0:	4b56      	ldr	r3, [pc, #344]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ce:	4953      	ldr	r1, [pc, #332]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80045e2:	4b4e      	ldr	r3, [pc, #312]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f0:	494a      	ldr	r1, [pc, #296]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004604:	4b45      	ldr	r3, [pc, #276]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004612:	4942      	ldr	r1, [pc, #264]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004626:	4b3d      	ldr	r3, [pc, #244]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004634:	4939      	ldr	r1, [pc, #228]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004648:	4b34      	ldr	r3, [pc, #208]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800464a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004656:	4931      	ldr	r1, [pc, #196]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d011      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800466a:	4b2c      	ldr	r3, [pc, #176]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800466c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004670:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004678:	4928      	ldr	r1, [pc, #160]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004684:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004688:	d101      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800468a:	2301      	movs	r3, #1
 800468c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800469a:	2301      	movs	r3, #1
 800469c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046aa:	4b1c      	ldr	r3, [pc, #112]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b8:	4918      	ldr	r1, [pc, #96]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00b      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046cc:	4b13      	ldr	r3, [pc, #76]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046dc:	490f      	ldr	r1, [pc, #60]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d005      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046f2:	f040 80d8 	bne.w	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046f6:	4b09      	ldr	r3, [pc, #36]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a08      	ldr	r2, [pc, #32]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004702:	f7fb ff23 	bl	800054c <HAL_GetTick>
 8004706:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004708:	e00a      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800470a:	f7fb ff1f 	bl	800054c <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b64      	cmp	r3, #100	; 0x64
 8004716:	d903      	bls.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e196      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800471c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004720:	4b6c      	ldr	r3, [pc, #432]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1ee      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d021      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473c:	2b00      	cmp	r3, #0
 800473e:	d11d      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004740:	4b64      	ldr	r3, [pc, #400]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004746:	0c1b      	lsrs	r3, r3, #16
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800474e:	4b61      	ldr	r3, [pc, #388]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004754:	0e1b      	lsrs	r3, r3, #24
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	019a      	lsls	r2, r3, #6
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	041b      	lsls	r3, r3, #16
 8004766:	431a      	orrs	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	061b      	lsls	r3, r3, #24
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	071b      	lsls	r3, r3, #28
 8004774:	4957      	ldr	r1, [pc, #348]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d004      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004790:	d00a      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800479a:	2b00      	cmp	r3, #0
 800479c:	d02e      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047a6:	d129      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047a8:	4b4a      	ldr	r3, [pc, #296]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80047aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ae:	0c1b      	lsrs	r3, r3, #16
 80047b0:	f003 0303 	and.w	r3, r3, #3
 80047b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047b6:	4b47      	ldr	r3, [pc, #284]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80047b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047bc:	0f1b      	lsrs	r3, r3, #28
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	019a      	lsls	r2, r3, #6
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	041b      	lsls	r3, r3, #16
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	061b      	lsls	r3, r3, #24
 80047d6:	431a      	orrs	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	071b      	lsls	r3, r3, #28
 80047dc:	493d      	ldr	r1, [pc, #244]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80047e4:	4b3b      	ldr	r3, [pc, #236]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80047e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ea:	f023 021f 	bic.w	r2, r3, #31
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	3b01      	subs	r3, #1
 80047f4:	4937      	ldr	r1, [pc, #220]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01d      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004808:	4b32      	ldr	r3, [pc, #200]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800480a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480e:	0e1b      	lsrs	r3, r3, #24
 8004810:	f003 030f 	and.w	r3, r3, #15
 8004814:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004816:	4b2f      	ldr	r3, [pc, #188]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800481c:	0f1b      	lsrs	r3, r3, #28
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	019a      	lsls	r2, r3, #6
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	041b      	lsls	r3, r3, #16
 8004830:	431a      	orrs	r2, r3
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	061b      	lsls	r3, r3, #24
 8004836:	431a      	orrs	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	071b      	lsls	r3, r3, #28
 800483c:	4925      	ldr	r1, [pc, #148]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d011      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	019a      	lsls	r2, r3, #6
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	041b      	lsls	r3, r3, #16
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	061b      	lsls	r3, r3, #24
 8004864:	431a      	orrs	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	071b      	lsls	r3, r3, #28
 800486c:	4919      	ldr	r1, [pc, #100]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800486e:	4313      	orrs	r3, r2
 8004870:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004874:	4b17      	ldr	r3, [pc, #92]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a16      	ldr	r2, [pc, #88]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800487a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800487e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004880:	f7fb fe64 	bl	800054c <HAL_GetTick>
 8004884:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004886:	e008      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004888:	f7fb fe60 	bl	800054c <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b64      	cmp	r3, #100	; 0x64
 8004894:	d901      	bls.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e0d7      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800489a:	4b0e      	ldr	r3, [pc, #56]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f0      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	f040 80cd 	bne.w	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80048ae:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a08      	ldr	r2, [pc, #32]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ba:	f7fb fe47 	bl	800054c <HAL_GetTick>
 80048be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048c0:	e00a      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048c2:	f7fb fe43 	bl	800054c <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b64      	cmp	r3, #100	; 0x64
 80048ce:	d903      	bls.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e0ba      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80048d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048d8:	4b5e      	ldr	r3, [pc, #376]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048e4:	d0ed      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d009      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004902:	2b00      	cmp	r3, #0
 8004904:	d02e      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	2b00      	cmp	r3, #0
 800490c:	d12a      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800490e:	4b51      	ldr	r3, [pc, #324]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	0c1b      	lsrs	r3, r3, #16
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800491c:	4b4d      	ldr	r3, [pc, #308]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004922:	0f1b      	lsrs	r3, r3, #28
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	019a      	lsls	r2, r3, #6
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	041b      	lsls	r3, r3, #16
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	061b      	lsls	r3, r3, #24
 800493c:	431a      	orrs	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	071b      	lsls	r3, r3, #28
 8004942:	4944      	ldr	r1, [pc, #272]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800494a:	4b42      	ldr	r3, [pc, #264]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800494c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004950:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004958:	3b01      	subs	r3, #1
 800495a:	021b      	lsls	r3, r3, #8
 800495c:	493d      	ldr	r1, [pc, #244]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d022      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004978:	d11d      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800497a:	4b36      	ldr	r3, [pc, #216]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800497c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004980:	0e1b      	lsrs	r3, r3, #24
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004988:	4b32      	ldr	r3, [pc, #200]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498e:	0f1b      	lsrs	r3, r3, #28
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	019a      	lsls	r2, r3, #6
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	041b      	lsls	r3, r3, #16
 80049a2:	431a      	orrs	r2, r3
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	061b      	lsls	r3, r3, #24
 80049a8:	431a      	orrs	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	071b      	lsls	r3, r3, #28
 80049ae:	4929      	ldr	r1, [pc, #164]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d028      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049c2:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c8:	0e1b      	lsrs	r3, r3, #24
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049d0:	4b20      	ldr	r3, [pc, #128]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d6:	0c1b      	lsrs	r3, r3, #16
 80049d8:	f003 0303 	and.w	r3, r3, #3
 80049dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	019a      	lsls	r2, r3, #6
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	041b      	lsls	r3, r3, #16
 80049e8:	431a      	orrs	r2, r3
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	061b      	lsls	r3, r3, #24
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	071b      	lsls	r3, r3, #28
 80049f6:	4917      	ldr	r1, [pc, #92]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80049fe:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	4911      	ldr	r1, [pc, #68]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a14:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a0e      	ldr	r2, [pc, #56]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a20:	f7fb fd94 	bl	800054c <HAL_GetTick>
 8004a24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a26:	e008      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a28:	f7fb fd90 	bl	800054c <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b64      	cmp	r3, #100	; 0x64
 8004a34:	d901      	bls.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e007      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a3a:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a46:	d1ef      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	40023800 	.word	0x40023800

08004a58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a76:	f040 8086 	bne.w	8004b86 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004a7a:	4b8d      	ldr	r3, [pc, #564]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a80:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004a88:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a90:	d03e      	beq.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8004a92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a96:	d073      	beq.n	8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d000      	beq.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004a9c:	e074      	b.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004a9e:	4b84      	ldr	r3, [pc, #528]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d108      	bne.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004aaa:	4b81      	ldr	r3, [pc, #516]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ab2:	4a80      	ldr	r2, [pc, #512]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	e007      	b.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004abc:	4b7c      	ldr	r3, [pc, #496]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ac4:	4a7c      	ldr	r2, [pc, #496]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aca:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004acc:	4b78      	ldr	r3, [pc, #480]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad2:	0e1b      	lsrs	r3, r3, #24
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004ada:	4b75      	ldr	r3, [pc, #468]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae0:	099b      	lsrs	r3, r3, #6
 8004ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	fb02 f203 	mul.w	r2, r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004af4:	4b6e      	ldr	r3, [pc, #440]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004afa:	0a1b      	lsrs	r3, r3, #8
 8004afc:	f003 031f 	and.w	r3, r3, #31
 8004b00:	3301      	adds	r3, #1
 8004b02:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0c:	617b      	str	r3, [r7, #20]
        break;
 8004b0e:	e03b      	b.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004b10:	4b67      	ldr	r3, [pc, #412]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d108      	bne.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b1c:	4b64      	ldr	r3, [pc, #400]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b24:	4a63      	ldr	r2, [pc, #396]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2a:	613b      	str	r3, [r7, #16]
 8004b2c:	e007      	b.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004b2e:	4b60      	ldr	r3, [pc, #384]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b36:	4a60      	ldr	r2, [pc, #384]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004b3e:	4b5c      	ldr	r3, [pc, #368]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b44:	0e1b      	lsrs	r3, r3, #24
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004b4c:	4b58      	ldr	r3, [pc, #352]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b52:	099b      	lsrs	r3, r3, #6
 8004b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	fb02 f203 	mul.w	r2, r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004b66:	4b52      	ldr	r3, [pc, #328]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b6c:	f003 031f 	and.w	r3, r3, #31
 8004b70:	3301      	adds	r3, #1
 8004b72:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7c:	617b      	str	r3, [r7, #20]
        break;
 8004b7e:	e003      	b.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004b80:	4b4e      	ldr	r3, [pc, #312]	; (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004b82:	617b      	str	r3, [r7, #20]
        break;
 8004b84:	e000      	b.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8004b86:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b8e:	f040 8086 	bne.w	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004b92:	4b47      	ldr	r3, [pc, #284]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b98:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004ba0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ba8:	d03e      	beq.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8004baa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bae:	d073      	beq.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d000      	beq.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004bb4:	e074      	b.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004bb6:	4b3e      	ldr	r3, [pc, #248]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d108      	bne.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004bc2:	4b3b      	ldr	r3, [pc, #236]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bca:	4a3a      	ldr	r2, [pc, #232]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	613b      	str	r3, [r7, #16]
 8004bd2:	e007      	b.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004bd4:	4b36      	ldr	r3, [pc, #216]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bdc:	4a36      	ldr	r2, [pc, #216]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004be4:	4b32      	ldr	r3, [pc, #200]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bea:	0e1b      	lsrs	r3, r3, #24
 8004bec:	f003 030f 	and.w	r3, r3, #15
 8004bf0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004bf2:	4b2f      	ldr	r3, [pc, #188]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf8:	099b      	lsrs	r3, r3, #6
 8004bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	fb02 f203 	mul.w	r2, r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004c0c:	4b28      	ldr	r3, [pc, #160]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c12:	0a1b      	lsrs	r3, r3, #8
 8004c14:	f003 031f 	and.w	r3, r3, #31
 8004c18:	3301      	adds	r3, #1
 8004c1a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c24:	617b      	str	r3, [r7, #20]
        break;
 8004c26:	e03b      	b.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004c28:	4b21      	ldr	r3, [pc, #132]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d108      	bne.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c34:	4b1e      	ldr	r3, [pc, #120]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c3c:	4a1d      	ldr	r2, [pc, #116]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c42:	613b      	str	r3, [r7, #16]
 8004c44:	e007      	b.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004c46:	4b1a      	ldr	r3, [pc, #104]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c4e:	4a1a      	ldr	r2, [pc, #104]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004c56:	4b16      	ldr	r3, [pc, #88]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c5c:	0e1b      	lsrs	r3, r3, #24
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004c64:	4b12      	ldr	r3, [pc, #72]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c6a:	099b      	lsrs	r3, r3, #6
 8004c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	fb02 f203 	mul.w	r2, r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004c7e:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c84:	f003 031f 	and.w	r3, r3, #31
 8004c88:	3301      	adds	r3, #1
 8004c8a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c94:	617b      	str	r3, [r7, #20]
        break;
 8004c96:	e003      	b.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004c98:	4b08      	ldr	r3, [pc, #32]	; (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004c9a:	617b      	str	r3, [r7, #20]
        break;
 8004c9c:	e000      	b.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8004c9e:	bf00      	nop

  return frequency;
 8004ca0:	697b      	ldr	r3, [r7, #20]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	371c      	adds	r7, #28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	00f42400 	.word	0x00f42400
 8004cb8:	017d7840 	.word	0x017d7840
 8004cbc:	00bb8000 	.word	0x00bb8000

08004cc0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e01c      	b.n	8004d0c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	795b      	ldrb	r3, [r3, #5]
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d105      	bne.n	8004ce8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f006 f89e 	bl	800ae24 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 0204 	orr.w	r2, r2, #4
 8004cfc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	791b      	ldrb	r3, [r3, #4]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <HAL_RNG_GenerateRandomNumber+0x1a>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e03d      	b.n	8004daa <HAL_RNG_GenerateRandomNumber+0x96>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	795b      	ldrb	r3, [r3, #5]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d12c      	bne.n	8004d98 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2202      	movs	r2, #2
 8004d42:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d44:	f7fb fc02 	bl	800054c <HAL_GetTick>
 8004d48:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004d4a:	e011      	b.n	8004d70 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004d4c:	f7fb fbfe 	bl	800054c <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d90a      	bls.n	8004d70 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e01c      	b.n	8004daa <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d1e6      	bne.n	8004d4c <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	715a      	strb	r2, [r3, #5]
 8004d96:	e004      	b.n	8004da2 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2204      	movs	r2, #4
 8004d9c:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	711a      	strb	r2, [r3, #4]

  return status;
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b082      	sub	sp, #8
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	330c      	adds	r3, #12
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7ff ffa7 	bl	8004d14 <HAL_RNG_GenerateRandomNumber>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d102      	bne.n	8004dd2 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	e000      	b.n	8004dd4 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8004dd2:	2300      	movs	r3, #0
  }
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e06b      	b.n	8004ec6 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	7f5b      	ldrb	r3, [r3, #29]
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d105      	bne.n	8004e04 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f006 f830 	bl	800ae64 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	22ca      	movs	r2, #202	; 0xca
 8004e10:	625a      	str	r2, [r3, #36]	; 0x24
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2253      	movs	r2, #83	; 0x53
 8004e18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fb00 	bl	8005420 <RTC_EnterInitMode>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	22ff      	movs	r2, #255	; 0xff
 8004e2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2204      	movs	r2, #4
 8004e32:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e046      	b.n	8004ec6 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6899      	ldr	r1, [r3, #8]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	4b23      	ldr	r3, [pc, #140]	; (8004ed0 <HAL_RTC_Init+0xf4>)
 8004e44:	400b      	ands	r3, r1
 8004e46:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6899      	ldr	r1, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	68d2      	ldr	r2, [r2, #12]
 8004e6e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6919      	ldr	r1, [r3, #16]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	041a      	lsls	r2, r3, #16
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e92:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0208 	bic.w	r2, r2, #8
 8004ea2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699a      	ldr	r2, [r3, #24]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	22ff      	movs	r2, #255	; 0xff
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
  }
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	ff8fffbf 	.word	0xff8fffbf

08004ed4 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ed4:	b590      	push	{r4, r7, lr}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	7f1b      	ldrb	r3, [r3, #28]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <HAL_RTC_SetTime+0x1c>
 8004eec:	2302      	movs	r3, #2
 8004eee:	e0a8      	b.n	8005042 <HAL_RTC_SetTime+0x16e>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d126      	bne.n	8004f50 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d102      	bne.n	8004f16 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2200      	movs	r2, #0
 8004f14:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 faac 	bl	8005478 <RTC_ByteToBcd2>
 8004f20:	4603      	mov	r3, r0
 8004f22:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	785b      	ldrb	r3, [r3, #1]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 faa5 	bl	8005478 <RTC_ByteToBcd2>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004f32:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	789b      	ldrb	r3, [r3, #2]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fa9d 	bl	8005478 <RTC_ByteToBcd2>
 8004f3e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004f40:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	7b1b      	ldrb	r3, [r3, #12]
 8004f48:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	e018      	b.n	8004f82 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d102      	bne.n	8004f64 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2200      	movs	r2, #0
 8004f62:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	785b      	ldrb	r3, [r3, #1]
 8004f6e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004f70:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8004f76:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	7b1b      	ldrb	r3, [r3, #12]
 8004f7c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	22ca      	movs	r2, #202	; 0xca
 8004f88:	625a      	str	r2, [r3, #36]	; 0x24
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2253      	movs	r2, #83	; 0x53
 8004f90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fa44 	bl	8005420 <RTC_EnterInitMode>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00b      	beq.n	8004fb6 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	22ff      	movs	r2, #255	; 0xff
 8004fa4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2204      	movs	r2, #4
 8004faa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e045      	b.n	8005042 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	6979      	ldr	r1, [r7, #20]
 8004fbc:	4b23      	ldr	r3, [pc, #140]	; (800504c <HAL_RTC_SetTime+0x178>)
 8004fbe:	400b      	ands	r3, r1
 8004fc0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fd0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6899      	ldr	r1, [r3, #8]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ff8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b00      	cmp	r3, #0
 8005006:	d111      	bne.n	800502c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 f9e1 	bl	80053d0 <HAL_RTC_WaitForSynchro>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00b      	beq.n	800502c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	22ff      	movs	r2, #255	; 0xff
 800501a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2204      	movs	r2, #4
 8005020:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e00a      	b.n	8005042 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	22ff      	movs	r2, #255	; 0xff
 8005032:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2201      	movs	r2, #1
 8005038:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005040:	2300      	movs	r3, #0
  }
}
 8005042:	4618      	mov	r0, r3
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	bd90      	pop	{r4, r7, pc}
 800504a:	bf00      	nop
 800504c:	007f7f7f 	.word	0x007f7f7f

08005050 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005050:	b590      	push	{r4, r7, lr}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	7f1b      	ldrb	r3, [r3, #28]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_RTC_SetDate+0x1c>
 8005068:	2302      	movs	r3, #2
 800506a:	e092      	b.n	8005192 <HAL_RTC_SetDate+0x142>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2201      	movs	r2, #1
 8005070:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2202      	movs	r2, #2
 8005076:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10e      	bne.n	800509c <HAL_RTC_SetDate+0x4c>
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	785b      	ldrb	r3, [r3, #1]
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	2b00      	cmp	r3, #0
 8005088:	d008      	beq.n	800509c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	785b      	ldrb	r3, [r3, #1]
 800508e:	f023 0310 	bic.w	r3, r3, #16
 8005092:	b2db      	uxtb	r3, r3
 8005094:	330a      	adds	r3, #10
 8005096:	b2da      	uxtb	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d11c      	bne.n	80050dc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	78db      	ldrb	r3, [r3, #3]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 f9e6 	bl	8005478 <RTC_ByteToBcd2>
 80050ac:	4603      	mov	r3, r0
 80050ae:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	785b      	ldrb	r3, [r3, #1]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 f9df 	bl	8005478 <RTC_ByteToBcd2>
 80050ba:	4603      	mov	r3, r0
 80050bc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80050be:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	789b      	ldrb	r3, [r3, #2]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 f9d7 	bl	8005478 <RTC_ByteToBcd2>
 80050ca:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80050cc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	e00e      	b.n	80050fa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	78db      	ldrb	r3, [r3, #3]
 80050e0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	785b      	ldrb	r3, [r3, #1]
 80050e6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80050e8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80050ee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	22ca      	movs	r2, #202	; 0xca
 8005100:	625a      	str	r2, [r3, #36]	; 0x24
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2253      	movs	r2, #83	; 0x53
 8005108:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 f988 	bl	8005420 <RTC_EnterInitMode>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00b      	beq.n	800512e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	22ff      	movs	r2, #255	; 0xff
 800511c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2204      	movs	r2, #4
 8005122:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e031      	b.n	8005192 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	6979      	ldr	r1, [r7, #20]
 8005134:	4b19      	ldr	r3, [pc, #100]	; (800519c <HAL_RTC_SetDate+0x14c>)
 8005136:	400b      	ands	r3, r1
 8005138:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005148:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b00      	cmp	r3, #0
 8005156:	d111      	bne.n	800517c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 f939 	bl	80053d0 <HAL_RTC_WaitForSynchro>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00b      	beq.n	800517c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	22ff      	movs	r2, #255	; 0xff
 800516a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2204      	movs	r2, #4
 8005170:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e00a      	b.n	8005192 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	22ff      	movs	r2, #255	; 0xff
 8005182:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005190:	2300      	movs	r3, #0
  }
}
 8005192:	4618      	mov	r0, r3
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	bd90      	pop	{r4, r7, pc}
 800519a:	bf00      	nop
 800519c:	00ffff3f 	.word	0x00ffff3f

080051a0 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80051a0:	b590      	push	{r4, r7, lr}
 80051a2:	b089      	sub	sp, #36	; 0x24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80051ac:	2300      	movs	r3, #0
 80051ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80051b0:	2300      	movs	r3, #0
 80051b2:	61fb      	str	r3, [r7, #28]
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	7f1b      	ldrb	r3, [r3, #28]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d101      	bne.n	80051c4 <HAL_RTC_SetAlarm+0x24>
 80051c0:	2302      	movs	r3, #2
 80051c2:	e101      	b.n	80053c8 <HAL_RTC_SetAlarm+0x228>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2201      	movs	r2, #1
 80051c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2202      	movs	r2, #2
 80051ce:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d137      	bne.n	8005246 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d102      	bne.n	80051ea <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2200      	movs	r2, #0
 80051e8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 f942 	bl	8005478 <RTC_ByteToBcd2>
 80051f4:	4603      	mov	r3, r0
 80051f6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	785b      	ldrb	r3, [r3, #1]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 f93b 	bl	8005478 <RTC_ByteToBcd2>
 8005202:	4603      	mov	r3, r0
 8005204:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005206:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	789b      	ldrb	r3, [r3, #2]
 800520c:	4618      	mov	r0, r3
 800520e:	f000 f933 	bl	8005478 <RTC_ByteToBcd2>
 8005212:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005214:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	7b1b      	ldrb	r3, [r3, #12]
 800521c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800521e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005228:	4618      	mov	r0, r3
 800522a:	f000 f925 	bl	8005478 <RTC_ByteToBcd2>
 800522e:	4603      	mov	r3, r0
 8005230:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005232:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800523a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005240:	4313      	orrs	r3, r2
 8005242:	61fb      	str	r3, [r7, #28]
 8005244:	e023      	b.n	800528e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d102      	bne.n	800525a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2200      	movs	r2, #0
 8005258:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	785b      	ldrb	r3, [r3, #1]
 8005264:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005266:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800526c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	7b1b      	ldrb	r3, [r3, #12]
 8005272:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005274:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800527c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800527e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005284:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800528a:	4313      	orrs	r3, r2
 800528c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	4313      	orrs	r3, r2
 8005298:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	22ca      	movs	r2, #202	; 0xca
 80052a0:	625a      	str	r2, [r3, #36]	; 0x24
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2253      	movs	r2, #83	; 0x53
 80052a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052b2:	d13f      	bne.n	8005334 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052c2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052d2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052d4:	f7fb f93a 	bl	800054c <HAL_GetTick>
 80052d8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80052da:	e013      	b.n	8005304 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80052dc:	f7fb f936 	bl	800054c <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052ea:	d90b      	bls.n	8005304 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	22ff      	movs	r2, #255	; 0xff
 80052f2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2203      	movs	r2, #3
 80052f8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e061      	b.n	80053c8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0e4      	beq.n	80052dc <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005330:	609a      	str	r2, [r3, #8]
 8005332:	e03e      	b.n	80053b2 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005342:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689a      	ldr	r2, [r3, #8]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005352:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005354:	f7fb f8fa 	bl	800054c <HAL_GetTick>
 8005358:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800535a:	e013      	b.n	8005384 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800535c:	f7fb f8f6 	bl	800054c <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800536a:	d90b      	bls.n	8005384 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	22ff      	movs	r2, #255	; 0xff
 8005372:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2203      	movs	r2, #3
 8005378:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e021      	b.n	80053c8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0e4      	beq.n	800535c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	69fa      	ldr	r2, [r7, #28]
 8005398:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	22ff      	movs	r2, #255	; 0xff
 80053b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2201      	movs	r2, #1
 80053be:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3724      	adds	r7, #36	; 0x24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd90      	pop	{r4, r7, pc}

080053d0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053ea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053ec:	f7fb f8ae 	bl	800054c <HAL_GetTick>
 80053f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80053f2:	e009      	b.n	8005408 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80053f4:	f7fb f8aa 	bl	800054c <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005402:	d901      	bls.n	8005408 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e007      	b.n	8005418 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f003 0320 	and.w	r3, r3, #32
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0ee      	beq.n	80053f4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005428:	2300      	movs	r3, #0
 800542a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005436:	2b00      	cmp	r3, #0
 8005438:	d119      	bne.n	800546e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f04f 32ff 	mov.w	r2, #4294967295
 8005442:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005444:	f7fb f882 	bl	800054c <HAL_GetTick>
 8005448:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800544a:	e009      	b.n	8005460 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800544c:	f7fb f87e 	bl	800054c <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800545a:	d901      	bls.n	8005460 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e007      	b.n	8005470 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0ee      	beq.n	800544c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	4603      	mov	r3, r0
 8005480:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8005482:	2300      	movs	r3, #0
 8005484:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8005486:	e005      	b.n	8005494 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	3301      	adds	r3, #1
 800548c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	3b0a      	subs	r3, #10
 8005492:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8005494:	79fb      	ldrb	r3, [r7, #7]
 8005496:	2b09      	cmp	r3, #9
 8005498:	d8f6      	bhi.n	8005488 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	b2db      	uxtb	r3, r3
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	b2db      	uxtb	r3, r3
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	7f1b      	ldrb	r3, [r3, #28]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_RTCEx_SetTimeStamp+0x1c>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e03e      	b.n	800554e <HAL_RTCEx_SetTimeStamp+0x9a>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2201      	movs	r2, #1
 80054d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2202      	movs	r2, #2
 80054da:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	4b1e      	ldr	r3, [pc, #120]	; (800555c <HAL_RTCEx_SetTimeStamp+0xa8>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	22ca      	movs	r2, #202	; 0xca
 80054f6:	625a      	str	r2, [r3, #36]	; 0x24
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2253      	movs	r2, #83	; 0x53
 80054fe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0206 	bic.w	r2, r2, #6
 800550e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	430a      	orrs	r2, r1
 800551e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005536:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	22ff      	movs	r2, #255	; 0xff
 800553e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2201      	movs	r2, #1
 8005544:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	fffff7f7 	.word	0xfffff7f7

08005560 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005568:	2300      	movs	r3, #0
 800556a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800556c:	2300      	movs	r3, #0
 800556e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e149      	b.n	8005812 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d106      	bne.n	8005598 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f005 ff56 	bl	800b444 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f94f 	bl	8005844 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d007      	beq.n	80055be <HAL_SAI_Init+0x5e>
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d302      	bcc.n	80055b8 <HAL_SAI_Init+0x58>
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d006      	beq.n	80055c4 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80055b6:	e008      	b.n	80055ca <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 80055b8:	2300      	movs	r3, #0
 80055ba:	61fb      	str	r3, [r7, #28]
      break;
 80055bc:	e005      	b.n	80055ca <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80055be:	2310      	movs	r3, #16
 80055c0:	61fb      	str	r3, [r7, #28]
      break;
 80055c2:	e002      	b.n	80055ca <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80055c4:	2320      	movs	r3, #32
 80055c6:	61fb      	str	r3, [r7, #28]
      break;
 80055c8:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	d81d      	bhi.n	800560e <HAL_SAI_Init+0xae>
 80055d2:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <HAL_SAI_Init+0x78>)
 80055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d8:	080055e9 	.word	0x080055e9
 80055dc:	080055ef 	.word	0x080055ef
 80055e0:	080055f7 	.word	0x080055f7
 80055e4:	080055ff 	.word	0x080055ff
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 80055e8:	2300      	movs	r3, #0
 80055ea:	617b      	str	r3, [r7, #20]
      }
      break;
 80055ec:	e010      	b.n	8005610 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 80055ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055f2:	617b      	str	r3, [r7, #20]
      }
      break;
 80055f4:	e00c      	b.n	8005610 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80055f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055fa:	617b      	str	r3, [r7, #20]
      }
      break;
 80055fc:	e008      	b.n	8005610 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80055fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005602:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f043 0301 	orr.w	r3, r3, #1
 800560a:	61fb      	str	r3, [r7, #28]
      }
      break;
 800560c:	e000      	b.n	8005610 <HAL_SAI_Init+0xb0>
  default:
    break;
 800560e:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a81      	ldr	r2, [pc, #516]	; (800581c <HAL_SAI_Init+0x2bc>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d004      	beq.n	8005624 <HAL_SAI_Init+0xc4>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a80      	ldr	r2, [pc, #512]	; (8005820 <HAL_SAI_Init+0x2c0>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d103      	bne.n	800562c <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8005624:	4a7f      	ldr	r2, [pc, #508]	; (8005824 <HAL_SAI_Init+0x2c4>)
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	e002      	b.n	8005632 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800562c:	4a7e      	ldr	r2, [pc, #504]	; (8005828 <HAL_SAI_Init+0x2c8>)
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d043      	beq.n	80056c2 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800563a:	2300      	movs	r3, #0
 800563c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a76      	ldr	r2, [pc, #472]	; (800581c <HAL_SAI_Init+0x2bc>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d004      	beq.n	8005652 <HAL_SAI_Init+0xf2>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a74      	ldr	r2, [pc, #464]	; (8005820 <HAL_SAI_Init+0x2c0>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d104      	bne.n	800565c <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005652:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005656:	f7ff f9ff 	bl	8004a58 <HAL_RCCEx_GetPeriphCLKFreq>
 800565a:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a72      	ldr	r2, [pc, #456]	; (800582c <HAL_SAI_Init+0x2cc>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d004      	beq.n	8005670 <HAL_SAI_Init+0x110>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a71      	ldr	r2, [pc, #452]	; (8005830 <HAL_SAI_Init+0x2d0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d104      	bne.n	800567a <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005670:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005674:	f7ff f9f0 	bl	8004a58 <HAL_RCCEx_GetPeriphCLKFreq>
 8005678:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	4613      	mov	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	461a      	mov	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	025b      	lsls	r3, r3, #9
 800568c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005690:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4a67      	ldr	r2, [pc, #412]	; (8005834 <HAL_SAI_Init+0x2d4>)
 8005696:	fba2 2303 	umull	r2, r3, r2, r3
 800569a:	08da      	lsrs	r2, r3, #3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80056a0:	68f9      	ldr	r1, [r7, #12]
 80056a2:	4b64      	ldr	r3, [pc, #400]	; (8005834 <HAL_SAI_Init+0x2d4>)
 80056a4:	fba3 2301 	umull	r2, r3, r3, r1
 80056a8:	08da      	lsrs	r2, r3, #3
 80056aa:	4613      	mov	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	1aca      	subs	r2, r1, r3
 80056b4:	2a08      	cmp	r2, #8
 80056b6:	d904      	bls.n	80056c2 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_SAI_Init+0x172>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d109      	bne.n	80056e6 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d101      	bne.n	80056de <HAL_SAI_Init+0x17e>
 80056da:	2300      	movs	r3, #0
 80056dc:	e001      	b.n	80056e2 <HAL_SAI_Init+0x182>
 80056de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056e2:	61bb      	str	r3, [r7, #24]
 80056e4:	e008      	b.n	80056f8 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d102      	bne.n	80056f4 <HAL_SAI_Init+0x194>
 80056ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056f2:	e000      	b.n	80056f6 <HAL_SAI_Init+0x196>
 80056f4:	2300      	movs	r3, #0
 80056f6:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6819      	ldr	r1, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4b4d      	ldr	r3, [pc, #308]	; (8005838 <HAL_SAI_Init+0x2d8>)
 8005704:	400b      	ands	r3, r1
 8005706:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6819      	ldr	r1, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005716:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800571c:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	431a      	orrs	r2, r3
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8005730:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800573c:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	051b      	lsls	r3, r3, #20
 8005744:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6859      	ldr	r1, [r3, #4]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	4b38      	ldr	r3, [pc, #224]	; (800583c <HAL_SAI_Init+0x2dc>)
 800575a:	400b      	ands	r3, r1
 800575c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6859      	ldr	r1, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	699a      	ldr	r2, [r3, #24]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6899      	ldr	r1, [r3, #8]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	4b2e      	ldr	r3, [pc, #184]	; (8005840 <HAL_SAI_Init+0x2e0>)
 8005788:	400b      	ands	r3, r1
 800578a:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6899      	ldr	r1, [r3, #8]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800579c:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80057a2:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80057a8:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ae:	3b01      	subs	r3, #1
 80057b0:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80057b2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	430a      	orrs	r2, r1
 80057ba:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68d9      	ldr	r1, [r3, #12]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	f24f 0320 	movw	r3, #61472	; 0xf020
 80057ca:	400b      	ands	r3, r1
 80057cc:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68d9      	ldr	r1, [r3, #12]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057dc:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e2:	041b      	lsls	r3, r3, #16
 80057e4:	431a      	orrs	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ea:	3b01      	subs	r3, #1
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3720      	adds	r7, #32
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	40015804 	.word	0x40015804
 8005820:	40015824 	.word	0x40015824
 8005824:	40015800 	.word	0x40015800
 8005828:	40015c00 	.word	0x40015c00
 800582c:	40015c04 	.word	0x40015c04
 8005830:	40015c24 	.word	0x40015c24
 8005834:	cccccccd 	.word	0xcccccccd
 8005838:	ff05c010 	.word	0xff05c010
 800583c:	ffff1ff0 	.word	0xffff1ff0
 8005840:	fff88000 	.word	0xfff88000

08005844 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005844:	b490      	push	{r4, r7}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800584c:	4b16      	ldr	r3, [pc, #88]	; (80058a8 <SAI_Disable+0x64>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a16      	ldr	r2, [pc, #88]	; (80058ac <SAI_Disable+0x68>)
 8005852:	fba2 2303 	umull	r2, r3, r2, r3
 8005856:	0b1b      	lsrs	r3, r3, #12
 8005858:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800586c:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800586e:	4623      	mov	r3, r4
 8005870:	1e5c      	subs	r4, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10a      	bne.n	800588c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800587c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	73fb      	strb	r3, [r7, #15]
      break;
 800588a:	e006      	b.n	800589a <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e9      	bne.n	800586e <SAI_Disable+0x2a>

  return status;
 800589a:	7bfb      	ldrb	r3, [r7, #15]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bc90      	pop	{r4, r7}
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	20000004 	.word	0x20000004
 80058ac:	95cbec1b 	.word	0x95cbec1b

080058b0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e025      	b.n	8005910 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d106      	bne.n	80058de <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f005 fda9 	bl	800b430 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2202      	movs	r2, #2
 80058e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3304      	adds	r3, #4
 80058ee:	4619      	mov	r1, r3
 80058f0:	4610      	mov	r0, r2
 80058f2:	f001 fd35 	bl	8007360 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	461a      	mov	r2, r3
 8005900:	6839      	ldr	r1, [r7, #0]
 8005902:	f001 fd9f 	bl	8007444 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e04c      	b.n	80059c4 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d106      	bne.n	8005944 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f005 faaa 	bl	800ae98 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0203 	bic.w	r2, r2, #3
 800595a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4b19      	ldr	r3, [pc, #100]	; (80059cc <HAL_SPDIFRX_Init+0xb4>)
 8005968:	4013      	ands	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8005974:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800597a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8005980:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8005986:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800598c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8005992:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8005998:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800599e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 80059a4:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	fff88407 	.word	0xfff88407

080059d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e084      	b.n	8005aec <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d106      	bne.n	8005a02 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f005 fa8d 	bl	800af1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2202      	movs	r2, #2
 8005a06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a18:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a22:	d902      	bls.n	8005a2a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a24:	2300      	movs	r3, #0
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	e002      	b.n	8005a30 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a2e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a38:	d007      	beq.n	8005a4a <HAL_SPI_Init+0x7a>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a42:	d002      	beq.n	8005a4a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10b      	bne.n	8005a6a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a5a:	d903      	bls.n	8005a64 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	631a      	str	r2, [r3, #48]	; 0x30
 8005a62:	e002      	b.n	8005a6a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	ea42 0103 	orr.w	r1, r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	0c1b      	lsrs	r3, r3, #16
 8005aaa:	f003 0204 	and.w	r2, r3, #4
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	ea42 0103 	orr.w	r1, r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	69da      	ldr	r2, [r3, #28]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ada:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e01d      	b.n	8005b42 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f005 fa60 	bl	800afe0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3304      	adds	r3, #4
 8005b30:	4619      	mov	r1, r3
 8005b32:	4610      	mov	r0, r2
 8005b34:	f000 fb78 	bl	8006228 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0201 	orr.w	r2, r2, #1
 8005b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	4b0c      	ldr	r3, [pc, #48]	; (8005b9c <HAL_TIM_Base_Start_IT+0x50>)
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2b06      	cmp	r3, #6
 8005b74:	d00b      	beq.n	8005b8e <HAL_TIM_Base_Start_IT+0x42>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b7c:	d007      	beq.n	8005b8e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f042 0201 	orr.w	r2, r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	00010007 	.word	0x00010007

08005ba0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e01d      	b.n	8005bee <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d106      	bne.n	8005bcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f005 fa78 	bl	800b0bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3304      	adds	r3, #4
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4610      	mov	r0, r2
 8005be0:	f000 fb22 	bl	8006228 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d122      	bne.n	8005c52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d11b      	bne.n	8005c52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f06f 0202 	mvn.w	r2, #2
 8005c22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	f003 0303 	and.w	r3, r3, #3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fad7 	bl	80061ec <HAL_TIM_IC_CaptureCallback>
 8005c3e:	e005      	b.n	8005c4c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fac9 	bl	80061d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fada 	bl	8006200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	f003 0304 	and.w	r3, r3, #4
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d122      	bne.n	8005ca6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f003 0304 	and.w	r3, r3, #4
 8005c6a:	2b04      	cmp	r3, #4
 8005c6c:	d11b      	bne.n	8005ca6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f06f 0204 	mvn.w	r2, #4
 8005c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 faad 	bl	80061ec <HAL_TIM_IC_CaptureCallback>
 8005c92:	e005      	b.n	8005ca0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 fa9f 	bl	80061d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fab0 	bl	8006200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f003 0308 	and.w	r3, r3, #8
 8005cb0:	2b08      	cmp	r3, #8
 8005cb2:	d122      	bne.n	8005cfa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f003 0308 	and.w	r3, r3, #8
 8005cbe:	2b08      	cmp	r3, #8
 8005cc0:	d11b      	bne.n	8005cfa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f06f 0208 	mvn.w	r2, #8
 8005cca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2204      	movs	r2, #4
 8005cd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fa83 	bl	80061ec <HAL_TIM_IC_CaptureCallback>
 8005ce6:	e005      	b.n	8005cf4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fa75 	bl	80061d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fa86 	bl	8006200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	f003 0310 	and.w	r3, r3, #16
 8005d04:	2b10      	cmp	r3, #16
 8005d06:	d122      	bne.n	8005d4e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f003 0310 	and.w	r3, r3, #16
 8005d12:	2b10      	cmp	r3, #16
 8005d14:	d11b      	bne.n	8005d4e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f06f 0210 	mvn.w	r2, #16
 8005d1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2208      	movs	r2, #8
 8005d24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fa59 	bl	80061ec <HAL_TIM_IC_CaptureCallback>
 8005d3a:	e005      	b.n	8005d48 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fa4b 	bl	80061d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fa5c 	bl	8006200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d10e      	bne.n	8005d7a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d107      	bne.n	8005d7a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f06f 0201 	mvn.w	r2, #1
 8005d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f004 fd03 	bl	800a780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d84:	2b80      	cmp	r3, #128	; 0x80
 8005d86:	d10e      	bne.n	8005da6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d92:	2b80      	cmp	r3, #128	; 0x80
 8005d94:	d107      	bne.n	8005da6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 febd 	bl	8006b20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005db4:	d10e      	bne.n	8005dd4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc0:	2b80      	cmp	r3, #128	; 0x80
 8005dc2:	d107      	bne.n	8005dd4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 feb0 	bl	8006b34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dde:	2b40      	cmp	r3, #64	; 0x40
 8005de0:	d10e      	bne.n	8005e00 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dec:	2b40      	cmp	r3, #64	; 0x40
 8005dee:	d107      	bne.n	8005e00 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fa0a 	bl	8006214 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f003 0320 	and.w	r3, r3, #32
 8005e0a:	2b20      	cmp	r3, #32
 8005e0c:	d10e      	bne.n	8005e2c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f003 0320 	and.w	r3, r3, #32
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d107      	bne.n	8005e2c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f06f 0220 	mvn.w	r2, #32
 8005e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fe70 	bl	8006b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e2c:	bf00      	nop
 8005e2e:	3708      	adds	r7, #8
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	e105      	b.n	800605a <HAL_TIM_PWM_ConfigChannel+0x226>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2202      	movs	r2, #2
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b14      	cmp	r3, #20
 8005e62:	f200 80f0 	bhi.w	8006046 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005e66:	a201      	add	r2, pc, #4	; (adr r2, 8005e6c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6c:	08005ec1 	.word	0x08005ec1
 8005e70:	08006047 	.word	0x08006047
 8005e74:	08006047 	.word	0x08006047
 8005e78:	08006047 	.word	0x08006047
 8005e7c:	08005f01 	.word	0x08005f01
 8005e80:	08006047 	.word	0x08006047
 8005e84:	08006047 	.word	0x08006047
 8005e88:	08006047 	.word	0x08006047
 8005e8c:	08005f43 	.word	0x08005f43
 8005e90:	08006047 	.word	0x08006047
 8005e94:	08006047 	.word	0x08006047
 8005e98:	08006047 	.word	0x08006047
 8005e9c:	08005f83 	.word	0x08005f83
 8005ea0:	08006047 	.word	0x08006047
 8005ea4:	08006047 	.word	0x08006047
 8005ea8:	08006047 	.word	0x08006047
 8005eac:	08005fc5 	.word	0x08005fc5
 8005eb0:	08006047 	.word	0x08006047
 8005eb4:	08006047 	.word	0x08006047
 8005eb8:	08006047 	.word	0x08006047
 8005ebc:	08006005 	.word	0x08006005
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68b9      	ldr	r1, [r7, #8]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fa4e 	bl	8006368 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699a      	ldr	r2, [r3, #24]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 0208 	orr.w	r2, r2, #8
 8005eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699a      	ldr	r2, [r3, #24]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 0204 	bic.w	r2, r2, #4
 8005eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6999      	ldr	r1, [r3, #24]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	691a      	ldr	r2, [r3, #16]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	619a      	str	r2, [r3, #24]
      break;
 8005efe:	e0a3      	b.n	8006048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68b9      	ldr	r1, [r7, #8]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 faa0 	bl	800644c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699a      	ldr	r2, [r3, #24]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	699a      	ldr	r2, [r3, #24]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6999      	ldr	r1, [r3, #24]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	021a      	lsls	r2, r3, #8
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	619a      	str	r2, [r3, #24]
      break;
 8005f40:	e082      	b.n	8006048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 faf7 	bl	800653c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69da      	ldr	r2, [r3, #28]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f042 0208 	orr.w	r2, r2, #8
 8005f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69da      	ldr	r2, [r3, #28]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0204 	bic.w	r2, r2, #4
 8005f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69d9      	ldr	r1, [r3, #28]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	691a      	ldr	r2, [r3, #16]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	61da      	str	r2, [r3, #28]
      break;
 8005f80:	e062      	b.n	8006048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68b9      	ldr	r1, [r7, #8]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 fb4d 	bl	8006628 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69da      	ldr	r2, [r3, #28]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69da      	ldr	r2, [r3, #28]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	69d9      	ldr	r1, [r3, #28]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	021a      	lsls	r2, r3, #8
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	61da      	str	r2, [r3, #28]
      break;
 8005fc2:	e041      	b.n	8006048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68b9      	ldr	r1, [r7, #8]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 fb84 	bl	80066d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0208 	orr.w	r2, r2, #8
 8005fde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0204 	bic.w	r2, r2, #4
 8005fee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	691a      	ldr	r2, [r3, #16]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006002:	e021      	b.n	8006048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fbb6 	bl	800677c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800601e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800602e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	021a      	lsls	r2, r3, #8
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006044:	e000      	b.n	8006048 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006046:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop

08006064 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_TIM_ConfigClockSource+0x18>
 8006078:	2302      	movs	r3, #2
 800607a:	e0a6      	b.n	80061ca <HAL_TIM_ConfigClockSource+0x166>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4b4f      	ldr	r3, [pc, #316]	; (80061d4 <HAL_TIM_ConfigClockSource+0x170>)
 8006098:	4013      	ands	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b40      	cmp	r3, #64	; 0x40
 80060b2:	d067      	beq.n	8006184 <HAL_TIM_ConfigClockSource+0x120>
 80060b4:	2b40      	cmp	r3, #64	; 0x40
 80060b6:	d80b      	bhi.n	80060d0 <HAL_TIM_ConfigClockSource+0x6c>
 80060b8:	2b10      	cmp	r3, #16
 80060ba:	d073      	beq.n	80061a4 <HAL_TIM_ConfigClockSource+0x140>
 80060bc:	2b10      	cmp	r3, #16
 80060be:	d802      	bhi.n	80060c6 <HAL_TIM_ConfigClockSource+0x62>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d06f      	beq.n	80061a4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80060c4:	e078      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060c6:	2b20      	cmp	r3, #32
 80060c8:	d06c      	beq.n	80061a4 <HAL_TIM_ConfigClockSource+0x140>
 80060ca:	2b30      	cmp	r3, #48	; 0x30
 80060cc:	d06a      	beq.n	80061a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80060ce:	e073      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060d0:	2b70      	cmp	r3, #112	; 0x70
 80060d2:	d00d      	beq.n	80060f0 <HAL_TIM_ConfigClockSource+0x8c>
 80060d4:	2b70      	cmp	r3, #112	; 0x70
 80060d6:	d804      	bhi.n	80060e2 <HAL_TIM_ConfigClockSource+0x7e>
 80060d8:	2b50      	cmp	r3, #80	; 0x50
 80060da:	d033      	beq.n	8006144 <HAL_TIM_ConfigClockSource+0xe0>
 80060dc:	2b60      	cmp	r3, #96	; 0x60
 80060de:	d041      	beq.n	8006164 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80060e0:	e06a      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e6:	d066      	beq.n	80061b6 <HAL_TIM_ConfigClockSource+0x152>
 80060e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ec:	d017      	beq.n	800611e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80060ee:	e063      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6818      	ldr	r0, [r3, #0]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	6899      	ldr	r1, [r3, #8]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f000 fc0a 	bl	8006918 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006112:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	609a      	str	r2, [r3, #8]
      break;
 800611c:	e04c      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6818      	ldr	r0, [r3, #0]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	6899      	ldr	r1, [r3, #8]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f000 fbf3 	bl	8006918 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006140:	609a      	str	r2, [r3, #8]
      break;
 8006142:	e039      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6818      	ldr	r0, [r3, #0]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	6859      	ldr	r1, [r3, #4]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	461a      	mov	r2, r3
 8006152:	f000 fb67 	bl	8006824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2150      	movs	r1, #80	; 0x50
 800615c:	4618      	mov	r0, r3
 800615e:	f000 fbc0 	bl	80068e2 <TIM_ITRx_SetConfig>
      break;
 8006162:	e029      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6818      	ldr	r0, [r3, #0]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	6859      	ldr	r1, [r3, #4]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	461a      	mov	r2, r3
 8006172:	f000 fb86 	bl	8006882 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2160      	movs	r1, #96	; 0x60
 800617c:	4618      	mov	r0, r3
 800617e:	f000 fbb0 	bl	80068e2 <TIM_ITRx_SetConfig>
      break;
 8006182:	e019      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6818      	ldr	r0, [r3, #0]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	6859      	ldr	r1, [r3, #4]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	461a      	mov	r2, r3
 8006192:	f000 fb47 	bl	8006824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2140      	movs	r1, #64	; 0x40
 800619c:	4618      	mov	r0, r3
 800619e:	f000 fba0 	bl	80068e2 <TIM_ITRx_SetConfig>
      break;
 80061a2:	e009      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4619      	mov	r1, r3
 80061ae:	4610      	mov	r0, r2
 80061b0:	f000 fb97 	bl	80068e2 <TIM_ITRx_SetConfig>
      break;
 80061b4:	e000      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80061b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	fffeff88 	.word	0xfffeff88

080061d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a40      	ldr	r2, [pc, #256]	; (800633c <TIM_Base_SetConfig+0x114>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d013      	beq.n	8006268 <TIM_Base_SetConfig+0x40>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006246:	d00f      	beq.n	8006268 <TIM_Base_SetConfig+0x40>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a3d      	ldr	r2, [pc, #244]	; (8006340 <TIM_Base_SetConfig+0x118>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00b      	beq.n	8006268 <TIM_Base_SetConfig+0x40>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a3c      	ldr	r2, [pc, #240]	; (8006344 <TIM_Base_SetConfig+0x11c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d007      	beq.n	8006268 <TIM_Base_SetConfig+0x40>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a3b      	ldr	r2, [pc, #236]	; (8006348 <TIM_Base_SetConfig+0x120>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d003      	beq.n	8006268 <TIM_Base_SetConfig+0x40>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a3a      	ldr	r2, [pc, #232]	; (800634c <TIM_Base_SetConfig+0x124>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d108      	bne.n	800627a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a2f      	ldr	r2, [pc, #188]	; (800633c <TIM_Base_SetConfig+0x114>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d02b      	beq.n	80062da <TIM_Base_SetConfig+0xb2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006288:	d027      	beq.n	80062da <TIM_Base_SetConfig+0xb2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a2c      	ldr	r2, [pc, #176]	; (8006340 <TIM_Base_SetConfig+0x118>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d023      	beq.n	80062da <TIM_Base_SetConfig+0xb2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a2b      	ldr	r2, [pc, #172]	; (8006344 <TIM_Base_SetConfig+0x11c>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d01f      	beq.n	80062da <TIM_Base_SetConfig+0xb2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a2a      	ldr	r2, [pc, #168]	; (8006348 <TIM_Base_SetConfig+0x120>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d01b      	beq.n	80062da <TIM_Base_SetConfig+0xb2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a29      	ldr	r2, [pc, #164]	; (800634c <TIM_Base_SetConfig+0x124>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d017      	beq.n	80062da <TIM_Base_SetConfig+0xb2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a28      	ldr	r2, [pc, #160]	; (8006350 <TIM_Base_SetConfig+0x128>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d013      	beq.n	80062da <TIM_Base_SetConfig+0xb2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a27      	ldr	r2, [pc, #156]	; (8006354 <TIM_Base_SetConfig+0x12c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d00f      	beq.n	80062da <TIM_Base_SetConfig+0xb2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a26      	ldr	r2, [pc, #152]	; (8006358 <TIM_Base_SetConfig+0x130>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d00b      	beq.n	80062da <TIM_Base_SetConfig+0xb2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a25      	ldr	r2, [pc, #148]	; (800635c <TIM_Base_SetConfig+0x134>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d007      	beq.n	80062da <TIM_Base_SetConfig+0xb2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a24      	ldr	r2, [pc, #144]	; (8006360 <TIM_Base_SetConfig+0x138>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d003      	beq.n	80062da <TIM_Base_SetConfig+0xb2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a23      	ldr	r2, [pc, #140]	; (8006364 <TIM_Base_SetConfig+0x13c>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d108      	bne.n	80062ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a0a      	ldr	r2, [pc, #40]	; (800633c <TIM_Base_SetConfig+0x114>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d003      	beq.n	8006320 <TIM_Base_SetConfig+0xf8>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a0c      	ldr	r2, [pc, #48]	; (800634c <TIM_Base_SetConfig+0x124>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d103      	bne.n	8006328 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	615a      	str	r2, [r3, #20]
}
 800632e:	bf00      	nop
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	40010000 	.word	0x40010000
 8006340:	40000400 	.word	0x40000400
 8006344:	40000800 	.word	0x40000800
 8006348:	40000c00 	.word	0x40000c00
 800634c:	40010400 	.word	0x40010400
 8006350:	40014000 	.word	0x40014000
 8006354:	40014400 	.word	0x40014400
 8006358:	40014800 	.word	0x40014800
 800635c:	40001800 	.word	0x40001800
 8006360:	40001c00 	.word	0x40001c00
 8006364:	40002000 	.word	0x40002000

08006368 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	f023 0201 	bic.w	r2, r3, #1
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	4b2b      	ldr	r3, [pc, #172]	; (8006440 <TIM_OC1_SetConfig+0xd8>)
 8006394:	4013      	ands	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f023 0303 	bic.w	r3, r3, #3
 800639e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f023 0302 	bic.w	r3, r3, #2
 80063b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a21      	ldr	r2, [pc, #132]	; (8006444 <TIM_OC1_SetConfig+0xdc>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d003      	beq.n	80063cc <TIM_OC1_SetConfig+0x64>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a20      	ldr	r2, [pc, #128]	; (8006448 <TIM_OC1_SetConfig+0xe0>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d10c      	bne.n	80063e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f023 0308 	bic.w	r3, r3, #8
 80063d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	4313      	orrs	r3, r2
 80063dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f023 0304 	bic.w	r3, r3, #4
 80063e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a16      	ldr	r2, [pc, #88]	; (8006444 <TIM_OC1_SetConfig+0xdc>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d003      	beq.n	80063f6 <TIM_OC1_SetConfig+0x8e>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a15      	ldr	r2, [pc, #84]	; (8006448 <TIM_OC1_SetConfig+0xe0>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d111      	bne.n	800641a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4313      	orrs	r3, r2
 800640e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4313      	orrs	r3, r2
 8006418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	621a      	str	r2, [r3, #32]
}
 8006434:	bf00      	nop
 8006436:	371c      	adds	r7, #28
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	fffeff8f 	.word	0xfffeff8f
 8006444:	40010000 	.word	0x40010000
 8006448:	40010400 	.word	0x40010400

0800644c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	f023 0210 	bic.w	r2, r3, #16
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	4b2e      	ldr	r3, [pc, #184]	; (8006530 <TIM_OC2_SetConfig+0xe4>)
 8006478:	4013      	ands	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	021b      	lsls	r3, r3, #8
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	4313      	orrs	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f023 0320 	bic.w	r3, r3, #32
 8006496:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	011b      	lsls	r3, r3, #4
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a23      	ldr	r2, [pc, #140]	; (8006534 <TIM_OC2_SetConfig+0xe8>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d003      	beq.n	80064b4 <TIM_OC2_SetConfig+0x68>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a22      	ldr	r2, [pc, #136]	; (8006538 <TIM_OC2_SetConfig+0xec>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d10d      	bne.n	80064d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	011b      	lsls	r3, r3, #4
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a18      	ldr	r2, [pc, #96]	; (8006534 <TIM_OC2_SetConfig+0xe8>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d003      	beq.n	80064e0 <TIM_OC2_SetConfig+0x94>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a17      	ldr	r2, [pc, #92]	; (8006538 <TIM_OC2_SetConfig+0xec>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d113      	bne.n	8006508 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	4313      	orrs	r3, r2
 8006506:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	685a      	ldr	r2, [r3, #4]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	621a      	str	r2, [r3, #32]
}
 8006522:	bf00      	nop
 8006524:	371c      	adds	r7, #28
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	feff8fff 	.word	0xfeff8fff
 8006534:	40010000 	.word	0x40010000
 8006538:	40010400 	.word	0x40010400

0800653c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	4b2d      	ldr	r3, [pc, #180]	; (800661c <TIM_OC3_SetConfig+0xe0>)
 8006568:	4013      	ands	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 0303 	bic.w	r3, r3, #3
 8006572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	021b      	lsls	r3, r3, #8
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	4313      	orrs	r3, r2
 8006590:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a22      	ldr	r2, [pc, #136]	; (8006620 <TIM_OC3_SetConfig+0xe4>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d003      	beq.n	80065a2 <TIM_OC3_SetConfig+0x66>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a21      	ldr	r2, [pc, #132]	; (8006624 <TIM_OC3_SetConfig+0xe8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d10d      	bne.n	80065be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	021b      	lsls	r3, r3, #8
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a17      	ldr	r2, [pc, #92]	; (8006620 <TIM_OC3_SetConfig+0xe4>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d003      	beq.n	80065ce <TIM_OC3_SetConfig+0x92>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a16      	ldr	r2, [pc, #88]	; (8006624 <TIM_OC3_SetConfig+0xe8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d113      	bne.n	80065f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	011b      	lsls	r3, r3, #4
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	621a      	str	r2, [r3, #32]
}
 8006610:	bf00      	nop
 8006612:	371c      	adds	r7, #28
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	fffeff8f 	.word	0xfffeff8f
 8006620:	40010000 	.word	0x40010000
 8006624:	40010400 	.word	0x40010400

08006628 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	4b1e      	ldr	r3, [pc, #120]	; (80066cc <TIM_OC4_SetConfig+0xa4>)
 8006654:	4013      	ands	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800665e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	021b      	lsls	r3, r3, #8
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	4313      	orrs	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006672:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	031b      	lsls	r3, r3, #12
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	4313      	orrs	r3, r2
 800667e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a13      	ldr	r2, [pc, #76]	; (80066d0 <TIM_OC4_SetConfig+0xa8>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d003      	beq.n	8006690 <TIM_OC4_SetConfig+0x68>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a12      	ldr	r2, [pc, #72]	; (80066d4 <TIM_OC4_SetConfig+0xac>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d109      	bne.n	80066a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006696:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	019b      	lsls	r3, r3, #6
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	621a      	str	r2, [r3, #32]
}
 80066be:	bf00      	nop
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	feff8fff 	.word	0xfeff8fff
 80066d0:	40010000 	.word	0x40010000
 80066d4:	40010400 	.word	0x40010400

080066d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4b1b      	ldr	r3, [pc, #108]	; (8006770 <TIM_OC5_SetConfig+0x98>)
 8006704:	4013      	ands	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	4313      	orrs	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006718:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	041b      	lsls	r3, r3, #16
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	4313      	orrs	r3, r2
 8006724:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a12      	ldr	r2, [pc, #72]	; (8006774 <TIM_OC5_SetConfig+0x9c>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d003      	beq.n	8006736 <TIM_OC5_SetConfig+0x5e>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a11      	ldr	r2, [pc, #68]	; (8006778 <TIM_OC5_SetConfig+0xa0>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d109      	bne.n	800674a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800673c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	021b      	lsls	r3, r3, #8
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	4313      	orrs	r3, r2
 8006748:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	621a      	str	r2, [r3, #32]
}
 8006764:	bf00      	nop
 8006766:	371c      	adds	r7, #28
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	fffeff8f 	.word	0xfffeff8f
 8006774:	40010000 	.word	0x40010000
 8006778:	40010400 	.word	0x40010400

0800677c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	4b1c      	ldr	r3, [pc, #112]	; (8006818 <TIM_OC6_SetConfig+0x9c>)
 80067a8:	4013      	ands	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	021b      	lsls	r3, r3, #8
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	051b      	lsls	r3, r3, #20
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a13      	ldr	r2, [pc, #76]	; (800681c <TIM_OC6_SetConfig+0xa0>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d003      	beq.n	80067dc <TIM_OC6_SetConfig+0x60>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a12      	ldr	r2, [pc, #72]	; (8006820 <TIM_OC6_SetConfig+0xa4>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d109      	bne.n	80067f0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	029b      	lsls	r3, r3, #10
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	621a      	str	r2, [r3, #32]
}
 800680a:	bf00      	nop
 800680c:	371c      	adds	r7, #28
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	feff8fff 	.word	0xfeff8fff
 800681c:	40010000 	.word	0x40010000
 8006820:	40010400 	.word	0x40010400

08006824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006824:	b480      	push	{r7}
 8006826:	b087      	sub	sp, #28
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	f023 0201 	bic.w	r2, r3, #1
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800684e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	011b      	lsls	r3, r3, #4
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	4313      	orrs	r3, r2
 8006858:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f023 030a 	bic.w	r3, r3, #10
 8006860:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	4313      	orrs	r3, r2
 8006868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	621a      	str	r2, [r3, #32]
}
 8006876:	bf00      	nop
 8006878:	371c      	adds	r7, #28
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006882:	b480      	push	{r7}
 8006884:	b087      	sub	sp, #28
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	f023 0210 	bic.w	r2, r3, #16
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	031b      	lsls	r3, r3, #12
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	011b      	lsls	r3, r3, #4
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	621a      	str	r2, [r3, #32]
}
 80068d6:	bf00      	nop
 80068d8:	371c      	adds	r7, #28
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b085      	sub	sp, #20
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4313      	orrs	r3, r2
 8006900:	f043 0307 	orr.w	r3, r3, #7
 8006904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	609a      	str	r2, [r3, #8]
}
 800690c:	bf00      	nop
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006918:	b480      	push	{r7}
 800691a:	b087      	sub	sp, #28
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
 8006924:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006932:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	021a      	lsls	r2, r3, #8
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	431a      	orrs	r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4313      	orrs	r3, r2
 8006940:	697a      	ldr	r2, [r7, #20]
 8006942:	4313      	orrs	r3, r2
 8006944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	609a      	str	r2, [r3, #8]
}
 800694c:	bf00      	nop
 800694e:	371c      	adds	r7, #28
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006968:	2b01      	cmp	r3, #1
 800696a:	d101      	bne.n	8006970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800696c:	2302      	movs	r3, #2
 800696e:	e045      	b.n	80069fc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a1c      	ldr	r2, [pc, #112]	; (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d004      	beq.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a1b      	ldr	r2, [pc, #108]	; (8006a0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d108      	bne.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80069aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ce:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	40010000 	.word	0x40010000
 8006a0c:	40010400 	.word	0x40010400

08006a10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d101      	bne.n	8006a2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e065      	b.n	8006af8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	041b      	lsls	r3, r3, #16
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a16      	ldr	r2, [pc, #88]	; (8006b04 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d004      	beq.n	8006aba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a14      	ldr	r2, [pc, #80]	; (8006b08 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d115      	bne.n	8006ae6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	051b      	lsls	r3, r3, #20
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	40010000 	.word	0x40010000
 8006b08:	40010400 	.word	0x40010400

08006b0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e040      	b.n	8006bdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f004 fb6e 	bl	800b24c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2224      	movs	r2, #36	; 0x24
 8006b74:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f022 0201 	bic.w	r2, r2, #1
 8006b84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f82c 	bl	8006be4 <UART_SetConfig>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d101      	bne.n	8006b96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e022      	b.n	8006bdc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fac4 	bl	800712c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bc2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 0201 	orr.w	r2, r2, #1
 8006bd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fb4b 	bl	8007270 <UART_CheckIdleState>
 8006bda:	4603      	mov	r3, r0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b088      	sub	sp, #32
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	4bb1      	ldr	r3, [pc, #708]	; (8006ed8 <UART_SetConfig+0x2f4>)
 8006c14:	4013      	ands	r3, r2
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	6812      	ldr	r2, [r2, #0]
 8006c1a:	6939      	ldr	r1, [r7, #16]
 8006c1c:	430b      	orrs	r3, r1
 8006c1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68da      	ldr	r2, [r3, #12]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a9f      	ldr	r2, [pc, #636]	; (8006edc <UART_SetConfig+0x2f8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d121      	bne.n	8006ca8 <UART_SetConfig+0xc4>
 8006c64:	4b9e      	ldr	r3, [pc, #632]	; (8006ee0 <UART_SetConfig+0x2fc>)
 8006c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c6a:	f003 0303 	and.w	r3, r3, #3
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d816      	bhi.n	8006ca0 <UART_SetConfig+0xbc>
 8006c72:	a201      	add	r2, pc, #4	; (adr r2, 8006c78 <UART_SetConfig+0x94>)
 8006c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c78:	08006c89 	.word	0x08006c89
 8006c7c:	08006c95 	.word	0x08006c95
 8006c80:	08006c8f 	.word	0x08006c8f
 8006c84:	08006c9b 	.word	0x08006c9b
 8006c88:	2301      	movs	r3, #1
 8006c8a:	77fb      	strb	r3, [r7, #31]
 8006c8c:	e151      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006c8e:	2302      	movs	r3, #2
 8006c90:	77fb      	strb	r3, [r7, #31]
 8006c92:	e14e      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006c94:	2304      	movs	r3, #4
 8006c96:	77fb      	strb	r3, [r7, #31]
 8006c98:	e14b      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006c9a:	2308      	movs	r3, #8
 8006c9c:	77fb      	strb	r3, [r7, #31]
 8006c9e:	e148      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006ca0:	2310      	movs	r3, #16
 8006ca2:	77fb      	strb	r3, [r7, #31]
 8006ca4:	bf00      	nop
 8006ca6:	e144      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a8d      	ldr	r2, [pc, #564]	; (8006ee4 <UART_SetConfig+0x300>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d134      	bne.n	8006d1c <UART_SetConfig+0x138>
 8006cb2:	4b8b      	ldr	r3, [pc, #556]	; (8006ee0 <UART_SetConfig+0x2fc>)
 8006cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb8:	f003 030c 	and.w	r3, r3, #12
 8006cbc:	2b0c      	cmp	r3, #12
 8006cbe:	d829      	bhi.n	8006d14 <UART_SetConfig+0x130>
 8006cc0:	a201      	add	r2, pc, #4	; (adr r2, 8006cc8 <UART_SetConfig+0xe4>)
 8006cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc6:	bf00      	nop
 8006cc8:	08006cfd 	.word	0x08006cfd
 8006ccc:	08006d15 	.word	0x08006d15
 8006cd0:	08006d15 	.word	0x08006d15
 8006cd4:	08006d15 	.word	0x08006d15
 8006cd8:	08006d09 	.word	0x08006d09
 8006cdc:	08006d15 	.word	0x08006d15
 8006ce0:	08006d15 	.word	0x08006d15
 8006ce4:	08006d15 	.word	0x08006d15
 8006ce8:	08006d03 	.word	0x08006d03
 8006cec:	08006d15 	.word	0x08006d15
 8006cf0:	08006d15 	.word	0x08006d15
 8006cf4:	08006d15 	.word	0x08006d15
 8006cf8:	08006d0f 	.word	0x08006d0f
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	77fb      	strb	r3, [r7, #31]
 8006d00:	e117      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006d02:	2302      	movs	r3, #2
 8006d04:	77fb      	strb	r3, [r7, #31]
 8006d06:	e114      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006d08:	2304      	movs	r3, #4
 8006d0a:	77fb      	strb	r3, [r7, #31]
 8006d0c:	e111      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006d0e:	2308      	movs	r3, #8
 8006d10:	77fb      	strb	r3, [r7, #31]
 8006d12:	e10e      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006d14:	2310      	movs	r3, #16
 8006d16:	77fb      	strb	r3, [r7, #31]
 8006d18:	bf00      	nop
 8006d1a:	e10a      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a71      	ldr	r2, [pc, #452]	; (8006ee8 <UART_SetConfig+0x304>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d120      	bne.n	8006d68 <UART_SetConfig+0x184>
 8006d26:	4b6e      	ldr	r3, [pc, #440]	; (8006ee0 <UART_SetConfig+0x2fc>)
 8006d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d30:	2b10      	cmp	r3, #16
 8006d32:	d00f      	beq.n	8006d54 <UART_SetConfig+0x170>
 8006d34:	2b10      	cmp	r3, #16
 8006d36:	d802      	bhi.n	8006d3e <UART_SetConfig+0x15a>
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d005      	beq.n	8006d48 <UART_SetConfig+0x164>
 8006d3c:	e010      	b.n	8006d60 <UART_SetConfig+0x17c>
 8006d3e:	2b20      	cmp	r3, #32
 8006d40:	d005      	beq.n	8006d4e <UART_SetConfig+0x16a>
 8006d42:	2b30      	cmp	r3, #48	; 0x30
 8006d44:	d009      	beq.n	8006d5a <UART_SetConfig+0x176>
 8006d46:	e00b      	b.n	8006d60 <UART_SetConfig+0x17c>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	77fb      	strb	r3, [r7, #31]
 8006d4c:	e0f1      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006d4e:	2302      	movs	r3, #2
 8006d50:	77fb      	strb	r3, [r7, #31]
 8006d52:	e0ee      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006d54:	2304      	movs	r3, #4
 8006d56:	77fb      	strb	r3, [r7, #31]
 8006d58:	e0eb      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006d5a:	2308      	movs	r3, #8
 8006d5c:	77fb      	strb	r3, [r7, #31]
 8006d5e:	e0e8      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006d60:	2310      	movs	r3, #16
 8006d62:	77fb      	strb	r3, [r7, #31]
 8006d64:	bf00      	nop
 8006d66:	e0e4      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a5f      	ldr	r2, [pc, #380]	; (8006eec <UART_SetConfig+0x308>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d120      	bne.n	8006db4 <UART_SetConfig+0x1d0>
 8006d72:	4b5b      	ldr	r3, [pc, #364]	; (8006ee0 <UART_SetConfig+0x2fc>)
 8006d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d7c:	2b40      	cmp	r3, #64	; 0x40
 8006d7e:	d00f      	beq.n	8006da0 <UART_SetConfig+0x1bc>
 8006d80:	2b40      	cmp	r3, #64	; 0x40
 8006d82:	d802      	bhi.n	8006d8a <UART_SetConfig+0x1a6>
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d005      	beq.n	8006d94 <UART_SetConfig+0x1b0>
 8006d88:	e010      	b.n	8006dac <UART_SetConfig+0x1c8>
 8006d8a:	2b80      	cmp	r3, #128	; 0x80
 8006d8c:	d005      	beq.n	8006d9a <UART_SetConfig+0x1b6>
 8006d8e:	2bc0      	cmp	r3, #192	; 0xc0
 8006d90:	d009      	beq.n	8006da6 <UART_SetConfig+0x1c2>
 8006d92:	e00b      	b.n	8006dac <UART_SetConfig+0x1c8>
 8006d94:	2300      	movs	r3, #0
 8006d96:	77fb      	strb	r3, [r7, #31]
 8006d98:	e0cb      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	77fb      	strb	r3, [r7, #31]
 8006d9e:	e0c8      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006da0:	2304      	movs	r3, #4
 8006da2:	77fb      	strb	r3, [r7, #31]
 8006da4:	e0c5      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006da6:	2308      	movs	r3, #8
 8006da8:	77fb      	strb	r3, [r7, #31]
 8006daa:	e0c2      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006dac:	2310      	movs	r3, #16
 8006dae:	77fb      	strb	r3, [r7, #31]
 8006db0:	bf00      	nop
 8006db2:	e0be      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a4d      	ldr	r2, [pc, #308]	; (8006ef0 <UART_SetConfig+0x30c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d124      	bne.n	8006e08 <UART_SetConfig+0x224>
 8006dbe:	4b48      	ldr	r3, [pc, #288]	; (8006ee0 <UART_SetConfig+0x2fc>)
 8006dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dcc:	d012      	beq.n	8006df4 <UART_SetConfig+0x210>
 8006dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dd2:	d802      	bhi.n	8006dda <UART_SetConfig+0x1f6>
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d007      	beq.n	8006de8 <UART_SetConfig+0x204>
 8006dd8:	e012      	b.n	8006e00 <UART_SetConfig+0x21c>
 8006dda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dde:	d006      	beq.n	8006dee <UART_SetConfig+0x20a>
 8006de0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006de4:	d009      	beq.n	8006dfa <UART_SetConfig+0x216>
 8006de6:	e00b      	b.n	8006e00 <UART_SetConfig+0x21c>
 8006de8:	2300      	movs	r3, #0
 8006dea:	77fb      	strb	r3, [r7, #31]
 8006dec:	e0a1      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006dee:	2302      	movs	r3, #2
 8006df0:	77fb      	strb	r3, [r7, #31]
 8006df2:	e09e      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006df4:	2304      	movs	r3, #4
 8006df6:	77fb      	strb	r3, [r7, #31]
 8006df8:	e09b      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006dfa:	2308      	movs	r3, #8
 8006dfc:	77fb      	strb	r3, [r7, #31]
 8006dfe:	e098      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006e00:	2310      	movs	r3, #16
 8006e02:	77fb      	strb	r3, [r7, #31]
 8006e04:	bf00      	nop
 8006e06:	e094      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a39      	ldr	r2, [pc, #228]	; (8006ef4 <UART_SetConfig+0x310>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d124      	bne.n	8006e5c <UART_SetConfig+0x278>
 8006e12:	4b33      	ldr	r3, [pc, #204]	; (8006ee0 <UART_SetConfig+0x2fc>)
 8006e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e20:	d012      	beq.n	8006e48 <UART_SetConfig+0x264>
 8006e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e26:	d802      	bhi.n	8006e2e <UART_SetConfig+0x24a>
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d007      	beq.n	8006e3c <UART_SetConfig+0x258>
 8006e2c:	e012      	b.n	8006e54 <UART_SetConfig+0x270>
 8006e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e32:	d006      	beq.n	8006e42 <UART_SetConfig+0x25e>
 8006e34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e38:	d009      	beq.n	8006e4e <UART_SetConfig+0x26a>
 8006e3a:	e00b      	b.n	8006e54 <UART_SetConfig+0x270>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	77fb      	strb	r3, [r7, #31]
 8006e40:	e077      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006e42:	2302      	movs	r3, #2
 8006e44:	77fb      	strb	r3, [r7, #31]
 8006e46:	e074      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006e48:	2304      	movs	r3, #4
 8006e4a:	77fb      	strb	r3, [r7, #31]
 8006e4c:	e071      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006e4e:	2308      	movs	r3, #8
 8006e50:	77fb      	strb	r3, [r7, #31]
 8006e52:	e06e      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006e54:	2310      	movs	r3, #16
 8006e56:	77fb      	strb	r3, [r7, #31]
 8006e58:	bf00      	nop
 8006e5a:	e06a      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a25      	ldr	r2, [pc, #148]	; (8006ef8 <UART_SetConfig+0x314>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d124      	bne.n	8006eb0 <UART_SetConfig+0x2cc>
 8006e66:	4b1e      	ldr	r3, [pc, #120]	; (8006ee0 <UART_SetConfig+0x2fc>)
 8006e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e6c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e74:	d012      	beq.n	8006e9c <UART_SetConfig+0x2b8>
 8006e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e7a:	d802      	bhi.n	8006e82 <UART_SetConfig+0x29e>
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d007      	beq.n	8006e90 <UART_SetConfig+0x2ac>
 8006e80:	e012      	b.n	8006ea8 <UART_SetConfig+0x2c4>
 8006e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e86:	d006      	beq.n	8006e96 <UART_SetConfig+0x2b2>
 8006e88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e8c:	d009      	beq.n	8006ea2 <UART_SetConfig+0x2be>
 8006e8e:	e00b      	b.n	8006ea8 <UART_SetConfig+0x2c4>
 8006e90:	2300      	movs	r3, #0
 8006e92:	77fb      	strb	r3, [r7, #31]
 8006e94:	e04d      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006e96:	2302      	movs	r3, #2
 8006e98:	77fb      	strb	r3, [r7, #31]
 8006e9a:	e04a      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006e9c:	2304      	movs	r3, #4
 8006e9e:	77fb      	strb	r3, [r7, #31]
 8006ea0:	e047      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006ea2:	2308      	movs	r3, #8
 8006ea4:	77fb      	strb	r3, [r7, #31]
 8006ea6:	e044      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006ea8:	2310      	movs	r3, #16
 8006eaa:	77fb      	strb	r3, [r7, #31]
 8006eac:	bf00      	nop
 8006eae:	e040      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a11      	ldr	r2, [pc, #68]	; (8006efc <UART_SetConfig+0x318>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d139      	bne.n	8006f2e <UART_SetConfig+0x34a>
 8006eba:	4b09      	ldr	r3, [pc, #36]	; (8006ee0 <UART_SetConfig+0x2fc>)
 8006ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006ec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ec8:	d027      	beq.n	8006f1a <UART_SetConfig+0x336>
 8006eca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ece:	d817      	bhi.n	8006f00 <UART_SetConfig+0x31c>
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d01c      	beq.n	8006f0e <UART_SetConfig+0x32a>
 8006ed4:	e027      	b.n	8006f26 <UART_SetConfig+0x342>
 8006ed6:	bf00      	nop
 8006ed8:	efff69f3 	.word	0xefff69f3
 8006edc:	40011000 	.word	0x40011000
 8006ee0:	40023800 	.word	0x40023800
 8006ee4:	40004400 	.word	0x40004400
 8006ee8:	40004800 	.word	0x40004800
 8006eec:	40004c00 	.word	0x40004c00
 8006ef0:	40005000 	.word	0x40005000
 8006ef4:	40011400 	.word	0x40011400
 8006ef8:	40007800 	.word	0x40007800
 8006efc:	40007c00 	.word	0x40007c00
 8006f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f04:	d006      	beq.n	8006f14 <UART_SetConfig+0x330>
 8006f06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f0a:	d009      	beq.n	8006f20 <UART_SetConfig+0x33c>
 8006f0c:	e00b      	b.n	8006f26 <UART_SetConfig+0x342>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	77fb      	strb	r3, [r7, #31]
 8006f12:	e00e      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006f14:	2302      	movs	r3, #2
 8006f16:	77fb      	strb	r3, [r7, #31]
 8006f18:	e00b      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006f1a:	2304      	movs	r3, #4
 8006f1c:	77fb      	strb	r3, [r7, #31]
 8006f1e:	e008      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006f20:	2308      	movs	r3, #8
 8006f22:	77fb      	strb	r3, [r7, #31]
 8006f24:	e005      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006f26:	2310      	movs	r3, #16
 8006f28:	77fb      	strb	r3, [r7, #31]
 8006f2a:	bf00      	nop
 8006f2c:	e001      	b.n	8006f32 <UART_SetConfig+0x34e>
 8006f2e:	2310      	movs	r3, #16
 8006f30:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f3a:	d17c      	bne.n	8007036 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8006f3c:	7ffb      	ldrb	r3, [r7, #31]
 8006f3e:	2b08      	cmp	r3, #8
 8006f40:	d859      	bhi.n	8006ff6 <UART_SetConfig+0x412>
 8006f42:	a201      	add	r2, pc, #4	; (adr r2, 8006f48 <UART_SetConfig+0x364>)
 8006f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f48:	08006f6d 	.word	0x08006f6d
 8006f4c:	08006f8b 	.word	0x08006f8b
 8006f50:	08006fa9 	.word	0x08006fa9
 8006f54:	08006ff7 	.word	0x08006ff7
 8006f58:	08006fc1 	.word	0x08006fc1
 8006f5c:	08006ff7 	.word	0x08006ff7
 8006f60:	08006ff7 	.word	0x08006ff7
 8006f64:	08006ff7 	.word	0x08006ff7
 8006f68:	08006fdf 	.word	0x08006fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006f6c:	f7fd f92c 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 8006f70:	4603      	mov	r3, r0
 8006f72:	005a      	lsls	r2, r3, #1
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	085b      	lsrs	r3, r3, #1
 8006f7a:	441a      	add	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	61bb      	str	r3, [r7, #24]
        break;
 8006f88:	e038      	b.n	8006ffc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006f8a:	f7fd f931 	bl	80041f0 <HAL_RCC_GetPCLK2Freq>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	005a      	lsls	r2, r3, #1
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	085b      	lsrs	r3, r3, #1
 8006f98:	441a      	add	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	61bb      	str	r3, [r7, #24]
        break;
 8006fa6:	e029      	b.n	8006ffc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	085a      	lsrs	r2, r3, #1
 8006fae:	4b5d      	ldr	r3, [pc, #372]	; (8007124 <UART_SetConfig+0x540>)
 8006fb0:	4413      	add	r3, r2
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	6852      	ldr	r2, [r2, #4]
 8006fb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	61bb      	str	r3, [r7, #24]
        break;
 8006fbe:	e01d      	b.n	8006ffc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006fc0:	f7fd f844 	bl	800404c <HAL_RCC_GetSysClockFreq>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	005a      	lsls	r2, r3, #1
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	085b      	lsrs	r3, r3, #1
 8006fce:	441a      	add	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	61bb      	str	r3, [r7, #24]
        break;
 8006fdc:	e00e      	b.n	8006ffc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	085b      	lsrs	r3, r3, #1
 8006fe4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	61bb      	str	r3, [r7, #24]
        break;
 8006ff4:	e002      	b.n	8006ffc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	75fb      	strb	r3, [r7, #23]
        break;
 8006ffa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	2b0f      	cmp	r3, #15
 8007000:	d916      	bls.n	8007030 <UART_SetConfig+0x44c>
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007008:	d212      	bcs.n	8007030 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	b29b      	uxth	r3, r3
 800700e:	f023 030f 	bic.w	r3, r3, #15
 8007012:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	085b      	lsrs	r3, r3, #1
 8007018:	b29b      	uxth	r3, r3
 800701a:	f003 0307 	and.w	r3, r3, #7
 800701e:	b29a      	uxth	r2, r3
 8007020:	89fb      	ldrh	r3, [r7, #14]
 8007022:	4313      	orrs	r3, r2
 8007024:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	89fa      	ldrh	r2, [r7, #14]
 800702c:	60da      	str	r2, [r3, #12]
 800702e:	e06e      	b.n	800710e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	75fb      	strb	r3, [r7, #23]
 8007034:	e06b      	b.n	800710e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8007036:	7ffb      	ldrb	r3, [r7, #31]
 8007038:	2b08      	cmp	r3, #8
 800703a:	d857      	bhi.n	80070ec <UART_SetConfig+0x508>
 800703c:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <UART_SetConfig+0x460>)
 800703e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007042:	bf00      	nop
 8007044:	08007069 	.word	0x08007069
 8007048:	08007085 	.word	0x08007085
 800704c:	080070a1 	.word	0x080070a1
 8007050:	080070ed 	.word	0x080070ed
 8007054:	080070b9 	.word	0x080070b9
 8007058:	080070ed 	.word	0x080070ed
 800705c:	080070ed 	.word	0x080070ed
 8007060:	080070ed 	.word	0x080070ed
 8007064:	080070d5 	.word	0x080070d5
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007068:	f7fd f8ae 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 800706c:	4602      	mov	r2, r0
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	085b      	lsrs	r3, r3, #1
 8007074:	441a      	add	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	fbb2 f3f3 	udiv	r3, r2, r3
 800707e:	b29b      	uxth	r3, r3
 8007080:	61bb      	str	r3, [r7, #24]
        break;
 8007082:	e036      	b.n	80070f2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007084:	f7fd f8b4 	bl	80041f0 <HAL_RCC_GetPCLK2Freq>
 8007088:	4602      	mov	r2, r0
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	085b      	lsrs	r3, r3, #1
 8007090:	441a      	add	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	fbb2 f3f3 	udiv	r3, r2, r3
 800709a:	b29b      	uxth	r3, r3
 800709c:	61bb      	str	r3, [r7, #24]
        break;
 800709e:	e028      	b.n	80070f2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	085a      	lsrs	r2, r3, #1
 80070a6:	4b20      	ldr	r3, [pc, #128]	; (8007128 <UART_SetConfig+0x544>)
 80070a8:	4413      	add	r3, r2
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	6852      	ldr	r2, [r2, #4]
 80070ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	61bb      	str	r3, [r7, #24]
        break;
 80070b6:	e01c      	b.n	80070f2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80070b8:	f7fc ffc8 	bl	800404c <HAL_RCC_GetSysClockFreq>
 80070bc:	4602      	mov	r2, r0
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	085b      	lsrs	r3, r3, #1
 80070c4:	441a      	add	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	61bb      	str	r3, [r7, #24]
        break;
 80070d2:	e00e      	b.n	80070f2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	085b      	lsrs	r3, r3, #1
 80070da:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	61bb      	str	r3, [r7, #24]
        break;
 80070ea:	e002      	b.n	80070f2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	75fb      	strb	r3, [r7, #23]
        break;
 80070f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	2b0f      	cmp	r3, #15
 80070f6:	d908      	bls.n	800710a <UART_SetConfig+0x526>
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070fe:	d204      	bcs.n	800710a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	69ba      	ldr	r2, [r7, #24]
 8007106:	60da      	str	r2, [r3, #12]
 8007108:	e001      	b.n	800710e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800711a:	7dfb      	ldrb	r3, [r7, #23]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3720      	adds	r7, #32
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	01e84800 	.word	0x01e84800
 8007128:	00f42400 	.word	0x00f42400

0800712c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00a      	beq.n	8007156 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	f003 0302 	and.w	r3, r3, #2
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00a      	beq.n	8007178 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	430a      	orrs	r2, r1
 8007176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	f003 0304 	and.w	r3, r3, #4
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00a      	beq.n	800719a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	430a      	orrs	r2, r1
 8007198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719e:	f003 0308 	and.w	r3, r3, #8
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00a      	beq.n	80071bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	430a      	orrs	r2, r1
 80071ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c0:	f003 0310 	and.w	r3, r3, #16
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00a      	beq.n	80071de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	430a      	orrs	r2, r1
 80071dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e2:	f003 0320 	and.w	r3, r3, #32
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00a      	beq.n	8007200 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01a      	beq.n	8007242 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800722a:	d10a      	bne.n	8007242 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	605a      	str	r2, [r3, #4]
  }
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af02      	add	r7, sp, #8
 8007276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800727e:	f7f9 f965 	bl	800054c <HAL_GetTick>
 8007282:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0308 	and.w	r3, r3, #8
 800728e:	2b08      	cmp	r3, #8
 8007290:	d10e      	bne.n	80072b0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007292:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f814 	bl	80072ce <UART_WaitOnFlagUntilTimeout>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e00a      	b.n	80072c6 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2220      	movs	r2, #32
 80072b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2220      	movs	r2, #32
 80072ba:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b084      	sub	sp, #16
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	603b      	str	r3, [r7, #0]
 80072da:	4613      	mov	r3, r2
 80072dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072de:	e02a      	b.n	8007336 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e6:	d026      	beq.n	8007336 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072e8:	f7f9 f930 	bl	800054c <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d302      	bcc.n	80072fe <UART_WaitOnFlagUntilTimeout+0x30>
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d11b      	bne.n	8007336 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800730c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	689a      	ldr	r2, [r3, #8]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0201 	bic.w	r2, r2, #1
 800731c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2220      	movs	r2, #32
 8007322:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2220      	movs	r2, #32
 8007328:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e00f      	b.n	8007356 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69da      	ldr	r2, [r3, #28]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	4013      	ands	r3, r2
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	429a      	cmp	r2, r3
 8007344:	bf0c      	ite	eq
 8007346:	2301      	moveq	r3, #1
 8007348:	2300      	movne	r3, #0
 800734a:	b2db      	uxtb	r3, r3
 800734c:	461a      	mov	r2, r3
 800734e:	79fb      	ldrb	r3, [r7, #7]
 8007350:	429a      	cmp	r2, r3
 8007352:	d0c5      	beq.n	80072e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
	...

08007360 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800736a:	2300      	movs	r3, #0
 800736c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800736e:	2300      	movs	r3, #0
 8007370:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d027      	beq.n	80073ca <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	4b2f      	ldr	r3, [pc, #188]	; (8007440 <FMC_SDRAM_Init+0xe0>)
 8007384:	4013      	ands	r3, r2
 8007386:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007390:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8007396:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800739c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80073a2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80073a8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80073ae:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80073b4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80073ba:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	4313      	orrs	r3, r2
 80073c0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	e032      	b.n	8007430 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073d6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80073e0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80073e6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	4b12      	ldr	r3, [pc, #72]	; (8007440 <FMC_SDRAM_Init+0xe0>)
 80073f8:	4013      	ands	r3, r2
 80073fa:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007404:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800740a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8007410:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8007416:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800741c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	4313      	orrs	r3, r2
 8007422:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	ffff8000 	.word	0xffff8000

08007444 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8007450:	2300      	movs	r3, #0
 8007452:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8007454:	2300      	movs	r3, #0
 8007456:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d02e      	beq.n	80074bc <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800746a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	3b01      	subs	r3, #1
 8007478:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800747a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	3b01      	subs	r3, #1
 8007482:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007484:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	3b01      	subs	r3, #1
 800748c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800748e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	3b01      	subs	r3, #1
 8007496:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007498:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	3b01      	subs	r3, #1
 80074a0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80074a2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	3b01      	subs	r3, #1
 80074aa:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80074ac:	4313      	orrs	r3, r2
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	609a      	str	r2, [r3, #8]
 80074ba:	e039      	b.n	8007530 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	4b1e      	ldr	r3, [pc, #120]	; (8007540 <FMC_SDRAM_Timing_Init+0xfc>)
 80074c6:	4013      	ands	r3, r2
 80074c8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80074da:	4313      	orrs	r3, r2
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	4313      	orrs	r3, r2
 80074e0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80074ee:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80074fe:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	3b01      	subs	r3, #1
 8007506:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007508:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	3b01      	subs	r3, #1
 8007510:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007512:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	3b01      	subs	r3, #1
 800751a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800751c:	4313      	orrs	r3, r2
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	4313      	orrs	r3, r2
 8007522:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	371c      	adds	r7, #28
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	ff0f0fff 	.word	0xff0f0fff

08007544 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f043 0201 	orr.w	r2, r3, #1
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007566:	b480      	push	{r7}
 8007568:	b083      	sub	sp, #12
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f023 0201 	bic.w	r2, r3, #1
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007592:	2300      	movs	r3, #0
 8007594:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	019b      	lsls	r3, r3, #6
 800759a:	f043 0220 	orr.w	r2, r3, #32
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3301      	adds	r3, #1
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4a09      	ldr	r2, [pc, #36]	; (80075d0 <USB_FlushTxFifo+0x48>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d901      	bls.n	80075b4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e006      	b.n	80075c2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	f003 0320 	and.w	r3, r3, #32
 80075bc:	2b20      	cmp	r3, #32
 80075be:	d0f0      	beq.n	80075a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3714      	adds	r7, #20
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	00030d40 	.word	0x00030d40

080075d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2210      	movs	r2, #16
 80075e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3301      	adds	r3, #1
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	4a09      	ldr	r2, [pc, #36]	; (8007614 <USB_FlushRxFifo+0x40>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d901      	bls.n	80075f8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e006      	b.n	8007606 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	f003 0310 	and.w	r3, r3, #16
 8007600:	2b10      	cmp	r3, #16
 8007602:	d0f0      	beq.n	80075e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	00030d40 	.word	0x00030d40

08007618 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007618:	b480      	push	{r7}
 800761a:	b089      	sub	sp, #36	; 0x24
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	4611      	mov	r1, r2
 8007624:	461a      	mov	r2, r3
 8007626:	460b      	mov	r3, r1
 8007628:	71fb      	strb	r3, [r7, #7]
 800762a:	4613      	mov	r3, r2
 800762c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007636:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800763a:	2b00      	cmp	r3, #0
 800763c:	d11a      	bne.n	8007674 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800763e:	88bb      	ldrh	r3, [r7, #4]
 8007640:	3303      	adds	r3, #3
 8007642:	089b      	lsrs	r3, r3, #2
 8007644:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007646:	2300      	movs	r3, #0
 8007648:	61bb      	str	r3, [r7, #24]
 800764a:	e00f      	b.n	800766c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800764c:	79fb      	ldrb	r3, [r7, #7]
 800764e:	031a      	lsls	r2, r3, #12
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	4413      	add	r3, r2
 8007654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007658:	461a      	mov	r2, r3
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	3304      	adds	r3, #4
 8007664:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	3301      	adds	r3, #1
 800766a:	61bb      	str	r3, [r7, #24]
 800766c:	69ba      	ldr	r2, [r7, #24]
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	429a      	cmp	r2, r3
 8007672:	d3eb      	bcc.n	800764c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3724      	adds	r7, #36	; 0x24
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007682:	b480      	push	{r7}
 8007684:	b089      	sub	sp, #36	; 0x24
 8007686:	af00      	add	r7, sp, #0
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	4613      	mov	r3, r2
 800768e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007698:	88fb      	ldrh	r3, [r7, #6]
 800769a:	3303      	adds	r3, #3
 800769c:	089b      	lsrs	r3, r3, #2
 800769e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80076a0:	2300      	movs	r3, #0
 80076a2:	61bb      	str	r3, [r7, #24]
 80076a4:	e00b      	b.n	80076be <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	601a      	str	r2, [r3, #0]
    pDest++;
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	3304      	adds	r3, #4
 80076b6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	3301      	adds	r3, #1
 80076bc:	61bb      	str	r3, [r7, #24]
 80076be:	69ba      	ldr	r2, [r7, #24]
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d3ef      	bcc.n	80076a6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80076c6:	69fb      	ldr	r3, [r7, #28]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3724      	adds	r7, #36	; 0x24
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	4013      	ands	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80076ec:	68fb      	ldr	r3, [r7, #12]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3714      	adds	r7, #20
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	f003 0301 	and.w	r3, r3, #1
}
 800770a:	4618      	mov	r0, r3
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007716:	b480      	push	{r7}
 8007718:	b085      	sub	sp, #20
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	460b      	mov	r3, r1
 8007720:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007734:	f023 0303 	bic.w	r3, r3, #3
 8007738:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	78fb      	ldrb	r3, [r7, #3]
 8007744:	f003 0303 	and.w	r3, r3, #3
 8007748:	68f9      	ldr	r1, [r7, #12]
 800774a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800774e:	4313      	orrs	r3, r2
 8007750:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007752:	78fb      	ldrb	r3, [r7, #3]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d107      	bne.n	8007768 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800775e:	461a      	mov	r2, r3
 8007760:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007764:	6053      	str	r3, [r2, #4]
 8007766:	e009      	b.n	800777c <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007768:	78fb      	ldrb	r3, [r7, #3]
 800776a:	2b02      	cmp	r3, #2
 800776c:	d106      	bne.n	800777c <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007774:	461a      	mov	r2, r3
 8007776:	f241 7370 	movw	r3, #6000	; 0x1770
 800777a:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007796:	2300      	movs	r3, #0
 8007798:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80077aa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80077b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077b8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80077ba:	2064      	movs	r0, #100	; 0x64
 80077bc:	f7f8 fed2 	bl	8000564 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80077c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077cc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80077ce:	200a      	movs	r0, #10
 80077d0:	f7f8 fec8 	bl	8000564 <HAL_Delay>

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80077de:	b480      	push	{r7}
 80077e0:	b085      	sub	sp, #20
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	460b      	mov	r3, r1
 80077e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007802:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d109      	bne.n	8007822 <USB_DriveVbus+0x44>
 800780e:	78fb      	ldrb	r3, [r7, #3]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d106      	bne.n	8007822 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800781c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007820:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800782c:	d109      	bne.n	8007842 <USB_DriveVbus+0x64>
 800782e:	78fb      	ldrb	r3, [r7, #3]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d106      	bne.n	8007842 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800783c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007840:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800785c:	2300      	movs	r3, #0
 800785e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	0c5b      	lsrs	r3, r3, #17
 800786e:	f003 0303 	and.w	r3, r3, #3
}
 8007872:	4618      	mov	r0, r3
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
	...

08007880 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8007880:	b480      	push	{r7}
 8007882:	b087      	sub	sp, #28
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	4608      	mov	r0, r1
 800788a:	4611      	mov	r1, r2
 800788c:	461a      	mov	r2, r3
 800788e:	4603      	mov	r3, r0
 8007890:	70fb      	strb	r3, [r7, #3]
 8007892:	460b      	mov	r3, r1
 8007894:	70bb      	strb	r3, [r7, #2]
 8007896:	4613      	mov	r3, r2
 8007898:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800789a:	2300      	movs	r3, #0
 800789c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80078a2:	78fb      	ldrb	r3, [r7, #3]
 80078a4:	015a      	lsls	r2, r3, #5
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ae:	461a      	mov	r2, r3
 80078b0:	f04f 33ff 	mov.w	r3, #4294967295
 80078b4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80078b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	d87e      	bhi.n	80079bc <USB_HC_Init+0x13c>
 80078be:	a201      	add	r2, pc, #4	; (adr r2, 80078c4 <USB_HC_Init+0x44>)
 80078c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c4:	080078d5 	.word	0x080078d5
 80078c8:	0800797f 	.word	0x0800797f
 80078cc:	080078d5 	.word	0x080078d5
 80078d0:	08007941 	.word	0x08007941
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80078d4:	78fb      	ldrb	r3, [r7, #3]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078e0:	461a      	mov	r2, r3
 80078e2:	f240 439d 	movw	r3, #1181	; 0x49d
 80078e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80078e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	da10      	bge.n	8007912 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80078f0:	78fb      	ldrb	r3, [r7, #3]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	78fa      	ldrb	r2, [r7, #3]
 8007900:	0151      	lsls	r1, r2, #5
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	440a      	add	r2, r1
 8007906:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800790a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800790e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8007910:	e057      	b.n	80079c2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800791a:	2b00      	cmp	r3, #0
 800791c:	d051      	beq.n	80079c2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800791e:	78fb      	ldrb	r3, [r7, #3]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	4413      	add	r3, r2
 8007926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	78fa      	ldrb	r2, [r7, #3]
 800792e:	0151      	lsls	r1, r2, #5
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	440a      	add	r2, r1
 8007934:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007938:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800793c:	60d3      	str	r3, [r2, #12]
      break;
 800793e:	e040      	b.n	80079c2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007940:	78fb      	ldrb	r3, [r7, #3]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	4413      	add	r3, r2
 8007948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800794c:	461a      	mov	r2, r3
 800794e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007952:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007954:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007958:	2b00      	cmp	r3, #0
 800795a:	da34      	bge.n	80079c6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800795c:	78fb      	ldrb	r3, [r7, #3]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	4413      	add	r3, r2
 8007964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	78fa      	ldrb	r2, [r7, #3]
 800796c:	0151      	lsls	r1, r2, #5
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	440a      	add	r2, r1
 8007972:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800797a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800797c:	e023      	b.n	80079c6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800797e:	78fb      	ldrb	r3, [r7, #3]
 8007980:	015a      	lsls	r2, r3, #5
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	4413      	add	r3, r2
 8007986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800798a:	461a      	mov	r2, r3
 800798c:	f240 2325 	movw	r3, #549	; 0x225
 8007990:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007992:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007996:	2b00      	cmp	r3, #0
 8007998:	da17      	bge.n	80079ca <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800799a:	78fb      	ldrb	r3, [r7, #3]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	78fa      	ldrb	r2, [r7, #3]
 80079aa:	0151      	lsls	r1, r2, #5
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	440a      	add	r2, r1
 80079b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079b4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80079b8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80079ba:	e006      	b.n	80079ca <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	75fb      	strb	r3, [r7, #23]
      break;
 80079c0:	e004      	b.n	80079cc <USB_HC_Init+0x14c>
      break;
 80079c2:	bf00      	nop
 80079c4:	e002      	b.n	80079cc <USB_HC_Init+0x14c>
      break;
 80079c6:	bf00      	nop
 80079c8:	e000      	b.n	80079cc <USB_HC_Init+0x14c>
      break;
 80079ca:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079d2:	699a      	ldr	r2, [r3, #24]
 80079d4:	78fb      	ldrb	r3, [r7, #3]
 80079d6:	f003 030f 	and.w	r3, r3, #15
 80079da:	2101      	movs	r1, #1
 80079dc:	fa01 f303 	lsl.w	r3, r1, r3
 80079e0:	68b9      	ldr	r1, [r7, #8]
 80079e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80079e6:	4313      	orrs	r3, r2
 80079e8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80079f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	da03      	bge.n	8007a06 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80079fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a02:	613b      	str	r3, [r7, #16]
 8007a04:	e001      	b.n	8007a0a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8007a0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d103      	bne.n	8007a1a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007a12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	e001      	b.n	8007a1e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a1e:	787b      	ldrb	r3, [r7, #1]
 8007a20:	059b      	lsls	r3, r3, #22
 8007a22:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a26:	78bb      	ldrb	r3, [r7, #2]
 8007a28:	02db      	lsls	r3, r3, #11
 8007a2a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a2e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a34:	049b      	lsls	r3, r3, #18
 8007a36:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a3a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a42:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a48:	78fb      	ldrb	r3, [r7, #3]
 8007a4a:	0159      	lsls	r1, r3, #5
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	440b      	add	r3, r1
 8007a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a54:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a5a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007a5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d10f      	bne.n	8007a84 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007a64:	78fb      	ldrb	r3, [r7, #3]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	78fa      	ldrb	r2, [r7, #3]
 8007a74:	0151      	lsls	r1, r2, #5
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	440a      	add	r2, r1
 8007a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a82:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	371c      	adds	r7, #28
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop

08007a94 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b08c      	sub	sp, #48	; 0x30
 8007a98:	af02      	add	r7, sp, #8
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	785b      	ldrb	r3, [r3, #1]
 8007aaa:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007aac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ab0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d028      	beq.n	8007b10 <USB_HC_StartXfer+0x7c>
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	791b      	ldrb	r3, [r3, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d124      	bne.n	8007b10 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8007ac6:	79fb      	ldrb	r3, [r7, #7]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10b      	bne.n	8007ae4 <USB_HC_StartXfer+0x50>
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	795b      	ldrb	r3, [r3, #5]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d107      	bne.n	8007ae4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	785b      	ldrb	r3, [r3, #1]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f000 fa2e 	bl	8007f3c <USB_DoPing>
      return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	e112      	b.n	8007d0a <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8007ae4:	79fb      	ldrb	r3, [r7, #7]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d112      	bne.n	8007b10 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	015a      	lsls	r2, r3, #5
 8007aee:	6a3b      	ldr	r3, [r7, #32]
 8007af0:	4413      	add	r3, r2
 8007af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	69fa      	ldr	r2, [r7, #28]
 8007afa:	0151      	lsls	r1, r2, #5
 8007afc:	6a3a      	ldr	r2, [r7, #32]
 8007afe:	440a      	add	r2, r1
 8007b00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b04:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007b08:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d018      	beq.n	8007b4a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	8912      	ldrh	r2, [r2, #8]
 8007b20:	4413      	add	r3, r2
 8007b22:	3b01      	subs	r3, #1
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	8912      	ldrh	r2, [r2, #8]
 8007b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b2c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007b2e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b30:	8b7b      	ldrh	r3, [r7, #26]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d90b      	bls.n	8007b4e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8007b36:	8b7b      	ldrh	r3, [r7, #26]
 8007b38:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007b3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	8912      	ldrh	r2, [r2, #8]
 8007b40:	fb02 f203 	mul.w	r2, r2, r3
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	611a      	str	r2, [r3, #16]
 8007b48:	e001      	b.n	8007b4e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	78db      	ldrb	r3, [r3, #3]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d006      	beq.n	8007b64 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007b56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	8912      	ldrh	r2, [r2, #8]
 8007b5c:	fb02 f203 	mul.w	r2, r2, r3
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b6e:	04d9      	lsls	r1, r3, #19
 8007b70:	4b68      	ldr	r3, [pc, #416]	; (8007d14 <USB_HC_StartXfer+0x280>)
 8007b72:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b74:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	7a9b      	ldrb	r3, [r3, #10]
 8007b7a:	075b      	lsls	r3, r3, #29
 8007b7c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b80:	69f9      	ldr	r1, [r7, #28]
 8007b82:	0148      	lsls	r0, r1, #5
 8007b84:	6a39      	ldr	r1, [r7, #32]
 8007b86:	4401      	add	r1, r0
 8007b88:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b8c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b8e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007b90:	79fb      	ldrb	r3, [r7, #7]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d009      	beq.n	8007baa <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	68d9      	ldr	r1, [r3, #12]
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ba6:	460a      	mov	r2, r1
 8007ba8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	bf0c      	ite	eq
 8007bba:	2301      	moveq	r3, #1
 8007bbc:	2300      	movne	r3, #0
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	015a      	lsls	r2, r3, #5
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	4413      	add	r3, r2
 8007bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	69fa      	ldr	r2, [r7, #28]
 8007bd2:	0151      	lsls	r1, r2, #5
 8007bd4:	6a3a      	ldr	r2, [r7, #32]
 8007bd6:	440a      	add	r2, r1
 8007bd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bdc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007be0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	7e7b      	ldrb	r3, [r7, #25]
 8007bf2:	075b      	lsls	r3, r3, #29
 8007bf4:	69f9      	ldr	r1, [r7, #28]
 8007bf6:	0148      	lsls	r0, r1, #5
 8007bf8:	6a39      	ldr	r1, [r7, #32]
 8007bfa:	4401      	add	r1, r0
 8007bfc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007c00:	4313      	orrs	r3, r2
 8007c02:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	015a      	lsls	r2, r3, #5
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a41      	ldr	r2, [pc, #260]	; (8007d18 <USB_HC_StartXfer+0x284>)
 8007c14:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c16:	4b40      	ldr	r3, [pc, #256]	; (8007d18 <USB_HC_StartXfer+0x284>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c1e:	4a3e      	ldr	r2, [pc, #248]	; (8007d18 <USB_HC_StartXfer+0x284>)
 8007c20:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	78db      	ldrb	r3, [r3, #3]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d006      	beq.n	8007c38 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007c2a:	4b3b      	ldr	r3, [pc, #236]	; (8007d18 <USB_HC_StartXfer+0x284>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c32:	4a39      	ldr	r2, [pc, #228]	; (8007d18 <USB_HC_StartXfer+0x284>)
 8007c34:	6013      	str	r3, [r2, #0]
 8007c36:	e005      	b.n	8007c44 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007c38:	4b37      	ldr	r3, [pc, #220]	; (8007d18 <USB_HC_StartXfer+0x284>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c40:	4a35      	ldr	r2, [pc, #212]	; (8007d18 <USB_HC_StartXfer+0x284>)
 8007c42:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c44:	4b34      	ldr	r3, [pc, #208]	; (8007d18 <USB_HC_StartXfer+0x284>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c4c:	4a32      	ldr	r2, [pc, #200]	; (8007d18 <USB_HC_StartXfer+0x284>)
 8007c4e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	015a      	lsls	r2, r3, #5
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	4413      	add	r3, r2
 8007c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	4b2e      	ldr	r3, [pc, #184]	; (8007d18 <USB_HC_StartXfer+0x284>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8007c64:	79fb      	ldrb	r3, [r7, #7]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d14e      	bne.n	8007d08 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	78db      	ldrb	r3, [r3, #3]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d14a      	bne.n	8007d08 <USB_HC_StartXfer+0x274>
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d046      	beq.n	8007d08 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	79db      	ldrb	r3, [r3, #7]
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d830      	bhi.n	8007ce4 <USB_HC_StartXfer+0x250>
 8007c82:	a201      	add	r2, pc, #4	; (adr r2, 8007c88 <USB_HC_StartXfer+0x1f4>)
 8007c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c88:	08007c99 	.word	0x08007c99
 8007c8c:	08007cbd 	.word	0x08007cbd
 8007c90:	08007c99 	.word	0x08007c99
 8007c94:	08007cbd 	.word	0x08007cbd
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	3303      	adds	r3, #3
 8007c9e:	089b      	lsrs	r3, r3, #2
 8007ca0:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007ca2:	8afa      	ldrh	r2, [r7, #22]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d91c      	bls.n	8007ce8 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	f043 0220 	orr.w	r2, r3, #32
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	619a      	str	r2, [r3, #24]
          }
          break;
 8007cba:	e015      	b.n	8007ce8 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	3303      	adds	r3, #3
 8007cc2:	089b      	lsrs	r3, r3, #2
 8007cc4:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007cc6:	8afa      	ldrh	r2, [r7, #22]
 8007cc8:	6a3b      	ldr	r3, [r7, #32]
 8007cca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d90a      	bls.n	8007cec <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	619a      	str	r2, [r3, #24]
          }
          break;
 8007ce2:	e003      	b.n	8007cec <USB_HC_StartXfer+0x258>

        default:
          break;
 8007ce4:	bf00      	nop
 8007ce6:	e002      	b.n	8007cee <USB_HC_StartXfer+0x25a>
          break;
 8007ce8:	bf00      	nop
 8007cea:	e000      	b.n	8007cee <USB_HC_StartXfer+0x25a>
          break;
 8007cec:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	68d9      	ldr	r1, [r3, #12]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	785a      	ldrb	r2, [r3, #1]
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	b298      	uxth	r0, r3
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	4603      	mov	r3, r0
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f7ff fc88 	bl	8007618 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3728      	adds	r7, #40	; 0x28
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	1ff80000 	.word	0x1ff80000
 8007d18:	20000024 	.word	0x20000024

08007d1c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	b29b      	uxth	r3, r3
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b087      	sub	sp, #28
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	460b      	mov	r3, r1
 8007d48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8007d4e:	78fb      	ldrb	r3, [r7, #3]
 8007d50:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007d52:	2300      	movs	r3, #0
 8007d54:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	015a      	lsls	r2, r3, #5
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	0c9b      	lsrs	r3, r3, #18
 8007d66:	f003 0303 	and.w	r3, r3, #3
 8007d6a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d002      	beq.n	8007d78 <USB_HC_Halt+0x3a>
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d16c      	bne.n	8007e52 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	0151      	lsls	r1, r2, #5
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	440a      	add	r2, r1
 8007d8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d96:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d143      	bne.n	8007e2c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	0151      	lsls	r1, r2, #5
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	440a      	add	r2, r1
 8007dba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007dc2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	0151      	lsls	r1, r2, #5
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	440a      	add	r2, r1
 8007dda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007de2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	0151      	lsls	r1, r2, #5
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	440a      	add	r2, r1
 8007dfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dfe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e02:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	3301      	adds	r3, #1
 8007e08:	617b      	str	r3, [r7, #20]
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e10:	d81d      	bhi.n	8007e4e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e28:	d0ec      	beq.n	8007e04 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e2a:	e080      	b.n	8007f2e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	015a      	lsls	r2, r3, #5
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	4413      	add	r3, r2
 8007e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	0151      	lsls	r1, r2, #5
 8007e3e:	693a      	ldr	r2, [r7, #16]
 8007e40:	440a      	add	r2, r1
 8007e42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e4a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e4c:	e06f      	b.n	8007f2e <USB_HC_Halt+0x1f0>
          break;
 8007e4e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e50:	e06d      	b.n	8007f2e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	0151      	lsls	r1, r2, #5
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	440a      	add	r2, r1
 8007e68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e70:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d143      	bne.n	8007f0a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	015a      	lsls	r2, r3, #5
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	0151      	lsls	r1, r2, #5
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	440a      	add	r2, r1
 8007e98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ea0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	015a      	lsls	r2, r3, #5
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	0151      	lsls	r1, r2, #5
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	440a      	add	r2, r1
 8007eb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ebc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ec0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	015a      	lsls	r2, r3, #5
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	0151      	lsls	r1, r2, #5
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	440a      	add	r2, r1
 8007ed8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007edc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ee0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	617b      	str	r3, [r7, #20]
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007eee:	d81d      	bhi.n	8007f2c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	015a      	lsls	r2, r3, #5
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f06:	d0ec      	beq.n	8007ee2 <USB_HC_Halt+0x1a4>
 8007f08:	e011      	b.n	8007f2e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	015a      	lsls	r2, r3, #5
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	4413      	add	r3, r2
 8007f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	0151      	lsls	r1, r2, #5
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	440a      	add	r2, r1
 8007f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f28:	6013      	str	r3, [r2, #0]
 8007f2a:	e000      	b.n	8007f2e <USB_HC_Halt+0x1f0>
          break;
 8007f2c:	bf00      	nop
    }
  }

  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	371c      	adds	r7, #28
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b087      	sub	sp, #28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	460b      	mov	r3, r1
 8007f46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007f4c:	78fb      	ldrb	r3, [r7, #3]
 8007f4e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007f50:	2301      	movs	r3, #1
 8007f52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	04da      	lsls	r2, r3, #19
 8007f58:	4b15      	ldr	r3, [pc, #84]	; (8007fb0 <USB_DoPing+0x74>)
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	0151      	lsls	r1, r2, #5
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	440a      	add	r2, r1
 8007f64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f6c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f84:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f8c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	015a      	lsls	r2, r3, #5
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	4413      	add	r3, r2
 8007f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	371c      	adds	r7, #28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	1ff80000 	.word	0x1ff80000

08007fb4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f7ff face 	bl	8007566 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007fca:	2110      	movs	r1, #16
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7ff fadb 	bl	8007588 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7ff fafe 	bl	80075d4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007fd8:	2300      	movs	r3, #0
 8007fda:	613b      	str	r3, [r7, #16]
 8007fdc:	e01f      	b.n	800801e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	015a      	lsls	r2, r3, #5
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ff4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ffc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008004:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	4413      	add	r3, r2
 800800e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008012:	461a      	mov	r2, r3
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	3301      	adds	r3, #1
 800801c:	613b      	str	r3, [r7, #16]
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	2b0f      	cmp	r3, #15
 8008022:	d9dc      	bls.n	8007fde <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008024:	2300      	movs	r3, #0
 8008026:	613b      	str	r3, [r7, #16]
 8008028:	e034      	b.n	8008094 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	015a      	lsls	r2, r3, #5
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	4413      	add	r3, r2
 8008032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008040:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008048:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008050:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	015a      	lsls	r2, r3, #5
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	4413      	add	r3, r2
 800805a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800805e:	461a      	mov	r2, r3
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	3301      	adds	r3, #1
 8008068:	617b      	str	r3, [r7, #20]
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008070:	d80c      	bhi.n	800808c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	015a      	lsls	r2, r3, #5
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	4413      	add	r3, r2
 800807a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008084:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008088:	d0ec      	beq.n	8008064 <USB_StopHost+0xb0>
 800808a:	e000      	b.n	800808e <USB_StopHost+0xda>
        break;
 800808c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	3301      	adds	r3, #1
 8008092:	613b      	str	r3, [r7, #16]
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	2b0f      	cmp	r3, #15
 8008098:	d9c7      	bls.n	800802a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080a0:	461a      	mov	r2, r3
 80080a2:	f04f 33ff 	mov.w	r3, #4294967295
 80080a6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f04f 32ff 	mov.w	r2, #4294967295
 80080ae:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7ff fa47 	bl	8007544 <USB_EnableGlobalInt>

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3718      	adds	r7, #24
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80080cc:	e008      	b.n	80080e0 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	32e0      	adds	r2, #224	; 0xe0
 80080d4:	2100      	movs	r1, #0
 80080d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3301      	adds	r3, #1
 80080de:	60fb      	str	r3, [r7, #12]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2b0e      	cmp	r3, #14
 80080e4:	d9f3      	bls.n	80080ce <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80080e6:	2300      	movs	r3, #0
 80080e8:	60fb      	str	r3, [r7, #12]
 80080ea:	e009      	b.n	8008100 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	4413      	add	r3, r2
 80080f2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80080f6:	2200      	movs	r2, #0
 80080f8:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	3301      	adds	r3, #1
 80080fe:	60fb      	str	r3, [r7, #12]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008106:	d3f1      	bcc.n	80080ec <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2240      	movs	r2, #64	; 0x40
 800812c:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
	...

08008154 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b088      	sub	sp, #32
 8008158:	af04      	add	r7, sp, #16
 800815a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800815c:	2302      	movs	r3, #2
 800815e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008160:	2300      	movs	r3, #0
 8008162:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fadd 	bl	8008724 <USBH_IsPortEnabled>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10c      	bne.n	800818a <USBH_Process+0x36>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d007      	beq.n	800818a <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b03      	cmp	r3, #3
 8008182:	d002      	beq.n	800818a <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2203      	movs	r2, #3
 8008188:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b0b      	cmp	r3, #11
 8008192:	f200 814c 	bhi.w	800842e <USBH_Process+0x2da>
 8008196:	a201      	add	r2, pc, #4	; (adr r2, 800819c <USBH_Process+0x48>)
 8008198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819c:	080081cd 	.word	0x080081cd
 80081a0:	080081ef 	.word	0x080081ef
 80081a4:	08008203 	.word	0x08008203
 80081a8:	08008409 	.word	0x08008409
 80081ac:	0800842f 	.word	0x0800842f
 80081b0:	08008291 	.word	0x08008291
 80081b4:	080083bf 	.word	0x080083bf
 80081b8:	080082c1 	.word	0x080082c1
 80081bc:	080082e1 	.word	0x080082e1
 80081c0:	08008301 	.word	0x08008301
 80081c4:	0800832f 	.word	0x0800832f
 80081c8:	080083f1 	.word	0x080083f1
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 812c 	beq.w	8008432 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 80081e0:	20c8      	movs	r0, #200	; 0xc8
 80081e2:	f003 fbce 	bl	800b982 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f003 fb3d 	bl	800b866 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80081ec:	e121      	b.n	8008432 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	f040 811e 	bne.w	8008436 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2202      	movs	r2, #2
 80081fe:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008200:	e119      	b.n	8008436 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8008202:	2064      	movs	r0, #100	; 0x64
 8008204:	f003 fbbd 	bl	800b982 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f003 fb07 	bl	800b81c <USBH_LL_GetSpeed>
 800820e:	4603      	mov	r3, r0
 8008210:	461a      	mov	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2205      	movs	r2, #5
 800821c:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800821e:	2100      	movs	r1, #0
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 ffe3 	bl	80091ec <USBH_AllocPipe>
 8008226:	4603      	mov	r3, r0
 8008228:	461a      	mov	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800822e:	2180      	movs	r1, #128	; 0x80
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 ffdb 	bl	80091ec <USBH_AllocPipe>
 8008236:	4603      	mov	r3, r0
 8008238:	461a      	mov	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	7919      	ldrb	r1, [r3, #4]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8008252:	b292      	uxth	r2, r2
 8008254:	9202      	str	r2, [sp, #8]
 8008256:	2200      	movs	r2, #0
 8008258:	9201      	str	r2, [sp, #4]
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	4603      	mov	r3, r0
 800825e:	2280      	movs	r2, #128	; 0x80
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 ffa4 	bl	80091ae <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	7959      	ldrb	r1, [r3, #5]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800827a:	b292      	uxth	r2, r2
 800827c:	9202      	str	r2, [sp, #8]
 800827e:	2200      	movs	r2, #0
 8008280:	9201      	str	r2, [sp, #4]
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	4603      	mov	r3, r0
 8008286:	2200      	movs	r2, #0
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 ff90 	bl	80091ae <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800828e:	e0e3      	b.n	8008458 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f8e7 	bl	8008464 <USBH_HandleEnum>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	f040 80ce 	bne.w	800843a <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d103      	bne.n	80082b8 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2208      	movs	r2, #8
 80082b4:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 80082b6:	e0c0      	b.n	800843a <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2207      	movs	r2, #7
 80082bc:	701a      	strb	r2, [r3, #0]
    break;
 80082be:	e0bc      	b.n	800843a <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f000 80b9 	beq.w	800843e <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80082d2:	2101      	movs	r1, #1
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2208      	movs	r2, #8
 80082dc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80082de:	e0ae      	b.n	800843e <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fb4a 	bl	8008984 <USBH_SetCfg>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f040 80a5 	bne.w	8008442 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2209      	movs	r2, #9
 80082fc:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80082fe:	e0a0      	b.n	8008442 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8008306:	f003 0320 	and.w	r3, r3, #32
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00b      	beq.n	8008326 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800830e:	2101      	movs	r1, #1
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fb5a 	bl	80089ca <USBH_SetFeature>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	f040 8094 	bne.w	8008446 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	220a      	movs	r2, #10
 8008322:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8008324:	e08f      	b.n	8008446 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	220a      	movs	r2, #10
 800832a:	701a      	strb	r2, [r3, #0]
    break;
 800832c:	e08b      	b.n	8008446 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008334:	2b00      	cmp	r3, #0
 8008336:	f000 8088 	beq.w	800844a <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008342:	2300      	movs	r3, #0
 8008344:	73fb      	strb	r3, [r7, #15]
 8008346:	e017      	b.n	8008378 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008348:	7bfb      	ldrb	r3, [r7, #15]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	33dc      	adds	r3, #220	; 0xdc
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4413      	add	r3, r2
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	791a      	ldrb	r2, [r3, #4]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 800835c:	429a      	cmp	r2, r3
 800835e:	d108      	bne.n	8008372 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	33dc      	adds	r3, #220	; 0xdc
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4413      	add	r3, r2
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008372:	7bfb      	ldrb	r3, [r7, #15]
 8008374:	3301      	adds	r3, #1
 8008376:	73fb      	strb	r3, [r7, #15]
 8008378:	7bfb      	ldrb	r3, [r7, #15]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d0e4      	beq.n	8008348 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008384:	2b00      	cmp	r3, #0
 8008386:	d016      	beq.n	80083b6 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	4798      	blx	r3
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d109      	bne.n	80083ae <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2206      	movs	r2, #6
 800839e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80083a6:	2103      	movs	r1, #3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80083ac:	e04d      	b.n	800844a <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	220d      	movs	r2, #13
 80083b2:	701a      	strb	r2, [r3, #0]
    break;
 80083b4:	e049      	b.n	800844a <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	220d      	movs	r2, #13
 80083ba:	701a      	strb	r2, [r3, #0]
    break;
 80083bc:	e045      	b.n	800844a <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00f      	beq.n	80083e8 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	4798      	blx	r3
 80083d4:	4603      	mov	r3, r0
 80083d6:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 80083d8:	7bbb      	ldrb	r3, [r7, #14]
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d136      	bne.n	800844e <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	220b      	movs	r2, #11
 80083e4:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 80083e6:	e032      	b.n	800844e <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	220d      	movs	r2, #13
 80083ec:	701a      	strb	r2, [r3, #0]
    break;
 80083ee:	e02e      	b.n	800844e <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d02b      	beq.n	8008452 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	4798      	blx	r3
    }
    break;
 8008406:	e024      	b.n	8008452 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f7ff fe59 	bl	80080c0 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008414:	2b00      	cmp	r3, #0
 8008416:	d01e      	beq.n	8008456 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800842c:	e013      	b.n	8008456 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 800842e:	bf00      	nop
 8008430:	e012      	b.n	8008458 <USBH_Process+0x304>
    break;
 8008432:	bf00      	nop
 8008434:	e010      	b.n	8008458 <USBH_Process+0x304>
    break;
 8008436:	bf00      	nop
 8008438:	e00e      	b.n	8008458 <USBH_Process+0x304>
    break;
 800843a:	bf00      	nop
 800843c:	e00c      	b.n	8008458 <USBH_Process+0x304>
    break;
 800843e:	bf00      	nop
 8008440:	e00a      	b.n	8008458 <USBH_Process+0x304>
    break;
 8008442:	bf00      	nop
 8008444:	e008      	b.n	8008458 <USBH_Process+0x304>
    break;
 8008446:	bf00      	nop
 8008448:	e006      	b.n	8008458 <USBH_Process+0x304>
    break;
 800844a:	bf00      	nop
 800844c:	e004      	b.n	8008458 <USBH_Process+0x304>
    break;
 800844e:	bf00      	nop
 8008450:	e002      	b.n	8008458 <USBH_Process+0x304>
    break;
 8008452:	bf00      	nop
 8008454:	e000      	b.n	8008458 <USBH_Process+0x304>
    break;
 8008456:	bf00      	nop
  }
 return USBH_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop

08008464 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b088      	sub	sp, #32
 8008468:	af04      	add	r7, sp, #16
 800846a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800846c:	2301      	movs	r3, #1
 800846e:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	785b      	ldrb	r3, [r3, #1]
 8008474:	2b07      	cmp	r3, #7
 8008476:	f200 80f8 	bhi.w	800866a <USBH_HandleEnum+0x206>
 800847a:	a201      	add	r2, pc, #4	; (adr r2, 8008480 <USBH_HandleEnum+0x1c>)
 800847c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008480:	080084a1 	.word	0x080084a1
 8008484:	08008513 	.word	0x08008513
 8008488:	0800852b 	.word	0x0800852b
 800848c:	080085a1 	.word	0x080085a1
 8008490:	080085b7 	.word	0x080085b7
 8008494:	080085d3 	.word	0x080085d3
 8008498:	08008607 	.word	0x08008607
 800849c:	0800863b 	.word	0x0800863b
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80084a0:	2108      	movs	r1, #8
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f99e 	bl	80087e4 <USBH_Get_DevDesc>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f040 80df 	bne.w	800866e <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	7919      	ldrb	r1, [r3, #4]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80084d4:	b292      	uxth	r2, r2
 80084d6:	9202      	str	r2, [sp, #8]
 80084d8:	2200      	movs	r2, #0
 80084da:	9201      	str	r2, [sp, #4]
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	4603      	mov	r3, r0
 80084e0:	2280      	movs	r2, #128	; 0x80
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fe63 	bl	80091ae <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	7959      	ldrb	r1, [r3, #5]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80084fc:	b292      	uxth	r2, r2
 80084fe:	9202      	str	r2, [sp, #8]
 8008500:	2200      	movs	r2, #0
 8008502:	9201      	str	r2, [sp, #4]
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	4603      	mov	r3, r0
 8008508:	2200      	movs	r2, #0
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fe4f 	bl	80091ae <USBH_OpenPipe>

    }
    break;
 8008510:	e0ad      	b.n	800866e <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8008512:	2112      	movs	r1, #18
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f965 	bl	80087e4 <USBH_Get_DevDesc>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	f040 80a8 	bne.w	8008672 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2202      	movs	r2, #2
 8008526:	705a      	strb	r2, [r3, #1]

    }
    break;
 8008528:	e0a3      	b.n	8008672 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800852a:	2101      	movs	r1, #1
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fa05 	bl	800893c <USBH_SetAddress>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	f040 809e 	bne.w	8008676 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 800853a:	2002      	movs	r0, #2
 800853c:	f003 fa21 	bl	800b982 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2203      	movs	r2, #3
 800854c:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	7919      	ldrb	r1, [r3, #4]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8008562:	b292      	uxth	r2, r2
 8008564:	9202      	str	r2, [sp, #8]
 8008566:	2200      	movs	r2, #0
 8008568:	9201      	str	r2, [sp, #4]
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	4603      	mov	r3, r0
 800856e:	2280      	movs	r2, #128	; 0x80
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fe1c 	bl	80091ae <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	7959      	ldrb	r1, [r3, #5]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800858a:	b292      	uxth	r2, r2
 800858c:	9202      	str	r2, [sp, #8]
 800858e:	2200      	movs	r2, #0
 8008590:	9201      	str	r2, [sp, #4]
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	4603      	mov	r3, r0
 8008596:	2200      	movs	r2, #0
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fe08 	bl	80091ae <USBH_OpenPipe>
    }
    break;
 800859e:	e06a      	b.n	8008676 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80085a0:	2109      	movs	r1, #9
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f946 	bl	8008834 <USBH_Get_CfgDesc>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d165      	bne.n	800867a <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2204      	movs	r2, #4
 80085b2:	705a      	strb	r2, [r3, #1]
    }
    break;
 80085b4:	e061      	b.n	800867a <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 80085bc:	4619      	mov	r1, r3
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f938 	bl	8008834 <USBH_Get_CfgDesc>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d159      	bne.n	800867e <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2205      	movs	r2, #5
 80085ce:	705a      	strb	r2, [r3, #1]
    }
    break;
 80085d0:	e055      	b.n	800867e <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d010      	beq.n	80085fe <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80085e8:	23ff      	movs	r3, #255	; 0xff
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f946 	bl	800887c <USBH_Get_StringDesc>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d145      	bne.n	8008682 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2206      	movs	r2, #6
 80085fa:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80085fc:	e041      	b.n	8008682 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2206      	movs	r2, #6
 8008602:	705a      	strb	r2, [r3, #1]
    break;
 8008604:	e03d      	b.n	8008682 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800860c:	2b00      	cmp	r3, #0
 800860e:	d010      	beq.n	8008632 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800861c:	23ff      	movs	r3, #255	; 0xff
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f92c 	bl	800887c <USBH_Get_StringDesc>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d12d      	bne.n	8008686 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2207      	movs	r2, #7
 800862e:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8008630:	e029      	b.n	8008686 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2207      	movs	r2, #7
 8008636:	705a      	strb	r2, [r3, #1]
    break;
 8008638:	e025      	b.n	8008686 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00f      	beq.n	8008664 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8008650:	23ff      	movs	r3, #255	; 0xff
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 f912 	bl	800887c <USBH_Get_StringDesc>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d115      	bne.n	800868a <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8008662:	e012      	b.n	800868a <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8008664:	2300      	movs	r3, #0
 8008666:	73fb      	strb	r3, [r7, #15]
    break;
 8008668:	e00f      	b.n	800868a <USBH_HandleEnum+0x226>

  default:
    break;
 800866a:	bf00      	nop
 800866c:	e00e      	b.n	800868c <USBH_HandleEnum+0x228>
    break;
 800866e:	bf00      	nop
 8008670:	e00c      	b.n	800868c <USBH_HandleEnum+0x228>
    break;
 8008672:	bf00      	nop
 8008674:	e00a      	b.n	800868c <USBH_HandleEnum+0x228>
    break;
 8008676:	bf00      	nop
 8008678:	e008      	b.n	800868c <USBH_HandleEnum+0x228>
    break;
 800867a:	bf00      	nop
 800867c:	e006      	b.n	800868c <USBH_HandleEnum+0x228>
    break;
 800867e:	bf00      	nop
 8008680:	e004      	b.n	800868c <USBH_HandleEnum+0x228>
    break;
 8008682:	bf00      	nop
 8008684:	e002      	b.n	800868c <USBH_HandleEnum+0x228>
    break;
 8008686:	bf00      	nop
 8008688:	e000      	b.n	800868c <USBH_HandleEnum+0x228>
    break;
 800868a:	bf00      	nop
  }
  return Status;
 800868c:	7bfb      	ldrb	r3, [r7, #15]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop

08008698 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80086a6:	1c5a      	adds	r2, r3, #1
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f804 	bl	80086bc <USBH_HandleSof>
}
 80086b4:	bf00      	nop
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b0b      	cmp	r3, #11
 80086cc:	d10a      	bne.n	80086e4 <USBH_HandleSof+0x28>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d005      	beq.n	80086e4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80086de:	699b      	ldr	r3, [r3, #24]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	4798      	blx	r3
  }
}
 80086e4:	bf00      	nop
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80086fc:	bf00      	nop
}
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8008718:	bf00      	nop
}
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8008732:	4618      	mov	r0, r3
 8008734:	370c      	adds	r7, #12
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b082      	sub	sp, #8
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10f      	bne.n	8008770 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00e      	beq.n	8008780 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008768:	2104      	movs	r1, #4
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	4798      	blx	r3
 800876e:	e007      	b.n	8008780 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008776:	2b01      	cmp	r3, #1
 8008778:	d102      	bne.n	8008780 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2202      	movs	r2, #2
 800877e:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b082      	sub	sp, #8
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f003 f827 	bl	800b7e6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	791b      	ldrb	r3, [r3, #4]
 800879c:	4619      	mov	r1, r3
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fd42 	bl	8009228 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	795b      	ldrb	r3, [r3, #5]
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fd3c 	bl	8009228 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d005      	beq.n	80087ce <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80087c8:	2105      	movs	r1, #5
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f002 ffee 	bl	800b7b0 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2203      	movs	r2, #3
 80087d8:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3708      	adds	r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af02      	add	r7, sp, #8
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	460b      	mov	r3, r1
 80087ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80087f6:	78fb      	ldrb	r3, [r7, #3]
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	4613      	mov	r3, r2
 80087fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008802:	2100      	movs	r1, #0
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f864 	bl	80088d2 <USBH_GetDescriptor>
 800880a:	4603      	mov	r3, r0
 800880c:	73fb      	strb	r3, [r7, #15]
 800880e:	7bfb      	ldrb	r3, [r7, #15]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10a      	bne.n	800882a <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f203 3022 	addw	r0, r3, #802	; 0x322
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008820:	78fa      	ldrb	r2, [r7, #3]
 8008822:	b292      	uxth	r2, r2
 8008824:	4619      	mov	r1, r3
 8008826:	f000 f8f4 	bl	8008a12 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800882a:	7bfb      	ldrb	r3, [r7, #15]
}
 800882c:	4618      	mov	r0, r3
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af02      	add	r7, sp, #8
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	460b      	mov	r3, r1
 800883e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	331c      	adds	r3, #28
 8008844:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8008846:	887b      	ldrh	r3, [r7, #2]
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008850:	2100      	movs	r1, #0
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f83d 	bl	80088d2 <USBH_GetDescriptor>
 8008858:	4603      	mov	r3, r0
 800885a:	72fb      	strb	r3, [r7, #11]
 800885c:	7afb      	ldrb	r3, [r7, #11]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d107      	bne.n	8008872 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8008868:	887a      	ldrh	r2, [r7, #2]
 800886a:	68f9      	ldr	r1, [r7, #12]
 800886c:	4618      	mov	r0, r3
 800886e:	f000 f940 	bl	8008af2 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8008872:	7afb      	ldrb	r3, [r7, #11]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b088      	sub	sp, #32
 8008880:	af02      	add	r7, sp, #8
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	607a      	str	r2, [r7, #4]
 8008886:	461a      	mov	r2, r3
 8008888:	460b      	mov	r3, r1
 800888a:	72fb      	strb	r3, [r7, #11]
 800888c:	4613      	mov	r3, r2
 800888e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8008890:	7afb      	ldrb	r3, [r7, #11]
 8008892:	b29b      	uxth	r3, r3
 8008894:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008898:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80088a0:	893b      	ldrh	r3, [r7, #8]
 80088a2:	9300      	str	r3, [sp, #0]
 80088a4:	460b      	mov	r3, r1
 80088a6:	2100      	movs	r1, #0
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 f812 	bl	80088d2 <USBH_GetDescriptor>
 80088ae:	4603      	mov	r3, r0
 80088b0:	75fb      	strb	r3, [r7, #23]
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d107      	bne.n	80088c8 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80088be:	893a      	ldrh	r2, [r7, #8]
 80088c0:	6879      	ldr	r1, [r7, #4]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 fa13 	bl	8008cee <USBH_ParseStringDesc>
  }
  return status;
 80088c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3718      	adds	r7, #24
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	60f8      	str	r0, [r7, #12]
 80088da:	607b      	str	r3, [r7, #4]
 80088dc:	460b      	mov	r3, r1
 80088de:	72fb      	strb	r3, [r7, #11]
 80088e0:	4613      	mov	r3, r2
 80088e2:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	789b      	ldrb	r3, [r3, #2]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d11c      	bne.n	8008926 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80088ec:	7afb      	ldrb	r3, [r7, #11]
 80088ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80088f2:	b2da      	uxtb	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2206      	movs	r2, #6
 80088fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	893a      	ldrh	r2, [r7, #8]
 8008902:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008904:	893b      	ldrh	r3, [r7, #8]
 8008906:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800890a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800890e:	d104      	bne.n	800891a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f240 4209 	movw	r2, #1033	; 0x409
 8008916:	829a      	strh	r2, [r3, #20]
 8008918:	e002      	b.n	8008920 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	8b3a      	ldrh	r2, [r7, #24]
 8008924:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8008926:	8b3b      	ldrh	r3, [r7, #24]
 8008928:	461a      	mov	r2, r3
 800892a:	6879      	ldr	r1, [r7, #4]
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f000 fa2c 	bl	8008d8a <USBH_CtlReq>
 8008932:	4603      	mov	r3, r0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	460b      	mov	r3, r1
 8008946:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	789b      	ldrb	r3, [r3, #2]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d10f      	bne.n	8008970 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2205      	movs	r2, #5
 800895a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800895c:	78fb      	ldrb	r3, [r7, #3]
 800895e:	b29a      	uxth	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008970:	2200      	movs	r2, #0
 8008972:	2100      	movs	r1, #0
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fa08 	bl	8008d8a <USBH_CtlReq>
 800897a:	4603      	mov	r3, r0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	789b      	ldrb	r3, [r3, #2]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d10e      	bne.n	80089b6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2209      	movs	r2, #9
 80089a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	887a      	ldrh	r2, [r7, #2]
 80089a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 80089b6:	2200      	movs	r2, #0
 80089b8:	2100      	movs	r1, #0
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f9e5 	bl	8008d8a <USBH_CtlReq>
 80089c0:	4603      	mov	r3, r0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b082      	sub	sp, #8
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	460b      	mov	r3, r1
 80089d4:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	789b      	ldrb	r3, [r3, #2]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d10f      	bne.n	80089fe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2203      	movs	r2, #3
 80089e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80089ea:	78fb      	ldrb	r3, [r7, #3]
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80089fe:	2200      	movs	r2, #0
 8008a00:	2100      	movs	r1, #0
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f9c1 	bl	8008d8a <USBH_CtlReq>
 8008a08:	4603      	mov	r3, r0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3708      	adds	r7, #8
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b085      	sub	sp, #20
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	60f8      	str	r0, [r7, #12]
 8008a1a:	60b9      	str	r1, [r7, #8]
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	781a      	ldrb	r2, [r3, #0]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	785a      	ldrb	r2, [r3, #1]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	3302      	adds	r3, #2
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	3303      	adds	r3, #3
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	021b      	lsls	r3, r3, #8
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	4313      	orrs	r3, r2
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	791a      	ldrb	r2, [r3, #4]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	795a      	ldrb	r2, [r3, #5]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	799a      	ldrb	r2, [r3, #6]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	79da      	ldrb	r2, [r3, #7]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008a6c:	88fb      	ldrh	r3, [r7, #6]
 8008a6e:	2b08      	cmp	r3, #8
 8008a70:	d939      	bls.n	8008ae6 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	3308      	adds	r3, #8
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	3309      	adds	r3, #9
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	021b      	lsls	r3, r3, #8
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	4313      	orrs	r3, r2
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	330a      	adds	r3, #10
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	330b      	adds	r3, #11
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	021b      	lsls	r3, r3, #8
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	330c      	adds	r3, #12
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	330d      	adds	r3, #13
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	021b      	lsls	r3, r3, #8
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	7b9a      	ldrb	r2, [r3, #14]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	7bda      	ldrb	r2, [r3, #15]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	7c1a      	ldrb	r2, [r3, #16]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	7c5a      	ldrb	r2, [r3, #17]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	745a      	strb	r2, [r3, #17]
  }
}
 8008ae6:	bf00      	nop
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b08a      	sub	sp, #40	; 0x28
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	60f8      	str	r0, [r7, #12]
 8008afa:	60b9      	str	r1, [r7, #8]
 8008afc:	4613      	mov	r3, r2
 8008afe:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008b04:	2300      	movs	r3, #0
 8008b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	781a      	ldrb	r2, [r3, #0]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	785a      	ldrb	r2, [r3, #1]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	3302      	adds	r3, #2
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	3303      	adds	r3, #3
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	021b      	lsls	r3, r3, #8
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	791a      	ldrb	r2, [r3, #4]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	795a      	ldrb	r2, [r3, #5]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	799a      	ldrb	r2, [r3, #6]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	79da      	ldrb	r2, [r3, #7]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	7a1a      	ldrb	r2, [r3, #8]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008b68:	88fb      	ldrh	r3, [r7, #6]
 8008b6a:	2b09      	cmp	r3, #9
 8008b6c:	d95f      	bls.n	8008c2e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008b6e:	2309      	movs	r3, #9
 8008b70:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b76:	e051      	b.n	8008c1c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b78:	f107 0316 	add.w	r3, r7, #22
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b80:	f000 f8e8 	bl	8008d54 <USBH_GetNextDesc>
 8008b84:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	785b      	ldrb	r3, [r3, #1]
 8008b8a:	2b04      	cmp	r3, #4
 8008b8c:	d146      	bne.n	8008c1c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008b8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b92:	221a      	movs	r2, #26
 8008b94:	fb02 f303 	mul.w	r3, r2, r3
 8008b98:	3308      	adds	r3, #8
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	3302      	adds	r3, #2
 8008ba0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8008ba2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ba4:	69f8      	ldr	r0, [r7, #28]
 8008ba6:	f000 f846 	bl	8008c36 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008baa:	2300      	movs	r3, #0
 8008bac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008bb4:	e022      	b.n	8008bfc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8008bb6:	f107 0316 	add.w	r3, r7, #22
 8008bba:	4619      	mov	r1, r3
 8008bbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008bbe:	f000 f8c9 	bl	8008d54 <USBH_GetNextDesc>
 8008bc2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	785b      	ldrb	r3, [r3, #1]
 8008bc8:	2b05      	cmp	r3, #5
 8008bca:	d117      	bne.n	8008bfc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008bcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008bd0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008bd4:	3201      	adds	r2, #1
 8008bd6:	00d2      	lsls	r2, r2, #3
 8008bd8:	211a      	movs	r1, #26
 8008bda:	fb01 f303 	mul.w	r3, r1, r3
 8008bde:	4413      	add	r3, r2
 8008be0:	3308      	adds	r3, #8
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	4413      	add	r3, r2
 8008be6:	3304      	adds	r3, #4
 8008be8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8008bea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008bec:	69b8      	ldr	r0, [r7, #24]
 8008bee:	f000 f851 	bl	8008c94 <USBH_ParseEPDesc>
            ep_ix++;
 8008bf2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	791b      	ldrb	r3, [r3, #4]
 8008c00:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d204      	bcs.n	8008c12 <USBH_ParseCfgDesc+0x120>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	885a      	ldrh	r2, [r3, #2]
 8008c0c:	8afb      	ldrh	r3, [r7, #22]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d8d1      	bhi.n	8008bb6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008c12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c16:	3301      	adds	r3, #1
 8008c18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008c1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d804      	bhi.n	8008c2e <USBH_ParseCfgDesc+0x13c>
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	885a      	ldrh	r2, [r3, #2]
 8008c28:	8afb      	ldrh	r3, [r7, #22]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d8a4      	bhi.n	8008b78 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008c2e:	bf00      	nop
 8008c30:	3728      	adds	r7, #40	; 0x28
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b083      	sub	sp, #12
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	781a      	ldrb	r2, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	785a      	ldrb	r2, [r3, #1]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	789a      	ldrb	r2, [r3, #2]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	78da      	ldrb	r2, [r3, #3]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	791a      	ldrb	r2, [r3, #4]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	795a      	ldrb	r2, [r3, #5]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	799a      	ldrb	r2, [r3, #6]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	79da      	ldrb	r2, [r3, #7]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	7a1a      	ldrb	r2, [r3, #8]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	721a      	strb	r2, [r3, #8]
}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	781a      	ldrb	r2, [r3, #0]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	785a      	ldrb	r2, [r3, #1]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	789a      	ldrb	r2, [r3, #2]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	78da      	ldrb	r2, [r3, #3]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	b29a      	uxth	r2, r3
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	3305      	adds	r3, #5
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	021b      	lsls	r3, r3, #8
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	799a      	ldrb	r2, [r3, #6]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	719a      	strb	r2, [r3, #6]
}
 8008ce2:	bf00      	nop
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	b087      	sub	sp, #28
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	60f8      	str	r0, [r7, #12]
 8008cf6:	60b9      	str	r1, [r7, #8]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	2b03      	cmp	r3, #3
 8008d04:	d120      	bne.n	8008d48 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	1e9a      	subs	r2, r3, #2
 8008d0c:	88fb      	ldrh	r3, [r7, #6]
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	bf28      	it	cs
 8008d12:	4613      	movcs	r3, r2
 8008d14:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	3302      	adds	r3, #2
 8008d1a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	82fb      	strh	r3, [r7, #22]
 8008d20:	e00b      	b.n	8008d3a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008d22:	8afb      	ldrh	r3, [r7, #22]
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	4413      	add	r3, r2
 8008d28:	781a      	ldrb	r2, [r3, #0]
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	3301      	adds	r3, #1
 8008d32:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008d34:	8afb      	ldrh	r3, [r7, #22]
 8008d36:	3302      	adds	r3, #2
 8008d38:	82fb      	strh	r3, [r7, #22]
 8008d3a:	8afa      	ldrh	r2, [r7, #22]
 8008d3c:	8abb      	ldrh	r3, [r7, #20]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d3ef      	bcc.n	8008d22 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	2200      	movs	r2, #0
 8008d46:	701a      	strb	r2, [r3, #0]
  }
}
 8008d48:	bf00      	nop
 8008d4a:	371c      	adds	r7, #28
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	881a      	ldrh	r2, [r3, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	4413      	add	r3, r2
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4413      	add	r3, r2
 8008d7a:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3714      	adds	r7, #20
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b086      	sub	sp, #24
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	60f8      	str	r0, [r7, #12]
 8008d92:	60b9      	str	r1, [r7, #8]
 8008d94:	4613      	mov	r3, r2
 8008d96:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	789b      	ldrb	r3, [r3, #2]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d002      	beq.n	8008daa <USBH_CtlReq+0x20>
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d00f      	beq.n	8008dc8 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8008da8:	e034      	b.n	8008e14 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	88fa      	ldrh	r2, [r7, #6]
 8008db4:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2201      	movs	r2, #1
 8008dba:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	75fb      	strb	r3, [r7, #23]
    break;
 8008dc6:	e025      	b.n	8008e14 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f000 f829 	bl	8008e20 <USBH_HandleControl>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8008dd2:	7dfb      	ldrb	r3, [r7, #23]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d108      	bne.n	8008dea <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	75fb      	strb	r3, [r7, #23]
    break;
 8008de8:	e013      	b.n	8008e12 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8008dea:	7dfb      	ldrb	r3, [r7, #23]
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d108      	bne.n	8008e02 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2201      	movs	r2, #1
 8008df4:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	75fb      	strb	r3, [r7, #23]
    break;
 8008e00:	e007      	b.n	8008e12 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d104      	bne.n	8008e12 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8008e0e:	2302      	movs	r3, #2
 8008e10:	75fb      	strb	r3, [r7, #23]
    break;
 8008e12:	bf00      	nop
  }
  return status;
 8008e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3718      	adds	r7, #24
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
	...

08008e20 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af02      	add	r7, sp, #8
 8008e26:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	7e1b      	ldrb	r3, [r3, #24]
 8008e34:	3b01      	subs	r3, #1
 8008e36:	2b0a      	cmp	r3, #10
 8008e38:	f200 814c 	bhi.w	80090d4 <USBH_HandleControl+0x2b4>
 8008e3c:	a201      	add	r2, pc, #4	; (adr r2, 8008e44 <USBH_HandleControl+0x24>)
 8008e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e42:	bf00      	nop
 8008e44:	08008e71 	.word	0x08008e71
 8008e48:	08008e8b 	.word	0x08008e8b
 8008e4c:	08008ef5 	.word	0x08008ef5
 8008e50:	08008f1b 	.word	0x08008f1b
 8008e54:	08008f53 	.word	0x08008f53
 8008e58:	08008f7f 	.word	0x08008f7f
 8008e5c:	08008fd1 	.word	0x08008fd1
 8008e60:	08008ff3 	.word	0x08008ff3
 8008e64:	0800902f 	.word	0x0800902f
 8008e68:	08009057 	.word	0x08009057
 8008e6c:	08009095 	.word	0x08009095
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f103 0110 	add.w	r1, r3, #16
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	795b      	ldrb	r3, [r3, #5]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f939 	bl	80090f4 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2202      	movs	r2, #2
 8008e86:	761a      	strb	r2, [r3, #24]
    break;
 8008e88:	e12f      	b.n	80090ea <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	795b      	ldrb	r3, [r3, #5]
 8008e8e:	4619      	mov	r1, r3
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f002 fd63 	bl	800b95c <USBH_LL_GetURBState>
 8008e96:	4603      	mov	r3, r0
 8008e98:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8008e9a:	7bbb      	ldrb	r3, [r7, #14]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d11e      	bne.n	8008ede <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	7c1b      	ldrb	r3, [r3, #16]
 8008ea4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ea8:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	8adb      	ldrh	r3, [r3, #22]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00a      	beq.n	8008ec8 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8008eb2:	7b7b      	ldrb	r3, [r7, #13]
 8008eb4:	2b80      	cmp	r3, #128	; 0x80
 8008eb6:	d103      	bne.n	8008ec0 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2203      	movs	r2, #3
 8008ebc:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008ebe:	e10b      	b.n	80090d8 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2205      	movs	r2, #5
 8008ec4:	761a      	strb	r2, [r3, #24]
    break;
 8008ec6:	e107      	b.n	80090d8 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8008ec8:	7b7b      	ldrb	r3, [r7, #13]
 8008eca:	2b80      	cmp	r3, #128	; 0x80
 8008ecc:	d103      	bne.n	8008ed6 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2209      	movs	r2, #9
 8008ed2:	761a      	strb	r2, [r3, #24]
    break;
 8008ed4:	e100      	b.n	80090d8 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2207      	movs	r2, #7
 8008eda:	761a      	strb	r2, [r3, #24]
    break;
 8008edc:	e0fc      	b.n	80090d8 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008ede:	7bbb      	ldrb	r3, [r7, #14]
 8008ee0:	2b04      	cmp	r3, #4
 8008ee2:	d003      	beq.n	8008eec <USBH_HandleControl+0xcc>
 8008ee4:	7bbb      	ldrb	r3, [r7, #14]
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	f040 80f6 	bne.w	80090d8 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	220b      	movs	r2, #11
 8008ef0:	761a      	strb	r2, [r3, #24]
    break;
 8008ef2:	e0f1      	b.n	80090d8 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6899      	ldr	r1, [r3, #8]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	899a      	ldrh	r2, [r3, #12]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	791b      	ldrb	r3, [r3, #4]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f930 	bl	8009172 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2204      	movs	r2, #4
 8008f16:	761a      	strb	r2, [r3, #24]
    break;
 8008f18:	e0e7      	b.n	80090ea <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	791b      	ldrb	r3, [r3, #4]
 8008f1e:	4619      	mov	r1, r3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f002 fd1b 	bl	800b95c <USBH_LL_GetURBState>
 8008f26:	4603      	mov	r3, r0
 8008f28:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8008f2a:	7bbb      	ldrb	r3, [r7, #14]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d102      	bne.n	8008f36 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2209      	movs	r2, #9
 8008f34:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8008f36:	7bbb      	ldrb	r3, [r7, #14]
 8008f38:	2b05      	cmp	r3, #5
 8008f3a:	d102      	bne.n	8008f42 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008f40:	e0cc      	b.n	80090dc <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8008f42:	7bbb      	ldrb	r3, [r7, #14]
 8008f44:	2b04      	cmp	r3, #4
 8008f46:	f040 80c9 	bne.w	80090dc <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	220b      	movs	r2, #11
 8008f4e:	761a      	strb	r2, [r3, #24]
    break;
 8008f50:	e0c4      	b.n	80090dc <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6899      	ldr	r1, [r3, #8]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	899a      	ldrh	r2, [r3, #12]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	7958      	ldrb	r0, [r3, #5]
 8008f5e:	2301      	movs	r3, #1
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	4603      	mov	r3, r0
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f8df 	bl	8009128 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2206      	movs	r2, #6
 8008f7a:	761a      	strb	r2, [r3, #24]
    break;
 8008f7c:	e0b5      	b.n	80090ea <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	795b      	ldrb	r3, [r3, #5]
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f002 fce9 	bl	800b95c <USBH_LL_GetURBState>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8008f8e:	7bbb      	ldrb	r3, [r7, #14]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d103      	bne.n	8008f9c <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2207      	movs	r2, #7
 8008f98:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008f9a:	e0a1      	b.n	80090e0 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8008f9c:	7bbb      	ldrb	r3, [r7, #14]
 8008f9e:	2b05      	cmp	r3, #5
 8008fa0:	d105      	bne.n	8008fae <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	220c      	movs	r2, #12
 8008fa6:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	73fb      	strb	r3, [r7, #15]
    break;
 8008fac:	e098      	b.n	80090e0 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008fae:	7bbb      	ldrb	r3, [r7, #14]
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d103      	bne.n	8008fbc <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2205      	movs	r2, #5
 8008fb8:	761a      	strb	r2, [r3, #24]
    break;
 8008fba:	e091      	b.n	80090e0 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8008fbc:	7bbb      	ldrb	r3, [r7, #14]
 8008fbe:	2b04      	cmp	r3, #4
 8008fc0:	f040 808e 	bne.w	80090e0 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	220b      	movs	r2, #11
 8008fc8:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8008fca:	2302      	movs	r3, #2
 8008fcc:	73fb      	strb	r3, [r7, #15]
    break;
 8008fce:	e087      	b.n	80090e0 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	791b      	ldrb	r3, [r3, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 f8ca 	bl	8009172 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2208      	movs	r2, #8
 8008fee:	761a      	strb	r2, [r3, #24]

    break;
 8008ff0:	e07b      	b.n	80090ea <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	791b      	ldrb	r3, [r3, #4]
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f002 fcaf 	bl	800b95c <USBH_LL_GetURBState>
 8008ffe:	4603      	mov	r3, r0
 8009000:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8009002:	7bbb      	ldrb	r3, [r7, #14]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d105      	bne.n	8009014 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	220d      	movs	r2, #13
 800900c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009012:	e067      	b.n	80090e4 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8009014:	7bbb      	ldrb	r3, [r7, #14]
 8009016:	2b04      	cmp	r3, #4
 8009018:	d103      	bne.n	8009022 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	220b      	movs	r2, #11
 800901e:	761a      	strb	r2, [r3, #24]
    break;
 8009020:	e060      	b.n	80090e4 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8009022:	7bbb      	ldrb	r3, [r7, #14]
 8009024:	2b05      	cmp	r3, #5
 8009026:	d15d      	bne.n	80090e4 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8009028:	2303      	movs	r3, #3
 800902a:	73fb      	strb	r3, [r7, #15]
    break;
 800902c:	e05a      	b.n	80090e4 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	795a      	ldrb	r2, [r3, #5]
 8009032:	2301      	movs	r3, #1
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	4613      	mov	r3, r2
 8009038:	2200      	movs	r2, #0
 800903a:	2100      	movs	r1, #0
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f873 	bl	8009128 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009048:	b29a      	uxth	r2, r3
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	220a      	movs	r2, #10
 8009052:	761a      	strb	r2, [r3, #24]
    break;
 8009054:	e049      	b.n	80090ea <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	795b      	ldrb	r3, [r3, #5]
 800905a:	4619      	mov	r1, r3
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f002 fc7d 	bl	800b95c <USBH_LL_GetURBState>
 8009062:	4603      	mov	r3, r0
 8009064:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8009066:	7bbb      	ldrb	r3, [r7, #14]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d105      	bne.n	8009078 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	220d      	movs	r2, #13
 8009074:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8009076:	e037      	b.n	80090e8 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8009078:	7bbb      	ldrb	r3, [r7, #14]
 800907a:	2b02      	cmp	r3, #2
 800907c:	d103      	bne.n	8009086 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2209      	movs	r2, #9
 8009082:	761a      	strb	r2, [r3, #24]
    break;
 8009084:	e030      	b.n	80090e8 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8009086:	7bbb      	ldrb	r3, [r7, #14]
 8009088:	2b04      	cmp	r3, #4
 800908a:	d12d      	bne.n	80090e8 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	220b      	movs	r2, #11
 8009090:	761a      	strb	r2, [r3, #24]
    break;
 8009092:	e029      	b.n	80090e8 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	7e5b      	ldrb	r3, [r3, #25]
 8009098:	3301      	adds	r3, #1
 800909a:	b2da      	uxtb	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	765a      	strb	r2, [r3, #25]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	7e5b      	ldrb	r3, [r3, #25]
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	d809      	bhi.n	80090bc <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f002 fb9c 	bl	800b7e6 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 80090ba:	e016      	b.n	80090ea <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80090c2:	2106      	movs	r1, #6
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 80090ce:	2302      	movs	r3, #2
 80090d0:	73fb      	strb	r3, [r7, #15]
    break;
 80090d2:	e00a      	b.n	80090ea <USBH_HandleControl+0x2ca>

  default:
    break;
 80090d4:	bf00      	nop
 80090d6:	e008      	b.n	80090ea <USBH_HandleControl+0x2ca>
    break;
 80090d8:	bf00      	nop
 80090da:	e006      	b.n	80090ea <USBH_HandleControl+0x2ca>
    break;
 80090dc:	bf00      	nop
 80090de:	e004      	b.n	80090ea <USBH_HandleControl+0x2ca>
    break;
 80090e0:	bf00      	nop
 80090e2:	e002      	b.n	80090ea <USBH_HandleControl+0x2ca>
    break;
 80090e4:	bf00      	nop
 80090e6:	e000      	b.n	80090ea <USBH_HandleControl+0x2ca>
    break;
 80090e8:	bf00      	nop
  }
  return status;
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b088      	sub	sp, #32
 80090f8:	af04      	add	r7, sp, #16
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	4613      	mov	r3, r2
 8009100:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009102:	79f9      	ldrb	r1, [r7, #7]
 8009104:	2300      	movs	r3, #0
 8009106:	9303      	str	r3, [sp, #12]
 8009108:	2308      	movs	r3, #8
 800910a:	9302      	str	r3, [sp, #8]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	9301      	str	r3, [sp, #4]
 8009110:	2300      	movs	r3, #0
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	2300      	movs	r3, #0
 8009116:	2200      	movs	r2, #0
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f002 fbee 	bl	800b8fa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b088      	sub	sp, #32
 800912c:	af04      	add	r7, sp, #16
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	4611      	mov	r1, r2
 8009134:	461a      	mov	r2, r3
 8009136:	460b      	mov	r3, r1
 8009138:	80fb      	strh	r3, [r7, #6]
 800913a:	4613      	mov	r3, r2
 800913c:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009144:	2b00      	cmp	r3, #0
 8009146:	d001      	beq.n	800914c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009148:	2300      	movs	r3, #0
 800914a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800914c:	7979      	ldrb	r1, [r7, #5]
 800914e:	7e3b      	ldrb	r3, [r7, #24]
 8009150:	9303      	str	r3, [sp, #12]
 8009152:	88fb      	ldrh	r3, [r7, #6]
 8009154:	9302      	str	r3, [sp, #8]
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	9301      	str	r3, [sp, #4]
 800915a:	2301      	movs	r3, #1
 800915c:	9300      	str	r3, [sp, #0]
 800915e:	2300      	movs	r3, #0
 8009160:	2200      	movs	r2, #0
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f002 fbc9 	bl	800b8fa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b088      	sub	sp, #32
 8009176:	af04      	add	r7, sp, #16
 8009178:	60f8      	str	r0, [r7, #12]
 800917a:	60b9      	str	r1, [r7, #8]
 800917c:	4611      	mov	r1, r2
 800917e:	461a      	mov	r2, r3
 8009180:	460b      	mov	r3, r1
 8009182:	80fb      	strh	r3, [r7, #6]
 8009184:	4613      	mov	r3, r2
 8009186:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009188:	7979      	ldrb	r1, [r7, #5]
 800918a:	2300      	movs	r3, #0
 800918c:	9303      	str	r3, [sp, #12]
 800918e:	88fb      	ldrh	r3, [r7, #6]
 8009190:	9302      	str	r3, [sp, #8]
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	9301      	str	r3, [sp, #4]
 8009196:	2301      	movs	r3, #1
 8009198:	9300      	str	r3, [sp, #0]
 800919a:	2300      	movs	r3, #0
 800919c:	2201      	movs	r2, #1
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f002 fbab 	bl	800b8fa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80091a4:	2300      	movs	r3, #0

}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b086      	sub	sp, #24
 80091b2:	af04      	add	r7, sp, #16
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	4608      	mov	r0, r1
 80091b8:	4611      	mov	r1, r2
 80091ba:	461a      	mov	r2, r3
 80091bc:	4603      	mov	r3, r0
 80091be:	70fb      	strb	r3, [r7, #3]
 80091c0:	460b      	mov	r3, r1
 80091c2:	70bb      	strb	r3, [r7, #2]
 80091c4:	4613      	mov	r3, r2
 80091c6:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 80091c8:	7878      	ldrb	r0, [r7, #1]
 80091ca:	78ba      	ldrb	r2, [r7, #2]
 80091cc:	78f9      	ldrb	r1, [r7, #3]
 80091ce:	8b3b      	ldrh	r3, [r7, #24]
 80091d0:	9302      	str	r3, [sp, #8]
 80091d2:	7d3b      	ldrb	r3, [r7, #20]
 80091d4:	9301      	str	r3, [sp, #4]
 80091d6:	7c3b      	ldrb	r3, [r7, #16]
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	4603      	mov	r3, r0
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f002 fb5d 	bl	800b89c <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 80091e2:	2300      	movs	r3, #0

}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	460b      	mov	r3, r1
 80091f6:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 f831 	bl	8009260 <USBH_GetFreePipe>
 80091fe:	4603      	mov	r3, r0
 8009200:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009202:	89fb      	ldrh	r3, [r7, #14]
 8009204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009208:	4293      	cmp	r3, r2
 800920a:	d007      	beq.n	800921c <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800920c:	78fb      	ldrb	r3, [r7, #3]
 800920e:	89fa      	ldrh	r2, [r7, #14]
 8009210:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	32e0      	adds	r2, #224	; 0xe0
 8009218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800921c:	89fb      	ldrh	r3, [r7, #14]
 800921e:	b2db      	uxtb	r3, r3
}
 8009220:	4618      	mov	r0, r3
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8009234:	78fb      	ldrb	r3, [r7, #3]
 8009236:	2b0a      	cmp	r3, #10
 8009238:	d80b      	bhi.n	8009252 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800923a:	78fa      	ldrb	r2, [r7, #3]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	32e0      	adds	r2, #224	; 0xe0
 8009240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009244:	78fa      	ldrb	r2, [r7, #3]
 8009246:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	32e0      	adds	r2, #224	; 0xe0
 800924e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009268:	2300      	movs	r3, #0
 800926a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800926c:	2300      	movs	r3, #0
 800926e:	73fb      	strb	r3, [r7, #15]
 8009270:	e00e      	b.n	8009290 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009272:	7bfa      	ldrb	r2, [r7, #15]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	32e0      	adds	r2, #224	; 0xe0
 8009278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800927c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009280:	2b00      	cmp	r3, #0
 8009282:	d102      	bne.n	800928a <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8009284:	7bfb      	ldrb	r3, [r7, #15]
 8009286:	b29b      	uxth	r3, r3
 8009288:	e007      	b.n	800929a <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800928a:	7bfb      	ldrb	r3, [r7, #15]
 800928c:	3301      	adds	r3, #1
 800928e:	73fb      	strb	r3, [r7, #15]
 8009290:	7bfb      	ldrb	r3, [r7, #15]
 8009292:	2b0a      	cmp	r3, #10
 8009294:	d9ed      	bls.n	8009272 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8009296:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800929a:	4618      	mov	r0, r3
 800929c:	3714      	adds	r7, #20
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
	...

080092a8 <blink_game_state_led>:
	HAL_Delay(1000);
	HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, INVERTED_OFF);
	HAL_Delay(1000);
}

void blink_game_state_led(game_state_t state) {
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	4603      	mov	r3, r0
 80092b0:	71fb      	strb	r3, [r7, #7]
	switch (state) {
 80092b2:	79fb      	ldrb	r3, [r7, #7]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d002      	beq.n	80092be <blink_game_state_led+0x16>
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d012      	beq.n	80092e2 <blink_game_state_led+0x3a>
		HAL_GPIO_WritePin(GAME_STATE_LED_GPIO_Port, GAME_STATE_LED_Pin, 0);
		HAL_Delay(1000);
	case STARTED:
		HAL_GPIO_WritePin(GAME_STATE_LED_GPIO_Port, GAME_STATE_LED_Pin, 0);
	default:
		break;
 80092bc:	e016      	b.n	80092ec <blink_game_state_led+0x44>
		HAL_GPIO_WritePin(GAME_STATE_LED_GPIO_Port, GAME_STATE_LED_Pin, 1);
 80092be:	2201      	movs	r2, #1
 80092c0:	2180      	movs	r1, #128	; 0x80
 80092c2:	480d      	ldr	r0, [pc, #52]	; (80092f8 <blink_game_state_led+0x50>)
 80092c4:	f7f8 f9b6 	bl	8001634 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80092c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80092cc:	f7f7 f94a 	bl	8000564 <HAL_Delay>
		HAL_GPIO_WritePin(GAME_STATE_LED_GPIO_Port, GAME_STATE_LED_Pin, 0);
 80092d0:	2200      	movs	r2, #0
 80092d2:	2180      	movs	r1, #128	; 0x80
 80092d4:	4808      	ldr	r0, [pc, #32]	; (80092f8 <blink_game_state_led+0x50>)
 80092d6:	f7f8 f9ad 	bl	8001634 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80092da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80092de:	f7f7 f941 	bl	8000564 <HAL_Delay>
		HAL_GPIO_WritePin(GAME_STATE_LED_GPIO_Port, GAME_STATE_LED_Pin, 0);
 80092e2:	2200      	movs	r2, #0
 80092e4:	2180      	movs	r1, #128	; 0x80
 80092e6:	4804      	ldr	r0, [pc, #16]	; (80092f8 <blink_game_state_led+0x50>)
 80092e8:	f7f8 f9a4 	bl	8001634 <HAL_GPIO_WritePin>
		break;
 80092ec:	bf00      	nop
	}
}
 80092ee:	bf00      	nop
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	40020800 	.word	0x40020800

080092fc <generate_random_number>:
void start_single_player_game(void) {

	has_game_started = TRUE;
}

int generate_random_number(void) {
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
	unsigned int rand = HAL_RNG_GetRandomNumber(&hrng);
 8009302:	4804      	ldr	r0, [pc, #16]	; (8009314 <generate_random_number+0x18>)
 8009304:	f7fb fd55 	bl	8004db2 <HAL_RNG_GetRandomNumber>
 8009308:	6078      	str	r0, [r7, #4]
	return rand;
 800930a:	687b      	ldr	r3, [r7, #4]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	20000618 	.word	0x20000618

08009318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800931c:	f7f7 f8f4 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009320:	f000 f864 	bl	80093ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009324:	f000 fff6 	bl	800a314 <MX_GPIO_Init>
  MX_ADC3_Init();
 8009328:	f000 f91e 	bl	8009568 <MX_ADC3_Init>
  MX_CRC_Init();
 800932c:	f000 f96e 	bl	800960c <MX_CRC_Init>
  MX_DCMI_Init();
 8009330:	f000 f98e 	bl	8009650 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8009334:	f000 f9c0 	bl	80096b8 <MX_DMA2D_Init>
  MX_FMC_Init();
 8009338:	f000 ff9c 	bl	800a274 <MX_FMC_Init>
  MX_I2C1_Init();
 800933c:	f000 f9ee 	bl	800971c <MX_I2C1_Init>
  MX_I2C3_Init();
 8009340:	f000 fa2c 	bl	800979c <MX_I2C3_Init>
  MX_LTDC_Init();
 8009344:	f000 fa6a 	bl	800981c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8009348:	f000 faea 	bl	8009920 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800934c:	f000 fb28 	bl	80099a0 <MX_RTC_Init>
  MX_SAI2_Init();
 8009350:	f000 fbce 	bl	8009af0 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 8009354:	f000 fc74 	bl	8009c40 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8009358:	f000 fca2 	bl	8009ca0 <MX_SPI2_Init>
  MX_TIM1_Init();
 800935c:	f000 fcde 	bl	8009d1c <MX_TIM1_Init>
  MX_TIM2_Init();
 8009360:	f000 fd88 	bl	8009e74 <MX_TIM2_Init>
  MX_TIM3_Init();
 8009364:	f000 fdfc 	bl	8009f60 <MX_TIM3_Init>
  MX_TIM5_Init();
 8009368:	f000 fe48 	bl	8009ffc <MX_TIM5_Init>
  MX_TIM8_Init();
 800936c:	f000 febc 	bl	800a0e8 <MX_TIM8_Init>
  MX_TIM12_Init();
 8009370:	f000 ff0c 	bl	800a18c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8009374:	f000 ff4e 	bl	800a214 <MX_USART1_UART_Init>
  MX_RNG_Init();
 8009378:	f000 fafe 	bl	8009978 <MX_RNG_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (has_game_started == FALSE) {
 800937c:	4b17      	ldr	r3, [pc, #92]	; (80093dc <main+0xc4>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d103      	bne.n	800938c <main+0x74>
		  blink_game_state_led(WAITING);
 8009384:	2000      	movs	r0, #0
 8009386:	f7ff ff8f 	bl	80092a8 <blink_game_state_led>
 800938a:	e006      	b.n	800939a <main+0x82>
	  } else if (has_game_started == TRUE) {
 800938c:	4b13      	ldr	r3, [pc, #76]	; (80093dc <main+0xc4>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d102      	bne.n	800939a <main+0x82>
		  blink_game_state_led(STARTED);
 8009394:	2001      	movs	r0, #1
 8009396:	f7ff ff87 	bl	80092a8 <blink_game_state_led>
	  }

	  HAL_Delay(1000);
 800939a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800939e:	f7f7 f8e1 	bl	8000564 <HAL_Delay>
	  counter++;
 80093a2:	4b0f      	ldr	r3, [pc, #60]	; (80093e0 <main+0xc8>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	3301      	adds	r3, #1
 80093a8:	4a0d      	ldr	r2, [pc, #52]	; (80093e0 <main+0xc8>)
 80093aa:	6013      	str	r3, [r2, #0]
	  random = generate_random_number() % 10;
 80093ac:	f7ff ffa6 	bl	80092fc <generate_random_number>
 80093b0:	4601      	mov	r1, r0
 80093b2:	4b0c      	ldr	r3, [pc, #48]	; (80093e4 <main+0xcc>)
 80093b4:	fb83 2301 	smull	r2, r3, r3, r1
 80093b8:	109a      	asrs	r2, r3, #2
 80093ba:	17cb      	asrs	r3, r1, #31
 80093bc:	1ad2      	subs	r2, r2, r3
 80093be:	4613      	mov	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4413      	add	r3, r2
 80093c4:	005b      	lsls	r3, r3, #1
 80093c6:	1aca      	subs	r2, r1, r3
 80093c8:	4b07      	ldr	r3, [pc, #28]	; (80093e8 <main+0xd0>)
 80093ca:	601a      	str	r2, [r3, #0]
	  HAL_Delay(1000);
 80093cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80093d0:	f7f7 f8c8 	bl	8000564 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80093d4:	f002 f98e 	bl	800b6f4 <MX_USB_HOST_Process>
	  if (has_game_started == FALSE) {
 80093d8:	e7d0      	b.n	800937c <main+0x64>
 80093da:	bf00      	nop
 80093dc:	20000028 	.word	0x20000028
 80093e0:	2000002c 	.word	0x2000002c
 80093e4:	66666667 	.word	0x66666667
 80093e8:	200000c0 	.word	0x200000c0

080093ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b0b4      	sub	sp, #208	; 0xd0
 80093f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80093f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80093f6:	2230      	movs	r2, #48	; 0x30
 80093f8:	2100      	movs	r1, #0
 80093fa:	4618      	mov	r0, r3
 80093fc:	f002 fb46 	bl	800ba8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009400:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009404:	2200      	movs	r2, #0
 8009406:	601a      	str	r2, [r3, #0]
 8009408:	605a      	str	r2, [r3, #4]
 800940a:	609a      	str	r2, [r3, #8]
 800940c:	60da      	str	r2, [r3, #12]
 800940e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009410:	f107 0308 	add.w	r3, r7, #8
 8009414:	2284      	movs	r2, #132	; 0x84
 8009416:	2100      	movs	r1, #0
 8009418:	4618      	mov	r0, r3
 800941a:	f002 fb37 	bl	800ba8c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800941e:	f7fa f98d 	bl	800373c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009422:	4b4e      	ldr	r3, [pc, #312]	; (800955c <SystemClock_Config+0x170>)
 8009424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009426:	4a4d      	ldr	r2, [pc, #308]	; (800955c <SystemClock_Config+0x170>)
 8009428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800942c:	6413      	str	r3, [r2, #64]	; 0x40
 800942e:	4b4b      	ldr	r3, [pc, #300]	; (800955c <SystemClock_Config+0x170>)
 8009430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009436:	607b      	str	r3, [r7, #4]
 8009438:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800943a:	4b49      	ldr	r3, [pc, #292]	; (8009560 <SystemClock_Config+0x174>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a48      	ldr	r2, [pc, #288]	; (8009560 <SystemClock_Config+0x174>)
 8009440:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009444:	6013      	str	r3, [r2, #0]
 8009446:	4b46      	ldr	r3, [pc, #280]	; (8009560 <SystemClock_Config+0x174>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800944e:	603b      	str	r3, [r7, #0]
 8009450:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8009452:	2309      	movs	r3, #9
 8009454:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800945c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009460:	2301      	movs	r3, #1
 8009462:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009466:	2302      	movs	r3, #2
 8009468:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800946c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009470:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8009474:	2319      	movs	r3, #25
 8009476:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800947a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800947e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009482:	2302      	movs	r3, #2
 8009484:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8009488:	2309      	movs	r3, #9
 800948a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800948e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009492:	4618      	mov	r0, r3
 8009494:	f7fa fa82 	bl	800399c <HAL_RCC_OscConfig>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800949e:	f001 f981 	bl	800a7a4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80094a2:	f7fa f95b 	bl	800375c <HAL_PWREx_EnableOverDrive>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d001      	beq.n	80094b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80094ac:	f001 f97a 	bl	800a7a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80094b0:	230f      	movs	r3, #15
 80094b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80094b6:	2302      	movs	r3, #2
 80094b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80094bc:	2300      	movs	r3, #0
 80094be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80094c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80094c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80094ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80094d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80094d6:	2106      	movs	r1, #6
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fa fccf 	bl	8003e7c <HAL_RCC_ClockConfig>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80094e4:	f001 f95e 	bl	800a7a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80094e8:	4b1e      	ldr	r3, [pc, #120]	; (8009564 <SystemClock_Config+0x178>)
 80094ea:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80094ec:	2364      	movs	r3, #100	; 0x64
 80094ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80094f0:	2302      	movs	r3, #2
 80094f2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80094f4:	2302      	movs	r3, #2
 80094f6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80094f8:	2302      	movs	r3, #2
 80094fa:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80094fc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009500:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8009502:	2305      	movs	r3, #5
 8009504:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8009506:	2302      	movs	r3, #2
 8009508:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800950a:	2303      	movs	r3, #3
 800950c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800950e:	2301      	movs	r3, #1
 8009510:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8009512:	2301      	movs	r3, #1
 8009514:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8009516:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800951a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800951c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009520:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8009522:	2300      	movs	r3, #0
 8009524:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8009526:	2300      	movs	r3, #0
 8009528:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800952a:	2300      	movs	r3, #0
 800952c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800952e:	2300      	movs	r3, #0
 8009530:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8009532:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009536:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800953a:	2300      	movs	r3, #0
 800953c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009540:	f107 0308 	add.w	r3, r7, #8
 8009544:	4618      	mov	r0, r3
 8009546:	f7fa fe99 	bl	800427c <HAL_RCCEx_PeriphCLKConfig>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d001      	beq.n	8009554 <SystemClock_Config+0x168>
  {
    Error_Handler();
 8009550:	f001 f928 	bl	800a7a4 <Error_Handler>
  }
}
 8009554:	bf00      	nop
 8009556:	37d0      	adds	r7, #208	; 0xd0
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	40023800 	.word	0x40023800
 8009560:	40007000 	.word	0x40007000
 8009564:	01b14068 	.word	0x01b14068

08009568 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800956e:	463b      	mov	r3, r7
 8009570:	2200      	movs	r2, #0
 8009572:	601a      	str	r2, [r3, #0]
 8009574:	605a      	str	r2, [r3, #4]
 8009576:	609a      	str	r2, [r3, #8]
 8009578:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800957a:	4b21      	ldr	r3, [pc, #132]	; (8009600 <MX_ADC3_Init+0x98>)
 800957c:	4a21      	ldr	r2, [pc, #132]	; (8009604 <MX_ADC3_Init+0x9c>)
 800957e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8009580:	4b1f      	ldr	r3, [pc, #124]	; (8009600 <MX_ADC3_Init+0x98>)
 8009582:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009586:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8009588:	4b1d      	ldr	r3, [pc, #116]	; (8009600 <MX_ADC3_Init+0x98>)
 800958a:	2200      	movs	r2, #0
 800958c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800958e:	4b1c      	ldr	r3, [pc, #112]	; (8009600 <MX_ADC3_Init+0x98>)
 8009590:	2200      	movs	r2, #0
 8009592:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8009594:	4b1a      	ldr	r3, [pc, #104]	; (8009600 <MX_ADC3_Init+0x98>)
 8009596:	2200      	movs	r2, #0
 8009598:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800959a:	4b19      	ldr	r3, [pc, #100]	; (8009600 <MX_ADC3_Init+0x98>)
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80095a2:	4b17      	ldr	r3, [pc, #92]	; (8009600 <MX_ADC3_Init+0x98>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80095a8:	4b15      	ldr	r3, [pc, #84]	; (8009600 <MX_ADC3_Init+0x98>)
 80095aa:	4a17      	ldr	r2, [pc, #92]	; (8009608 <MX_ADC3_Init+0xa0>)
 80095ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80095ae:	4b14      	ldr	r3, [pc, #80]	; (8009600 <MX_ADC3_Init+0x98>)
 80095b0:	2200      	movs	r2, #0
 80095b2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80095b4:	4b12      	ldr	r3, [pc, #72]	; (8009600 <MX_ADC3_Init+0x98>)
 80095b6:	2201      	movs	r2, #1
 80095b8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80095ba:	4b11      	ldr	r3, [pc, #68]	; (8009600 <MX_ADC3_Init+0x98>)
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80095c2:	4b0f      	ldr	r3, [pc, #60]	; (8009600 <MX_ADC3_Init+0x98>)
 80095c4:	2201      	movs	r2, #1
 80095c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80095c8:	480d      	ldr	r0, [pc, #52]	; (8009600 <MX_ADC3_Init+0x98>)
 80095ca:	f7f6 ffed 	bl	80005a8 <HAL_ADC_Init>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80095d4:	f001 f8e6 	bl	800a7a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80095d8:	2304      	movs	r3, #4
 80095da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80095dc:	2301      	movs	r3, #1
 80095de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80095e0:	2300      	movs	r3, #0
 80095e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80095e4:	463b      	mov	r3, r7
 80095e6:	4619      	mov	r1, r3
 80095e8:	4805      	ldr	r0, [pc, #20]	; (8009600 <MX_ADC3_Init+0x98>)
 80095ea:	f7f7 f821 	bl	8000630 <HAL_ADC_ConfigChannel>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d001      	beq.n	80095f8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80095f4:	f001 f8d6 	bl	800a7a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80095f8:	bf00      	nop
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	200004a0 	.word	0x200004a0
 8009604:	40012200 	.word	0x40012200
 8009608:	0f000001 	.word	0x0f000001

0800960c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8009610:	4b0d      	ldr	r3, [pc, #52]	; (8009648 <MX_CRC_Init+0x3c>)
 8009612:	4a0e      	ldr	r2, [pc, #56]	; (800964c <MX_CRC_Init+0x40>)
 8009614:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8009616:	4b0c      	ldr	r3, [pc, #48]	; (8009648 <MX_CRC_Init+0x3c>)
 8009618:	2200      	movs	r2, #0
 800961a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800961c:	4b0a      	ldr	r3, [pc, #40]	; (8009648 <MX_CRC_Init+0x3c>)
 800961e:	2200      	movs	r2, #0
 8009620:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8009622:	4b09      	ldr	r3, [pc, #36]	; (8009648 <MX_CRC_Init+0x3c>)
 8009624:	2200      	movs	r2, #0
 8009626:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8009628:	4b07      	ldr	r3, [pc, #28]	; (8009648 <MX_CRC_Init+0x3c>)
 800962a:	2200      	movs	r2, #0
 800962c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800962e:	4b06      	ldr	r3, [pc, #24]	; (8009648 <MX_CRC_Init+0x3c>)
 8009630:	2201      	movs	r2, #1
 8009632:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8009634:	4804      	ldr	r0, [pc, #16]	; (8009648 <MX_CRC_Init+0x3c>)
 8009636:	f7f7 fb0b 	bl	8000c50 <HAL_CRC_Init>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d001      	beq.n	8009644 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8009640:	f001 f8b0 	bl	800a7a4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8009644:	bf00      	nop
 8009646:	bd80      	pop	{r7, pc}
 8009648:	200002d0 	.word	0x200002d0
 800964c:	40023000 	.word	0x40023000

08009650 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8009654:	4b16      	ldr	r3, [pc, #88]	; (80096b0 <MX_DCMI_Init+0x60>)
 8009656:	4a17      	ldr	r2, [pc, #92]	; (80096b4 <MX_DCMI_Init+0x64>)
 8009658:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800965a:	4b15      	ldr	r3, [pc, #84]	; (80096b0 <MX_DCMI_Init+0x60>)
 800965c:	2200      	movs	r2, #0
 800965e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8009660:	4b13      	ldr	r3, [pc, #76]	; (80096b0 <MX_DCMI_Init+0x60>)
 8009662:	2200      	movs	r2, #0
 8009664:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8009666:	4b12      	ldr	r3, [pc, #72]	; (80096b0 <MX_DCMI_Init+0x60>)
 8009668:	2200      	movs	r2, #0
 800966a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800966c:	4b10      	ldr	r3, [pc, #64]	; (80096b0 <MX_DCMI_Init+0x60>)
 800966e:	2200      	movs	r2, #0
 8009670:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8009672:	4b0f      	ldr	r3, [pc, #60]	; (80096b0 <MX_DCMI_Init+0x60>)
 8009674:	2200      	movs	r2, #0
 8009676:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8009678:	4b0d      	ldr	r3, [pc, #52]	; (80096b0 <MX_DCMI_Init+0x60>)
 800967a:	2200      	movs	r2, #0
 800967c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800967e:	4b0c      	ldr	r3, [pc, #48]	; (80096b0 <MX_DCMI_Init+0x60>)
 8009680:	2200      	movs	r2, #0
 8009682:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8009684:	4b0a      	ldr	r3, [pc, #40]	; (80096b0 <MX_DCMI_Init+0x60>)
 8009686:	2200      	movs	r2, #0
 8009688:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800968a:	4b09      	ldr	r3, [pc, #36]	; (80096b0 <MX_DCMI_Init+0x60>)
 800968c:	2200      	movs	r2, #0
 800968e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8009690:	4b07      	ldr	r3, [pc, #28]	; (80096b0 <MX_DCMI_Init+0x60>)
 8009692:	2200      	movs	r2, #0
 8009694:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8009696:	4b06      	ldr	r3, [pc, #24]	; (80096b0 <MX_DCMI_Init+0x60>)
 8009698:	2200      	movs	r2, #0
 800969a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800969c:	4804      	ldr	r0, [pc, #16]	; (80096b0 <MX_DCMI_Init+0x60>)
 800969e:	f7f7 fbc1 	bl	8000e24 <HAL_DCMI_Init>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80096a8:	f001 f87c 	bl	800a7a4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80096ac:	bf00      	nop
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	200004e8 	.word	0x200004e8
 80096b4:	50050000 	.word	0x50050000

080096b8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80096bc:	4b15      	ldr	r3, [pc, #84]	; (8009714 <MX_DMA2D_Init+0x5c>)
 80096be:	4a16      	ldr	r2, [pc, #88]	; (8009718 <MX_DMA2D_Init+0x60>)
 80096c0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80096c2:	4b14      	ldr	r3, [pc, #80]	; (8009714 <MX_DMA2D_Init+0x5c>)
 80096c4:	2200      	movs	r2, #0
 80096c6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80096c8:	4b12      	ldr	r3, [pc, #72]	; (8009714 <MX_DMA2D_Init+0x5c>)
 80096ca:	2200      	movs	r2, #0
 80096cc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80096ce:	4b11      	ldr	r3, [pc, #68]	; (8009714 <MX_DMA2D_Init+0x5c>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80096d4:	4b0f      	ldr	r3, [pc, #60]	; (8009714 <MX_DMA2D_Init+0x5c>)
 80096d6:	2200      	movs	r2, #0
 80096d8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80096da:	4b0e      	ldr	r3, [pc, #56]	; (8009714 <MX_DMA2D_Init+0x5c>)
 80096dc:	2200      	movs	r2, #0
 80096de:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80096e0:	4b0c      	ldr	r3, [pc, #48]	; (8009714 <MX_DMA2D_Init+0x5c>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80096e6:	4b0b      	ldr	r3, [pc, #44]	; (8009714 <MX_DMA2D_Init+0x5c>)
 80096e8:	2200      	movs	r2, #0
 80096ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80096ec:	4809      	ldr	r0, [pc, #36]	; (8009714 <MX_DMA2D_Init+0x5c>)
 80096ee:	f7f7 fc0b 	bl	8000f08 <HAL_DMA2D_Init>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80096f8:	f001 f854 	bl	800a7a4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80096fc:	2101      	movs	r1, #1
 80096fe:	4805      	ldr	r0, [pc, #20]	; (8009714 <MX_DMA2D_Init+0x5c>)
 8009700:	f7f7 fd5c 	bl	80011bc <HAL_DMA2D_ConfigLayer>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d001      	beq.n	800970e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800970a:	f001 f84b 	bl	800a7a4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800970e:	bf00      	nop
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	20000628 	.word	0x20000628
 8009718:	4002b000 	.word	0x4002b000

0800971c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009720:	4b1b      	ldr	r3, [pc, #108]	; (8009790 <MX_I2C1_Init+0x74>)
 8009722:	4a1c      	ldr	r2, [pc, #112]	; (8009794 <MX_I2C1_Init+0x78>)
 8009724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8009726:	4b1a      	ldr	r3, [pc, #104]	; (8009790 <MX_I2C1_Init+0x74>)
 8009728:	4a1b      	ldr	r2, [pc, #108]	; (8009798 <MX_I2C1_Init+0x7c>)
 800972a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800972c:	4b18      	ldr	r3, [pc, #96]	; (8009790 <MX_I2C1_Init+0x74>)
 800972e:	2200      	movs	r2, #0
 8009730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009732:	4b17      	ldr	r3, [pc, #92]	; (8009790 <MX_I2C1_Init+0x74>)
 8009734:	2201      	movs	r2, #1
 8009736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009738:	4b15      	ldr	r3, [pc, #84]	; (8009790 <MX_I2C1_Init+0x74>)
 800973a:	2200      	movs	r2, #0
 800973c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800973e:	4b14      	ldr	r3, [pc, #80]	; (8009790 <MX_I2C1_Init+0x74>)
 8009740:	2200      	movs	r2, #0
 8009742:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009744:	4b12      	ldr	r3, [pc, #72]	; (8009790 <MX_I2C1_Init+0x74>)
 8009746:	2200      	movs	r2, #0
 8009748:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800974a:	4b11      	ldr	r3, [pc, #68]	; (8009790 <MX_I2C1_Init+0x74>)
 800974c:	2200      	movs	r2, #0
 800974e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009750:	4b0f      	ldr	r3, [pc, #60]	; (8009790 <MX_I2C1_Init+0x74>)
 8009752:	2200      	movs	r2, #0
 8009754:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009756:	480e      	ldr	r0, [pc, #56]	; (8009790 <MX_I2C1_Init+0x74>)
 8009758:	f7f9 fb5e 	bl	8002e18 <HAL_I2C_Init>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8009762:	f001 f81f 	bl	800a7a4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009766:	2100      	movs	r1, #0
 8009768:	4809      	ldr	r0, [pc, #36]	; (8009790 <MX_I2C1_Init+0x74>)
 800976a:	f7f9 fbe5 	bl	8002f38 <HAL_I2CEx_ConfigAnalogFilter>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8009774:	f001 f816 	bl	800a7a4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8009778:	2100      	movs	r1, #0
 800977a:	4805      	ldr	r0, [pc, #20]	; (8009790 <MX_I2C1_Init+0x74>)
 800977c:	f7f9 fc27 	bl	8002fce <HAL_I2CEx_ConfigDigitalFilter>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d001      	beq.n	800978a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8009786:	f001 f80d 	bl	800a7a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800978a:	bf00      	nop
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	20000284 	.word	0x20000284
 8009794:	40005400 	.word	0x40005400
 8009798:	00c0eaff 	.word	0x00c0eaff

0800979c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80097a0:	4b1b      	ldr	r3, [pc, #108]	; (8009810 <MX_I2C3_Init+0x74>)
 80097a2:	4a1c      	ldr	r2, [pc, #112]	; (8009814 <MX_I2C3_Init+0x78>)
 80097a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80097a6:	4b1a      	ldr	r3, [pc, #104]	; (8009810 <MX_I2C3_Init+0x74>)
 80097a8:	4a1b      	ldr	r2, [pc, #108]	; (8009818 <MX_I2C3_Init+0x7c>)
 80097aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80097ac:	4b18      	ldr	r3, [pc, #96]	; (8009810 <MX_I2C3_Init+0x74>)
 80097ae:	2200      	movs	r2, #0
 80097b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80097b2:	4b17      	ldr	r3, [pc, #92]	; (8009810 <MX_I2C3_Init+0x74>)
 80097b4:	2201      	movs	r2, #1
 80097b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80097b8:	4b15      	ldr	r3, [pc, #84]	; (8009810 <MX_I2C3_Init+0x74>)
 80097ba:	2200      	movs	r2, #0
 80097bc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80097be:	4b14      	ldr	r3, [pc, #80]	; (8009810 <MX_I2C3_Init+0x74>)
 80097c0:	2200      	movs	r2, #0
 80097c2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80097c4:	4b12      	ldr	r3, [pc, #72]	; (8009810 <MX_I2C3_Init+0x74>)
 80097c6:	2200      	movs	r2, #0
 80097c8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80097ca:	4b11      	ldr	r3, [pc, #68]	; (8009810 <MX_I2C3_Init+0x74>)
 80097cc:	2200      	movs	r2, #0
 80097ce:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80097d0:	4b0f      	ldr	r3, [pc, #60]	; (8009810 <MX_I2C3_Init+0x74>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80097d6:	480e      	ldr	r0, [pc, #56]	; (8009810 <MX_I2C3_Init+0x74>)
 80097d8:	f7f9 fb1e 	bl	8002e18 <HAL_I2C_Init>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d001      	beq.n	80097e6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80097e2:	f000 ffdf 	bl	800a7a4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80097e6:	2100      	movs	r1, #0
 80097e8:	4809      	ldr	r0, [pc, #36]	; (8009810 <MX_I2C3_Init+0x74>)
 80097ea:	f7f9 fba5 	bl	8002f38 <HAL_I2CEx_ConfigAnalogFilter>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80097f4:	f000 ffd6 	bl	800a7a4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80097f8:	2100      	movs	r1, #0
 80097fa:	4805      	ldr	r0, [pc, #20]	; (8009810 <MX_I2C3_Init+0x74>)
 80097fc:	f7f9 fbe7 	bl	8002fce <HAL_I2CEx_ConfigDigitalFilter>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d001      	beq.n	800980a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8009806:	f000 ffcd 	bl	800a7a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800980a:	bf00      	nop
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	200000c4 	.word	0x200000c4
 8009814:	40005c00 	.word	0x40005c00
 8009818:	00c0eaff 	.word	0x00c0eaff

0800981c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b08e      	sub	sp, #56	; 0x38
 8009820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8009822:	1d3b      	adds	r3, r7, #4
 8009824:	2234      	movs	r2, #52	; 0x34
 8009826:	2100      	movs	r1, #0
 8009828:	4618      	mov	r0, r3
 800982a:	f002 f92f 	bl	800ba8c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800982e:	4b3a      	ldr	r3, [pc, #232]	; (8009918 <MX_LTDC_Init+0xfc>)
 8009830:	4a3a      	ldr	r2, [pc, #232]	; (800991c <MX_LTDC_Init+0x100>)
 8009832:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8009834:	4b38      	ldr	r3, [pc, #224]	; (8009918 <MX_LTDC_Init+0xfc>)
 8009836:	2200      	movs	r2, #0
 8009838:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800983a:	4b37      	ldr	r3, [pc, #220]	; (8009918 <MX_LTDC_Init+0xfc>)
 800983c:	2200      	movs	r2, #0
 800983e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8009840:	4b35      	ldr	r3, [pc, #212]	; (8009918 <MX_LTDC_Init+0xfc>)
 8009842:	2200      	movs	r2, #0
 8009844:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8009846:	4b34      	ldr	r3, [pc, #208]	; (8009918 <MX_LTDC_Init+0xfc>)
 8009848:	2200      	movs	r2, #0
 800984a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800984c:	4b32      	ldr	r3, [pc, #200]	; (8009918 <MX_LTDC_Init+0xfc>)
 800984e:	2228      	movs	r2, #40	; 0x28
 8009850:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8009852:	4b31      	ldr	r3, [pc, #196]	; (8009918 <MX_LTDC_Init+0xfc>)
 8009854:	2209      	movs	r2, #9
 8009856:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8009858:	4b2f      	ldr	r3, [pc, #188]	; (8009918 <MX_LTDC_Init+0xfc>)
 800985a:	2235      	movs	r2, #53	; 0x35
 800985c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800985e:	4b2e      	ldr	r3, [pc, #184]	; (8009918 <MX_LTDC_Init+0xfc>)
 8009860:	220b      	movs	r2, #11
 8009862:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8009864:	4b2c      	ldr	r3, [pc, #176]	; (8009918 <MX_LTDC_Init+0xfc>)
 8009866:	f240 2215 	movw	r2, #533	; 0x215
 800986a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800986c:	4b2a      	ldr	r3, [pc, #168]	; (8009918 <MX_LTDC_Init+0xfc>)
 800986e:	f240 121b 	movw	r2, #283	; 0x11b
 8009872:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8009874:	4b28      	ldr	r3, [pc, #160]	; (8009918 <MX_LTDC_Init+0xfc>)
 8009876:	f240 2235 	movw	r2, #565	; 0x235
 800987a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800987c:	4b26      	ldr	r3, [pc, #152]	; (8009918 <MX_LTDC_Init+0xfc>)
 800987e:	f240 121d 	movw	r2, #285	; 0x11d
 8009882:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8009884:	4b24      	ldr	r3, [pc, #144]	; (8009918 <MX_LTDC_Init+0xfc>)
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800988c:	4b22      	ldr	r3, [pc, #136]	; (8009918 <MX_LTDC_Init+0xfc>)
 800988e:	2200      	movs	r2, #0
 8009890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8009894:	4b20      	ldr	r3, [pc, #128]	; (8009918 <MX_LTDC_Init+0xfc>)
 8009896:	2200      	movs	r2, #0
 8009898:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800989c:	481e      	ldr	r0, [pc, #120]	; (8009918 <MX_LTDC_Init+0xfc>)
 800989e:	f7f9 fbe3 	bl	8003068 <HAL_LTDC_Init>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d001      	beq.n	80098ac <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80098a8:	f000 ff7c 	bl	800a7a4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80098ac:	2300      	movs	r3, #0
 80098ae:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80098b0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80098b4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80098ba:	f44f 7388 	mov.w	r3, #272	; 0x110
 80098be:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80098c0:	2302      	movs	r3, #2
 80098c2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80098c4:	23ff      	movs	r3, #255	; 0xff
 80098c6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80098c8:	2300      	movs	r3, #0
 80098ca:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80098cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80098d0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80098d2:	2307      	movs	r3, #7
 80098d4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80098d6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80098da:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80098dc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80098e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80098e2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80098e6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80098ee:	2300      	movs	r3, #0
 80098f0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80098f4:	2300      	movs	r3, #0
 80098f6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80098fa:	1d3b      	adds	r3, r7, #4
 80098fc:	2200      	movs	r2, #0
 80098fe:	4619      	mov	r1, r3
 8009900:	4805      	ldr	r0, [pc, #20]	; (8009918 <MX_LTDC_Init+0xfc>)
 8009902:	f7f9 fd43 	bl	800338c <HAL_LTDC_ConfigLayer>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d001      	beq.n	8009910 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800990c:	f000 ff4a 	bl	800a7a4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8009910:	bf00      	nop
 8009912:	3738      	adds	r7, #56	; 0x38
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	200003f8 	.word	0x200003f8
 800991c:	40016800 	.word	0x40016800

08009920 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8009924:	4b12      	ldr	r3, [pc, #72]	; (8009970 <MX_QUADSPI_Init+0x50>)
 8009926:	4a13      	ldr	r2, [pc, #76]	; (8009974 <MX_QUADSPI_Init+0x54>)
 8009928:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800992a:	4b11      	ldr	r3, [pc, #68]	; (8009970 <MX_QUADSPI_Init+0x50>)
 800992c:	22ff      	movs	r2, #255	; 0xff
 800992e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8009930:	4b0f      	ldr	r3, [pc, #60]	; (8009970 <MX_QUADSPI_Init+0x50>)
 8009932:	2201      	movs	r2, #1
 8009934:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8009936:	4b0e      	ldr	r3, [pc, #56]	; (8009970 <MX_QUADSPI_Init+0x50>)
 8009938:	2200      	movs	r2, #0
 800993a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800993c:	4b0c      	ldr	r3, [pc, #48]	; (8009970 <MX_QUADSPI_Init+0x50>)
 800993e:	2201      	movs	r2, #1
 8009940:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8009942:	4b0b      	ldr	r3, [pc, #44]	; (8009970 <MX_QUADSPI_Init+0x50>)
 8009944:	2200      	movs	r2, #0
 8009946:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8009948:	4b09      	ldr	r3, [pc, #36]	; (8009970 <MX_QUADSPI_Init+0x50>)
 800994a:	2200      	movs	r2, #0
 800994c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800994e:	4b08      	ldr	r3, [pc, #32]	; (8009970 <MX_QUADSPI_Init+0x50>)
 8009950:	2200      	movs	r2, #0
 8009952:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8009954:	4b06      	ldr	r3, [pc, #24]	; (8009970 <MX_QUADSPI_Init+0x50>)
 8009956:	2200      	movs	r2, #0
 8009958:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800995a:	4805      	ldr	r0, [pc, #20]	; (8009970 <MX_QUADSPI_Init+0x50>)
 800995c:	f7f9 ff4e 	bl	80037fc <HAL_QSPI_Init>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d001      	beq.n	800996a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8009966:	f000 ff1d 	bl	800a7a4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800996a:	bf00      	nop
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	20000764 	.word	0x20000764
 8009974:	a0001000 	.word	0xa0001000

08009978 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800997c:	4b06      	ldr	r3, [pc, #24]	; (8009998 <MX_RNG_Init+0x20>)
 800997e:	4a07      	ldr	r2, [pc, #28]	; (800999c <MX_RNG_Init+0x24>)
 8009980:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8009982:	4805      	ldr	r0, [pc, #20]	; (8009998 <MX_RNG_Init+0x20>)
 8009984:	f7fb f99c 	bl	8004cc0 <HAL_RNG_Init>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d001      	beq.n	8009992 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800998e:	f000 ff09 	bl	800a7a4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8009992:	bf00      	nop
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	20000618 	.word	0x20000618
 800999c:	50060800 	.word	0x50060800

080099a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b092      	sub	sp, #72	; 0x48
 80099a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80099a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80099aa:	2200      	movs	r2, #0
 80099ac:	601a      	str	r2, [r3, #0]
 80099ae:	605a      	str	r2, [r3, #4]
 80099b0:	609a      	str	r2, [r3, #8]
 80099b2:	60da      	str	r2, [r3, #12]
 80099b4:	611a      	str	r2, [r3, #16]
 80099b6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80099b8:	2300      	movs	r3, #0
 80099ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80099bc:	463b      	mov	r3, r7
 80099be:	222c      	movs	r2, #44	; 0x2c
 80099c0:	2100      	movs	r1, #0
 80099c2:	4618      	mov	r0, r3
 80099c4:	f002 f862 	bl	800ba8c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80099c8:	4b47      	ldr	r3, [pc, #284]	; (8009ae8 <MX_RTC_Init+0x148>)
 80099ca:	4a48      	ldr	r2, [pc, #288]	; (8009aec <MX_RTC_Init+0x14c>)
 80099cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80099ce:	4b46      	ldr	r3, [pc, #280]	; (8009ae8 <MX_RTC_Init+0x148>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80099d4:	4b44      	ldr	r3, [pc, #272]	; (8009ae8 <MX_RTC_Init+0x148>)
 80099d6:	227f      	movs	r2, #127	; 0x7f
 80099d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80099da:	4b43      	ldr	r3, [pc, #268]	; (8009ae8 <MX_RTC_Init+0x148>)
 80099dc:	22ff      	movs	r2, #255	; 0xff
 80099de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80099e0:	4b41      	ldr	r3, [pc, #260]	; (8009ae8 <MX_RTC_Init+0x148>)
 80099e2:	2200      	movs	r2, #0
 80099e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80099e6:	4b40      	ldr	r3, [pc, #256]	; (8009ae8 <MX_RTC_Init+0x148>)
 80099e8:	2200      	movs	r2, #0
 80099ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80099ec:	4b3e      	ldr	r3, [pc, #248]	; (8009ae8 <MX_RTC_Init+0x148>)
 80099ee:	2200      	movs	r2, #0
 80099f0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80099f2:	483d      	ldr	r0, [pc, #244]	; (8009ae8 <MX_RTC_Init+0x148>)
 80099f4:	f7fb f9f2 	bl	8004ddc <HAL_RTC_Init>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80099fe:	f000 fed1 	bl	800a7a4 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009a14:	2300      	movs	r3, #0
 8009a16:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8009a1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a20:	2201      	movs	r2, #1
 8009a22:	4619      	mov	r1, r3
 8009a24:	4830      	ldr	r0, [pc, #192]	; (8009ae8 <MX_RTC_Init+0x148>)
 8009a26:	f7fb fa55 	bl	8004ed4 <HAL_RTC_SetTime>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d001      	beq.n	8009a34 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8009a30:	f000 feb8 	bl	800a7a4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8009a34:	2301      	movs	r3, #1
 8009a36:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8009a40:	2301      	movs	r3, #1
 8009a42:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8009a46:	2300      	movs	r3, #0
 8009a48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8009a4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a50:	2201      	movs	r2, #1
 8009a52:	4619      	mov	r1, r3
 8009a54:	4824      	ldr	r0, [pc, #144]	; (8009ae8 <MX_RTC_Init+0x148>)
 8009a56:	f7fb fafb 	bl	8005050 <HAL_RTC_SetDate>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d001      	beq.n	8009a64 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8009a60:	f000 fea0 	bl	800a7a4 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8009a64:	2300      	movs	r3, #0
 8009a66:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8009a70:	2300      	movs	r3, #0
 8009a72:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009a74:	2300      	movs	r3, #0
 8009a76:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8009a80:	2300      	movs	r3, #0
 8009a82:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8009a84:	2300      	movs	r3, #0
 8009a86:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8009a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8009a94:	463b      	mov	r3, r7
 8009a96:	2201      	movs	r2, #1
 8009a98:	4619      	mov	r1, r3
 8009a9a:	4813      	ldr	r0, [pc, #76]	; (8009ae8 <MX_RTC_Init+0x148>)
 8009a9c:	f7fb fb80 	bl	80051a0 <HAL_RTC_SetAlarm>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d001      	beq.n	8009aaa <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8009aa6:	f000 fe7d 	bl	800a7a4 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8009ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8009ab6:	463b      	mov	r3, r7
 8009ab8:	2201      	movs	r2, #1
 8009aba:	4619      	mov	r1, r3
 8009abc:	480a      	ldr	r0, [pc, #40]	; (8009ae8 <MX_RTC_Init+0x148>)
 8009abe:	f7fb fb6f 	bl	80051a0 <HAL_RTC_SetAlarm>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8009ac8:	f000 fe6c 	bl	800a7a4 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8009acc:	2202      	movs	r2, #2
 8009ace:	2100      	movs	r1, #0
 8009ad0:	4805      	ldr	r0, [pc, #20]	; (8009ae8 <MX_RTC_Init+0x148>)
 8009ad2:	f7fb fcef 	bl	80054b4 <HAL_RTCEx_SetTimeStamp>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d001      	beq.n	8009ae0 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8009adc:	f000 fe62 	bl	800a7a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8009ae0:	bf00      	nop
 8009ae2:	3748      	adds	r7, #72	; 0x48
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	200005b8 	.word	0x200005b8
 8009aec:	40002800 	.word	0x40002800

08009af0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8009af4:	4b4d      	ldr	r3, [pc, #308]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009af6:	4a4e      	ldr	r2, [pc, #312]	; (8009c30 <MX_SAI2_Init+0x140>)
 8009af8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8009afa:	4b4c      	ldr	r3, [pc, #304]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009afc:	2200      	movs	r2, #0
 8009afe:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8009b00:	4b4a      	ldr	r3, [pc, #296]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8009b06:	4b49      	ldr	r3, [pc, #292]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b08:	2240      	movs	r2, #64	; 0x40
 8009b0a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8009b0c:	4b47      	ldr	r3, [pc, #284]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009b12:	4b46      	ldr	r3, [pc, #280]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b14:	2200      	movs	r2, #0
 8009b16:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8009b18:	4b44      	ldr	r3, [pc, #272]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8009b1e:	4b43      	ldr	r3, [pc, #268]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b20:	2200      	movs	r2, #0
 8009b22:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8009b24:	4b41      	ldr	r3, [pc, #260]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b26:	2200      	movs	r2, #0
 8009b28:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8009b2a:	4b40      	ldr	r3, [pc, #256]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8009b30:	4b3e      	ldr	r3, [pc, #248]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b32:	4a40      	ldr	r2, [pc, #256]	; (8009c34 <MX_SAI2_Init+0x144>)
 8009b34:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8009b36:	4b3d      	ldr	r3, [pc, #244]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8009b3c:	4b3b      	ldr	r3, [pc, #236]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b3e:	2200      	movs	r2, #0
 8009b40:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8009b42:	4b3a      	ldr	r3, [pc, #232]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b44:	2200      	movs	r2, #0
 8009b46:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8009b48:	4b38      	ldr	r3, [pc, #224]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8009b4e:	4b37      	ldr	r3, [pc, #220]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b50:	2208      	movs	r2, #8
 8009b52:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8009b54:	4b35      	ldr	r3, [pc, #212]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b56:	2201      	movs	r2, #1
 8009b58:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8009b5a:	4b34      	ldr	r3, [pc, #208]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8009b60:	4b32      	ldr	r3, [pc, #200]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8009b66:	4b31      	ldr	r3, [pc, #196]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8009b6c:	4b2f      	ldr	r3, [pc, #188]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b6e:	2200      	movs	r2, #0
 8009b70:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8009b72:	4b2e      	ldr	r3, [pc, #184]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8009b78:	4b2c      	ldr	r3, [pc, #176]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8009b7e:	4b2b      	ldr	r3, [pc, #172]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b80:	2200      	movs	r2, #0
 8009b82:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8009b84:	4829      	ldr	r0, [pc, #164]	; (8009c2c <MX_SAI2_Init+0x13c>)
 8009b86:	f7fb fceb 	bl	8005560 <HAL_SAI_Init>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8009b90:	f000 fe08 	bl	800a7a4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8009b94:	4b28      	ldr	r3, [pc, #160]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009b96:	4a29      	ldr	r2, [pc, #164]	; (8009c3c <MX_SAI2_Init+0x14c>)
 8009b98:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8009b9a:	4b27      	ldr	r3, [pc, #156]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8009ba0:	4b25      	ldr	r3, [pc, #148]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009ba2:	2203      	movs	r2, #3
 8009ba4:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8009ba6:	4b24      	ldr	r3, [pc, #144]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009ba8:	2240      	movs	r2, #64	; 0x40
 8009baa:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8009bac:	4b22      	ldr	r3, [pc, #136]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009bb2:	4b21      	ldr	r3, [pc, #132]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8009bb8:	4b1f      	ldr	r3, [pc, #124]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009bba:	2201      	movs	r2, #1
 8009bbc:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8009bbe:	4b1e      	ldr	r3, [pc, #120]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8009bc4:	4b1c      	ldr	r3, [pc, #112]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8009bca:	4b1b      	ldr	r3, [pc, #108]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8009bd0:	4b19      	ldr	r3, [pc, #100]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8009bd6:	4b18      	ldr	r3, [pc, #96]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8009bdc:	4b16      	ldr	r3, [pc, #88]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 24;
 8009be2:	4b15      	ldr	r3, [pc, #84]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009be4:	2218      	movs	r2, #24
 8009be6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8009be8:	4b13      	ldr	r3, [pc, #76]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009bea:	2201      	movs	r2, #1
 8009bec:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8009bee:	4b12      	ldr	r3, [pc, #72]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8009bf4:	4b10      	ldr	r3, [pc, #64]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8009bfa:	4b0f      	ldr	r3, [pc, #60]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8009c00:	4b0d      	ldr	r3, [pc, #52]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009c02:	2200      	movs	r2, #0
 8009c04:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8009c06:	4b0c      	ldr	r3, [pc, #48]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009c08:	2200      	movs	r2, #0
 8009c0a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8009c0c:	4b0a      	ldr	r3, [pc, #40]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009c0e:	2201      	movs	r2, #1
 8009c10:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8009c12:	4b09      	ldr	r3, [pc, #36]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8009c18:	4807      	ldr	r0, [pc, #28]	; (8009c38 <MX_SAI2_Init+0x148>)
 8009c1a:	f7fb fca1 	bl	8005560 <HAL_SAI_Init>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d001      	beq.n	8009c28 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8009c24:	f000 fdbe 	bl	800a7a4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8009c28:	bf00      	nop
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	20000200 	.word	0x20000200
 8009c30:	40015c04 	.word	0x40015c04
 8009c34:	0002ee00 	.word	0x0002ee00
 8009c38:	2000003c 	.word	0x2000003c
 8009c3c:	40015c24 	.word	0x40015c24

08009c40 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8009c44:	4b15      	ldr	r3, [pc, #84]	; (8009c9c <MX_SPDIFRX_Init+0x5c>)
 8009c46:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8009c4a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8009c4c:	4b13      	ldr	r3, [pc, #76]	; (8009c9c <MX_SPDIFRX_Init+0x5c>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8009c52:	4b12      	ldr	r3, [pc, #72]	; (8009c9c <MX_SPDIFRX_Init+0x5c>)
 8009c54:	2200      	movs	r2, #0
 8009c56:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8009c58:	4b10      	ldr	r3, [pc, #64]	; (8009c9c <MX_SPDIFRX_Init+0x5c>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8009c5e:	4b0f      	ldr	r3, [pc, #60]	; (8009c9c <MX_SPDIFRX_Init+0x5c>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8009c64:	4b0d      	ldr	r3, [pc, #52]	; (8009c9c <MX_SPDIFRX_Init+0x5c>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8009c6a:	4b0c      	ldr	r3, [pc, #48]	; (8009c9c <MX_SPDIFRX_Init+0x5c>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8009c70:	4b0a      	ldr	r3, [pc, #40]	; (8009c9c <MX_SPDIFRX_Init+0x5c>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8009c76:	4b09      	ldr	r3, [pc, #36]	; (8009c9c <MX_SPDIFRX_Init+0x5c>)
 8009c78:	2200      	movs	r2, #0
 8009c7a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8009c7c:	4b07      	ldr	r3, [pc, #28]	; (8009c9c <MX_SPDIFRX_Init+0x5c>)
 8009c7e:	2200      	movs	r2, #0
 8009c80:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8009c82:	4b06      	ldr	r3, [pc, #24]	; (8009c9c <MX_SPDIFRX_Init+0x5c>)
 8009c84:	2200      	movs	r2, #0
 8009c86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8009c88:	4804      	ldr	r0, [pc, #16]	; (8009c9c <MX_SPDIFRX_Init+0x5c>)
 8009c8a:	f7fb fe45 	bl	8005918 <HAL_SPDIFRX_Init>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d001      	beq.n	8009c98 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8009c94:	f000 fd86 	bl	800a7a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8009c98:	bf00      	nop
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	200001b4 	.word	0x200001b4

08009ca0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8009ca4:	4b1b      	ldr	r3, [pc, #108]	; (8009d14 <MX_SPI2_Init+0x74>)
 8009ca6:	4a1c      	ldr	r2, [pc, #112]	; (8009d18 <MX_SPI2_Init+0x78>)
 8009ca8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8009caa:	4b1a      	ldr	r3, [pc, #104]	; (8009d14 <MX_SPI2_Init+0x74>)
 8009cac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009cb0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8009cb2:	4b18      	ldr	r3, [pc, #96]	; (8009d14 <MX_SPI2_Init+0x74>)
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8009cb8:	4b16      	ldr	r3, [pc, #88]	; (8009d14 <MX_SPI2_Init+0x74>)
 8009cba:	f44f 7240 	mov.w	r2, #768	; 0x300
 8009cbe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009cc0:	4b14      	ldr	r3, [pc, #80]	; (8009d14 <MX_SPI2_Init+0x74>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009cc6:	4b13      	ldr	r3, [pc, #76]	; (8009d14 <MX_SPI2_Init+0x74>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8009ccc:	4b11      	ldr	r3, [pc, #68]	; (8009d14 <MX_SPI2_Init+0x74>)
 8009cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cd2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009cd4:	4b0f      	ldr	r3, [pc, #60]	; (8009d14 <MX_SPI2_Init+0x74>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009cda:	4b0e      	ldr	r3, [pc, #56]	; (8009d14 <MX_SPI2_Init+0x74>)
 8009cdc:	2200      	movs	r2, #0
 8009cde:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8009ce0:	4b0c      	ldr	r3, [pc, #48]	; (8009d14 <MX_SPI2_Init+0x74>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ce6:	4b0b      	ldr	r3, [pc, #44]	; (8009d14 <MX_SPI2_Init+0x74>)
 8009ce8:	2200      	movs	r2, #0
 8009cea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8009cec:	4b09      	ldr	r3, [pc, #36]	; (8009d14 <MX_SPI2_Init+0x74>)
 8009cee:	2207      	movs	r2, #7
 8009cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009cf2:	4b08      	ldr	r3, [pc, #32]	; (8009d14 <MX_SPI2_Init+0x74>)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009cf8:	4b06      	ldr	r3, [pc, #24]	; (8009d14 <MX_SPI2_Init+0x74>)
 8009cfa:	2208      	movs	r2, #8
 8009cfc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8009cfe:	4805      	ldr	r0, [pc, #20]	; (8009d14 <MX_SPI2_Init+0x74>)
 8009d00:	f7fb fe66 	bl	80059d0 <HAL_SPI_Init>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8009d0a:	f000 fd4b 	bl	800a7a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8009d0e:	bf00      	nop
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	20000110 	.word	0x20000110
 8009d18:	40003800 	.word	0x40003800

08009d1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b09a      	sub	sp, #104	; 0x68
 8009d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009d22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009d26:	2200      	movs	r2, #0
 8009d28:	601a      	str	r2, [r3, #0]
 8009d2a:	605a      	str	r2, [r3, #4]
 8009d2c:	609a      	str	r2, [r3, #8]
 8009d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009d30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009d34:	2200      	movs	r2, #0
 8009d36:	601a      	str	r2, [r3, #0]
 8009d38:	605a      	str	r2, [r3, #4]
 8009d3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009d3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d40:	2200      	movs	r2, #0
 8009d42:	601a      	str	r2, [r3, #0]
 8009d44:	605a      	str	r2, [r3, #4]
 8009d46:	609a      	str	r2, [r3, #8]
 8009d48:	60da      	str	r2, [r3, #12]
 8009d4a:	611a      	str	r2, [r3, #16]
 8009d4c:	615a      	str	r2, [r3, #20]
 8009d4e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009d50:	1d3b      	adds	r3, r7, #4
 8009d52:	222c      	movs	r2, #44	; 0x2c
 8009d54:	2100      	movs	r1, #0
 8009d56:	4618      	mov	r0, r3
 8009d58:	f001 fe98 	bl	800ba8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009d5c:	4b43      	ldr	r3, [pc, #268]	; (8009e6c <MX_TIM1_Init+0x150>)
 8009d5e:	4a44      	ldr	r2, [pc, #272]	; (8009e70 <MX_TIM1_Init+0x154>)
 8009d60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8009d62:	4b42      	ldr	r3, [pc, #264]	; (8009e6c <MX_TIM1_Init+0x150>)
 8009d64:	2200      	movs	r2, #0
 8009d66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009d68:	4b40      	ldr	r3, [pc, #256]	; (8009e6c <MX_TIM1_Init+0x150>)
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8009d6e:	4b3f      	ldr	r3, [pc, #252]	; (8009e6c <MX_TIM1_Init+0x150>)
 8009d70:	2200      	movs	r2, #0
 8009d72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009d74:	4b3d      	ldr	r3, [pc, #244]	; (8009e6c <MX_TIM1_Init+0x150>)
 8009d76:	2200      	movs	r2, #0
 8009d78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009d7a:	4b3c      	ldr	r3, [pc, #240]	; (8009e6c <MX_TIM1_Init+0x150>)
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009d80:	4b3a      	ldr	r3, [pc, #232]	; (8009e6c <MX_TIM1_Init+0x150>)
 8009d82:	2200      	movs	r2, #0
 8009d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009d86:	4839      	ldr	r0, [pc, #228]	; (8009e6c <MX_TIM1_Init+0x150>)
 8009d88:	f7fb feb4 	bl	8005af4 <HAL_TIM_Base_Init>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d001      	beq.n	8009d96 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8009d92:	f000 fd07 	bl	800a7a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d9a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009d9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009da0:	4619      	mov	r1, r3
 8009da2:	4832      	ldr	r0, [pc, #200]	; (8009e6c <MX_TIM1_Init+0x150>)
 8009da4:	f7fc f95e 	bl	8006064 <HAL_TIM_ConfigClockSource>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8009dae:	f000 fcf9 	bl	800a7a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009db2:	482e      	ldr	r0, [pc, #184]	; (8009e6c <MX_TIM1_Init+0x150>)
 8009db4:	f7fb fef4 	bl	8005ba0 <HAL_TIM_PWM_Init>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d001      	beq.n	8009dc2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8009dbe:	f000 fcf1 	bl	800a7a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009dce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	4825      	ldr	r0, [pc, #148]	; (8009e6c <MX_TIM1_Init+0x150>)
 8009dd6:	f7fc fdbf 	bl	8006958 <HAL_TIMEx_MasterConfigSynchronization>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d001      	beq.n	8009de4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8009de0:	f000 fce0 	bl	800a7a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009de4:	2360      	movs	r3, #96	; 0x60
 8009de6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8009de8:	2300      	movs	r3, #0
 8009dea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009dec:	2300      	movs	r3, #0
 8009dee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009df0:	2300      	movs	r3, #0
 8009df2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009df4:	2300      	movs	r3, #0
 8009df6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009e00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e04:	2200      	movs	r2, #0
 8009e06:	4619      	mov	r1, r3
 8009e08:	4818      	ldr	r0, [pc, #96]	; (8009e6c <MX_TIM1_Init+0x150>)
 8009e0a:	f7fc f813 	bl	8005e34 <HAL_TIM_PWM_ConfigChannel>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d001      	beq.n	8009e18 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8009e14:	f000 fcc6 	bl	800a7a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009e20:	2300      	movs	r3, #0
 8009e22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009e2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009e32:	2300      	movs	r3, #0
 8009e34:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009e36:	2300      	movs	r3, #0
 8009e38:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009e3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e3e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009e40:	2300      	movs	r3, #0
 8009e42:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009e44:	2300      	movs	r3, #0
 8009e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009e48:	1d3b      	adds	r3, r7, #4
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	4807      	ldr	r0, [pc, #28]	; (8009e6c <MX_TIM1_Init+0x150>)
 8009e4e:	f7fc fddf 	bl	8006a10 <HAL_TIMEx_ConfigBreakDeadTime>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d001      	beq.n	8009e5c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8009e58:	f000 fca4 	bl	800a7a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8009e5c:	4803      	ldr	r0, [pc, #12]	; (8009e6c <MX_TIM1_Init+0x150>)
 8009e5e:	f001 f94d 	bl	800b0fc <HAL_TIM_MspPostInit>

}
 8009e62:	bf00      	nop
 8009e64:	3768      	adds	r7, #104	; 0x68
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	200005d8 	.word	0x200005d8
 8009e70:	40010000 	.word	0x40010000

08009e74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b08e      	sub	sp, #56	; 0x38
 8009e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009e7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009e7e:	2200      	movs	r2, #0
 8009e80:	601a      	str	r2, [r3, #0]
 8009e82:	605a      	str	r2, [r3, #4]
 8009e84:	609a      	str	r2, [r3, #8]
 8009e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009e88:	f107 031c 	add.w	r3, r7, #28
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	601a      	str	r2, [r3, #0]
 8009e90:	605a      	str	r2, [r3, #4]
 8009e92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009e94:	463b      	mov	r3, r7
 8009e96:	2200      	movs	r2, #0
 8009e98:	601a      	str	r2, [r3, #0]
 8009e9a:	605a      	str	r2, [r3, #4]
 8009e9c:	609a      	str	r2, [r3, #8]
 8009e9e:	60da      	str	r2, [r3, #12]
 8009ea0:	611a      	str	r2, [r3, #16]
 8009ea2:	615a      	str	r2, [r3, #20]
 8009ea4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009ea6:	4b2d      	ldr	r3, [pc, #180]	; (8009f5c <MX_TIM2_Init+0xe8>)
 8009ea8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009eac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009eae:	4b2b      	ldr	r3, [pc, #172]	; (8009f5c <MX_TIM2_Init+0xe8>)
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009eb4:	4b29      	ldr	r3, [pc, #164]	; (8009f5c <MX_TIM2_Init+0xe8>)
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8009eba:	4b28      	ldr	r3, [pc, #160]	; (8009f5c <MX_TIM2_Init+0xe8>)
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009ec0:	4b26      	ldr	r3, [pc, #152]	; (8009f5c <MX_TIM2_Init+0xe8>)
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009ec6:	4b25      	ldr	r3, [pc, #148]	; (8009f5c <MX_TIM2_Init+0xe8>)
 8009ec8:	2200      	movs	r2, #0
 8009eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009ecc:	4823      	ldr	r0, [pc, #140]	; (8009f5c <MX_TIM2_Init+0xe8>)
 8009ece:	f7fb fe11 	bl	8005af4 <HAL_TIM_Base_Init>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d001      	beq.n	8009edc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8009ed8:	f000 fc64 	bl	800a7a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009ee2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	481c      	ldr	r0, [pc, #112]	; (8009f5c <MX_TIM2_Init+0xe8>)
 8009eea:	f7fc f8bb 	bl	8006064 <HAL_TIM_ConfigClockSource>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d001      	beq.n	8009ef8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8009ef4:	f000 fc56 	bl	800a7a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009ef8:	4818      	ldr	r0, [pc, #96]	; (8009f5c <MX_TIM2_Init+0xe8>)
 8009efa:	f7fb fe51 	bl	8005ba0 <HAL_TIM_PWM_Init>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d001      	beq.n	8009f08 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8009f04:	f000 fc4e 	bl	800a7a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009f10:	f107 031c 	add.w	r3, r7, #28
 8009f14:	4619      	mov	r1, r3
 8009f16:	4811      	ldr	r0, [pc, #68]	; (8009f5c <MX_TIM2_Init+0xe8>)
 8009f18:	f7fc fd1e 	bl	8006958 <HAL_TIMEx_MasterConfigSynchronization>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8009f22:	f000 fc3f 	bl	800a7a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009f26:	2360      	movs	r3, #96	; 0x60
 8009f28:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009f32:	2300      	movs	r3, #0
 8009f34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009f36:	463b      	mov	r3, r7
 8009f38:	2200      	movs	r2, #0
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	4807      	ldr	r0, [pc, #28]	; (8009f5c <MX_TIM2_Init+0xe8>)
 8009f3e:	f7fb ff79 	bl	8005e34 <HAL_TIM_PWM_ConfigChannel>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8009f48:	f000 fc2c 	bl	800a7a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8009f4c:	4803      	ldr	r0, [pc, #12]	; (8009f5c <MX_TIM2_Init+0xe8>)
 8009f4e:	f001 f8d5 	bl	800b0fc <HAL_TIM_MspPostInit>

}
 8009f52:	bf00      	nop
 8009f54:	3738      	adds	r7, #56	; 0x38
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	20000668 	.word	0x20000668

08009f60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b088      	sub	sp, #32
 8009f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009f66:	f107 0310 	add.w	r3, r7, #16
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	601a      	str	r2, [r3, #0]
 8009f6e:	605a      	str	r2, [r3, #4]
 8009f70:	609a      	str	r2, [r3, #8]
 8009f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009f74:	1d3b      	adds	r3, r7, #4
 8009f76:	2200      	movs	r2, #0
 8009f78:	601a      	str	r2, [r3, #0]
 8009f7a:	605a      	str	r2, [r3, #4]
 8009f7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009f7e:	4b1d      	ldr	r3, [pc, #116]	; (8009ff4 <MX_TIM3_Init+0x94>)
 8009f80:	4a1d      	ldr	r2, [pc, #116]	; (8009ff8 <MX_TIM3_Init+0x98>)
 8009f82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8009f84:	4b1b      	ldr	r3, [pc, #108]	; (8009ff4 <MX_TIM3_Init+0x94>)
 8009f86:	2200      	movs	r2, #0
 8009f88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009f8a:	4b1a      	ldr	r3, [pc, #104]	; (8009ff4 <MX_TIM3_Init+0x94>)
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8009f90:	4b18      	ldr	r3, [pc, #96]	; (8009ff4 <MX_TIM3_Init+0x94>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009f96:	4b17      	ldr	r3, [pc, #92]	; (8009ff4 <MX_TIM3_Init+0x94>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009f9c:	4b15      	ldr	r3, [pc, #84]	; (8009ff4 <MX_TIM3_Init+0x94>)
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009fa2:	4814      	ldr	r0, [pc, #80]	; (8009ff4 <MX_TIM3_Init+0x94>)
 8009fa4:	f7fb fda6 	bl	8005af4 <HAL_TIM_Base_Init>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d001      	beq.n	8009fb2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8009fae:	f000 fbf9 	bl	800a7a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8009fb8:	f107 0310 	add.w	r3, r7, #16
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	480d      	ldr	r0, [pc, #52]	; (8009ff4 <MX_TIM3_Init+0x94>)
 8009fc0:	f7fc f850 	bl	8006064 <HAL_TIM_ConfigClockSource>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d001      	beq.n	8009fce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8009fca:	f000 fbeb 	bl	800a7a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009fd6:	1d3b      	adds	r3, r7, #4
 8009fd8:	4619      	mov	r1, r3
 8009fda:	4806      	ldr	r0, [pc, #24]	; (8009ff4 <MX_TIM3_Init+0x94>)
 8009fdc:	f7fc fcbc 	bl	8006958 <HAL_TIMEx_MasterConfigSynchronization>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d001      	beq.n	8009fea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8009fe6:	f000 fbdd 	bl	800a7a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8009fea:	bf00      	nop
 8009fec:	3720      	adds	r7, #32
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	200003b8 	.word	0x200003b8
 8009ff8:	40000400 	.word	0x40000400

08009ffc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b08e      	sub	sp, #56	; 0x38
 800a000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a002:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a006:	2200      	movs	r2, #0
 800a008:	601a      	str	r2, [r3, #0]
 800a00a:	605a      	str	r2, [r3, #4]
 800a00c:	609a      	str	r2, [r3, #8]
 800a00e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a010:	f107 031c 	add.w	r3, r7, #28
 800a014:	2200      	movs	r2, #0
 800a016:	601a      	str	r2, [r3, #0]
 800a018:	605a      	str	r2, [r3, #4]
 800a01a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a01c:	463b      	mov	r3, r7
 800a01e:	2200      	movs	r2, #0
 800a020:	601a      	str	r2, [r3, #0]
 800a022:	605a      	str	r2, [r3, #4]
 800a024:	609a      	str	r2, [r3, #8]
 800a026:	60da      	str	r2, [r3, #12]
 800a028:	611a      	str	r2, [r3, #16]
 800a02a:	615a      	str	r2, [r3, #20]
 800a02c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800a02e:	4b2c      	ldr	r3, [pc, #176]	; (800a0e0 <MX_TIM5_Init+0xe4>)
 800a030:	4a2c      	ldr	r2, [pc, #176]	; (800a0e4 <MX_TIM5_Init+0xe8>)
 800a032:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800a034:	4b2a      	ldr	r3, [pc, #168]	; (800a0e0 <MX_TIM5_Init+0xe4>)
 800a036:	2200      	movs	r2, #0
 800a038:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a03a:	4b29      	ldr	r3, [pc, #164]	; (800a0e0 <MX_TIM5_Init+0xe4>)
 800a03c:	2200      	movs	r2, #0
 800a03e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 800a040:	4b27      	ldr	r3, [pc, #156]	; (800a0e0 <MX_TIM5_Init+0xe4>)
 800a042:	2200      	movs	r2, #0
 800a044:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a046:	4b26      	ldr	r3, [pc, #152]	; (800a0e0 <MX_TIM5_Init+0xe4>)
 800a048:	2200      	movs	r2, #0
 800a04a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a04c:	4b24      	ldr	r3, [pc, #144]	; (800a0e0 <MX_TIM5_Init+0xe4>)
 800a04e:	2200      	movs	r2, #0
 800a050:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800a052:	4823      	ldr	r0, [pc, #140]	; (800a0e0 <MX_TIM5_Init+0xe4>)
 800a054:	f7fb fd4e 	bl	8005af4 <HAL_TIM_Base_Init>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800a05e:	f000 fba1 	bl	800a7a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a066:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800a068:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a06c:	4619      	mov	r1, r3
 800a06e:	481c      	ldr	r0, [pc, #112]	; (800a0e0 <MX_TIM5_Init+0xe4>)
 800a070:	f7fb fff8 	bl	8006064 <HAL_TIM_ConfigClockSource>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d001      	beq.n	800a07e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800a07a:	f000 fb93 	bl	800a7a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800a07e:	4818      	ldr	r0, [pc, #96]	; (800a0e0 <MX_TIM5_Init+0xe4>)
 800a080:	f7fb fd8e 	bl	8005ba0 <HAL_TIM_PWM_Init>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800a08a:	f000 fb8b 	bl	800a7a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a08e:	2300      	movs	r3, #0
 800a090:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a092:	2300      	movs	r3, #0
 800a094:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800a096:	f107 031c 	add.w	r3, r7, #28
 800a09a:	4619      	mov	r1, r3
 800a09c:	4810      	ldr	r0, [pc, #64]	; (800a0e0 <MX_TIM5_Init+0xe4>)
 800a09e:	f7fc fc5b 	bl	8006958 <HAL_TIMEx_MasterConfigSynchronization>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d001      	beq.n	800a0ac <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800a0a8:	f000 fb7c 	bl	800a7a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a0ac:	2360      	movs	r3, #96	; 0x60
 800a0ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a0bc:	463b      	mov	r3, r7
 800a0be:	220c      	movs	r2, #12
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	4807      	ldr	r0, [pc, #28]	; (800a0e0 <MX_TIM5_Init+0xe4>)
 800a0c4:	f7fb feb6 	bl	8005e34 <HAL_TIM_PWM_ConfigChannel>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d001      	beq.n	800a0d2 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800a0ce:	f000 fb69 	bl	800a7a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800a0d2:	4803      	ldr	r0, [pc, #12]	; (800a0e0 <MX_TIM5_Init+0xe4>)
 800a0d4:	f001 f812 	bl	800b0fc <HAL_TIM_MspPostInit>

}
 800a0d8:	bf00      	nop
 800a0da:	3738      	adds	r7, #56	; 0x38
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	20000378 	.word	0x20000378
 800a0e4:	40000c00 	.word	0x40000c00

0800a0e8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b088      	sub	sp, #32
 800a0ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a0ee:	f107 0310 	add.w	r3, r7, #16
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	601a      	str	r2, [r3, #0]
 800a0f6:	605a      	str	r2, [r3, #4]
 800a0f8:	609a      	str	r2, [r3, #8]
 800a0fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a0fc:	1d3b      	adds	r3, r7, #4
 800a0fe:	2200      	movs	r2, #0
 800a100:	601a      	str	r2, [r3, #0]
 800a102:	605a      	str	r2, [r3, #4]
 800a104:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a106:	4b1f      	ldr	r3, [pc, #124]	; (800a184 <MX_TIM8_Init+0x9c>)
 800a108:	4a1f      	ldr	r2, [pc, #124]	; (800a188 <MX_TIM8_Init+0xa0>)
 800a10a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800a10c:	4b1d      	ldr	r3, [pc, #116]	; (800a184 <MX_TIM8_Init+0x9c>)
 800a10e:	2200      	movs	r2, #0
 800a110:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a112:	4b1c      	ldr	r3, [pc, #112]	; (800a184 <MX_TIM8_Init+0x9c>)
 800a114:	2200      	movs	r2, #0
 800a116:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 800a118:	4b1a      	ldr	r3, [pc, #104]	; (800a184 <MX_TIM8_Init+0x9c>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a11e:	4b19      	ldr	r3, [pc, #100]	; (800a184 <MX_TIM8_Init+0x9c>)
 800a120:	2200      	movs	r2, #0
 800a122:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a124:	4b17      	ldr	r3, [pc, #92]	; (800a184 <MX_TIM8_Init+0x9c>)
 800a126:	2200      	movs	r2, #0
 800a128:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a12a:	4b16      	ldr	r3, [pc, #88]	; (800a184 <MX_TIM8_Init+0x9c>)
 800a12c:	2200      	movs	r2, #0
 800a12e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800a130:	4814      	ldr	r0, [pc, #80]	; (800a184 <MX_TIM8_Init+0x9c>)
 800a132:	f7fb fcdf 	bl	8005af4 <HAL_TIM_Base_Init>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d001      	beq.n	800a140 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800a13c:	f000 fb32 	bl	800a7a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a144:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800a146:	f107 0310 	add.w	r3, r7, #16
 800a14a:	4619      	mov	r1, r3
 800a14c:	480d      	ldr	r0, [pc, #52]	; (800a184 <MX_TIM8_Init+0x9c>)
 800a14e:	f7fb ff89 	bl	8006064 <HAL_TIM_ConfigClockSource>
 800a152:	4603      	mov	r3, r0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d001      	beq.n	800a15c <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 800a158:	f000 fb24 	bl	800a7a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a15c:	2300      	movs	r3, #0
 800a15e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a160:	2300      	movs	r3, #0
 800a162:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a164:	2300      	movs	r3, #0
 800a166:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a168:	1d3b      	adds	r3, r7, #4
 800a16a:	4619      	mov	r1, r3
 800a16c:	4805      	ldr	r0, [pc, #20]	; (800a184 <MX_TIM8_Init+0x9c>)
 800a16e:	f7fc fbf3 	bl	8006958 <HAL_TIMEx_MasterConfigSynchronization>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d001      	beq.n	800a17c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800a178:	f000 fb14 	bl	800a7a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800a17c:	bf00      	nop
 800a17e:	3720      	adds	r7, #32
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	20000174 	.word	0x20000174
 800a188:	40010400 	.word	0x40010400

0800a18c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b088      	sub	sp, #32
 800a190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800a192:	1d3b      	adds	r3, r7, #4
 800a194:	2200      	movs	r2, #0
 800a196:	601a      	str	r2, [r3, #0]
 800a198:	605a      	str	r2, [r3, #4]
 800a19a:	609a      	str	r2, [r3, #8]
 800a19c:	60da      	str	r2, [r3, #12]
 800a19e:	611a      	str	r2, [r3, #16]
 800a1a0:	615a      	str	r2, [r3, #20]
 800a1a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800a1a4:	4b19      	ldr	r3, [pc, #100]	; (800a20c <MX_TIM12_Init+0x80>)
 800a1a6:	4a1a      	ldr	r2, [pc, #104]	; (800a210 <MX_TIM12_Init+0x84>)
 800a1a8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800a1aa:	4b18      	ldr	r3, [pc, #96]	; (800a20c <MX_TIM12_Init+0x80>)
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a1b0:	4b16      	ldr	r3, [pc, #88]	; (800a20c <MX_TIM12_Init+0x80>)
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 800a1b6:	4b15      	ldr	r3, [pc, #84]	; (800a20c <MX_TIM12_Init+0x80>)
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a1bc:	4b13      	ldr	r3, [pc, #76]	; (800a20c <MX_TIM12_Init+0x80>)
 800a1be:	2200      	movs	r2, #0
 800a1c0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a1c2:	4b12      	ldr	r3, [pc, #72]	; (800a20c <MX_TIM12_Init+0x80>)
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800a1c8:	4810      	ldr	r0, [pc, #64]	; (800a20c <MX_TIM12_Init+0x80>)
 800a1ca:	f7fb fce9 	bl	8005ba0 <HAL_TIM_PWM_Init>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d001      	beq.n	800a1d8 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 800a1d4:	f000 fae6 	bl	800a7a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a1d8:	2360      	movs	r3, #96	; 0x60
 800a1da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a1e8:	1d3b      	adds	r3, r7, #4
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	4807      	ldr	r0, [pc, #28]	; (800a20c <MX_TIM12_Init+0x80>)
 800a1f0:	f7fb fe20 	bl	8005e34 <HAL_TIM_PWM_ConfigChannel>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d001      	beq.n	800a1fe <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 800a1fa:	f000 fad3 	bl	800a7a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800a1fe:	4803      	ldr	r0, [pc, #12]	; (800a20c <MX_TIM12_Init+0x80>)
 800a200:	f000 ff7c 	bl	800b0fc <HAL_TIM_MspPostInit>

}
 800a204:	bf00      	nop
 800a206:	3720      	adds	r7, #32
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	200006a8 	.word	0x200006a8
 800a210:	40001800 	.word	0x40001800

0800a214 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a218:	4b14      	ldr	r3, [pc, #80]	; (800a26c <MX_USART1_UART_Init+0x58>)
 800a21a:	4a15      	ldr	r2, [pc, #84]	; (800a270 <MX_USART1_UART_Init+0x5c>)
 800a21c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a21e:	4b13      	ldr	r3, [pc, #76]	; (800a26c <MX_USART1_UART_Init+0x58>)
 800a220:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a224:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a226:	4b11      	ldr	r3, [pc, #68]	; (800a26c <MX_USART1_UART_Init+0x58>)
 800a228:	2200      	movs	r2, #0
 800a22a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a22c:	4b0f      	ldr	r3, [pc, #60]	; (800a26c <MX_USART1_UART_Init+0x58>)
 800a22e:	2200      	movs	r2, #0
 800a230:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a232:	4b0e      	ldr	r3, [pc, #56]	; (800a26c <MX_USART1_UART_Init+0x58>)
 800a234:	2200      	movs	r2, #0
 800a236:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a238:	4b0c      	ldr	r3, [pc, #48]	; (800a26c <MX_USART1_UART_Init+0x58>)
 800a23a:	220c      	movs	r2, #12
 800a23c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a23e:	4b0b      	ldr	r3, [pc, #44]	; (800a26c <MX_USART1_UART_Init+0x58>)
 800a240:	2200      	movs	r2, #0
 800a242:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a244:	4b09      	ldr	r3, [pc, #36]	; (800a26c <MX_USART1_UART_Init+0x58>)
 800a246:	2200      	movs	r2, #0
 800a248:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a24a:	4b08      	ldr	r3, [pc, #32]	; (800a26c <MX_USART1_UART_Init+0x58>)
 800a24c:	2200      	movs	r2, #0
 800a24e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a250:	4b06      	ldr	r3, [pc, #24]	; (800a26c <MX_USART1_UART_Init+0x58>)
 800a252:	2200      	movs	r2, #0
 800a254:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a256:	4805      	ldr	r0, [pc, #20]	; (800a26c <MX_USART1_UART_Init+0x58>)
 800a258:	f7fc fc76 	bl	8006b48 <HAL_UART_Init>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d001      	beq.n	800a266 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800a262:	f000 fa9f 	bl	800a7a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a266:	bf00      	nop
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	20000538 	.word	0x20000538
 800a270:	40011000 	.word	0x40011000

0800a274 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b088      	sub	sp, #32
 800a278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800a27a:	1d3b      	adds	r3, r7, #4
 800a27c:	2200      	movs	r2, #0
 800a27e:	601a      	str	r2, [r3, #0]
 800a280:	605a      	str	r2, [r3, #4]
 800a282:	609a      	str	r2, [r3, #8]
 800a284:	60da      	str	r2, [r3, #12]
 800a286:	611a      	str	r2, [r3, #16]
 800a288:	615a      	str	r2, [r3, #20]
 800a28a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800a28c:	4b1f      	ldr	r3, [pc, #124]	; (800a30c <MX_FMC_Init+0x98>)
 800a28e:	4a20      	ldr	r2, [pc, #128]	; (800a310 <MX_FMC_Init+0x9c>)
 800a290:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800a292:	4b1e      	ldr	r3, [pc, #120]	; (800a30c <MX_FMC_Init+0x98>)
 800a294:	2200      	movs	r2, #0
 800a296:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800a298:	4b1c      	ldr	r3, [pc, #112]	; (800a30c <MX_FMC_Init+0x98>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800a29e:	4b1b      	ldr	r3, [pc, #108]	; (800a30c <MX_FMC_Init+0x98>)
 800a2a0:	2204      	movs	r2, #4
 800a2a2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800a2a4:	4b19      	ldr	r3, [pc, #100]	; (800a30c <MX_FMC_Init+0x98>)
 800a2a6:	2210      	movs	r2, #16
 800a2a8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800a2aa:	4b18      	ldr	r3, [pc, #96]	; (800a30c <MX_FMC_Init+0x98>)
 800a2ac:	2240      	movs	r2, #64	; 0x40
 800a2ae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800a2b0:	4b16      	ldr	r3, [pc, #88]	; (800a30c <MX_FMC_Init+0x98>)
 800a2b2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800a2b6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800a2b8:	4b14      	ldr	r3, [pc, #80]	; (800a30c <MX_FMC_Init+0x98>)
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800a2be:	4b13      	ldr	r3, [pc, #76]	; (800a30c <MX_FMC_Init+0x98>)
 800a2c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2c4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800a2c6:	4b11      	ldr	r3, [pc, #68]	; (800a30c <MX_FMC_Init+0x98>)
 800a2c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a2cc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800a2ce:	4b0f      	ldr	r3, [pc, #60]	; (800a30c <MX_FMC_Init+0x98>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800a2d4:	2302      	movs	r3, #2
 800a2d6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800a2d8:	2307      	movs	r3, #7
 800a2da:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800a2dc:	2304      	movs	r3, #4
 800a2de:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800a2e0:	2307      	movs	r3, #7
 800a2e2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800a2e4:	2303      	movs	r3, #3
 800a2e6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800a2e8:	2302      	movs	r3, #2
 800a2ea:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800a2ec:	2302      	movs	r3, #2
 800a2ee:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800a2f0:	1d3b      	adds	r3, r7, #4
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	4805      	ldr	r0, [pc, #20]	; (800a30c <MX_FMC_Init+0x98>)
 800a2f6:	f7fb fadb 	bl	80058b0 <HAL_SDRAM_Init>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d001      	beq.n	800a304 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800a300:	f000 fa50 	bl	800a7a4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800a304:	bf00      	nop
 800a306:	3720      	adds	r7, #32
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	200006e8 	.word	0x200006e8
 800a310:	a0000140 	.word	0xa0000140

0800a314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b090      	sub	sp, #64	; 0x40
 800a318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a31a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a31e:	2200      	movs	r2, #0
 800a320:	601a      	str	r2, [r3, #0]
 800a322:	605a      	str	r2, [r3, #4]
 800a324:	609a      	str	r2, [r3, #8]
 800a326:	60da      	str	r2, [r3, #12]
 800a328:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a32a:	4bb0      	ldr	r3, [pc, #704]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a32c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a32e:	4aaf      	ldr	r2, [pc, #700]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a330:	f043 0310 	orr.w	r3, r3, #16
 800a334:	6313      	str	r3, [r2, #48]	; 0x30
 800a336:	4bad      	ldr	r3, [pc, #692]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a33a:	f003 0310 	and.w	r3, r3, #16
 800a33e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a340:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a342:	4baa      	ldr	r3, [pc, #680]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a346:	4aa9      	ldr	r2, [pc, #676]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a34c:	6313      	str	r3, [r2, #48]	; 0x30
 800a34e:	4ba7      	ldr	r3, [pc, #668]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a356:	627b      	str	r3, [r7, #36]	; 0x24
 800a358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a35a:	4ba4      	ldr	r3, [pc, #656]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35e:	4aa3      	ldr	r2, [pc, #652]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a360:	f043 0302 	orr.w	r3, r3, #2
 800a364:	6313      	str	r3, [r2, #48]	; 0x30
 800a366:	4ba1      	ldr	r3, [pc, #644]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a36a:	f003 0302 	and.w	r3, r3, #2
 800a36e:	623b      	str	r3, [r7, #32]
 800a370:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a372:	4b9e      	ldr	r3, [pc, #632]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a376:	4a9d      	ldr	r2, [pc, #628]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a378:	f043 0308 	orr.w	r3, r3, #8
 800a37c:	6313      	str	r3, [r2, #48]	; 0x30
 800a37e:	4b9b      	ldr	r3, [pc, #620]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a382:	f003 0308 	and.w	r3, r3, #8
 800a386:	61fb      	str	r3, [r7, #28]
 800a388:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a38a:	4b98      	ldr	r3, [pc, #608]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a38e:	4a97      	ldr	r2, [pc, #604]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a390:	f043 0304 	orr.w	r3, r3, #4
 800a394:	6313      	str	r3, [r2, #48]	; 0x30
 800a396:	4b95      	ldr	r3, [pc, #596]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a39a:	f003 0304 	and.w	r3, r3, #4
 800a39e:	61bb      	str	r3, [r7, #24]
 800a3a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3a2:	4b92      	ldr	r3, [pc, #584]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a3a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3a6:	4a91      	ldr	r2, [pc, #580]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a3a8:	f043 0301 	orr.w	r3, r3, #1
 800a3ac:	6313      	str	r3, [r2, #48]	; 0x30
 800a3ae:	4b8f      	ldr	r3, [pc, #572]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b2:	f003 0301 	and.w	r3, r3, #1
 800a3b6:	617b      	str	r3, [r7, #20]
 800a3b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a3ba:	4b8c      	ldr	r3, [pc, #560]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3be:	4a8b      	ldr	r2, [pc, #556]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a3c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3c4:	6313      	str	r3, [r2, #48]	; 0x30
 800a3c6:	4b89      	ldr	r3, [pc, #548]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3ce:	613b      	str	r3, [r7, #16]
 800a3d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800a3d2:	4b86      	ldr	r3, [pc, #536]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d6:	4a85      	ldr	r2, [pc, #532]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a3d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3dc:	6313      	str	r3, [r2, #48]	; 0x30
 800a3de:	4b83      	ldr	r3, [pc, #524]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3e6:	60fb      	str	r3, [r7, #12]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800a3ea:	4b80      	ldr	r3, [pc, #512]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ee:	4a7f      	ldr	r2, [pc, #508]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a3f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a3f4:	6313      	str	r3, [r2, #48]	; 0x30
 800a3f6:	4b7d      	ldr	r3, [pc, #500]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3fe:	60bb      	str	r3, [r7, #8]
 800a400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a402:	4b7a      	ldr	r3, [pc, #488]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a406:	4a79      	ldr	r2, [pc, #484]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a408:	f043 0320 	orr.w	r3, r3, #32
 800a40c:	6313      	str	r3, [r2, #48]	; 0x30
 800a40e:	4b77      	ldr	r3, [pc, #476]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a412:	f003 0320 	and.w	r3, r3, #32
 800a416:	607b      	str	r3, [r7, #4]
 800a418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a41a:	4b74      	ldr	r3, [pc, #464]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a41e:	4a73      	ldr	r2, [pc, #460]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a424:	6313      	str	r3, [r2, #48]	; 0x30
 800a426:	4b71      	ldr	r3, [pc, #452]	; (800a5ec <MX_GPIO_Init+0x2d8>)
 800a428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a42a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a42e:	603b      	str	r3, [r7, #0]
 800a430:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, GPIO_PIN_SET);
 800a432:	2201      	movs	r2, #1
 800a434:	2110      	movs	r1, #16
 800a436:	486e      	ldr	r0, [pc, #440]	; (800a5f0 <MX_GPIO_Init+0x2dc>)
 800a438:	f7f7 f8fc 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800a43c:	2201      	movs	r2, #1
 800a43e:	2120      	movs	r1, #32
 800a440:	486c      	ldr	r0, [pc, #432]	; (800a5f4 <MX_GPIO_Init+0x2e0>)
 800a442:	f7f7 f8f7 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800a446:	2200      	movs	r2, #0
 800a448:	210c      	movs	r1, #12
 800a44a:	486b      	ldr	r0, [pc, #428]	; (800a5f8 <MX_GPIO_Init+0x2e4>)
 800a44c:	f7f7 f8f2 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800a450:	2201      	movs	r2, #1
 800a452:	2108      	movs	r1, #8
 800a454:	4869      	ldr	r0, [pc, #420]	; (800a5fc <MX_GPIO_Init+0x2e8>)
 800a456:	f7f7 f8ed 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800a45a:	2201      	movs	r2, #1
 800a45c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a460:	4865      	ldr	r0, [pc, #404]	; (800a5f8 <MX_GPIO_Init+0x2e4>)
 800a462:	f7f7 f8e7 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800a466:	2200      	movs	r2, #0
 800a468:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a46c:	4864      	ldr	r0, [pc, #400]	; (800a600 <MX_GPIO_Init+0x2ec>)
 800a46e:	f7f7 f8e1 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GAME_STATE_LED_GPIO_Port, GAME_STATE_LED_Pin, GPIO_PIN_RESET);
 800a472:	2200      	movs	r2, #0
 800a474:	2180      	movs	r1, #128	; 0x80
 800a476:	4863      	ldr	r0, [pc, #396]	; (800a604 <MX_GPIO_Init+0x2f0>)
 800a478:	f7f7 f8dc 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_RED_GPIO_Port, RGB_RED_Pin, GPIO_PIN_SET);
 800a47c:	2201      	movs	r2, #1
 800a47e:	2140      	movs	r1, #64	; 0x40
 800a480:	4860      	ldr	r0, [pc, #384]	; (800a604 <MX_GPIO_Init+0x2f0>)
 800a482:	f7f7 f8d7 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800a486:	2200      	movs	r2, #0
 800a488:	2188      	movs	r1, #136	; 0x88
 800a48a:	485f      	ldr	r0, [pc, #380]	; (800a608 <MX_GPIO_Init+0x2f4>)
 800a48c:	f7f7 f8d2 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, GPIO_PIN_SET);
 800a490:	2201      	movs	r2, #1
 800a492:	2140      	movs	r1, #64	; 0x40
 800a494:	485c      	ldr	r0, [pc, #368]	; (800a608 <MX_GPIO_Init+0x2f4>)
 800a496:	f7f7 f8cd 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800a49a:	2308      	movs	r3, #8
 800a49c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a4a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	4857      	ldr	r0, [pc, #348]	; (800a60c <MX_GPIO_Init+0x2f8>)
 800a4ae:	f7f6 ff17 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800a4b2:	f643 4323 	movw	r3, #15395	; 0x3c23
 800a4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a4c4:	230a      	movs	r3, #10
 800a4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a4c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	4848      	ldr	r0, [pc, #288]	; (800a5f0 <MX_GPIO_Init+0x2dc>)
 800a4d0:	f7f6 ff06 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RGB_GREEN_Pin */
  GPIO_InitStruct.Pin = RGB_GREEN_Pin;
 800a4d4:	2310      	movs	r3, #16
 800a4d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(RGB_GREEN_GPIO_Port, &GPIO_InitStruct);
 800a4e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	4841      	ldr	r0, [pc, #260]	; (800a5f0 <MX_GPIO_Init+0x2dc>)
 800a4ec:	f7f6 fef8 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800a4f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a4fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a502:	4619      	mov	r1, r3
 800a504:	4842      	ldr	r0, [pc, #264]	; (800a610 <MX_GPIO_Init+0x2fc>)
 800a506:	f7f6 feeb 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800a50a:	2340      	movs	r3, #64	; 0x40
 800a50c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a50e:	4b41      	ldr	r3, [pc, #260]	; (800a614 <MX_GPIO_Init+0x300>)
 800a510:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a512:	2300      	movs	r3, #0
 800a514:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800a516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a51a:	4619      	mov	r1, r3
 800a51c:	4835      	ldr	r0, [pc, #212]	; (800a5f4 <MX_GPIO_Init+0x2e0>)
 800a51e:	f7f6 fedf 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800a522:	2320      	movs	r3, #32
 800a524:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a526:	2301      	movs	r3, #1
 800a528:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a52a:	2300      	movs	r3, #0
 800a52c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a52e:	2300      	movs	r3, #0
 800a530:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800a532:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a536:	4619      	mov	r1, r3
 800a538:	482e      	ldr	r0, [pc, #184]	; (800a5f4 <MX_GPIO_Init+0x2e0>)
 800a53a:	f7f6 fed1 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800a53e:	f241 030c 	movw	r3, #4108	; 0x100c
 800a542:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a544:	2301      	movs	r3, #1
 800a546:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a548:	2300      	movs	r3, #0
 800a54a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a54c:	2300      	movs	r3, #0
 800a54e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a550:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a554:	4619      	mov	r1, r3
 800a556:	4828      	ldr	r0, [pc, #160]	; (800a5f8 <MX_GPIO_Init+0x2e4>)
 800a558:	f7f6 fec2 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800a55c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a560:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a562:	2300      	movs	r3, #0
 800a564:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a566:	2300      	movs	r3, #0
 800a568:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800a56a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a56e:	4619      	mov	r1, r3
 800a570:	4824      	ldr	r0, [pc, #144]	; (800a604 <MX_GPIO_Init+0x2f0>)
 800a572:	f7f6 feb5 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800a576:	2308      	movs	r3, #8
 800a578:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a57a:	2301      	movs	r3, #1
 800a57c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a57e:	2300      	movs	r3, #0
 800a580:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a582:	2300      	movs	r3, #0
 800a584:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800a586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a58a:	4619      	mov	r1, r3
 800a58c:	481b      	ldr	r0, [pc, #108]	; (800a5fc <MX_GPIO_Init+0x2e8>)
 800a58e:	f7f6 fea7 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800a592:	2310      	movs	r3, #16
 800a594:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a596:	2300      	movs	r3, #0
 800a598:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a59a:	2300      	movs	r3, #0
 800a59c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a59e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	4813      	ldr	r0, [pc, #76]	; (800a5f4 <MX_GPIO_Init+0x2e0>)
 800a5a6:	f7f6 fe9b 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800a5aa:	f248 0304 	movw	r3, #32772	; 0x8004
 800a5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a5b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4810      	ldr	r0, [pc, #64]	; (800a600 <MX_GPIO_Init+0x2ec>)
 800a5c0:	f7f6 fe8e 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800a5c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800a5d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5da:	4619      	mov	r1, r3
 800a5dc:	4808      	ldr	r0, [pc, #32]	; (800a600 <MX_GPIO_Init+0x2ec>)
 800a5de:	f7f6 fe7f 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800a5e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a5e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5e8:	e016      	b.n	800a618 <MX_GPIO_Init+0x304>
 800a5ea:	bf00      	nop
 800a5ec:	40023800 	.word	0x40023800
 800a5f0:	40020400 	.word	0x40020400
 800a5f4:	40020c00 	.word	0x40020c00
 800a5f8:	40022000 	.word	0x40022000
 800a5fc:	40022800 	.word	0x40022800
 800a600:	40021c00 	.word	0x40021c00
 800a604:	40020800 	.word	0x40020800
 800a608:	40021800 	.word	0x40021800
 800a60c:	40021000 	.word	0x40021000
 800a610:	40022400 	.word	0x40022400
 800a614:	10120000 	.word	0x10120000
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a618:	4b47      	ldr	r3, [pc, #284]	; (800a738 <MX_GPIO_Init+0x424>)
 800a61a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a61c:	2300      	movs	r3, #0
 800a61e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800a620:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a624:	4619      	mov	r1, r3
 800a626:	4845      	ldr	r0, [pc, #276]	; (800a73c <MX_GPIO_Init+0x428>)
 800a628:	f7f6 fe5a 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GAME_STATE_LED_Pin RGB_RED_Pin */
  GPIO_InitStruct.Pin = GAME_STATE_LED_Pin|RGB_RED_Pin;
 800a62c:	23c0      	movs	r3, #192	; 0xc0
 800a62e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a630:	2301      	movs	r3, #1
 800a632:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a634:	2300      	movs	r3, #0
 800a636:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a638:	2300      	movs	r3, #0
 800a63a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a63c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a640:	4619      	mov	r1, r3
 800a642:	483f      	ldr	r0, [pc, #252]	; (800a740 <MX_GPIO_Init+0x42c>)
 800a644:	f7f6 fe4c 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800a648:	2310      	movs	r3, #16
 800a64a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a64c:	2302      	movs	r3, #2
 800a64e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a650:	2300      	movs	r3, #0
 800a652:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a654:	2303      	movs	r3, #3
 800a656:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a658:	230a      	movs	r3, #10
 800a65a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800a65c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a660:	4619      	mov	r1, r3
 800a662:	4838      	ldr	r0, [pc, #224]	; (800a744 <MX_GPIO_Init+0x430>)
 800a664:	f7f6 fe3c 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin RGB_BLUE_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|RGB_BLUE_Pin|EXT_RST_Pin;
 800a668:	23c8      	movs	r3, #200	; 0xc8
 800a66a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a66c:	2301      	movs	r3, #1
 800a66e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a670:	2300      	movs	r3, #0
 800a672:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a674:	2300      	movs	r3, #0
 800a676:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a678:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a67c:	4619      	mov	r1, r3
 800a67e:	4832      	ldr	r0, [pc, #200]	; (800a748 <MX_GPIO_Init+0x434>)
 800a680:	f7f6 fe2e 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PLAYER_ONE_BTN_Pin */
  GPIO_InitStruct.Pin = PLAYER_ONE_BTN_Pin;
 800a684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a688:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a68a:	4b30      	ldr	r3, [pc, #192]	; (800a74c <MX_GPIO_Init+0x438>)
 800a68c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a68e:	2302      	movs	r3, #2
 800a690:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(PLAYER_ONE_BTN_GPIO_Port, &GPIO_InitStruct);
 800a692:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a696:	4619      	mov	r1, r3
 800a698:	482d      	ldr	r0, [pc, #180]	; (800a750 <MX_GPIO_Init+0x43c>)
 800a69a:	f7f6 fe21 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800a69e:	2305      	movs	r3, #5
 800a6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6aa:	2303      	movs	r3, #3
 800a6ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a6ae:	230a      	movs	r3, #10
 800a6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a6b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	4821      	ldr	r0, [pc, #132]	; (800a740 <MX_GPIO_Init+0x42c>)
 800a6ba:	f7f6 fe11 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800a6be:	2304      	movs	r3, #4
 800a6c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800a6ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	481d      	ldr	r0, [pc, #116]	; (800a748 <MX_GPIO_Init+0x434>)
 800a6d2:	f7f6 fe05 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_GAME_BTN_Pin */
  GPIO_InitStruct.Pin = START_GAME_BTN_Pin;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a6da:	4b1c      	ldr	r3, [pc, #112]	; (800a74c <MX_GPIO_Init+0x438>)
 800a6dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a6de:	2302      	movs	r3, #2
 800a6e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(START_GAME_BTN_GPIO_Port, &GPIO_InitStruct);
 800a6e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	481a      	ldr	r0, [pc, #104]	; (800a754 <MX_GPIO_Init+0x440>)
 800a6ea:	f7f6 fdf9 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800a6ee:	2328      	movs	r3, #40	; 0x28
 800a6f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6f2:	2302      	movs	r3, #2
 800a6f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6fa:	2303      	movs	r3, #3
 800a6fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a6fe:	230a      	movs	r3, #10
 800a700:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a702:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a706:	4619      	mov	r1, r3
 800a708:	4812      	ldr	r0, [pc, #72]	; (800a754 <MX_GPIO_Init+0x440>)
 800a70a:	f7f6 fde9 	bl	80012e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800a70e:	2200      	movs	r2, #0
 800a710:	2100      	movs	r1, #0
 800a712:	2006      	movs	r0, #6
 800a714:	f7f6 fa72 	bl	8000bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800a718:	2006      	movs	r0, #6
 800a71a:	f7f6 fa8b 	bl	8000c34 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800a71e:	2200      	movs	r2, #0
 800a720:	2100      	movs	r1, #0
 800a722:	2028      	movs	r0, #40	; 0x28
 800a724:	f7f6 fa6a 	bl	8000bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a728:	2028      	movs	r0, #40	; 0x28
 800a72a:	f7f6 fa83 	bl	8000c34 <HAL_NVIC_EnableIRQ>

}
 800a72e:	bf00      	nop
 800a730:	3740      	adds	r7, #64	; 0x40
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	10120000 	.word	0x10120000
 800a73c:	40022000 	.word	0x40022000
 800a740:	40020800 	.word	0x40020800
 800a744:	40021c00 	.word	0x40021c00
 800a748:	40021800 	.word	0x40021800
 800a74c:	10110000 	.word	0x10110000
 800a750:	40021400 	.word	0x40021400
 800a754:	40020000 	.word	0x40020000

0800a758 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	4603      	mov	r3, r0
 800a760:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == START_GAME_BTN_Pin) {
 800a762:	88fb      	ldrh	r3, [r7, #6]
 800a764:	2b01      	cmp	r3, #1
 800a766:	d102      	bne.n	800a76e <HAL_GPIO_EXTI_Callback+0x16>
		has_game_started = TRUE;
 800a768:	4b04      	ldr	r3, [pc, #16]	; (800a77c <HAL_GPIO_EXTI_Callback+0x24>)
 800a76a:	2201      	movs	r2, #1
 800a76c:	601a      	str	r2, [r3, #0]
	}
}
 800a76e:	bf00      	nop
 800a770:	370c      	adds	r7, #12
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	20000028 	.word	0x20000028

0800a780 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a04      	ldr	r2, [pc, #16]	; (800a7a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d101      	bne.n	800a796 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800a792:	f7f5 fec7 	bl	8000524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a796:	bf00      	nop
 800a798:	3708      	adds	r7, #8
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	40001000 	.word	0x40001000

0800a7a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a7a8:	bf00      	nop
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
	...

0800a7b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800a7ba:	4b0f      	ldr	r3, [pc, #60]	; (800a7f8 <HAL_MspInit+0x44>)
 800a7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7be:	4a0e      	ldr	r2, [pc, #56]	; (800a7f8 <HAL_MspInit+0x44>)
 800a7c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7c4:	6413      	str	r3, [r2, #64]	; 0x40
 800a7c6:	4b0c      	ldr	r3, [pc, #48]	; (800a7f8 <HAL_MspInit+0x44>)
 800a7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7ce:	607b      	str	r3, [r7, #4]
 800a7d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a7d2:	4b09      	ldr	r3, [pc, #36]	; (800a7f8 <HAL_MspInit+0x44>)
 800a7d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7d6:	4a08      	ldr	r2, [pc, #32]	; (800a7f8 <HAL_MspInit+0x44>)
 800a7d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a7dc:	6453      	str	r3, [r2, #68]	; 0x44
 800a7de:	4b06      	ldr	r3, [pc, #24]	; (800a7f8 <HAL_MspInit+0x44>)
 800a7e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7e6:	603b      	str	r3, [r7, #0]
 800a7e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a7ea:	bf00      	nop
 800a7ec:	370c      	adds	r7, #12
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	40023800 	.word	0x40023800

0800a7fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b08a      	sub	sp, #40	; 0x28
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a804:	f107 0314 	add.w	r3, r7, #20
 800a808:	2200      	movs	r2, #0
 800a80a:	601a      	str	r2, [r3, #0]
 800a80c:	605a      	str	r2, [r3, #4]
 800a80e:	609a      	str	r2, [r3, #8]
 800a810:	60da      	str	r2, [r3, #12]
 800a812:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a15      	ldr	r2, [pc, #84]	; (800a870 <HAL_ADC_MspInit+0x74>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d124      	bne.n	800a868 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800a81e:	4b15      	ldr	r3, [pc, #84]	; (800a874 <HAL_ADC_MspInit+0x78>)
 800a820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a822:	4a14      	ldr	r2, [pc, #80]	; (800a874 <HAL_ADC_MspInit+0x78>)
 800a824:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a828:	6453      	str	r3, [r2, #68]	; 0x44
 800a82a:	4b12      	ldr	r3, [pc, #72]	; (800a874 <HAL_ADC_MspInit+0x78>)
 800a82c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a82e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a832:	613b      	str	r3, [r7, #16]
 800a834:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a836:	4b0f      	ldr	r3, [pc, #60]	; (800a874 <HAL_ADC_MspInit+0x78>)
 800a838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a83a:	4a0e      	ldr	r2, [pc, #56]	; (800a874 <HAL_ADC_MspInit+0x78>)
 800a83c:	f043 0320 	orr.w	r3, r3, #32
 800a840:	6313      	str	r3, [r2, #48]	; 0x30
 800a842:	4b0c      	ldr	r3, [pc, #48]	; (800a874 <HAL_ADC_MspInit+0x78>)
 800a844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a846:	f003 0320 	and.w	r3, r3, #32
 800a84a:	60fb      	str	r3, [r7, #12]
 800a84c:	68fb      	ldr	r3, [r7, #12]
    PF7     ------> ADC3_IN5
    PF6     ------> ADC3_IN4
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 800a84e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a854:	2303      	movs	r3, #3
 800a856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a858:	2300      	movs	r3, #0
 800a85a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a85c:	f107 0314 	add.w	r3, r7, #20
 800a860:	4619      	mov	r1, r3
 800a862:	4805      	ldr	r0, [pc, #20]	; (800a878 <HAL_ADC_MspInit+0x7c>)
 800a864:	f7f6 fd3c 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800a868:	bf00      	nop
 800a86a:	3728      	adds	r7, #40	; 0x28
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	40012200 	.word	0x40012200
 800a874:	40023800 	.word	0x40023800
 800a878:	40021400 	.word	0x40021400

0800a87c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b085      	sub	sp, #20
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a0a      	ldr	r2, [pc, #40]	; (800a8b4 <HAL_CRC_MspInit+0x38>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d10b      	bne.n	800a8a6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800a88e:	4b0a      	ldr	r3, [pc, #40]	; (800a8b8 <HAL_CRC_MspInit+0x3c>)
 800a890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a892:	4a09      	ldr	r2, [pc, #36]	; (800a8b8 <HAL_CRC_MspInit+0x3c>)
 800a894:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a898:	6313      	str	r3, [r2, #48]	; 0x30
 800a89a:	4b07      	ldr	r3, [pc, #28]	; (800a8b8 <HAL_CRC_MspInit+0x3c>)
 800a89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a89e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a8a2:	60fb      	str	r3, [r7, #12]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800a8a6:	bf00      	nop
 800a8a8:	3714      	adds	r7, #20
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	40023000 	.word	0x40023000
 800a8b8:	40023800 	.word	0x40023800

0800a8bc <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b08e      	sub	sp, #56	; 0x38
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	601a      	str	r2, [r3, #0]
 800a8cc:	605a      	str	r2, [r3, #4]
 800a8ce:	609a      	str	r2, [r3, #8]
 800a8d0:	60da      	str	r2, [r3, #12]
 800a8d2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a50      	ldr	r2, [pc, #320]	; (800aa1c <HAL_DCMI_MspInit+0x160>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	f040 809a 	bne.w	800aa14 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800a8e0:	4b4f      	ldr	r3, [pc, #316]	; (800aa20 <HAL_DCMI_MspInit+0x164>)
 800a8e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8e4:	4a4e      	ldr	r2, [pc, #312]	; (800aa20 <HAL_DCMI_MspInit+0x164>)
 800a8e6:	f043 0301 	orr.w	r3, r3, #1
 800a8ea:	6353      	str	r3, [r2, #52]	; 0x34
 800a8ec:	4b4c      	ldr	r3, [pc, #304]	; (800aa20 <HAL_DCMI_MspInit+0x164>)
 800a8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8f0:	f003 0301 	and.w	r3, r3, #1
 800a8f4:	623b      	str	r3, [r7, #32]
 800a8f6:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a8f8:	4b49      	ldr	r3, [pc, #292]	; (800aa20 <HAL_DCMI_MspInit+0x164>)
 800a8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8fc:	4a48      	ldr	r2, [pc, #288]	; (800aa20 <HAL_DCMI_MspInit+0x164>)
 800a8fe:	f043 0310 	orr.w	r3, r3, #16
 800a902:	6313      	str	r3, [r2, #48]	; 0x30
 800a904:	4b46      	ldr	r3, [pc, #280]	; (800aa20 <HAL_DCMI_MspInit+0x164>)
 800a906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a908:	f003 0310 	and.w	r3, r3, #16
 800a90c:	61fb      	str	r3, [r7, #28]
 800a90e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a910:	4b43      	ldr	r3, [pc, #268]	; (800aa20 <HAL_DCMI_MspInit+0x164>)
 800a912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a914:	4a42      	ldr	r2, [pc, #264]	; (800aa20 <HAL_DCMI_MspInit+0x164>)
 800a916:	f043 0308 	orr.w	r3, r3, #8
 800a91a:	6313      	str	r3, [r2, #48]	; 0x30
 800a91c:	4b40      	ldr	r3, [pc, #256]	; (800aa20 <HAL_DCMI_MspInit+0x164>)
 800a91e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a920:	f003 0308 	and.w	r3, r3, #8
 800a924:	61bb      	str	r3, [r7, #24]
 800a926:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a928:	4b3d      	ldr	r3, [pc, #244]	; (800aa20 <HAL_DCMI_MspInit+0x164>)
 800a92a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92c:	4a3c      	ldr	r2, [pc, #240]	; (800aa20 <HAL_DCMI_MspInit+0x164>)
 800a92e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a932:	6313      	str	r3, [r2, #48]	; 0x30
 800a934:	4b3a      	ldr	r3, [pc, #232]	; (800aa20 <HAL_DCMI_MspInit+0x164>)
 800a936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a93c:	617b      	str	r3, [r7, #20]
 800a93e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800a940:	4b37      	ldr	r3, [pc, #220]	; (800aa20 <HAL_DCMI_MspInit+0x164>)
 800a942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a944:	4a36      	ldr	r2, [pc, #216]	; (800aa20 <HAL_DCMI_MspInit+0x164>)
 800a946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a94a:	6313      	str	r3, [r2, #48]	; 0x30
 800a94c:	4b34      	ldr	r3, [pc, #208]	; (800aa20 <HAL_DCMI_MspInit+0x164>)
 800a94e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a954:	613b      	str	r3, [r7, #16]
 800a956:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a958:	4b31      	ldr	r3, [pc, #196]	; (800aa20 <HAL_DCMI_MspInit+0x164>)
 800a95a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a95c:	4a30      	ldr	r2, [pc, #192]	; (800aa20 <HAL_DCMI_MspInit+0x164>)
 800a95e:	f043 0301 	orr.w	r3, r3, #1
 800a962:	6313      	str	r3, [r2, #48]	; 0x30
 800a964:	4b2e      	ldr	r3, [pc, #184]	; (800aa20 <HAL_DCMI_MspInit+0x164>)
 800a966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a968:	f003 0301 	and.w	r3, r3, #1
 800a96c:	60fb      	str	r3, [r7, #12]
 800a96e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800a970:	2360      	movs	r3, #96	; 0x60
 800a972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a974:	2302      	movs	r3, #2
 800a976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a978:	2300      	movs	r3, #0
 800a97a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a97c:	2300      	movs	r3, #0
 800a97e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a980:	230d      	movs	r3, #13
 800a982:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a988:	4619      	mov	r1, r3
 800a98a:	4826      	ldr	r0, [pc, #152]	; (800aa24 <HAL_DCMI_MspInit+0x168>)
 800a98c:	f7f6 fca8 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800a990:	2308      	movs	r3, #8
 800a992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a994:	2302      	movs	r3, #2
 800a996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a998:	2300      	movs	r3, #0
 800a99a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a99c:	2300      	movs	r3, #0
 800a99e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a9a0:	230d      	movs	r3, #13
 800a9a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800a9a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	481f      	ldr	r0, [pc, #124]	; (800aa28 <HAL_DCMI_MspInit+0x16c>)
 800a9ac:	f7f6 fc98 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800a9b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9b6:	2302      	movs	r3, #2
 800a9b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a9c2:	230d      	movs	r3, #13
 800a9c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800a9c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	4817      	ldr	r0, [pc, #92]	; (800aa2c <HAL_DCMI_MspInit+0x170>)
 800a9ce:	f7f6 fc87 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 800a9d2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800a9d6:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9d8:	2302      	movs	r3, #2
 800a9da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a9e4:	230d      	movs	r3, #13
 800a9e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a9e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	4810      	ldr	r0, [pc, #64]	; (800aa30 <HAL_DCMI_MspInit+0x174>)
 800a9f0:	f7f6 fc76 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800a9f4:	2350      	movs	r3, #80	; 0x50
 800a9f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9f8:	2302      	movs	r3, #2
 800a9fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa00:	2300      	movs	r3, #0
 800aa02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800aa04:	230d      	movs	r3, #13
 800aa06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	4809      	ldr	r0, [pc, #36]	; (800aa34 <HAL_DCMI_MspInit+0x178>)
 800aa10:	f7f6 fc66 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800aa14:	bf00      	nop
 800aa16:	3738      	adds	r7, #56	; 0x38
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	50050000 	.word	0x50050000
 800aa20:	40023800 	.word	0x40023800
 800aa24:	40021000 	.word	0x40021000
 800aa28:	40020c00 	.word	0x40020c00
 800aa2c:	40021800 	.word	0x40021800
 800aa30:	40021c00 	.word	0x40021c00
 800aa34:	40020000 	.word	0x40020000

0800aa38 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a0d      	ldr	r2, [pc, #52]	; (800aa7c <HAL_DMA2D_MspInit+0x44>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d113      	bne.n	800aa72 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800aa4a:	4b0d      	ldr	r3, [pc, #52]	; (800aa80 <HAL_DMA2D_MspInit+0x48>)
 800aa4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa4e:	4a0c      	ldr	r2, [pc, #48]	; (800aa80 <HAL_DMA2D_MspInit+0x48>)
 800aa50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aa54:	6313      	str	r3, [r2, #48]	; 0x30
 800aa56:	4b0a      	ldr	r3, [pc, #40]	; (800aa80 <HAL_DMA2D_MspInit+0x48>)
 800aa58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa5e:	60fb      	str	r3, [r7, #12]
 800aa60:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800aa62:	2200      	movs	r2, #0
 800aa64:	2100      	movs	r1, #0
 800aa66:	205a      	movs	r0, #90	; 0x5a
 800aa68:	f7f6 f8c8 	bl	8000bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800aa6c:	205a      	movs	r0, #90	; 0x5a
 800aa6e:	f7f6 f8e1 	bl	8000c34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800aa72:	bf00      	nop
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	4002b000 	.word	0x4002b000
 800aa80:	40023800 	.word	0x40023800

0800aa84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b08c      	sub	sp, #48	; 0x30
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa8c:	f107 031c 	add.w	r3, r7, #28
 800aa90:	2200      	movs	r2, #0
 800aa92:	601a      	str	r2, [r3, #0]
 800aa94:	605a      	str	r2, [r3, #4]
 800aa96:	609a      	str	r2, [r3, #8]
 800aa98:	60da      	str	r2, [r3, #12]
 800aa9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a2f      	ldr	r2, [pc, #188]	; (800ab60 <HAL_I2C_MspInit+0xdc>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d129      	bne.n	800aafa <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aaa6:	4b2f      	ldr	r3, [pc, #188]	; (800ab64 <HAL_I2C_MspInit+0xe0>)
 800aaa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaaa:	4a2e      	ldr	r2, [pc, #184]	; (800ab64 <HAL_I2C_MspInit+0xe0>)
 800aaac:	f043 0302 	orr.w	r3, r3, #2
 800aab0:	6313      	str	r3, [r2, #48]	; 0x30
 800aab2:	4b2c      	ldr	r3, [pc, #176]	; (800ab64 <HAL_I2C_MspInit+0xe0>)
 800aab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aab6:	f003 0302 	and.w	r3, r3, #2
 800aaba:	61bb      	str	r3, [r7, #24]
 800aabc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800aabe:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800aac4:	2312      	movs	r3, #18
 800aac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800aac8:	2301      	movs	r3, #1
 800aaca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aacc:	2300      	movs	r3, #0
 800aace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800aad0:	2304      	movs	r3, #4
 800aad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aad4:	f107 031c 	add.w	r3, r7, #28
 800aad8:	4619      	mov	r1, r3
 800aada:	4823      	ldr	r0, [pc, #140]	; (800ab68 <HAL_I2C_MspInit+0xe4>)
 800aadc:	f7f6 fc00 	bl	80012e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800aae0:	4b20      	ldr	r3, [pc, #128]	; (800ab64 <HAL_I2C_MspInit+0xe0>)
 800aae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae4:	4a1f      	ldr	r2, [pc, #124]	; (800ab64 <HAL_I2C_MspInit+0xe0>)
 800aae6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aaea:	6413      	str	r3, [r2, #64]	; 0x40
 800aaec:	4b1d      	ldr	r3, [pc, #116]	; (800ab64 <HAL_I2C_MspInit+0xe0>)
 800aaee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aaf4:	617b      	str	r3, [r7, #20]
 800aaf6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800aaf8:	e02d      	b.n	800ab56 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a1b      	ldr	r2, [pc, #108]	; (800ab6c <HAL_I2C_MspInit+0xe8>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d128      	bne.n	800ab56 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800ab04:	4b17      	ldr	r3, [pc, #92]	; (800ab64 <HAL_I2C_MspInit+0xe0>)
 800ab06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab08:	4a16      	ldr	r2, [pc, #88]	; (800ab64 <HAL_I2C_MspInit+0xe0>)
 800ab0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab0e:	6313      	str	r3, [r2, #48]	; 0x30
 800ab10:	4b14      	ldr	r3, [pc, #80]	; (800ab64 <HAL_I2C_MspInit+0xe0>)
 800ab12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab18:	613b      	str	r3, [r7, #16]
 800ab1a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800ab1c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800ab20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ab22:	2312      	movs	r3, #18
 800ab24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ab26:	2301      	movs	r3, #1
 800ab28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab2a:	2303      	movs	r3, #3
 800ab2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800ab2e:	2304      	movs	r3, #4
 800ab30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ab32:	f107 031c 	add.w	r3, r7, #28
 800ab36:	4619      	mov	r1, r3
 800ab38:	480d      	ldr	r0, [pc, #52]	; (800ab70 <HAL_I2C_MspInit+0xec>)
 800ab3a:	f7f6 fbd1 	bl	80012e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800ab3e:	4b09      	ldr	r3, [pc, #36]	; (800ab64 <HAL_I2C_MspInit+0xe0>)
 800ab40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab42:	4a08      	ldr	r2, [pc, #32]	; (800ab64 <HAL_I2C_MspInit+0xe0>)
 800ab44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ab48:	6413      	str	r3, [r2, #64]	; 0x40
 800ab4a:	4b06      	ldr	r3, [pc, #24]	; (800ab64 <HAL_I2C_MspInit+0xe0>)
 800ab4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab52:	60fb      	str	r3, [r7, #12]
 800ab54:	68fb      	ldr	r3, [r7, #12]
}
 800ab56:	bf00      	nop
 800ab58:	3730      	adds	r7, #48	; 0x30
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	40005400 	.word	0x40005400
 800ab64:	40023800 	.word	0x40023800
 800ab68:	40020400 	.word	0x40020400
 800ab6c:	40005c00 	.word	0x40005c00
 800ab70:	40021c00 	.word	0x40021c00

0800ab74 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b08e      	sub	sp, #56	; 0x38
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab80:	2200      	movs	r2, #0
 800ab82:	601a      	str	r2, [r3, #0]
 800ab84:	605a      	str	r2, [r3, #4]
 800ab86:	609a      	str	r2, [r3, #8]
 800ab88:	60da      	str	r2, [r3, #12]
 800ab8a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a55      	ldr	r2, [pc, #340]	; (800ace8 <HAL_LTDC_MspInit+0x174>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	f040 80a3 	bne.w	800acde <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800ab98:	4b54      	ldr	r3, [pc, #336]	; (800acec <HAL_LTDC_MspInit+0x178>)
 800ab9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab9c:	4a53      	ldr	r2, [pc, #332]	; (800acec <HAL_LTDC_MspInit+0x178>)
 800ab9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aba2:	6453      	str	r3, [r2, #68]	; 0x44
 800aba4:	4b51      	ldr	r3, [pc, #324]	; (800acec <HAL_LTDC_MspInit+0x178>)
 800aba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aba8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800abac:	623b      	str	r3, [r7, #32]
 800abae:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800abb0:	4b4e      	ldr	r3, [pc, #312]	; (800acec <HAL_LTDC_MspInit+0x178>)
 800abb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb4:	4a4d      	ldr	r2, [pc, #308]	; (800acec <HAL_LTDC_MspInit+0x178>)
 800abb6:	f043 0310 	orr.w	r3, r3, #16
 800abba:	6313      	str	r3, [r2, #48]	; 0x30
 800abbc:	4b4b      	ldr	r3, [pc, #300]	; (800acec <HAL_LTDC_MspInit+0x178>)
 800abbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abc0:	f003 0310 	and.w	r3, r3, #16
 800abc4:	61fb      	str	r3, [r7, #28]
 800abc6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800abc8:	4b48      	ldr	r3, [pc, #288]	; (800acec <HAL_LTDC_MspInit+0x178>)
 800abca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abcc:	4a47      	ldr	r2, [pc, #284]	; (800acec <HAL_LTDC_MspInit+0x178>)
 800abce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800abd2:	6313      	str	r3, [r2, #48]	; 0x30
 800abd4:	4b45      	ldr	r3, [pc, #276]	; (800acec <HAL_LTDC_MspInit+0x178>)
 800abd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800abdc:	61bb      	str	r3, [r7, #24]
 800abde:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800abe0:	4b42      	ldr	r3, [pc, #264]	; (800acec <HAL_LTDC_MspInit+0x178>)
 800abe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe4:	4a41      	ldr	r2, [pc, #260]	; (800acec <HAL_LTDC_MspInit+0x178>)
 800abe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800abea:	6313      	str	r3, [r2, #48]	; 0x30
 800abec:	4b3f      	ldr	r3, [pc, #252]	; (800acec <HAL_LTDC_MspInit+0x178>)
 800abee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abf4:	617b      	str	r3, [r7, #20]
 800abf6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800abf8:	4b3c      	ldr	r3, [pc, #240]	; (800acec <HAL_LTDC_MspInit+0x178>)
 800abfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abfc:	4a3b      	ldr	r2, [pc, #236]	; (800acec <HAL_LTDC_MspInit+0x178>)
 800abfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac02:	6313      	str	r3, [r2, #48]	; 0x30
 800ac04:	4b39      	ldr	r3, [pc, #228]	; (800acec <HAL_LTDC_MspInit+0x178>)
 800ac06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac0c:	613b      	str	r3, [r7, #16]
 800ac0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800ac10:	4b36      	ldr	r3, [pc, #216]	; (800acec <HAL_LTDC_MspInit+0x178>)
 800ac12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac14:	4a35      	ldr	r2, [pc, #212]	; (800acec <HAL_LTDC_MspInit+0x178>)
 800ac16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac1a:	6313      	str	r3, [r2, #48]	; 0x30
 800ac1c:	4b33      	ldr	r3, [pc, #204]	; (800acec <HAL_LTDC_MspInit+0x178>)
 800ac1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac24:	60fb      	str	r3, [r7, #12]
 800ac26:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800ac28:	2310      	movs	r3, #16
 800ac2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac30:	2300      	movs	r3, #0
 800ac32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac34:	2300      	movs	r3, #0
 800ac36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800ac38:	230e      	movs	r3, #14
 800ac3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800ac3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac40:	4619      	mov	r1, r3
 800ac42:	482b      	ldr	r0, [pc, #172]	; (800acf0 <HAL_LTDC_MspInit+0x17c>)
 800ac44:	f7f6 fb4c 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800ac48:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800ac4c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac4e:	2302      	movs	r3, #2
 800ac50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac52:	2300      	movs	r3, #0
 800ac54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac56:	2300      	movs	r3, #0
 800ac58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800ac5a:	230e      	movs	r3, #14
 800ac5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800ac5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac62:	4619      	mov	r1, r3
 800ac64:	4823      	ldr	r0, [pc, #140]	; (800acf4 <HAL_LTDC_MspInit+0x180>)
 800ac66:	f7f6 fb3b 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800ac6a:	23f7      	movs	r3, #247	; 0xf7
 800ac6c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac6e:	2302      	movs	r3, #2
 800ac70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac72:	2300      	movs	r3, #0
 800ac74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac76:	2300      	movs	r3, #0
 800ac78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800ac7a:	230e      	movs	r3, #14
 800ac7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800ac7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac82:	4619      	mov	r1, r3
 800ac84:	481c      	ldr	r0, [pc, #112]	; (800acf8 <HAL_LTDC_MspInit+0x184>)
 800ac86:	f7f6 fb2b 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800ac8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac90:	2302      	movs	r3, #2
 800ac92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac94:	2300      	movs	r3, #0
 800ac96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800ac9c:	2309      	movs	r3, #9
 800ac9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800aca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aca4:	4619      	mov	r1, r3
 800aca6:	4815      	ldr	r0, [pc, #84]	; (800acfc <HAL_LTDC_MspInit+0x188>)
 800aca8:	f7f6 fb1a 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800acac:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800acb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acb2:	2302      	movs	r3, #2
 800acb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acb6:	2300      	movs	r3, #0
 800acb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acba:	2300      	movs	r3, #0
 800acbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800acbe:	230e      	movs	r3, #14
 800acc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800acc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acc6:	4619      	mov	r1, r3
 800acc8:	480d      	ldr	r0, [pc, #52]	; (800ad00 <HAL_LTDC_MspInit+0x18c>)
 800acca:	f7f6 fb09 	bl	80012e0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800acce:	2200      	movs	r2, #0
 800acd0:	2100      	movs	r1, #0
 800acd2:	2058      	movs	r0, #88	; 0x58
 800acd4:	f7f5 ff92 	bl	8000bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800acd8:	2058      	movs	r0, #88	; 0x58
 800acda:	f7f5 ffab 	bl	8000c34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800acde:	bf00      	nop
 800ace0:	3738      	adds	r7, #56	; 0x38
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	40016800 	.word	0x40016800
 800acec:	40023800 	.word	0x40023800
 800acf0:	40021000 	.word	0x40021000
 800acf4:	40022400 	.word	0x40022400
 800acf8:	40022800 	.word	0x40022800
 800acfc:	40021800 	.word	0x40021800
 800ad00:	40022000 	.word	0x40022000

0800ad04 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b08c      	sub	sp, #48	; 0x30
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad0c:	f107 031c 	add.w	r3, r7, #28
 800ad10:	2200      	movs	r2, #0
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	605a      	str	r2, [r3, #4]
 800ad16:	609a      	str	r2, [r3, #8]
 800ad18:	60da      	str	r2, [r3, #12]
 800ad1a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a3b      	ldr	r2, [pc, #236]	; (800ae10 <HAL_QSPI_MspInit+0x10c>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d170      	bne.n	800ae08 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800ad26:	4b3b      	ldr	r3, [pc, #236]	; (800ae14 <HAL_QSPI_MspInit+0x110>)
 800ad28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2a:	4a3a      	ldr	r2, [pc, #232]	; (800ae14 <HAL_QSPI_MspInit+0x110>)
 800ad2c:	f043 0302 	orr.w	r3, r3, #2
 800ad30:	6393      	str	r3, [r2, #56]	; 0x38
 800ad32:	4b38      	ldr	r3, [pc, #224]	; (800ae14 <HAL_QSPI_MspInit+0x110>)
 800ad34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad36:	f003 0302 	and.w	r3, r3, #2
 800ad3a:	61bb      	str	r3, [r7, #24]
 800ad3c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800ad3e:	4b35      	ldr	r3, [pc, #212]	; (800ae14 <HAL_QSPI_MspInit+0x110>)
 800ad40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad42:	4a34      	ldr	r2, [pc, #208]	; (800ae14 <HAL_QSPI_MspInit+0x110>)
 800ad44:	f043 0310 	orr.w	r3, r3, #16
 800ad48:	6313      	str	r3, [r2, #48]	; 0x30
 800ad4a:	4b32      	ldr	r3, [pc, #200]	; (800ae14 <HAL_QSPI_MspInit+0x110>)
 800ad4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad4e:	f003 0310 	and.w	r3, r3, #16
 800ad52:	617b      	str	r3, [r7, #20]
 800ad54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad56:	4b2f      	ldr	r3, [pc, #188]	; (800ae14 <HAL_QSPI_MspInit+0x110>)
 800ad58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad5a:	4a2e      	ldr	r2, [pc, #184]	; (800ae14 <HAL_QSPI_MspInit+0x110>)
 800ad5c:	f043 0302 	orr.w	r3, r3, #2
 800ad60:	6313      	str	r3, [r2, #48]	; 0x30
 800ad62:	4b2c      	ldr	r3, [pc, #176]	; (800ae14 <HAL_QSPI_MspInit+0x110>)
 800ad64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad66:	f003 0302 	and.w	r3, r3, #2
 800ad6a:	613b      	str	r3, [r7, #16]
 800ad6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ad6e:	4b29      	ldr	r3, [pc, #164]	; (800ae14 <HAL_QSPI_MspInit+0x110>)
 800ad70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad72:	4a28      	ldr	r2, [pc, #160]	; (800ae14 <HAL_QSPI_MspInit+0x110>)
 800ad74:	f043 0308 	orr.w	r3, r3, #8
 800ad78:	6313      	str	r3, [r2, #48]	; 0x30
 800ad7a:	4b26      	ldr	r3, [pc, #152]	; (800ae14 <HAL_QSPI_MspInit+0x110>)
 800ad7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad7e:	f003 0308 	and.w	r3, r3, #8
 800ad82:	60fb      	str	r3, [r7, #12]
 800ad84:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800ad86:	2304      	movs	r3, #4
 800ad88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad8a:	2302      	movs	r3, #2
 800ad8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad92:	2303      	movs	r3, #3
 800ad94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800ad96:	2309      	movs	r3, #9
 800ad98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800ad9a:	f107 031c 	add.w	r3, r7, #28
 800ad9e:	4619      	mov	r1, r3
 800ada0:	481d      	ldr	r0, [pc, #116]	; (800ae18 <HAL_QSPI_MspInit+0x114>)
 800ada2:	f7f6 fa9d 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800ada6:	2340      	movs	r3, #64	; 0x40
 800ada8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adaa:	2302      	movs	r3, #2
 800adac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adae:	2300      	movs	r3, #0
 800adb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800adb2:	2303      	movs	r3, #3
 800adb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800adb6:	230a      	movs	r3, #10
 800adb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800adba:	f107 031c 	add.w	r3, r7, #28
 800adbe:	4619      	mov	r1, r3
 800adc0:	4816      	ldr	r0, [pc, #88]	; (800ae1c <HAL_QSPI_MspInit+0x118>)
 800adc2:	f7f6 fa8d 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800adc6:	2304      	movs	r3, #4
 800adc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adca:	2302      	movs	r3, #2
 800adcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adce:	2300      	movs	r3, #0
 800add0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800add2:	2303      	movs	r3, #3
 800add4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800add6:	2309      	movs	r3, #9
 800add8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800adda:	f107 031c 	add.w	r3, r7, #28
 800adde:	4619      	mov	r1, r3
 800ade0:	480e      	ldr	r0, [pc, #56]	; (800ae1c <HAL_QSPI_MspInit+0x118>)
 800ade2:	f7f6 fa7d 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800ade6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800adea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adec:	2302      	movs	r3, #2
 800adee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adf0:	2300      	movs	r3, #0
 800adf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800adf4:	2303      	movs	r3, #3
 800adf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800adf8:	2309      	movs	r3, #9
 800adfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800adfc:	f107 031c 	add.w	r3, r7, #28
 800ae00:	4619      	mov	r1, r3
 800ae02:	4807      	ldr	r0, [pc, #28]	; (800ae20 <HAL_QSPI_MspInit+0x11c>)
 800ae04:	f7f6 fa6c 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800ae08:	bf00      	nop
 800ae0a:	3730      	adds	r7, #48	; 0x30
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	a0001000 	.word	0xa0001000
 800ae14:	40023800 	.word	0x40023800
 800ae18:	40021000 	.word	0x40021000
 800ae1c:	40020400 	.word	0x40020400
 800ae20:	40020c00 	.word	0x40020c00

0800ae24 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b085      	sub	sp, #20
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a0a      	ldr	r2, [pc, #40]	; (800ae5c <HAL_RNG_MspInit+0x38>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d10b      	bne.n	800ae4e <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800ae36:	4b0a      	ldr	r3, [pc, #40]	; (800ae60 <HAL_RNG_MspInit+0x3c>)
 800ae38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae3a:	4a09      	ldr	r2, [pc, #36]	; (800ae60 <HAL_RNG_MspInit+0x3c>)
 800ae3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae40:	6353      	str	r3, [r2, #52]	; 0x34
 800ae42:	4b07      	ldr	r3, [pc, #28]	; (800ae60 <HAL_RNG_MspInit+0x3c>)
 800ae44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae4a:	60fb      	str	r3, [r7, #12]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800ae4e:	bf00      	nop
 800ae50:	3714      	adds	r7, #20
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop
 800ae5c:	50060800 	.word	0x50060800
 800ae60:	40023800 	.word	0x40023800

0800ae64 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a07      	ldr	r2, [pc, #28]	; (800ae90 <HAL_RTC_MspInit+0x2c>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d105      	bne.n	800ae82 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ae76:	4b07      	ldr	r3, [pc, #28]	; (800ae94 <HAL_RTC_MspInit+0x30>)
 800ae78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae7a:	4a06      	ldr	r2, [pc, #24]	; (800ae94 <HAL_RTC_MspInit+0x30>)
 800ae7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae80:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800ae82:	bf00      	nop
 800ae84:	370c      	adds	r7, #12
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	40002800 	.word	0x40002800
 800ae94:	40023800 	.word	0x40023800

0800ae98 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b08a      	sub	sp, #40	; 0x28
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aea0:	f107 0314 	add.w	r3, r7, #20
 800aea4:	2200      	movs	r2, #0
 800aea6:	601a      	str	r2, [r3, #0]
 800aea8:	605a      	str	r2, [r3, #4]
 800aeaa:	609a      	str	r2, [r3, #8]
 800aeac:	60da      	str	r2, [r3, #12]
 800aeae:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800aeb8:	d127      	bne.n	800af0a <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800aeba:	4b16      	ldr	r3, [pc, #88]	; (800af14 <HAL_SPDIFRX_MspInit+0x7c>)
 800aebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aebe:	4a15      	ldr	r2, [pc, #84]	; (800af14 <HAL_SPDIFRX_MspInit+0x7c>)
 800aec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aec4:	6413      	str	r3, [r2, #64]	; 0x40
 800aec6:	4b13      	ldr	r3, [pc, #76]	; (800af14 <HAL_SPDIFRX_MspInit+0x7c>)
 800aec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aece:	613b      	str	r3, [r7, #16]
 800aed0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800aed2:	4b10      	ldr	r3, [pc, #64]	; (800af14 <HAL_SPDIFRX_MspInit+0x7c>)
 800aed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aed6:	4a0f      	ldr	r2, [pc, #60]	; (800af14 <HAL_SPDIFRX_MspInit+0x7c>)
 800aed8:	f043 0308 	orr.w	r3, r3, #8
 800aedc:	6313      	str	r3, [r2, #48]	; 0x30
 800aede:	4b0d      	ldr	r3, [pc, #52]	; (800af14 <HAL_SPDIFRX_MspInit+0x7c>)
 800aee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee2:	f003 0308 	and.w	r3, r3, #8
 800aee6:	60fb      	str	r3, [r7, #12]
 800aee8:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800aeea:	2380      	movs	r3, #128	; 0x80
 800aeec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aeee:	2302      	movs	r3, #2
 800aef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aef2:	2300      	movs	r3, #0
 800aef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aef6:	2300      	movs	r3, #0
 800aef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800aefa:	2308      	movs	r3, #8
 800aefc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800aefe:	f107 0314 	add.w	r3, r7, #20
 800af02:	4619      	mov	r1, r3
 800af04:	4804      	ldr	r0, [pc, #16]	; (800af18 <HAL_SPDIFRX_MspInit+0x80>)
 800af06:	f7f6 f9eb 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800af0a:	bf00      	nop
 800af0c:	3728      	adds	r7, #40	; 0x28
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	40023800 	.word	0x40023800
 800af18:	40020c00 	.word	0x40020c00

0800af1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b08a      	sub	sp, #40	; 0x28
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af24:	f107 0314 	add.w	r3, r7, #20
 800af28:	2200      	movs	r2, #0
 800af2a:	601a      	str	r2, [r3, #0]
 800af2c:	605a      	str	r2, [r3, #4]
 800af2e:	609a      	str	r2, [r3, #8]
 800af30:	60da      	str	r2, [r3, #12]
 800af32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a25      	ldr	r2, [pc, #148]	; (800afd0 <HAL_SPI_MspInit+0xb4>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d144      	bne.n	800afc8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800af3e:	4b25      	ldr	r3, [pc, #148]	; (800afd4 <HAL_SPI_MspInit+0xb8>)
 800af40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af42:	4a24      	ldr	r2, [pc, #144]	; (800afd4 <HAL_SPI_MspInit+0xb8>)
 800af44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af48:	6413      	str	r3, [r2, #64]	; 0x40
 800af4a:	4b22      	ldr	r3, [pc, #136]	; (800afd4 <HAL_SPI_MspInit+0xb8>)
 800af4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af52:	613b      	str	r3, [r7, #16]
 800af54:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800af56:	4b1f      	ldr	r3, [pc, #124]	; (800afd4 <HAL_SPI_MspInit+0xb8>)
 800af58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af5a:	4a1e      	ldr	r2, [pc, #120]	; (800afd4 <HAL_SPI_MspInit+0xb8>)
 800af5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af60:	6313      	str	r3, [r2, #48]	; 0x30
 800af62:	4b1c      	ldr	r3, [pc, #112]	; (800afd4 <HAL_SPI_MspInit+0xb8>)
 800af64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af6a:	60fb      	str	r3, [r7, #12]
 800af6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af6e:	4b19      	ldr	r3, [pc, #100]	; (800afd4 <HAL_SPI_MspInit+0xb8>)
 800af70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af72:	4a18      	ldr	r2, [pc, #96]	; (800afd4 <HAL_SPI_MspInit+0xb8>)
 800af74:	f043 0302 	orr.w	r3, r3, #2
 800af78:	6313      	str	r3, [r2, #48]	; 0x30
 800af7a:	4b16      	ldr	r3, [pc, #88]	; (800afd4 <HAL_SPI_MspInit+0xb8>)
 800af7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af7e:	f003 0302 	and.w	r3, r3, #2
 800af82:	60bb      	str	r3, [r7, #8]
 800af84:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800af86:	2302      	movs	r3, #2
 800af88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af8a:	2302      	movs	r3, #2
 800af8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af8e:	2300      	movs	r3, #0
 800af90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af92:	2300      	movs	r3, #0
 800af94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800af96:	2305      	movs	r3, #5
 800af98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800af9a:	f107 0314 	add.w	r3, r7, #20
 800af9e:	4619      	mov	r1, r3
 800afa0:	480d      	ldr	r0, [pc, #52]	; (800afd8 <HAL_SPI_MspInit+0xbc>)
 800afa2:	f7f6 f99d 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800afa6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800afaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afac:	2302      	movs	r3, #2
 800afae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afb0:	2300      	movs	r3, #0
 800afb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afb4:	2300      	movs	r3, #0
 800afb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800afb8:	2305      	movs	r3, #5
 800afba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800afbc:	f107 0314 	add.w	r3, r7, #20
 800afc0:	4619      	mov	r1, r3
 800afc2:	4806      	ldr	r0, [pc, #24]	; (800afdc <HAL_SPI_MspInit+0xc0>)
 800afc4:	f7f6 f98c 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800afc8:	bf00      	nop
 800afca:	3728      	adds	r7, #40	; 0x28
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	40003800 	.word	0x40003800
 800afd4:	40023800 	.word	0x40023800
 800afd8:	40022000 	.word	0x40022000
 800afdc:	40020400 	.word	0x40020400

0800afe0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b089      	sub	sp, #36	; 0x24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a2e      	ldr	r2, [pc, #184]	; (800b0a8 <HAL_TIM_Base_MspInit+0xc8>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d10c      	bne.n	800b00c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800aff2:	4b2e      	ldr	r3, [pc, #184]	; (800b0ac <HAL_TIM_Base_MspInit+0xcc>)
 800aff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aff6:	4a2d      	ldr	r2, [pc, #180]	; (800b0ac <HAL_TIM_Base_MspInit+0xcc>)
 800aff8:	f043 0301 	orr.w	r3, r3, #1
 800affc:	6453      	str	r3, [r2, #68]	; 0x44
 800affe:	4b2b      	ldr	r3, [pc, #172]	; (800b0ac <HAL_TIM_Base_MspInit+0xcc>)
 800b000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b002:	f003 0301 	and.w	r3, r3, #1
 800b006:	61fb      	str	r3, [r7, #28]
 800b008:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800b00a:	e046      	b.n	800b09a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b014:	d10c      	bne.n	800b030 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b016:	4b25      	ldr	r3, [pc, #148]	; (800b0ac <HAL_TIM_Base_MspInit+0xcc>)
 800b018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01a:	4a24      	ldr	r2, [pc, #144]	; (800b0ac <HAL_TIM_Base_MspInit+0xcc>)
 800b01c:	f043 0301 	orr.w	r3, r3, #1
 800b020:	6413      	str	r3, [r2, #64]	; 0x40
 800b022:	4b22      	ldr	r3, [pc, #136]	; (800b0ac <HAL_TIM_Base_MspInit+0xcc>)
 800b024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b026:	f003 0301 	and.w	r3, r3, #1
 800b02a:	61bb      	str	r3, [r7, #24]
 800b02c:	69bb      	ldr	r3, [r7, #24]
}
 800b02e:	e034      	b.n	800b09a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a1e      	ldr	r2, [pc, #120]	; (800b0b0 <HAL_TIM_Base_MspInit+0xd0>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d10c      	bne.n	800b054 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b03a:	4b1c      	ldr	r3, [pc, #112]	; (800b0ac <HAL_TIM_Base_MspInit+0xcc>)
 800b03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b03e:	4a1b      	ldr	r2, [pc, #108]	; (800b0ac <HAL_TIM_Base_MspInit+0xcc>)
 800b040:	f043 0302 	orr.w	r3, r3, #2
 800b044:	6413      	str	r3, [r2, #64]	; 0x40
 800b046:	4b19      	ldr	r3, [pc, #100]	; (800b0ac <HAL_TIM_Base_MspInit+0xcc>)
 800b048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b04a:	f003 0302 	and.w	r3, r3, #2
 800b04e:	617b      	str	r3, [r7, #20]
 800b050:	697b      	ldr	r3, [r7, #20]
}
 800b052:	e022      	b.n	800b09a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a16      	ldr	r2, [pc, #88]	; (800b0b4 <HAL_TIM_Base_MspInit+0xd4>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d10c      	bne.n	800b078 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800b05e:	4b13      	ldr	r3, [pc, #76]	; (800b0ac <HAL_TIM_Base_MspInit+0xcc>)
 800b060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b062:	4a12      	ldr	r2, [pc, #72]	; (800b0ac <HAL_TIM_Base_MspInit+0xcc>)
 800b064:	f043 0308 	orr.w	r3, r3, #8
 800b068:	6413      	str	r3, [r2, #64]	; 0x40
 800b06a:	4b10      	ldr	r3, [pc, #64]	; (800b0ac <HAL_TIM_Base_MspInit+0xcc>)
 800b06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06e:	f003 0308 	and.w	r3, r3, #8
 800b072:	613b      	str	r3, [r7, #16]
 800b074:	693b      	ldr	r3, [r7, #16]
}
 800b076:	e010      	b.n	800b09a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a0e      	ldr	r2, [pc, #56]	; (800b0b8 <HAL_TIM_Base_MspInit+0xd8>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d10b      	bne.n	800b09a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800b082:	4b0a      	ldr	r3, [pc, #40]	; (800b0ac <HAL_TIM_Base_MspInit+0xcc>)
 800b084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b086:	4a09      	ldr	r2, [pc, #36]	; (800b0ac <HAL_TIM_Base_MspInit+0xcc>)
 800b088:	f043 0302 	orr.w	r3, r3, #2
 800b08c:	6453      	str	r3, [r2, #68]	; 0x44
 800b08e:	4b07      	ldr	r3, [pc, #28]	; (800b0ac <HAL_TIM_Base_MspInit+0xcc>)
 800b090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b092:	f003 0302 	and.w	r3, r3, #2
 800b096:	60fb      	str	r3, [r7, #12]
 800b098:	68fb      	ldr	r3, [r7, #12]
}
 800b09a:	bf00      	nop
 800b09c:	3724      	adds	r7, #36	; 0x24
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	40010000 	.word	0x40010000
 800b0ac:	40023800 	.word	0x40023800
 800b0b0:	40000400 	.word	0x40000400
 800b0b4:	40000c00 	.word	0x40000c00
 800b0b8:	40010400 	.word	0x40010400

0800b0bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a0a      	ldr	r2, [pc, #40]	; (800b0f4 <HAL_TIM_PWM_MspInit+0x38>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d10b      	bne.n	800b0e6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800b0ce:	4b0a      	ldr	r3, [pc, #40]	; (800b0f8 <HAL_TIM_PWM_MspInit+0x3c>)
 800b0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d2:	4a09      	ldr	r2, [pc, #36]	; (800b0f8 <HAL_TIM_PWM_MspInit+0x3c>)
 800b0d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0d8:	6413      	str	r3, [r2, #64]	; 0x40
 800b0da:	4b07      	ldr	r3, [pc, #28]	; (800b0f8 <HAL_TIM_PWM_MspInit+0x3c>)
 800b0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0e2:	60fb      	str	r3, [r7, #12]
 800b0e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800b0e6:	bf00      	nop
 800b0e8:	3714      	adds	r7, #20
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	40001800 	.word	0x40001800
 800b0f8:	40023800 	.word	0x40023800

0800b0fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b08c      	sub	sp, #48	; 0x30
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b104:	f107 031c 	add.w	r3, r7, #28
 800b108:	2200      	movs	r2, #0
 800b10a:	601a      	str	r2, [r3, #0]
 800b10c:	605a      	str	r2, [r3, #4]
 800b10e:	609a      	str	r2, [r3, #8]
 800b110:	60da      	str	r2, [r3, #12]
 800b112:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a45      	ldr	r2, [pc, #276]	; (800b230 <HAL_TIM_MspPostInit+0x134>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d11d      	bne.n	800b15a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b11e:	4b45      	ldr	r3, [pc, #276]	; (800b234 <HAL_TIM_MspPostInit+0x138>)
 800b120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b122:	4a44      	ldr	r2, [pc, #272]	; (800b234 <HAL_TIM_MspPostInit+0x138>)
 800b124:	f043 0301 	orr.w	r3, r3, #1
 800b128:	6313      	str	r3, [r2, #48]	; 0x30
 800b12a:	4b42      	ldr	r3, [pc, #264]	; (800b234 <HAL_TIM_MspPostInit+0x138>)
 800b12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b12e:	f003 0301 	and.w	r3, r3, #1
 800b132:	61bb      	str	r3, [r7, #24]
 800b134:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800b136:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b13a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b13c:	2302      	movs	r3, #2
 800b13e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b140:	2300      	movs	r3, #0
 800b142:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b144:	2300      	movs	r3, #0
 800b146:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800b148:	2301      	movs	r3, #1
 800b14a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800b14c:	f107 031c 	add.w	r3, r7, #28
 800b150:	4619      	mov	r1, r3
 800b152:	4839      	ldr	r0, [pc, #228]	; (800b238 <HAL_TIM_MspPostInit+0x13c>)
 800b154:	f7f6 f8c4 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800b158:	e065      	b.n	800b226 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM2)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b162:	d11d      	bne.n	800b1a0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b164:	4b33      	ldr	r3, [pc, #204]	; (800b234 <HAL_TIM_MspPostInit+0x138>)
 800b166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b168:	4a32      	ldr	r2, [pc, #200]	; (800b234 <HAL_TIM_MspPostInit+0x138>)
 800b16a:	f043 0301 	orr.w	r3, r3, #1
 800b16e:	6313      	str	r3, [r2, #48]	; 0x30
 800b170:	4b30      	ldr	r3, [pc, #192]	; (800b234 <HAL_TIM_MspPostInit+0x138>)
 800b172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b174:	f003 0301 	and.w	r3, r3, #1
 800b178:	617b      	str	r3, [r7, #20]
 800b17a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800b17c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b182:	2302      	movs	r3, #2
 800b184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b186:	2300      	movs	r3, #0
 800b188:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b18a:	2300      	movs	r3, #0
 800b18c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b18e:	2301      	movs	r3, #1
 800b190:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800b192:	f107 031c 	add.w	r3, r7, #28
 800b196:	4619      	mov	r1, r3
 800b198:	4827      	ldr	r0, [pc, #156]	; (800b238 <HAL_TIM_MspPostInit+0x13c>)
 800b19a:	f7f6 f8a1 	bl	80012e0 <HAL_GPIO_Init>
}
 800b19e:	e042      	b.n	800b226 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a25      	ldr	r2, [pc, #148]	; (800b23c <HAL_TIM_MspPostInit+0x140>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d11c      	bne.n	800b1e4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800b1aa:	4b22      	ldr	r3, [pc, #136]	; (800b234 <HAL_TIM_MspPostInit+0x138>)
 800b1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ae:	4a21      	ldr	r2, [pc, #132]	; (800b234 <HAL_TIM_MspPostInit+0x138>)
 800b1b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1b4:	6313      	str	r3, [r2, #48]	; 0x30
 800b1b6:	4b1f      	ldr	r3, [pc, #124]	; (800b234 <HAL_TIM_MspPostInit+0x138>)
 800b1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1be:	613b      	str	r3, [r7, #16]
 800b1c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1c6:	2302      	movs	r3, #2
 800b1c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800b1d2:	2302      	movs	r3, #2
 800b1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800b1d6:	f107 031c 	add.w	r3, r7, #28
 800b1da:	4619      	mov	r1, r3
 800b1dc:	4818      	ldr	r0, [pc, #96]	; (800b240 <HAL_TIM_MspPostInit+0x144>)
 800b1de:	f7f6 f87f 	bl	80012e0 <HAL_GPIO_Init>
}
 800b1e2:	e020      	b.n	800b226 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM12)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a16      	ldr	r2, [pc, #88]	; (800b244 <HAL_TIM_MspPostInit+0x148>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d11b      	bne.n	800b226 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800b1ee:	4b11      	ldr	r3, [pc, #68]	; (800b234 <HAL_TIM_MspPostInit+0x138>)
 800b1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f2:	4a10      	ldr	r2, [pc, #64]	; (800b234 <HAL_TIM_MspPostInit+0x138>)
 800b1f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1f8:	6313      	str	r3, [r2, #48]	; 0x30
 800b1fa:	4b0e      	ldr	r3, [pc, #56]	; (800b234 <HAL_TIM_MspPostInit+0x138>)
 800b1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b202:	60fb      	str	r3, [r7, #12]
 800b204:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800b206:	2340      	movs	r3, #64	; 0x40
 800b208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b20a:	2302      	movs	r3, #2
 800b20c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b20e:	2300      	movs	r3, #0
 800b210:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b212:	2300      	movs	r3, #0
 800b214:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800b216:	2309      	movs	r3, #9
 800b218:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800b21a:	f107 031c 	add.w	r3, r7, #28
 800b21e:	4619      	mov	r1, r3
 800b220:	4809      	ldr	r0, [pc, #36]	; (800b248 <HAL_TIM_MspPostInit+0x14c>)
 800b222:	f7f6 f85d 	bl	80012e0 <HAL_GPIO_Init>
}
 800b226:	bf00      	nop
 800b228:	3730      	adds	r7, #48	; 0x30
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	40010000 	.word	0x40010000
 800b234:	40023800 	.word	0x40023800
 800b238:	40020000 	.word	0x40020000
 800b23c:	40000c00 	.word	0x40000c00
 800b240:	40022000 	.word	0x40022000
 800b244:	40001800 	.word	0x40001800
 800b248:	40021c00 	.word	0x40021c00

0800b24c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b08a      	sub	sp, #40	; 0x28
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b254:	f107 0314 	add.w	r3, r7, #20
 800b258:	2200      	movs	r2, #0
 800b25a:	601a      	str	r2, [r3, #0]
 800b25c:	605a      	str	r2, [r3, #4]
 800b25e:	609a      	str	r2, [r3, #8]
 800b260:	60da      	str	r2, [r3, #12]
 800b262:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a25      	ldr	r2, [pc, #148]	; (800b300 <HAL_UART_MspInit+0xb4>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d144      	bne.n	800b2f8 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b26e:	4b25      	ldr	r3, [pc, #148]	; (800b304 <HAL_UART_MspInit+0xb8>)
 800b270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b272:	4a24      	ldr	r2, [pc, #144]	; (800b304 <HAL_UART_MspInit+0xb8>)
 800b274:	f043 0310 	orr.w	r3, r3, #16
 800b278:	6453      	str	r3, [r2, #68]	; 0x44
 800b27a:	4b22      	ldr	r3, [pc, #136]	; (800b304 <HAL_UART_MspInit+0xb8>)
 800b27c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b27e:	f003 0310 	and.w	r3, r3, #16
 800b282:	613b      	str	r3, [r7, #16]
 800b284:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b286:	4b1f      	ldr	r3, [pc, #124]	; (800b304 <HAL_UART_MspInit+0xb8>)
 800b288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b28a:	4a1e      	ldr	r2, [pc, #120]	; (800b304 <HAL_UART_MspInit+0xb8>)
 800b28c:	f043 0302 	orr.w	r3, r3, #2
 800b290:	6313      	str	r3, [r2, #48]	; 0x30
 800b292:	4b1c      	ldr	r3, [pc, #112]	; (800b304 <HAL_UART_MspInit+0xb8>)
 800b294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b296:	f003 0302 	and.w	r3, r3, #2
 800b29a:	60fb      	str	r3, [r7, #12]
 800b29c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b29e:	4b19      	ldr	r3, [pc, #100]	; (800b304 <HAL_UART_MspInit+0xb8>)
 800b2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2a2:	4a18      	ldr	r2, [pc, #96]	; (800b304 <HAL_UART_MspInit+0xb8>)
 800b2a4:	f043 0301 	orr.w	r3, r3, #1
 800b2a8:	6313      	str	r3, [r2, #48]	; 0x30
 800b2aa:	4b16      	ldr	r3, [pc, #88]	; (800b304 <HAL_UART_MspInit+0xb8>)
 800b2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ae:	f003 0301 	and.w	r3, r3, #1
 800b2b2:	60bb      	str	r3, [r7, #8]
 800b2b4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800b2b6:	2380      	movs	r3, #128	; 0x80
 800b2b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2ba:	2302      	movs	r3, #2
 800b2bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b2c6:	2307      	movs	r3, #7
 800b2c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800b2ca:	f107 0314 	add.w	r3, r7, #20
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	480d      	ldr	r0, [pc, #52]	; (800b308 <HAL_UART_MspInit+0xbc>)
 800b2d2:	f7f6 f805 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800b2d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2dc:	2302      	movs	r3, #2
 800b2de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b2e8:	2307      	movs	r3, #7
 800b2ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800b2ec:	f107 0314 	add.w	r3, r7, #20
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	4806      	ldr	r0, [pc, #24]	; (800b30c <HAL_UART_MspInit+0xc0>)
 800b2f4:	f7f5 fff4 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b2f8:	bf00      	nop
 800b2fa:	3728      	adds	r7, #40	; 0x28
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	40011000 	.word	0x40011000
 800b304:	40023800 	.word	0x40023800
 800b308:	40020400 	.word	0x40020400
 800b30c:	40020000 	.word	0x40020000

0800b310 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800b310:	b580      	push	{r7, lr}
 800b312:	b086      	sub	sp, #24
 800b314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800b316:	1d3b      	adds	r3, r7, #4
 800b318:	2200      	movs	r2, #0
 800b31a:	601a      	str	r2, [r3, #0]
 800b31c:	605a      	str	r2, [r3, #4]
 800b31e:	609a      	str	r2, [r3, #8]
 800b320:	60da      	str	r2, [r3, #12]
 800b322:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800b324:	4b3a      	ldr	r3, [pc, #232]	; (800b410 <HAL_FMC_MspInit+0x100>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d16d      	bne.n	800b408 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800b32c:	4b38      	ldr	r3, [pc, #224]	; (800b410 <HAL_FMC_MspInit+0x100>)
 800b32e:	2201      	movs	r2, #1
 800b330:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800b332:	4b38      	ldr	r3, [pc, #224]	; (800b414 <HAL_FMC_MspInit+0x104>)
 800b334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b336:	4a37      	ldr	r2, [pc, #220]	; (800b414 <HAL_FMC_MspInit+0x104>)
 800b338:	f043 0301 	orr.w	r3, r3, #1
 800b33c:	6393      	str	r3, [r2, #56]	; 0x38
 800b33e:	4b35      	ldr	r3, [pc, #212]	; (800b414 <HAL_FMC_MspInit+0x104>)
 800b340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b342:	f003 0301 	and.w	r3, r3, #1
 800b346:	603b      	str	r3, [r7, #0]
 800b348:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800b34a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800b34e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b350:	2302      	movs	r3, #2
 800b352:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b354:	2300      	movs	r3, #0
 800b356:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b358:	2303      	movs	r3, #3
 800b35a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b35c:	230c      	movs	r3, #12
 800b35e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b360:	1d3b      	adds	r3, r7, #4
 800b362:	4619      	mov	r1, r3
 800b364:	482c      	ldr	r0, [pc, #176]	; (800b418 <HAL_FMC_MspInit+0x108>)
 800b366:	f7f5 ffbb 	bl	80012e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800b36a:	f248 1333 	movw	r3, #33075	; 0x8133
 800b36e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b370:	2302      	movs	r3, #2
 800b372:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b374:	2300      	movs	r3, #0
 800b376:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b378:	2303      	movs	r3, #3
 800b37a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b37c:	230c      	movs	r3, #12
 800b37e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b380:	1d3b      	adds	r3, r7, #4
 800b382:	4619      	mov	r1, r3
 800b384:	4825      	ldr	r0, [pc, #148]	; (800b41c <HAL_FMC_MspInit+0x10c>)
 800b386:	f7f5 ffab 	bl	80012e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800b38a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800b38e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b390:	2302      	movs	r3, #2
 800b392:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b394:	2300      	movs	r3, #0
 800b396:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b398:	2303      	movs	r3, #3
 800b39a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b39c:	230c      	movs	r3, #12
 800b39e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b3a0:	1d3b      	adds	r3, r7, #4
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	481e      	ldr	r0, [pc, #120]	; (800b420 <HAL_FMC_MspInit+0x110>)
 800b3a6:	f7f5 ff9b 	bl	80012e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800b3aa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800b3ae:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3b8:	2303      	movs	r3, #3
 800b3ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b3bc:	230c      	movs	r3, #12
 800b3be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b3c0:	1d3b      	adds	r3, r7, #4
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	4817      	ldr	r0, [pc, #92]	; (800b424 <HAL_FMC_MspInit+0x114>)
 800b3c6:	f7f5 ff8b 	bl	80012e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800b3ca:	2328      	movs	r3, #40	; 0x28
 800b3cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3ce:	2302      	movs	r3, #2
 800b3d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3d6:	2303      	movs	r3, #3
 800b3d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b3da:	230c      	movs	r3, #12
 800b3dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b3de:	1d3b      	adds	r3, r7, #4
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	4811      	ldr	r0, [pc, #68]	; (800b428 <HAL_FMC_MspInit+0x118>)
 800b3e4:	f7f5 ff7c 	bl	80012e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800b3e8:	2308      	movs	r3, #8
 800b3ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3ec:	2302      	movs	r3, #2
 800b3ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3f4:	2303      	movs	r3, #3
 800b3f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b3f8:	230c      	movs	r3, #12
 800b3fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800b3fc:	1d3b      	adds	r3, r7, #4
 800b3fe:	4619      	mov	r1, r3
 800b400:	480a      	ldr	r0, [pc, #40]	; (800b42c <HAL_FMC_MspInit+0x11c>)
 800b402:	f7f5 ff6d 	bl	80012e0 <HAL_GPIO_Init>
 800b406:	e000      	b.n	800b40a <HAL_FMC_MspInit+0xfa>
    return;
 800b408:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800b40a:	3718      	adds	r7, #24
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}
 800b410:	20000030 	.word	0x20000030
 800b414:	40023800 	.word	0x40023800
 800b418:	40021000 	.word	0x40021000
 800b41c:	40021800 	.word	0x40021800
 800b420:	40020c00 	.word	0x40020c00
 800b424:	40021400 	.word	0x40021400
 800b428:	40021c00 	.word	0x40021c00
 800b42c:	40020800 	.word	0x40020800

0800b430 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800b438:	f7ff ff6a 	bl	800b310 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800b43c:	bf00      	nop
 800b43e:	3708      	adds	r7, #8
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b08a      	sub	sp, #40	; 0x28
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a2b      	ldr	r2, [pc, #172]	; (800b500 <HAL_SAI_MspInit+0xbc>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d124      	bne.n	800b4a0 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800b456:	4b2b      	ldr	r3, [pc, #172]	; (800b504 <HAL_SAI_MspInit+0xc0>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d10b      	bne.n	800b476 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800b45e:	4b2a      	ldr	r3, [pc, #168]	; (800b508 <HAL_SAI_MspInit+0xc4>)
 800b460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b462:	4a29      	ldr	r2, [pc, #164]	; (800b508 <HAL_SAI_MspInit+0xc4>)
 800b464:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b468:	6453      	str	r3, [r2, #68]	; 0x44
 800b46a:	4b27      	ldr	r3, [pc, #156]	; (800b508 <HAL_SAI_MspInit+0xc4>)
 800b46c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b46e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b472:	613b      	str	r3, [r7, #16]
 800b474:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800b476:	4b23      	ldr	r3, [pc, #140]	; (800b504 <HAL_SAI_MspInit+0xc0>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	3301      	adds	r3, #1
 800b47c:	4a21      	ldr	r2, [pc, #132]	; (800b504 <HAL_SAI_MspInit+0xc0>)
 800b47e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800b480:	23f0      	movs	r3, #240	; 0xf0
 800b482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b484:	2302      	movs	r3, #2
 800b486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b488:	2300      	movs	r3, #0
 800b48a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b48c:	2300      	movs	r3, #0
 800b48e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800b490:	230a      	movs	r3, #10
 800b492:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b494:	f107 0314 	add.w	r3, r7, #20
 800b498:	4619      	mov	r1, r3
 800b49a:	481c      	ldr	r0, [pc, #112]	; (800b50c <HAL_SAI_MspInit+0xc8>)
 800b49c:	f7f5 ff20 	bl	80012e0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a1a      	ldr	r2, [pc, #104]	; (800b510 <HAL_SAI_MspInit+0xcc>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d125      	bne.n	800b4f6 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800b4aa:	4b16      	ldr	r3, [pc, #88]	; (800b504 <HAL_SAI_MspInit+0xc0>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d10b      	bne.n	800b4ca <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800b4b2:	4b15      	ldr	r3, [pc, #84]	; (800b508 <HAL_SAI_MspInit+0xc4>)
 800b4b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4b6:	4a14      	ldr	r2, [pc, #80]	; (800b508 <HAL_SAI_MspInit+0xc4>)
 800b4b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b4bc:	6453      	str	r3, [r2, #68]	; 0x44
 800b4be:	4b12      	ldr	r3, [pc, #72]	; (800b508 <HAL_SAI_MspInit+0xc4>)
 800b4c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4c6:	60fb      	str	r3, [r7, #12]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800b4ca:	4b0e      	ldr	r3, [pc, #56]	; (800b504 <HAL_SAI_MspInit+0xc0>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	4a0c      	ldr	r2, [pc, #48]	; (800b504 <HAL_SAI_MspInit+0xc0>)
 800b4d2:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800b4d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4da:	2302      	movs	r3, #2
 800b4dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800b4e6:	230a      	movs	r3, #10
 800b4e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800b4ea:	f107 0314 	add.w	r3, r7, #20
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	4808      	ldr	r0, [pc, #32]	; (800b514 <HAL_SAI_MspInit+0xd0>)
 800b4f2:	f7f5 fef5 	bl	80012e0 <HAL_GPIO_Init>

    }
}
 800b4f6:	bf00      	nop
 800b4f8:	3728      	adds	r7, #40	; 0x28
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	40015c04 	.word	0x40015c04
 800b504:	20000034 	.word	0x20000034
 800b508:	40023800 	.word	0x40023800
 800b50c:	40022000 	.word	0x40022000
 800b510:	40015c24 	.word	0x40015c24
 800b514:	40021800 	.word	0x40021800

0800b518 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b08c      	sub	sp, #48	; 0x30
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800b520:	2300      	movs	r3, #0
 800b522:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800b524:	2300      	movs	r3, #0
 800b526:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800b528:	2200      	movs	r2, #0
 800b52a:	6879      	ldr	r1, [r7, #4]
 800b52c:	2036      	movs	r0, #54	; 0x36
 800b52e:	f7f5 fb65 	bl	8000bfc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800b532:	2036      	movs	r0, #54	; 0x36
 800b534:	f7f5 fb7e 	bl	8000c34 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b538:	4b1f      	ldr	r3, [pc, #124]	; (800b5b8 <HAL_InitTick+0xa0>)
 800b53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b53c:	4a1e      	ldr	r2, [pc, #120]	; (800b5b8 <HAL_InitTick+0xa0>)
 800b53e:	f043 0310 	orr.w	r3, r3, #16
 800b542:	6413      	str	r3, [r2, #64]	; 0x40
 800b544:	4b1c      	ldr	r3, [pc, #112]	; (800b5b8 <HAL_InitTick+0xa0>)
 800b546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b548:	f003 0310 	and.w	r3, r3, #16
 800b54c:	60fb      	str	r3, [r7, #12]
 800b54e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b550:	f107 0210 	add.w	r2, r7, #16
 800b554:	f107 0314 	add.w	r3, r7, #20
 800b558:	4611      	mov	r1, r2
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7f8 fe5c 	bl	8004218 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b560:	f7f8 fe32 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 800b564:	4603      	mov	r3, r0
 800b566:	005b      	lsls	r3, r3, #1
 800b568:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800b56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56c:	4a13      	ldr	r2, [pc, #76]	; (800b5bc <HAL_InitTick+0xa4>)
 800b56e:	fba2 2303 	umull	r2, r3, r2, r3
 800b572:	0c9b      	lsrs	r3, r3, #18
 800b574:	3b01      	subs	r3, #1
 800b576:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b578:	4b11      	ldr	r3, [pc, #68]	; (800b5c0 <HAL_InitTick+0xa8>)
 800b57a:	4a12      	ldr	r2, [pc, #72]	; (800b5c4 <HAL_InitTick+0xac>)
 800b57c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800b57e:	4b10      	ldr	r3, [pc, #64]	; (800b5c0 <HAL_InitTick+0xa8>)
 800b580:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b584:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b586:	4a0e      	ldr	r2, [pc, #56]	; (800b5c0 <HAL_InitTick+0xa8>)
 800b588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b58c:	4b0c      	ldr	r3, [pc, #48]	; (800b5c0 <HAL_InitTick+0xa8>)
 800b58e:	2200      	movs	r2, #0
 800b590:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b592:	4b0b      	ldr	r3, [pc, #44]	; (800b5c0 <HAL_InitTick+0xa8>)
 800b594:	2200      	movs	r2, #0
 800b596:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800b598:	4809      	ldr	r0, [pc, #36]	; (800b5c0 <HAL_InitTick+0xa8>)
 800b59a:	f7fa faab 	bl	8005af4 <HAL_TIM_Base_Init>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d104      	bne.n	800b5ae <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800b5a4:	4806      	ldr	r0, [pc, #24]	; (800b5c0 <HAL_InitTick+0xa8>)
 800b5a6:	f7fa fad1 	bl	8005b4c <HAL_TIM_Base_Start_IT>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	e000      	b.n	800b5b0 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800b5ae:	2301      	movs	r3, #1
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3730      	adds	r7, #48	; 0x30
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	40023800 	.word	0x40023800
 800b5bc:	431bde83 	.word	0x431bde83
 800b5c0:	200007b0 	.word	0x200007b0
 800b5c4:	40001000 	.word	0x40001000

0800b5c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b5cc:	bf00      	nop
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr

0800b5d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b5d6:	b480      	push	{r7}
 800b5d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b5da:	e7fe      	b.n	800b5da <HardFault_Handler+0x4>

0800b5dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b5e0:	e7fe      	b.n	800b5e0 <MemManage_Handler+0x4>

0800b5e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b5e2:	b480      	push	{r7}
 800b5e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b5e6:	e7fe      	b.n	800b5e6 <BusFault_Handler+0x4>

0800b5e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b5ec:	e7fe      	b.n	800b5ec <UsageFault_Handler+0x4>

0800b5ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b5ee:	b480      	push	{r7}
 800b5f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b5f2:	bf00      	nop
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b600:	bf00      	nop
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr

0800b60a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b60a:	b480      	push	{r7}
 800b60c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b60e:	bf00      	nop
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800b61c:	2001      	movs	r0, #1
 800b61e:	f7f6 f823 	bl	8001668 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800b622:	bf00      	nop
 800b624:	bd80      	pop	{r7, pc}

0800b626 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800b62a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b62e:	f7f6 f81b 	bl	8001668 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800b632:	bf00      	nop
 800b634:	bd80      	pop	{r7, pc}
	...

0800b638 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b63c:	4802      	ldr	r0, [pc, #8]	; (800b648 <TIM6_DAC_IRQHandler+0x10>)
 800b63e:	f7fa fada 	bl	8005bf6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b642:	bf00      	nop
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	200007b0 	.word	0x200007b0

0800b64c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800b650:	4802      	ldr	r0, [pc, #8]	; (800b65c <OTG_FS_IRQHandler+0x10>)
 800b652:	f7f6 fa21 	bl	8001a98 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b656:	bf00      	nop
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	20000bbc 	.word	0x20000bbc

0800b660 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800b664:	4802      	ldr	r0, [pc, #8]	; (800b670 <LTDC_IRQHandler+0x10>)
 800b666:	f7f7 fdcf 	bl	8003208 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800b66a:	bf00      	nop
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	200003f8 	.word	0x200003f8

0800b674 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800b678:	4802      	ldr	r0, [pc, #8]	; (800b684 <DMA2D_IRQHandler+0x10>)
 800b67a:	f7f5 fc8f 	bl	8000f9c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800b67e:	bf00      	nop
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	20000628 	.word	0x20000628

0800b688 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b688:	b480      	push	{r7}
 800b68a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b68c:	4b15      	ldr	r3, [pc, #84]	; (800b6e4 <SystemInit+0x5c>)
 800b68e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b692:	4a14      	ldr	r2, [pc, #80]	; (800b6e4 <SystemInit+0x5c>)
 800b694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b69c:	4b12      	ldr	r3, [pc, #72]	; (800b6e8 <SystemInit+0x60>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a11      	ldr	r2, [pc, #68]	; (800b6e8 <SystemInit+0x60>)
 800b6a2:	f043 0301 	orr.w	r3, r3, #1
 800b6a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b6a8:	4b0f      	ldr	r3, [pc, #60]	; (800b6e8 <SystemInit+0x60>)
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b6ae:	4b0e      	ldr	r3, [pc, #56]	; (800b6e8 <SystemInit+0x60>)
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	490d      	ldr	r1, [pc, #52]	; (800b6e8 <SystemInit+0x60>)
 800b6b4:	4b0d      	ldr	r3, [pc, #52]	; (800b6ec <SystemInit+0x64>)
 800b6b6:	4013      	ands	r3, r2
 800b6b8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b6ba:	4b0b      	ldr	r3, [pc, #44]	; (800b6e8 <SystemInit+0x60>)
 800b6bc:	4a0c      	ldr	r2, [pc, #48]	; (800b6f0 <SystemInit+0x68>)
 800b6be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b6c0:	4b09      	ldr	r3, [pc, #36]	; (800b6e8 <SystemInit+0x60>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a08      	ldr	r2, [pc, #32]	; (800b6e8 <SystemInit+0x60>)
 800b6c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b6ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b6cc:	4b06      	ldr	r3, [pc, #24]	; (800b6e8 <SystemInit+0x60>)
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b6d2:	4b04      	ldr	r3, [pc, #16]	; (800b6e4 <SystemInit+0x5c>)
 800b6d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b6d8:	609a      	str	r2, [r3, #8]
#endif
}
 800b6da:	bf00      	nop
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr
 800b6e4:	e000ed00 	.word	0xe000ed00
 800b6e8:	40023800 	.word	0x40023800
 800b6ec:	fef6ffff 	.word	0xfef6ffff
 800b6f0:	24003010 	.word	0x24003010

0800b6f4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b6f8:	4802      	ldr	r0, [pc, #8]	; (800b704 <MX_USB_HOST_Process+0x10>)
 800b6fa:	f7fc fd2b 	bl	8008154 <USBH_Process>
}
 800b6fe:	bf00      	nop
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	200007f0 	.word	0x200007f0

0800b708 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b716:	4618      	mov	r0, r3
 800b718:	f7fc ffbe 	bl	8008698 <USBH_LL_IncTimer>
}
 800b71c:	bf00      	nop
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b732:	4618      	mov	r0, r3
 800b734:	f7fd f803 	bl	800873e <USBH_LL_Connect>
}
 800b738:	bf00      	nop
 800b73a:	3708      	adds	r7, #8
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b74e:	4618      	mov	r0, r3
 800b750:	f7fd f81b 	bl	800878a <USBH_LL_Disconnect>
}
 800b754:	bf00      	nop
 800b756:	3708      	adds	r7, #8
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	460b      	mov	r3, r1
 800b766:	70fb      	strb	r3, [r7, #3]
 800b768:	4613      	mov	r3, r2
 800b76a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b76c:	bf00      	nop
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b786:	4618      	mov	r0, r3
 800b788:	f7fc ffb0 	bl	80086ec <USBH_LL_PortEnabled>
} 
 800b78c:	bf00      	nop
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fc ffb0 	bl	8008708 <USBH_LL_PortDisabled>
} 
 800b7a8:	bf00      	nop
 800b7aa:	3708      	adds	r7, #8
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7f6 fa6c 	bl	8001ca4 <HAL_HCD_Start>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b7d0:	7bfb      	ldrb	r3, [r7, #15]
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f000 f8e0 	bl	800b998 <USBH_Get_USB_Status>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b7dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3710      	adds	r7, #16
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b084      	sub	sp, #16
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7f6 fa74 	bl	8001cea <HAL_HCD_Stop>
 800b802:	4603      	mov	r3, r0
 800b804:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b806:	7bfb      	ldrb	r3, [r7, #15]
 800b808:	4618      	mov	r0, r3
 800b80a:	f000 f8c5 	bl	800b998 <USBH_Get_USB_Status>
 800b80e:	4603      	mov	r3, r0
 800b810:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800b812:	7bbb      	ldrb	r3, [r7, #14]
}
 800b814:	4618      	mov	r0, r3
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b824:	2301      	movs	r3, #1
 800b826:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b82e:	4618      	mov	r0, r3
 800b830:	f7f6 fa9b 	bl	8001d6a <HAL_HCD_GetCurrentSpeed>
 800b834:	4603      	mov	r3, r0
 800b836:	2b01      	cmp	r3, #1
 800b838:	d007      	beq.n	800b84a <USBH_LL_GetSpeed+0x2e>
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d302      	bcc.n	800b844 <USBH_LL_GetSpeed+0x28>
 800b83e:	2b02      	cmp	r3, #2
 800b840:	d006      	beq.n	800b850 <USBH_LL_GetSpeed+0x34>
 800b842:	e008      	b.n	800b856 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b844:	2300      	movs	r3, #0
 800b846:	73fb      	strb	r3, [r7, #15]
    break;
 800b848:	e008      	b.n	800b85c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b84a:	2301      	movs	r3, #1
 800b84c:	73fb      	strb	r3, [r7, #15]
    break;
 800b84e:	e005      	b.n	800b85c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b850:	2302      	movs	r3, #2
 800b852:	73fb      	strb	r3, [r7, #15]
    break;
 800b854:	e002      	b.n	800b85c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800b856:	2301      	movs	r3, #1
 800b858:	73fb      	strb	r3, [r7, #15]
    break;
 800b85a:	bf00      	nop
  }
  return  speed;
 800b85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b084      	sub	sp, #16
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b86e:	2300      	movs	r3, #0
 800b870:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b872:	2300      	movs	r3, #0
 800b874:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7f6 fa51 	bl	8001d24 <HAL_HCD_ResetPort>
 800b882:	4603      	mov	r3, r0
 800b884:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800b886:	7bfb      	ldrb	r3, [r7, #15]
 800b888:	4618      	mov	r0, r3
 800b88a:	f000 f885 	bl	800b998 <USBH_Get_USB_Status>
 800b88e:	4603      	mov	r3, r0
 800b890:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b892:	7bbb      	ldrb	r3, [r7, #14]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3710      	adds	r7, #16
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b89c:	b590      	push	{r4, r7, lr}
 800b89e:	b089      	sub	sp, #36	; 0x24
 800b8a0:	af04      	add	r7, sp, #16
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	4608      	mov	r0, r1
 800b8a6:	4611      	mov	r1, r2
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	70fb      	strb	r3, [r7, #3]
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	70bb      	strb	r3, [r7, #2]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800b8c4:	787c      	ldrb	r4, [r7, #1]
 800b8c6:	78ba      	ldrb	r2, [r7, #2]
 800b8c8:	78f9      	ldrb	r1, [r7, #3]
 800b8ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b8cc:	9302      	str	r3, [sp, #8]
 800b8ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b8d2:	9301      	str	r3, [sp, #4]
 800b8d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	4623      	mov	r3, r4
 800b8dc:	f7f5 fedc 	bl	8001698 <HAL_HCD_HC_Init>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b8e4:	7bfb      	ldrb	r3, [r7, #15]
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f000 f856 	bl	800b998 <USBH_Get_USB_Status>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b8f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3714      	adds	r7, #20
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd90      	pop	{r4, r7, pc}

0800b8fa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b8fa:	b590      	push	{r4, r7, lr}
 800b8fc:	b089      	sub	sp, #36	; 0x24
 800b8fe:	af04      	add	r7, sp, #16
 800b900:	6078      	str	r0, [r7, #4]
 800b902:	4608      	mov	r0, r1
 800b904:	4611      	mov	r1, r2
 800b906:	461a      	mov	r2, r3
 800b908:	4603      	mov	r3, r0
 800b90a:	70fb      	strb	r3, [r7, #3]
 800b90c:	460b      	mov	r3, r1
 800b90e:	70bb      	strb	r3, [r7, #2]
 800b910:	4613      	mov	r3, r2
 800b912:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b914:	2300      	movs	r3, #0
 800b916:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b918:	2300      	movs	r3, #0
 800b91a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800b922:	787c      	ldrb	r4, [r7, #1]
 800b924:	78ba      	ldrb	r2, [r7, #2]
 800b926:	78f9      	ldrb	r1, [r7, #3]
 800b928:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b92c:	9303      	str	r3, [sp, #12]
 800b92e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b930:	9302      	str	r3, [sp, #8]
 800b932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b934:	9301      	str	r3, [sp, #4]
 800b936:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	4623      	mov	r3, r4
 800b93e:	f7f5 ff43 	bl	80017c8 <HAL_HCD_HC_SubmitRequest>
 800b942:	4603      	mov	r3, r0
 800b944:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b946:	7bfb      	ldrb	r3, [r7, #15]
 800b948:	4618      	mov	r0, r3
 800b94a:	f000 f825 	bl	800b998 <USBH_Get_USB_Status>
 800b94e:	4603      	mov	r3, r0
 800b950:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b952:	7bbb      	ldrb	r3, [r7, #14]
}
 800b954:	4618      	mov	r0, r3
 800b956:	3714      	adds	r7, #20
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd90      	pop	{r4, r7, pc}

0800b95c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	460b      	mov	r3, r1
 800b966:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b96e:	78fa      	ldrb	r2, [r7, #3]
 800b970:	4611      	mov	r1, r2
 800b972:	4618      	mov	r0, r3
 800b974:	f7f6 f9e4 	bl	8001d40 <HAL_HCD_HC_GetURBState>
 800b978:	4603      	mov	r3, r0
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3708      	adds	r7, #8
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b082      	sub	sp, #8
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f7f4 fdea 	bl	8000564 <HAL_Delay>
}
 800b990:	bf00      	nop
 800b992:	3708      	adds	r7, #8
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b998:	b480      	push	{r7}
 800b99a:	b085      	sub	sp, #20
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	4603      	mov	r3, r0
 800b9a0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b9a6:	79fb      	ldrb	r3, [r7, #7]
 800b9a8:	2b03      	cmp	r3, #3
 800b9aa:	d817      	bhi.n	800b9dc <USBH_Get_USB_Status+0x44>
 800b9ac:	a201      	add	r2, pc, #4	; (adr r2, 800b9b4 <USBH_Get_USB_Status+0x1c>)
 800b9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b2:	bf00      	nop
 800b9b4:	0800b9c5 	.word	0x0800b9c5
 800b9b8:	0800b9cb 	.word	0x0800b9cb
 800b9bc:	0800b9d1 	.word	0x0800b9d1
 800b9c0:	0800b9d7 	.word	0x0800b9d7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b9c8:	e00b      	b.n	800b9e2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b9ca:	2302      	movs	r3, #2
 800b9cc:	73fb      	strb	r3, [r7, #15]
    break;
 800b9ce:	e008      	b.n	800b9e2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	73fb      	strb	r3, [r7, #15]
    break;
 800b9d4:	e005      	b.n	800b9e2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b9d6:	2302      	movs	r3, #2
 800b9d8:	73fb      	strb	r3, [r7, #15]
    break;
 800b9da:	e002      	b.n	800b9e2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b9dc:	2302      	movs	r3, #2
 800b9de:	73fb      	strb	r3, [r7, #15]
    break;
 800b9e0:	bf00      	nop
  }
  return usb_status;
 800b9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3714      	adds	r7, #20
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b9f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ba28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b9f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b9f6:	e003      	b.n	800ba00 <LoopCopyDataInit>

0800b9f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b9f8:	4b0c      	ldr	r3, [pc, #48]	; (800ba2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b9fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b9fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b9fe:	3104      	adds	r1, #4

0800ba00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ba00:	480b      	ldr	r0, [pc, #44]	; (800ba30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ba02:	4b0c      	ldr	r3, [pc, #48]	; (800ba34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ba04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ba06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ba08:	d3f6      	bcc.n	800b9f8 <CopyDataInit>
  ldr  r2, =_sbss
 800ba0a:	4a0b      	ldr	r2, [pc, #44]	; (800ba38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ba0c:	e002      	b.n	800ba14 <LoopFillZerobss>

0800ba0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ba0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ba10:	f842 3b04 	str.w	r3, [r2], #4

0800ba14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ba14:	4b09      	ldr	r3, [pc, #36]	; (800ba3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ba16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ba18:	d3f9      	bcc.n	800ba0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800ba1a:	f7ff fe35 	bl	800b688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ba1e:	f000 f811 	bl	800ba44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ba22:	f7fd fc79 	bl	8009318 <main>
  bx  lr    
 800ba26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ba28:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800ba2c:	0800badc 	.word	0x0800badc
  ldr  r0, =_sdata
 800ba30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ba34:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 800ba38:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 800ba3c:	20000e80 	.word	0x20000e80

0800ba40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ba40:	e7fe      	b.n	800ba40 <ADC_IRQHandler>
	...

0800ba44 <__libc_init_array>:
 800ba44:	b570      	push	{r4, r5, r6, lr}
 800ba46:	4e0d      	ldr	r6, [pc, #52]	; (800ba7c <__libc_init_array+0x38>)
 800ba48:	4c0d      	ldr	r4, [pc, #52]	; (800ba80 <__libc_init_array+0x3c>)
 800ba4a:	1ba4      	subs	r4, r4, r6
 800ba4c:	10a4      	asrs	r4, r4, #2
 800ba4e:	2500      	movs	r5, #0
 800ba50:	42a5      	cmp	r5, r4
 800ba52:	d109      	bne.n	800ba68 <__libc_init_array+0x24>
 800ba54:	4e0b      	ldr	r6, [pc, #44]	; (800ba84 <__libc_init_array+0x40>)
 800ba56:	4c0c      	ldr	r4, [pc, #48]	; (800ba88 <__libc_init_array+0x44>)
 800ba58:	f000 f820 	bl	800ba9c <_init>
 800ba5c:	1ba4      	subs	r4, r4, r6
 800ba5e:	10a4      	asrs	r4, r4, #2
 800ba60:	2500      	movs	r5, #0
 800ba62:	42a5      	cmp	r5, r4
 800ba64:	d105      	bne.n	800ba72 <__libc_init_array+0x2e>
 800ba66:	bd70      	pop	{r4, r5, r6, pc}
 800ba68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba6c:	4798      	blx	r3
 800ba6e:	3501      	adds	r5, #1
 800ba70:	e7ee      	b.n	800ba50 <__libc_init_array+0xc>
 800ba72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba76:	4798      	blx	r3
 800ba78:	3501      	adds	r5, #1
 800ba7a:	e7f2      	b.n	800ba62 <__libc_init_array+0x1e>
 800ba7c:	0800bad4 	.word	0x0800bad4
 800ba80:	0800bad4 	.word	0x0800bad4
 800ba84:	0800bad4 	.word	0x0800bad4
 800ba88:	0800bad8 	.word	0x0800bad8

0800ba8c <memset>:
 800ba8c:	4402      	add	r2, r0
 800ba8e:	4603      	mov	r3, r0
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d100      	bne.n	800ba96 <memset+0xa>
 800ba94:	4770      	bx	lr
 800ba96:	f803 1b01 	strb.w	r1, [r3], #1
 800ba9a:	e7f9      	b.n	800ba90 <memset+0x4>

0800ba9c <_init>:
 800ba9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba9e:	bf00      	nop
 800baa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baa2:	bc08      	pop	{r3}
 800baa4:	469e      	mov	lr, r3
 800baa6:	4770      	bx	lr

0800baa8 <_fini>:
 800baa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baaa:	bf00      	nop
 800baac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baae:	bc08      	pop	{r3}
 800bab0:	469e      	mov	lr, r3
 800bab2:	4770      	bx	lr
