
reaction_game_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3f0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001af0  0800c5b8  0800c5b8  0001c5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0a8  0800e0a8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0a8  0800e0a8  0001e0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0b0  0800e0b0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0b0  0800e0b0  0001e0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0b4  0800e0b4  0001e0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800e0b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010cc  20000010  0800e0c8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010dc  0800e0c8  000210dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f998  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000053e9  00000000  00000000  0004f9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002640  00000000  00000000  00054dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000023e0  00000000  00000000  00057408  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000943d  00000000  00000000  000597e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000251fb  00000000  00000000  00062c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011f98c  00000000  00000000  00087e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a77ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a440  00000000  00000000  001a7828  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800c5a0 	.word	0x0800c5a0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	0800c5a0 	.word	0x0800c5a0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800050c:	4b31      	ldr	r3, [pc, #196]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800050e:	2228      	movs	r2, #40	; 0x28
 8000510:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8000512:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000514:	2209      	movs	r2, #9
 8000516:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8000518:	4b2e      	ldr	r3, [pc, #184]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800051a:	2235      	movs	r2, #53	; 0x35
 800051c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000520:	220b      	movs	r2, #11
 8000522:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8000524:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000526:	f240 121b 	movw	r2, #283	; 0x11b
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800052c:	4b29      	ldr	r3, [pc, #164]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800052e:	f240 2215 	movw	r2, #533	; 0x215
 8000532:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8000534:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000536:	f240 121d 	movw	r2, #285	; 0x11d
 800053a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800053e:	f240 2235 	movw	r2, #565	; 0x235
 8000542:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8000544:	2100      	movs	r1, #0
 8000546:	4823      	ldr	r0, [pc, #140]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000548:	f000 fb9a 	bl	8000c80 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800054c:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800054e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000552:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000556:	f44f 7288 	mov.w	r2, #272	; 0x110
 800055a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800055c:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800055e:	2200      	movs	r2, #0
 8000560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8000564:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000566:	2200      	movs	r2, #0
 8000568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800056e:	2200      	movs	r2, #0
 8000570:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000576:	2200      	movs	r2, #0
 8000578:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800057a:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800058e:	4a12      	ldr	r2, [pc, #72]	; (80005d8 <BSP_LCD_Init+0xd0>)
 8000590:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8000592:	4810      	ldr	r0, [pc, #64]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000594:	f003 fd68 	bl	8004068 <HAL_LTDC_GetState>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d103      	bne.n	80005a6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800059e:	2100      	movs	r1, #0
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <BSP_LCD_Init+0xcc>)
 80005a2:	f000 fa93 	bl	8000acc <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80005a6:	480b      	ldr	r0, [pc, #44]	; (80005d4 <BSP_LCD_Init+0xcc>)
 80005a8:	f003 fb8e 	bl	8003cc8 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b2:	480a      	ldr	r0, [pc, #40]	; (80005dc <BSP_LCD_Init+0xd4>)
 80005b4:	f001 fe6e 	bl	8002294 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2108      	movs	r1, #8
 80005bc:	4808      	ldr	r0, [pc, #32]	; (80005e0 <BSP_LCD_Init+0xd8>)
 80005be:	f001 fe69 	bl	8002294 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80005c2:	f000 fc7d 	bl	8000ec0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80005c6:	4807      	ldr	r0, [pc, #28]	; (80005e4 <BSP_LCD_Init+0xdc>)
 80005c8:	f000 f8c0 	bl	800074c <BSP_LCD_SetFont>
  
  return LCD_OK;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200001ac 	.word	0x200001ac
 80005d8:	40016800 	.word	0x40016800
 80005dc:	40022000 	.word	0x40022000
 80005e0:	40022800 	.word	0x40022800
 80005e4:	20000000 	.word	0x20000000

080005e8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <BSP_LCD_GetXSize+0x20>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <BSP_LCD_GetXSize+0x24>)
 80005f2:	2134      	movs	r1, #52	; 0x34
 80005f4:	fb01 f303 	mul.w	r3, r1, r3
 80005f8:	4413      	add	r3, r2
 80005fa:	3360      	adds	r3, #96	; 0x60
 80005fc:	681b      	ldr	r3, [r3, #0]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	2000006c 	.word	0x2000006c
 800060c:	200001ac 	.word	0x200001ac

08000610 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <BSP_LCD_GetYSize+0x20>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a06      	ldr	r2, [pc, #24]	; (8000634 <BSP_LCD_GetYSize+0x24>)
 800061a:	2134      	movs	r1, #52	; 0x34
 800061c:	fb01 f303 	mul.w	r3, r1, r3
 8000620:	4413      	add	r3, r2
 8000622:	3364      	adds	r3, #100	; 0x64
 8000624:	681b      	ldr	r3, [r3, #0]
}
 8000626:	4618      	mov	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	2000006c 	.word	0x2000006c
 8000634:	200001ac 	.word	0x200001ac

08000638 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8000638:	b580      	push	{r7, lr}
 800063a:	b090      	sub	sp, #64	; 0x40
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	6039      	str	r1, [r7, #0]
 8000642:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8000648:	f7ff ffce 	bl	80005e8 <BSP_LCD_GetXSize>
 800064c:	4603      	mov	r3, r0
 800064e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000654:	f7ff ffdc 	bl	8000610 <BSP_LCD_GetYSize>
 8000658:	4603      	mov	r3, r0
 800065a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8000664:	23ff      	movs	r3, #255	; 0xff
 8000666:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800067e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000684:	2307      	movs	r3, #7
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8000688:	f7ff ffae 	bl	80005e8 <BSP_LCD_GetXSize>
 800068c:	4603      	mov	r3, r0
 800068e:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8000690:	f7ff ffbe 	bl	8000610 <BSP_LCD_GetYSize>
 8000694:	4603      	mov	r3, r0
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000698:	88fa      	ldrh	r2, [r7, #6]
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	4619      	mov	r1, r3
 80006a0:	4812      	ldr	r0, [pc, #72]	; (80006ec <BSP_LCD_LayerDefaultInit+0xb4>)
 80006a2:	f003 fca3 	bl	8003fec <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80006a6:	88fa      	ldrh	r2, [r7, #6]
 80006a8:	4911      	ldr	r1, [pc, #68]	; (80006f0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80006aa:	4613      	mov	r3, r2
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	4413      	add	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	440b      	add	r3, r1
 80006b4:	3304      	adds	r3, #4
 80006b6:	f04f 32ff 	mov.w	r2, #4294967295
 80006ba:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80006bc:	88fa      	ldrh	r2, [r7, #6]
 80006be:	490c      	ldr	r1, [pc, #48]	; (80006f0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80006c0:	4613      	mov	r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	4413      	add	r3, r2
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	440b      	add	r3, r1
 80006ca:	3308      	adds	r3, #8
 80006cc:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80006ce:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80006d0:	88fa      	ldrh	r2, [r7, #6]
 80006d2:	4907      	ldr	r1, [pc, #28]	; (80006f0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80006d4:	4613      	mov	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	4413      	add	r3, r2
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	440b      	add	r3, r1
 80006de:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80006e2:	601a      	str	r2, [r3, #0]
}
 80006e4:	bf00      	nop
 80006e6:	3740      	adds	r7, #64	; 0x40
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200001ac 	.word	0x200001ac
 80006f0:	20000070 	.word	0x20000070
 80006f4:	20000000 	.word	0x20000000

080006f8 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <BSP_LCD_SelectLayer+0x1c>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6013      	str	r3, [r2, #0]
} 
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	2000006c 	.word	0x2000006c

08000718 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <BSP_LCD_SetBackColor+0x2c>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4908      	ldr	r1, [pc, #32]	; (8000748 <BSP_LCD_SetBackColor+0x30>)
 8000726:	4613      	mov	r3, r2
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4413      	add	r3, r2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	440b      	add	r3, r1
 8000730:	3304      	adds	r3, #4
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	601a      	str	r2, [r3, #0]
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	2000006c 	.word	0x2000006c
 8000748:	20000070 	.word	0x20000070

0800074c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <BSP_LCD_SetFont+0x2c>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	4908      	ldr	r1, [pc, #32]	; (800077c <BSP_LCD_SetFont+0x30>)
 800075a:	4613      	mov	r3, r2
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	4413      	add	r3, r2
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	440b      	add	r3, r1
 8000764:	3308      	adds	r3, #8
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	601a      	str	r2, [r3, #0]
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	2000006c 	.word	0x2000006c
 800077c:	20000070 	.word	0x20000070

08000780 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <BSP_LCD_GetFont+0x24>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4907      	ldr	r1, [pc, #28]	; (80007a8 <BSP_LCD_GetFont+0x28>)
 800078a:	4613      	mov	r3, r2
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	4413      	add	r3, r2
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	440b      	add	r3, r1
 8000794:	3308      	adds	r3, #8
 8000796:	681b      	ldr	r3, [r3, #0]
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	2000006c 	.word	0x2000006c
 80007a8:	20000070 	.word	0x20000070

080007ac <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80007ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af02      	add	r7, sp, #8
 80007b2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <BSP_LCD_Clear+0x48>)
 80007b6:	681c      	ldr	r4, [r3, #0]
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <BSP_LCD_Clear+0x48>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <BSP_LCD_Clear+0x4c>)
 80007be:	2134      	movs	r1, #52	; 0x34
 80007c0:	fb01 f303 	mul.w	r3, r1, r3
 80007c4:	4413      	add	r3, r2
 80007c6:	335c      	adds	r3, #92	; 0x5c
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	461d      	mov	r5, r3
 80007cc:	f7ff ff0c 	bl	80005e8 <BSP_LCD_GetXSize>
 80007d0:	4606      	mov	r6, r0
 80007d2:	f7ff ff1d 	bl	8000610 <BSP_LCD_GetYSize>
 80007d6:	4602      	mov	r2, r0
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	9301      	str	r3, [sp, #4]
 80007dc:	2300      	movs	r3, #0
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	4613      	mov	r3, r2
 80007e2:	4632      	mov	r2, r6
 80007e4:	4629      	mov	r1, r5
 80007e6:	4620      	mov	r0, r4
 80007e8:	f000 fb1e 	bl	8000e28 <LL_FillBuffer>
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007f4:	2000006c 	.word	0x2000006c
 80007f8:	200001ac 	.word	0x200001ac

080007fc <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	80fb      	strh	r3, [r7, #6]
 8000806:	460b      	mov	r3, r1
 8000808:	80bb      	strh	r3, [r7, #4]
 800080a:	4613      	mov	r3, r2
 800080c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800080e:	4b1b      	ldr	r3, [pc, #108]	; (800087c <BSP_LCD_DisplayChar+0x80>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	491b      	ldr	r1, [pc, #108]	; (8000880 <BSP_LCD_DisplayChar+0x84>)
 8000814:	4613      	mov	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	440b      	add	r3, r1
 800081e:	3308      	adds	r3, #8
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	6819      	ldr	r1, [r3, #0]
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <BSP_LCD_DisplayChar+0x80>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	4c14      	ldr	r4, [pc, #80]	; (8000880 <BSP_LCD_DisplayChar+0x84>)
 8000830:	4613      	mov	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	4413      	add	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4423      	add	r3, r4
 800083a:	3308      	adds	r3, #8
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000840:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <BSP_LCD_DisplayChar+0x80>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4c0d      	ldr	r4, [pc, #52]	; (8000880 <BSP_LCD_DisplayChar+0x84>)
 800084a:	4613      	mov	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	4413      	add	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4423      	add	r3, r4
 8000854:	3308      	adds	r3, #8
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	889b      	ldrh	r3, [r3, #4]
 800085a:	3307      	adds	r3, #7
 800085c:	2b00      	cmp	r3, #0
 800085e:	da00      	bge.n	8000862 <BSP_LCD_DisplayChar+0x66>
 8000860:	3307      	adds	r3, #7
 8000862:	10db      	asrs	r3, r3, #3
 8000864:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000868:	18ca      	adds	r2, r1, r3
 800086a:	88b9      	ldrh	r1, [r7, #4]
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	4618      	mov	r0, r3
 8000870:	f000 fa22 	bl	8000cb8 <DrawChar>
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bd90      	pop	{r4, r7, pc}
 800087c:	2000006c 	.word	0x2000006c
 8000880:	20000070 	.word	0x20000070

08000884 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000884:	b5b0      	push	{r4, r5, r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0
 800088a:	60ba      	str	r2, [r7, #8]
 800088c:	461a      	mov	r2, r3
 800088e:	4603      	mov	r3, r0
 8000890:	81fb      	strh	r3, [r7, #14]
 8000892:	460b      	mov	r3, r1
 8000894:	81bb      	strh	r3, [r7, #12]
 8000896:	4613      	mov	r3, r2
 8000898:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800089a:	2301      	movs	r3, #1
 800089c:	83fb      	strh	r3, [r7, #30]
 800089e:	2300      	movs	r3, #0
 80008a0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80008ae:	e002      	b.n	80008b6 <BSP_LCD_DisplayStringAt+0x32>
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	3301      	adds	r3, #1
 80008b4:	61bb      	str	r3, [r7, #24]
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	1c5a      	adds	r2, r3, #1
 80008ba:	617a      	str	r2, [r7, #20]
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1f6      	bne.n	80008b0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80008c2:	f7ff fe91 	bl	80005e8 <BSP_LCD_GetXSize>
 80008c6:	4b4f      	ldr	r3, [pc, #316]	; (8000a04 <BSP_LCD_DisplayStringAt+0x180>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	494f      	ldr	r1, [pc, #316]	; (8000a08 <BSP_LCD_DisplayStringAt+0x184>)
 80008cc:	4613      	mov	r3, r2
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	4413      	add	r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	440b      	add	r3, r1
 80008d6:	3308      	adds	r3, #8
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	889b      	ldrh	r3, [r3, #4]
 80008dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80008e0:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d01c      	beq.n	8000922 <BSP_LCD_DisplayStringAt+0x9e>
 80008e8:	2b03      	cmp	r3, #3
 80008ea:	d017      	beq.n	800091c <BSP_LCD_DisplayStringAt+0x98>
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d12e      	bne.n	800094e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	69bb      	ldr	r3, [r7, #24]
 80008f4:	1ad1      	subs	r1, r2, r3
 80008f6:	4b43      	ldr	r3, [pc, #268]	; (8000a04 <BSP_LCD_DisplayStringAt+0x180>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	4843      	ldr	r0, [pc, #268]	; (8000a08 <BSP_LCD_DisplayStringAt+0x184>)
 80008fc:	4613      	mov	r3, r2
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	4413      	add	r3, r2
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	4403      	add	r3, r0
 8000906:	3308      	adds	r3, #8
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	889b      	ldrh	r3, [r3, #4]
 800090c:	fb03 f301 	mul.w	r3, r3, r1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	b29a      	uxth	r2, r3
 8000914:	89fb      	ldrh	r3, [r7, #14]
 8000916:	4413      	add	r3, r2
 8000918:	83fb      	strh	r3, [r7, #30]
      break;
 800091a:	e01b      	b.n	8000954 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 800091c:	89fb      	ldrh	r3, [r7, #14]
 800091e:	83fb      	strh	r3, [r7, #30]
      break;
 8000920:	e018      	b.n	8000954 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	b299      	uxth	r1, r3
 800092a:	4b36      	ldr	r3, [pc, #216]	; (8000a04 <BSP_LCD_DisplayStringAt+0x180>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	4836      	ldr	r0, [pc, #216]	; (8000a08 <BSP_LCD_DisplayStringAt+0x184>)
 8000930:	4613      	mov	r3, r2
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	4413      	add	r3, r2
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	4403      	add	r3, r0
 800093a:	3308      	adds	r3, #8
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	889b      	ldrh	r3, [r3, #4]
 8000940:	fb11 f303 	smulbb	r3, r1, r3
 8000944:	b29a      	uxth	r2, r3
 8000946:	89fb      	ldrh	r3, [r7, #14]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	83fb      	strh	r3, [r7, #30]
      break;
 800094c:	e002      	b.n	8000954 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 800094e:	89fb      	ldrh	r3, [r7, #14]
 8000950:	83fb      	strh	r3, [r7, #30]
      break;
 8000952:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8000954:	8bfb      	ldrh	r3, [r7, #30]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d003      	beq.n	8000962 <BSP_LCD_DisplayStringAt+0xde>
 800095a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800095e:	2b00      	cmp	r3, #0
 8000960:	da1d      	bge.n	800099e <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8000962:	2301      	movs	r3, #1
 8000964:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000966:	e01a      	b.n	800099e <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	781a      	ldrb	r2, [r3, #0]
 800096c:	89b9      	ldrh	r1, [r7, #12]
 800096e:	8bfb      	ldrh	r3, [r7, #30]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff43 	bl	80007fc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8000976:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <BSP_LCD_DisplayStringAt+0x180>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	4923      	ldr	r1, [pc, #140]	; (8000a08 <BSP_LCD_DisplayStringAt+0x184>)
 800097c:	4613      	mov	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4413      	add	r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	440b      	add	r3, r1
 8000986:	3308      	adds	r3, #8
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	889a      	ldrh	r2, [r3, #4]
 800098c:	8bfb      	ldrh	r3, [r7, #30]
 800098e:	4413      	add	r3, r2
 8000990:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	3301      	adds	r3, #1
 8000996:	60bb      	str	r3, [r7, #8]
    i++;
 8000998:	8bbb      	ldrh	r3, [r7, #28]
 800099a:	3301      	adds	r3, #1
 800099c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	bf14      	ite	ne
 80009a6:	2301      	movne	r3, #1
 80009a8:	2300      	moveq	r3, #0
 80009aa:	b2dc      	uxtb	r4, r3
 80009ac:	f7ff fe1c 	bl	80005e8 <BSP_LCD_GetXSize>
 80009b0:	4605      	mov	r5, r0
 80009b2:	8bb9      	ldrh	r1, [r7, #28]
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <BSP_LCD_DisplayStringAt+0x180>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4813      	ldr	r0, [pc, #76]	; (8000a08 <BSP_LCD_DisplayStringAt+0x184>)
 80009ba:	4613      	mov	r3, r2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	4413      	add	r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	4403      	add	r3, r0
 80009c4:	3308      	adds	r3, #8
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	889b      	ldrh	r3, [r3, #4]
 80009ca:	fb03 f301 	mul.w	r3, r3, r1
 80009ce:	1aeb      	subs	r3, r5, r3
 80009d0:	b299      	uxth	r1, r3
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <BSP_LCD_DisplayStringAt+0x180>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	480c      	ldr	r0, [pc, #48]	; (8000a08 <BSP_LCD_DisplayStringAt+0x184>)
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	4403      	add	r3, r0
 80009e2:	3308      	adds	r3, #8
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	889b      	ldrh	r3, [r3, #4]
 80009e8:	4299      	cmp	r1, r3
 80009ea:	bf2c      	ite	cs
 80009ec:	2301      	movcs	r3, #1
 80009ee:	2300      	movcc	r3, #0
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	4023      	ands	r3, r4
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d1b6      	bne.n	8000968 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 80009fa:	bf00      	nop
 80009fc:	3720      	adds	r7, #32
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bdb0      	pop	{r4, r5, r7, pc}
 8000a02:	bf00      	nop
 8000a04:	2000006c 	.word	0x2000006c
 8000a08:	20000070 	.word	0x20000070

08000a0c <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	6039      	str	r1, [r7, #0]
 8000a16:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8000a18:	f7ff feb2 	bl	8000780 <BSP_LCD_GetFont>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	88db      	ldrh	r3, [r3, #6]
 8000a20:	88fa      	ldrh	r2, [r7, #6]
 8000a22:	fb12 f303 	smulbb	r3, r2, r3
 8000a26:	b299      	uxth	r1, r3
 8000a28:	2303      	movs	r3, #3
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff ff29 	bl	8000884 <BSP_LCD_DisplayStringAt>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8000a3c:	b5b0      	push	{r4, r5, r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	603a      	str	r2, [r7, #0]
 8000a46:	80fb      	strh	r3, [r7, #6]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <BSP_LCD_DrawPixel+0x88>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a1d      	ldr	r2, [pc, #116]	; (8000ac8 <BSP_LCD_DrawPixel+0x8c>)
 8000a52:	2134      	movs	r1, #52	; 0x34
 8000a54:	fb01 f303 	mul.w	r3, r1, r3
 8000a58:	4413      	add	r3, r2
 8000a5a:	3348      	adds	r3, #72	; 0x48
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d116      	bne.n	8000a90 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <BSP_LCD_DrawPixel+0x88>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a18      	ldr	r2, [pc, #96]	; (8000ac8 <BSP_LCD_DrawPixel+0x8c>)
 8000a68:	2134      	movs	r1, #52	; 0x34
 8000a6a:	fb01 f303 	mul.w	r3, r1, r3
 8000a6e:	4413      	add	r3, r2
 8000a70:	335c      	adds	r3, #92	; 0x5c
 8000a72:	681c      	ldr	r4, [r3, #0]
 8000a74:	88bd      	ldrh	r5, [r7, #4]
 8000a76:	f7ff fdb7 	bl	80005e8 <BSP_LCD_GetXSize>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	fb03 f205 	mul.w	r2, r3, r5
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	4413      	add	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	4423      	add	r3, r4
 8000a88:	683a      	ldr	r2, [r7, #0]
 8000a8a:	b292      	uxth	r2, r2
 8000a8c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8000a8e:	e015      	b.n	8000abc <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <BSP_LCD_DrawPixel+0x88>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0c      	ldr	r2, [pc, #48]	; (8000ac8 <BSP_LCD_DrawPixel+0x8c>)
 8000a96:	2134      	movs	r1, #52	; 0x34
 8000a98:	fb01 f303 	mul.w	r3, r1, r3
 8000a9c:	4413      	add	r3, r2
 8000a9e:	335c      	adds	r3, #92	; 0x5c
 8000aa0:	681c      	ldr	r4, [r3, #0]
 8000aa2:	88bd      	ldrh	r5, [r7, #4]
 8000aa4:	f7ff fda0 	bl	80005e8 <BSP_LCD_GetXSize>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	fb03 f205 	mul.w	r2, r3, r5
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4423      	add	r3, r4
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	6013      	str	r3, [r2, #0]
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ac4:	2000006c 	.word	0x2000006c
 8000ac8:	200001ac 	.word	0x200001ac

08000acc <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b090      	sub	sp, #64	; 0x40
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000ad6:	4b64      	ldr	r3, [pc, #400]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	4a63      	ldr	r2, [pc, #396]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000adc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae2:	4b61      	ldr	r3, [pc, #388]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000aee:	4b5e      	ldr	r3, [pc, #376]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a5d      	ldr	r2, [pc, #372]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000af4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b5b      	ldr	r3, [pc, #364]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b06:	4b58      	ldr	r3, [pc, #352]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a57      	ldr	r2, [pc, #348]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000b0c:	f043 0310 	orr.w	r3, r3, #16
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b55      	ldr	r3, [pc, #340]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0310 	and.w	r3, r3, #16
 8000b1a:	623b      	str	r3, [r7, #32]
 8000b1c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b1e:	4b52      	ldr	r3, [pc, #328]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a51      	ldr	r2, [pc, #324]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b4f      	ldr	r3, [pc, #316]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b32:	61fb      	str	r3, [r7, #28]
 8000b34:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b36:	4b4c      	ldr	r3, [pc, #304]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a4b      	ldr	r2, [pc, #300]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b49      	ldr	r3, [pc, #292]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b4a:	61bb      	str	r3, [r7, #24]
 8000b4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b4e:	4b46      	ldr	r3, [pc, #280]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a45      	ldr	r2, [pc, #276]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000b54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b43      	ldr	r3, [pc, #268]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b66:	4b40      	ldr	r3, [pc, #256]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a3f      	ldr	r2, [pc, #252]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000b6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b3d      	ldr	r3, [pc, #244]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8000b7e:	4b3a      	ldr	r3, [pc, #232]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a39      	ldr	r2, [pc, #228]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b37      	ldr	r3, [pc, #220]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8000b96:	4b34      	ldr	r3, [pc, #208]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a33      	ldr	r2, [pc, #204]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000b9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b31      	ldr	r3, [pc, #196]	; (8000c68 <BSP_LCD_MspInit+0x19c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8000bae:	2310      	movs	r3, #16
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8000bbe:	230e      	movs	r3, #14
 8000bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4828      	ldr	r0, [pc, #160]	; (8000c6c <BSP_LCD_MspInit+0x1a0>)
 8000bca:	f001 f9b9 	bl	8001f40 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8000bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8000bd8:	2309      	movs	r3, #9
 8000bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000bdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be0:	4619      	mov	r1, r3
 8000be2:	4823      	ldr	r0, [pc, #140]	; (8000c70 <BSP_LCD_MspInit+0x1a4>)
 8000be4:	f001 f9ac 	bl	8001f40 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8000be8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000bf2:	230e      	movs	r3, #14
 8000bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000bf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481d      	ldr	r0, [pc, #116]	; (8000c74 <BSP_LCD_MspInit+0x1a8>)
 8000bfe:	f001 f99f 	bl	8001f40 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8000c02:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000c0c:	230e      	movs	r3, #14
 8000c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8000c10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c14:	4619      	mov	r1, r3
 8000c16:	4818      	ldr	r0, [pc, #96]	; (8000c78 <BSP_LCD_MspInit+0x1ac>)
 8000c18:	f001 f992 	bl	8001f40 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8000c1c:	23f7      	movs	r3, #247	; 0xf7
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000c24:	230e      	movs	r3, #14
 8000c26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8000c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4813      	ldr	r0, [pc, #76]	; (8000c7c <BSP_LCD_MspInit+0x1b0>)
 8000c30:	f001 f986 	bl	8001f40 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8000c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8000c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c42:	4619      	mov	r1, r3
 8000c44:	480b      	ldr	r0, [pc, #44]	; (8000c74 <BSP_LCD_MspInit+0x1a8>)
 8000c46:	f001 f97b 	bl	8001f40 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8000c4a:	2308      	movs	r3, #8
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8000c52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c56:	4619      	mov	r1, r3
 8000c58:	4808      	ldr	r0, [pc, #32]	; (8000c7c <BSP_LCD_MspInit+0x1b0>)
 8000c5a:	f001 f971 	bl	8001f40 <HAL_GPIO_Init>
}
 8000c5e:	bf00      	nop
 8000c60:	3740      	adds	r7, #64	; 0x40
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40021800 	.word	0x40021800
 8000c74:	40022000 	.word	0x40022000
 8000c78:	40022400 	.word	0x40022400
 8000c7c:	40022800 	.word	0x40022800

08000c80 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <BSP_LCD_ClockConfig+0x34>)
 8000c8c:	2208      	movs	r2, #8
 8000c8e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <BSP_LCD_ClockConfig+0x34>)
 8000c92:	22c0      	movs	r2, #192	; 0xc0
 8000c94:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <BSP_LCD_ClockConfig+0x34>)
 8000c98:	2205      	movs	r2, #5
 8000c9a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <BSP_LCD_ClockConfig+0x34>)
 8000c9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8000ca4:	4803      	ldr	r0, [pc, #12]	; (8000cb4 <BSP_LCD_ClockConfig+0x34>)
 8000ca6:	f004 f927 	bl	8004ef8 <HAL_RCCEx_PeriphCLKConfig>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000088 	.word	0x20000088

08000cb8 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	603a      	str	r2, [r7, #0]
 8000cc2:	80fb      	strh	r3, [r7, #6]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8000cd0:	4b53      	ldr	r3, [pc, #332]	; (8000e20 <DrawChar+0x168>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4953      	ldr	r1, [pc, #332]	; (8000e24 <DrawChar+0x16c>)
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	4413      	add	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	440b      	add	r3, r1
 8000ce0:	3308      	adds	r3, #8
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	88db      	ldrh	r3, [r3, #6]
 8000ce6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8000ce8:	4b4d      	ldr	r3, [pc, #308]	; (8000e20 <DrawChar+0x168>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	494d      	ldr	r1, [pc, #308]	; (8000e24 <DrawChar+0x16c>)
 8000cee:	4613      	mov	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	4413      	add	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	3308      	adds	r3, #8
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	889b      	ldrh	r3, [r3, #4]
 8000cfe:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8000d00:	8a3b      	ldrh	r3, [r7, #16]
 8000d02:	3307      	adds	r3, #7
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	da00      	bge.n	8000d0a <DrawChar+0x52>
 8000d08:	3307      	adds	r3, #7
 8000d0a:	10db      	asrs	r3, r3, #3
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	8a3b      	ldrh	r3, [r7, #16]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	e076      	b.n	8000e0e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8000d20:	8a3b      	ldrh	r3, [r7, #16]
 8000d22:	3307      	adds	r3, #7
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	da00      	bge.n	8000d2a <DrawChar+0x72>
 8000d28:	3307      	adds	r3, #7
 8000d2a:	10db      	asrs	r3, r3, #3
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	fb03 f302 	mul.w	r3, r3, r2
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8000d3a:	8a3b      	ldrh	r3, [r7, #16]
 8000d3c:	3307      	adds	r3, #7
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	da00      	bge.n	8000d44 <DrawChar+0x8c>
 8000d42:	3307      	adds	r3, #7
 8000d44:	10db      	asrs	r3, r3, #3
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d002      	beq.n	8000d50 <DrawChar+0x98>
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d004      	beq.n	8000d58 <DrawChar+0xa0>
 8000d4e:	e00c      	b.n	8000d6a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	617b      	str	r3, [r7, #20]
      break;
 8000d56:	e016      	b.n	8000d86 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	021b      	lsls	r3, r3, #8
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	3201      	adds	r2, #1
 8000d62:	7812      	ldrb	r2, [r2, #0]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	617b      	str	r3, [r7, #20]
      break;
 8000d68:	e00d      	b.n	8000d86 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	041a      	lsls	r2, r3, #16
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	3301      	adds	r3, #1
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	3202      	adds	r2, #2
 8000d7e:	7812      	ldrb	r2, [r2, #0]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	617b      	str	r3, [r7, #20]
      break;
 8000d84:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
 8000d8a:	e036      	b.n	8000dfa <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8000d8c:	8a3a      	ldrh	r2, [r7, #16]
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	1ad2      	subs	r2, r2, r3
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	4413      	add	r3, r2
 8000d96:	3b01      	subs	r3, #1
 8000d98:	2201      	movs	r2, #1
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	461a      	mov	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	4013      	ands	r3, r2
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d012      	beq.n	8000dce <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	4413      	add	r3, r2
 8000db0:	b298      	uxth	r0, r3
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <DrawChar+0x168>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	491b      	ldr	r1, [pc, #108]	; (8000e24 <DrawChar+0x16c>)
 8000db8:	4613      	mov	r3, r2
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	4413      	add	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	88bb      	ldrh	r3, [r7, #4]
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f7ff fe38 	bl	8000a3c <BSP_LCD_DrawPixel>
 8000dcc:	e012      	b.n	8000df4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	b298      	uxth	r0, r3
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <DrawChar+0x168>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4911      	ldr	r1, [pc, #68]	; (8000e24 <DrawChar+0x16c>)
 8000dde:	4613      	mov	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	4413      	add	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	440b      	add	r3, r1
 8000de8:	3304      	adds	r3, #4
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	88bb      	ldrh	r3, [r7, #4]
 8000dee:	4619      	mov	r1, r3
 8000df0:	f7ff fe24 	bl	8000a3c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	3301      	adds	r3, #1
 8000df8:	61bb      	str	r3, [r7, #24]
 8000dfa:	8a3b      	ldrh	r3, [r7, #16]
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d3c4      	bcc.n	8000d8c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8000e02:	88bb      	ldrh	r3, [r7, #4]
 8000e04:	3301      	adds	r3, #1
 8000e06:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	61fb      	str	r3, [r7, #28]
 8000e0e:	8a7b      	ldrh	r3, [r7, #18]
 8000e10:	69fa      	ldr	r2, [r7, #28]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d384      	bcc.n	8000d20 <DrawChar+0x68>
  }
}
 8000e16:	bf00      	nop
 8000e18:	3720      	adds	r7, #32
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000006c 	.word	0x2000006c
 8000e24:	20000070 	.word	0x20000070

08000e28 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8000e36:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <LL_FillBuffer+0x88>)
 8000e38:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e3c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <LL_FillBuffer+0x8c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a1d      	ldr	r2, [pc, #116]	; (8000eb8 <LL_FillBuffer+0x90>)
 8000e44:	2134      	movs	r1, #52	; 0x34
 8000e46:	fb01 f303 	mul.w	r3, r1, r3
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3348      	adds	r3, #72	; 0x48
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d103      	bne.n	8000e5c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <LL_FillBuffer+0x88>)
 8000e56:	2202      	movs	r2, #2
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	e002      	b.n	8000e62 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <LL_FillBuffer+0x88>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8000e62:	4a13      	ldr	r2, [pc, #76]	; (8000eb0 <LL_FillBuffer+0x88>)
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <LL_FillBuffer+0x88>)
 8000e6a:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <LL_FillBuffer+0x94>)
 8000e6c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8000e6e:	4810      	ldr	r0, [pc, #64]	; (8000eb0 <LL_FillBuffer+0x88>)
 8000e70:	f000 fcca 	bl	8001808 <HAL_DMA2D_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d115      	bne.n	8000ea6 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8000e7a:	68f9      	ldr	r1, [r7, #12]
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <LL_FillBuffer+0x88>)
 8000e7e:	f000 ff31 	bl	8001ce4 <HAL_DMA2D_ConfigLayer>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d10e      	bne.n	8000ea6 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000e88:	68ba      	ldr	r2, [r7, #8]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69f9      	ldr	r1, [r7, #28]
 8000e92:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <LL_FillBuffer+0x88>)
 8000e94:	f000 fd02 	bl	800189c <HAL_DMA2D_Start>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d103      	bne.n	8000ea6 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8000e9e:	210a      	movs	r1, #10
 8000ea0:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <LL_FillBuffer+0x88>)
 8000ea2:	f000 fd26 	bl	80018f2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000002c 	.word	0x2000002c
 8000eb4:	2000006c 	.word	0x2000006c
 8000eb8:	200001ac 	.word	0x200001ac
 8000ebc:	4002b000 	.word	0x4002b000

08000ec0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8000ec4:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <BSP_SDRAM_Init+0xac>)
 8000ec6:	4a2a      	ldr	r2, [pc, #168]	; (8000f70 <BSP_SDRAM_Init+0xb0>)
 8000ec8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8000eca:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <BSP_SDRAM_Init+0xb4>)
 8000ecc:	2202      	movs	r2, #2
 8000ece:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8000ed0:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <BSP_SDRAM_Init+0xb4>)
 8000ed2:	2207      	movs	r2, #7
 8000ed4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8000ed6:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <BSP_SDRAM_Init+0xb4>)
 8000ed8:	2204      	movs	r2, #4
 8000eda:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8000edc:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <BSP_SDRAM_Init+0xb4>)
 8000ede:	2207      	movs	r2, #7
 8000ee0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8000ee2:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <BSP_SDRAM_Init+0xb4>)
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8000ee8:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <BSP_SDRAM_Init+0xb4>)
 8000eea:	2202      	movs	r2, #2
 8000eec:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <BSP_SDRAM_Init+0xb4>)
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <BSP_SDRAM_Init+0xac>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <BSP_SDRAM_Init+0xac>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f00:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <BSP_SDRAM_Init+0xac>)
 8000f02:	2204      	movs	r2, #4
 8000f04:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <BSP_SDRAM_Init+0xac>)
 8000f08:	2210      	movs	r2, #16
 8000f0a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <BSP_SDRAM_Init+0xac>)
 8000f0e:	2240      	movs	r2, #64	; 0x40
 8000f10:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8000f12:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <BSP_SDRAM_Init+0xac>)
 8000f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f18:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <BSP_SDRAM_Init+0xac>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <BSP_SDRAM_Init+0xac>)
 8000f22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f26:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <BSP_SDRAM_Init+0xac>)
 8000f2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <BSP_SDRAM_Init+0xac>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8000f36:	2100      	movs	r1, #0
 8000f38:	480c      	ldr	r0, [pc, #48]	; (8000f6c <BSP_SDRAM_Init+0xac>)
 8000f3a:	f000 f87f 	bl	800103c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8000f3e:	490d      	ldr	r1, [pc, #52]	; (8000f74 <BSP_SDRAM_Init+0xb4>)
 8000f40:	480a      	ldr	r0, [pc, #40]	; (8000f6c <BSP_SDRAM_Init+0xac>)
 8000f42:	f005 faf3 	bl	800652c <HAL_SDRAM_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <BSP_SDRAM_Init+0xb8>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
 8000f52:	e002      	b.n	8000f5a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <BSP_SDRAM_Init+0xb8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8000f5a:	f240 6003 	movw	r0, #1539	; 0x603
 8000f5e:	f000 f80d 	bl	8000f7c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <BSP_SDRAM_Init+0xb8>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000254 	.word	0x20000254
 8000f70:	a0000140 	.word	0xa0000140
 8000f74:	2000010c 	.word	0x2000010c
 8000f78:	20000008 	.word	0x20000008

08000f7c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000f88:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000f8e:	4b29      	ldr	r3, [pc, #164]	; (8001034 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000f90:	2210      	movs	r2, #16
 8000f92:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000f94:	4b27      	ldr	r3, [pc, #156]	; (8001034 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000f9a:	4b26      	ldr	r3, [pc, #152]	; (8001034 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000fa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fa4:	4923      	ldr	r1, [pc, #140]	; (8001034 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fa6:	4824      	ldr	r0, [pc, #144]	; (8001038 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000fa8:	f005 faf4 	bl	8006594 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000fac:	2001      	movs	r0, #1
 8000fae:	f000 f96b 	bl	8001288 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000fb2:	4b20      	ldr	r3, [pc, #128]	; (8001034 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fba:	2210      	movs	r2, #16
 8000fbc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8000fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fce:	4919      	ldr	r1, [pc, #100]	; (8001034 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fd0:	4819      	ldr	r0, [pc, #100]	; (8001038 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000fd2:	f005 fadf 	bl	8006594 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fd8:	2203      	movs	r2, #3
 8000fda:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fde:	2210      	movs	r2, #16
 8000fe0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fe4:	2208      	movs	r2, #8
 8000fe6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000fee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ff2:	4910      	ldr	r1, [pc, #64]	; (8001034 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000ff4:	4810      	ldr	r0, [pc, #64]	; (8001038 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000ff6:	f005 facd 	bl	8006594 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8000ffa:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000ffe:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001002:	2204      	movs	r2, #4
 8001004:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001008:	2210      	movs	r2, #16
 800100a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800100e:	2201      	movs	r2, #1
 8001010:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001016:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800101c:	4905      	ldr	r1, [pc, #20]	; (8001034 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800101e:	4806      	ldr	r0, [pc, #24]	; (8001038 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001020:	f005 fab8 	bl	8006594 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001028:	f005 fadf 	bl	80065ea <HAL_SDRAM_ProgramRefreshRate>
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000128 	.word	0x20000128
 8001038:	20000254 	.word	0x20000254

0800103c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800103c:	b580      	push	{r7, lr}
 800103e:	b090      	sub	sp, #64	; 0x40
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001046:	4b70      	ldr	r3, [pc, #448]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 8001048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104a:	4a6f      	ldr	r2, [pc, #444]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6393      	str	r3, [r2, #56]	; 0x38
 8001052:	4b6d      	ldr	r3, [pc, #436]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 8001054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
 800105c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800105e:	4b6a      	ldr	r3, [pc, #424]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a69      	ldr	r2, [pc, #420]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 8001064:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b67      	ldr	r3, [pc, #412]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	4b64      	ldr	r3, [pc, #400]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a63      	ldr	r2, [pc, #396]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b61      	ldr	r3, [pc, #388]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	623b      	str	r3, [r7, #32]
 800108c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108e:	4b5e      	ldr	r3, [pc, #376]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a5d      	ldr	r2, [pc, #372]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 8001094:	f043 0308 	orr.w	r3, r3, #8
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b5b      	ldr	r3, [pc, #364]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0308 	and.w	r3, r3, #8
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a6:	4b58      	ldr	r3, [pc, #352]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a57      	ldr	r2, [pc, #348]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 80010ac:	f043 0310 	orr.w	r3, r3, #16
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b55      	ldr	r3, [pc, #340]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0310 	and.w	r3, r3, #16
 80010ba:	61bb      	str	r3, [r7, #24]
 80010bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010be:	4b52      	ldr	r3, [pc, #328]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a51      	ldr	r2, [pc, #324]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 80010c4:	f043 0320 	orr.w	r3, r3, #32
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b4f      	ldr	r3, [pc, #316]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0320 	and.w	r3, r3, #32
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010d6:	4b4c      	ldr	r3, [pc, #304]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a4b      	ldr	r2, [pc, #300]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 80010dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b49      	ldr	r3, [pc, #292]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ee:	4b46      	ldr	r3, [pc, #280]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a45      	ldr	r2, [pc, #276]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 80010f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b43      	ldr	r3, [pc, #268]	; (8001208 <BSP_SDRAM_MspInit+0x1cc>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800110a:	2301      	movs	r3, #1
 800110c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800110e:	2302      	movs	r3, #2
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001112:	230c      	movs	r3, #12
 8001114:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8001116:	2308      	movs	r3, #8
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800111a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111e:	4619      	mov	r1, r3
 8001120:	483a      	ldr	r0, [pc, #232]	; (800120c <BSP_SDRAM_MspInit+0x1d0>)
 8001122:	f000 ff0d 	bl	8001f40 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001126:	f24c 7303 	movw	r3, #50947	; 0xc703
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800112c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001130:	4619      	mov	r1, r3
 8001132:	4837      	ldr	r0, [pc, #220]	; (8001210 <BSP_SDRAM_MspInit+0x1d4>)
 8001134:	f000 ff04 	bl	8001f40 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001138:	f64f 7383 	movw	r3, #65411	; 0xff83
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800113e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001142:	4619      	mov	r1, r3
 8001144:	4833      	ldr	r0, [pc, #204]	; (8001214 <BSP_SDRAM_MspInit+0x1d8>)
 8001146:	f000 fefb 	bl	8001f40 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800114a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001150:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001154:	4619      	mov	r1, r3
 8001156:	4830      	ldr	r0, [pc, #192]	; (8001218 <BSP_SDRAM_MspInit+0x1dc>)
 8001158:	f000 fef2 	bl	8001f40 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800115c:	f248 1333 	movw	r3, #33075	; 0x8133
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001162:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001166:	4619      	mov	r1, r3
 8001168:	482c      	ldr	r0, [pc, #176]	; (800121c <BSP_SDRAM_MspInit+0x1e0>)
 800116a:	f000 fee9 	bl	8001f40 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800116e:	2328      	movs	r3, #40	; 0x28
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001172:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001176:	4619      	mov	r1, r3
 8001178:	4829      	ldr	r0, [pc, #164]	; (8001220 <BSP_SDRAM_MspInit+0x1e4>)
 800117a:	f000 fee1 	bl	8001f40 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800117e:	4b29      	ldr	r3, [pc, #164]	; (8001224 <BSP_SDRAM_MspInit+0x1e8>)
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001184:	4b27      	ldr	r3, [pc, #156]	; (8001224 <BSP_SDRAM_MspInit+0x1e8>)
 8001186:	2280      	movs	r2, #128	; 0x80
 8001188:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <BSP_SDRAM_MspInit+0x1e8>)
 800118c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001190:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001192:	4b24      	ldr	r3, [pc, #144]	; (8001224 <BSP_SDRAM_MspInit+0x1e8>)
 8001194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001198:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800119a:	4b22      	ldr	r3, [pc, #136]	; (8001224 <BSP_SDRAM_MspInit+0x1e8>)
 800119c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011a0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <BSP_SDRAM_MspInit+0x1e8>)
 80011a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011a8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80011aa:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <BSP_SDRAM_MspInit+0x1e8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <BSP_SDRAM_MspInit+0x1e8>)
 80011b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011b6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <BSP_SDRAM_MspInit+0x1e8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <BSP_SDRAM_MspInit+0x1e8>)
 80011c0:	2203      	movs	r2, #3
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <BSP_SDRAM_MspInit+0x1e8>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <BSP_SDRAM_MspInit+0x1e8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <BSP_SDRAM_MspInit+0x1e8>)
 80011d2:	4a15      	ldr	r2, [pc, #84]	; (8001228 <BSP_SDRAM_MspInit+0x1ec>)
 80011d4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a12      	ldr	r2, [pc, #72]	; (8001224 <BSP_SDRAM_MspInit+0x1e8>)
 80011da:	631a      	str	r2, [r3, #48]	; 0x30
 80011dc:	4a11      	ldr	r2, [pc, #68]	; (8001224 <BSP_SDRAM_MspInit+0x1e8>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80011e2:	4810      	ldr	r0, [pc, #64]	; (8001224 <BSP_SDRAM_MspInit+0x1e8>)
 80011e4:	f000 fa02 	bl	80015ec <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80011e8:	480e      	ldr	r0, [pc, #56]	; (8001224 <BSP_SDRAM_MspInit+0x1e8>)
 80011ea:	f000 f951 	bl	8001490 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	210f      	movs	r1, #15
 80011f2:	2038      	movs	r0, #56	; 0x38
 80011f4:	f000 f922 	bl	800143c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80011f8:	2038      	movs	r0, #56	; 0x38
 80011fa:	f000 f93b 	bl	8001474 <HAL_NVIC_EnableIRQ>
}
 80011fe:	bf00      	nop
 8001200:	3740      	adds	r7, #64	; 0x40
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800
 800120c:	40020800 	.word	0x40020800
 8001210:	40020c00 	.word	0x40020c00
 8001214:	40021000 	.word	0x40021000
 8001218:	40021400 	.word	0x40021400
 800121c:	40021800 	.word	0x40021800
 8001220:	40021c00 	.word	0x40021c00
 8001224:	20000138 	.word	0x20000138
 8001228:	40026410 	.word	0x40026410

0800122c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001230:	2003      	movs	r0, #3
 8001232:	f000 f8f8 	bl	8001426 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001236:	2000      	movs	r0, #0
 8001238:	f00a fef0 	bl	800c01c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800123c:	f00a f95a 	bl	800b4f4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_IncTick+0x20>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_IncTick+0x24>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <HAL_IncTick+0x24>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000009 	.word	0x20000009
 800126c:	20000288 	.word	0x20000288

08001270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <HAL_GetTick+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000288 	.word	0x20000288

08001288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001290:	f7ff ffee 	bl	8001270 <HAL_GetTick>
 8001294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a0:	d005      	beq.n	80012ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <HAL_Delay+0x40>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ae:	bf00      	nop
 80012b0:	f7ff ffde 	bl	8001270 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d8f7      	bhi.n	80012b0 <HAL_Delay+0x28>
  {
  }
}
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000009 	.word	0x20000009

080012cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <__NVIC_SetPriorityGrouping+0x40>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fa:	4a04      	ldr	r2, [pc, #16]	; (800130c <__NVIC_SetPriorityGrouping+0x40>)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	60d3      	str	r3, [r2, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00
 8001310:	05fa0000 	.word	0x05fa0000

08001314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <__NVIC_GetPriorityGrouping+0x18>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f003 0307 	and.w	r3, r3, #7
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db0b      	blt.n	800135a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	f003 021f 	and.w	r2, r3, #31
 8001348:	4907      	ldr	r1, [pc, #28]	; (8001368 <__NVIC_EnableIRQ+0x38>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	2001      	movs	r0, #1
 8001352:	fa00 f202 	lsl.w	r2, r0, r2
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000e100 	.word	0xe000e100

0800136c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	2b00      	cmp	r3, #0
 800137e:	db0a      	blt.n	8001396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	b2da      	uxtb	r2, r3
 8001384:	490c      	ldr	r1, [pc, #48]	; (80013b8 <__NVIC_SetPriority+0x4c>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	0112      	lsls	r2, r2, #4
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	440b      	add	r3, r1
 8001390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001394:	e00a      	b.n	80013ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4908      	ldr	r1, [pc, #32]	; (80013bc <__NVIC_SetPriority+0x50>)
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	3b04      	subs	r3, #4
 80013a4:	0112      	lsls	r2, r2, #4
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	440b      	add	r3, r1
 80013aa:	761a      	strb	r2, [r3, #24]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000e100 	.word	0xe000e100
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	; 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f1c3 0307 	rsb	r3, r3, #7
 80013da:	2b04      	cmp	r3, #4
 80013dc:	bf28      	it	cs
 80013de:	2304      	movcs	r3, #4
 80013e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3304      	adds	r3, #4
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d902      	bls.n	80013f0 <NVIC_EncodePriority+0x30>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3b03      	subs	r3, #3
 80013ee:	e000      	b.n	80013f2 <NVIC_EncodePriority+0x32>
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	f04f 32ff 	mov.w	r2, #4294967295
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	401a      	ands	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001408:	f04f 31ff 	mov.w	r1, #4294967295
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	43d9      	mvns	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	4313      	orrs	r3, r2
         );
}
 800141a:	4618      	mov	r0, r3
 800141c:	3724      	adds	r7, #36	; 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ff4c 	bl	80012cc <__NVIC_SetPriorityGrouping>
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800144e:	f7ff ff61 	bl	8001314 <__NVIC_GetPriorityGrouping>
 8001452:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	68b9      	ldr	r1, [r7, #8]
 8001458:	6978      	ldr	r0, [r7, #20]
 800145a:	f7ff ffb1 	bl	80013c0 <NVIC_EncodePriority>
 800145e:	4602      	mov	r2, r0
 8001460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001464:	4611      	mov	r1, r2
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff80 	bl	800136c <__NVIC_SetPriority>
}
 800146c:	bf00      	nop
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ff54 	bl	8001330 <__NVIC_EnableIRQ>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff fee8 	bl	8001270 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e099      	b.n	80015e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2202      	movs	r2, #2
 80014b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0201 	bic.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014cc:	e00f      	b.n	80014ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014ce:	f7ff fecf 	bl	8001270 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b05      	cmp	r3, #5
 80014da:	d908      	bls.n	80014ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2220      	movs	r2, #32
 80014e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2203      	movs	r2, #3
 80014e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e078      	b.n	80015e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1e8      	bne.n	80014ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	4b38      	ldr	r3, [pc, #224]	; (80015e8 <HAL_DMA_Init+0x158>)
 8001508:	4013      	ands	r3, r2
 800150a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800151a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001526:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001532:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	4313      	orrs	r3, r2
 800153e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	2b04      	cmp	r3, #4
 8001546:	d107      	bne.n	8001558 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	4313      	orrs	r3, r2
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4313      	orrs	r3, r2
 8001556:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f023 0307 	bic.w	r3, r3, #7
 800156e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	4313      	orrs	r3, r2
 8001578:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	2b04      	cmp	r3, #4
 8001580:	d117      	bne.n	80015b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	4313      	orrs	r3, r2
 800158a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00e      	beq.n	80015b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f8bd 	bl	8001714 <DMA_CheckFifoParam>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2240      	movs	r2, #64	; 0x40
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80015ae:	2301      	movs	r3, #1
 80015b0:	e016      	b.n	80015e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f874 	bl	80016a8 <DMA_CalcBaseAndBitshift>
 80015c0:	4603      	mov	r3, r0
 80015c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c8:	223f      	movs	r2, #63	; 0x3f
 80015ca:	409a      	lsls	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	f010803f 	.word	0xf010803f

080015ec <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e050      	b.n	80016a0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d101      	bne.n	800160e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800160a:	2302      	movs	r3, #2
 800160c:	e048      	b.n	80016a0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2221      	movs	r2, #33	; 0x21
 800164c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f82a 	bl	80016a8 <DMA_CalcBaseAndBitshift>
 8001654:	4603      	mov	r3, r0
 8001656:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165c:	223f      	movs	r2, #63	; 0x3f
 800165e:	409a      	lsls	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	3b10      	subs	r3, #16
 80016b8:	4a13      	ldr	r2, [pc, #76]	; (8001708 <DMA_CalcBaseAndBitshift+0x60>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	091b      	lsrs	r3, r3, #4
 80016c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016c2:	4a12      	ldr	r2, [pc, #72]	; (800170c <DMA_CalcBaseAndBitshift+0x64>)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4413      	add	r3, r2
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d908      	bls.n	80016e8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <DMA_CalcBaseAndBitshift+0x68>)
 80016de:	4013      	ands	r3, r2
 80016e0:	1d1a      	adds	r2, r3, #4
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	659a      	str	r2, [r3, #88]	; 0x58
 80016e6:	e006      	b.n	80016f6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <DMA_CalcBaseAndBitshift+0x68>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	aaaaaaab 	.word	0xaaaaaaab
 800170c:	0800e088 	.word	0x0800e088
 8001710:	fffffc00 	.word	0xfffffc00

08001714 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001724:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d11f      	bne.n	800176e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	2b03      	cmp	r3, #3
 8001732:	d855      	bhi.n	80017e0 <DMA_CheckFifoParam+0xcc>
 8001734:	a201      	add	r2, pc, #4	; (adr r2, 800173c <DMA_CheckFifoParam+0x28>)
 8001736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173a:	bf00      	nop
 800173c:	0800174d 	.word	0x0800174d
 8001740:	0800175f 	.word	0x0800175f
 8001744:	0800174d 	.word	0x0800174d
 8001748:	080017e1 	.word	0x080017e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d045      	beq.n	80017e4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800175c:	e042      	b.n	80017e4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001766:	d13f      	bne.n	80017e8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800176c:	e03c      	b.n	80017e8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001776:	d121      	bne.n	80017bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d836      	bhi.n	80017ec <DMA_CheckFifoParam+0xd8>
 800177e:	a201      	add	r2, pc, #4	; (adr r2, 8001784 <DMA_CheckFifoParam+0x70>)
 8001780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001784:	08001795 	.word	0x08001795
 8001788:	0800179b 	.word	0x0800179b
 800178c:	08001795 	.word	0x08001795
 8001790:	080017ad 	.word	0x080017ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
      break;
 8001798:	e02f      	b.n	80017fa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d024      	beq.n	80017f0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017aa:	e021      	b.n	80017f0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017b4:	d11e      	bne.n	80017f4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017ba:	e01b      	b.n	80017f4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d902      	bls.n	80017c8 <DMA_CheckFifoParam+0xb4>
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d003      	beq.n	80017ce <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017c6:	e018      	b.n	80017fa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
      break;
 80017cc:	e015      	b.n	80017fa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00e      	beq.n	80017f8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	73fb      	strb	r3, [r7, #15]
      break;
 80017de:	e00b      	b.n	80017f8 <DMA_CheckFifoParam+0xe4>
      break;
 80017e0:	bf00      	nop
 80017e2:	e00a      	b.n	80017fa <DMA_CheckFifoParam+0xe6>
      break;
 80017e4:	bf00      	nop
 80017e6:	e008      	b.n	80017fa <DMA_CheckFifoParam+0xe6>
      break;
 80017e8:	bf00      	nop
 80017ea:	e006      	b.n	80017fa <DMA_CheckFifoParam+0xe6>
      break;
 80017ec:	bf00      	nop
 80017ee:	e004      	b.n	80017fa <DMA_CheckFifoParam+0xe6>
      break;
 80017f0:	bf00      	nop
 80017f2:	e002      	b.n	80017fa <DMA_CheckFifoParam+0xe6>
      break;   
 80017f4:	bf00      	nop
 80017f6:	e000      	b.n	80017fa <DMA_CheckFifoParam+0xe6>
      break;
 80017f8:	bf00      	nop
    }
  } 
  
  return status; 
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e039      	b.n	800188e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d106      	bne.n	8001834 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f009 fe84 	bl	800b53c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2202      	movs	r2, #2
 8001838:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001858:	f023 0107 	bic.w	r1, r3, #7
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_DMA2D_Init+0x90>)
 8001870:	4013      	ands	r3, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68d1      	ldr	r1, [r2, #12]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	430b      	orrs	r3, r1
 800187c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	ffffc000 	.word	0xffffc000

0800189c <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af02      	add	r7, sp, #8
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_DMA2D_Start+0x1c>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e018      	b.n	80018ea <HAL_DMA2D_Start+0x4e>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f000 fa98 	bl	8001e08 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0201 	orr.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d056      	beq.n	80019bc <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 800190e:	f7ff fcaf 	bl	8001270 <HAL_GetTick>
 8001912:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001914:	e04b      	b.n	80019ae <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001924:	2b00      	cmp	r3, #0
 8001926:	d023      	beq.n	8001970 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 0320 	and.w	r3, r3, #32
 800192e:	2b00      	cmp	r3, #0
 8001930:	d005      	beq.n	800193e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001936:	f043 0202 	orr.w	r2, r3, #2
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194c:	f043 0201 	orr.w	r2, r3, #1
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2221      	movs	r2, #33	; 0x21
 800195a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2204      	movs	r2, #4
 8001960:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0a5      	b.n	8001abc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001976:	d01a      	beq.n	80019ae <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001978:	f7ff fc7a 	bl	8001270 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d302      	bcc.n	800198e <HAL_DMA2D_PollForTransfer+0x9c>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10f      	bne.n	80019ae <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001992:	f043 0220 	orr.w	r2, r3, #32
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2203      	movs	r2, #3
 800199e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e086      	b.n	8001abc <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0ac      	beq.n	8001916 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	f003 0320 	and.w	r3, r3, #32
 80019c6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	f003 0320 	and.w	r3, r3, #32
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d061      	beq.n	8001aa2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80019de:	f7ff fc47 	bl	8001270 <HAL_GetTick>
 80019e2:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80019e4:	e056      	b.n	8001a94 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d02e      	beq.n	8001a56 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a06:	f043 0204 	orr.w	r2, r3, #4
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f003 0320 	and.w	r3, r3, #32
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1c:	f043 0202 	orr.w	r2, r3, #2
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d005      	beq.n	8001a3a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a32:	f043 0201 	orr.w	r2, r3, #1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2229      	movs	r2, #41	; 0x29
 8001a40:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2204      	movs	r2, #4
 8001a46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e032      	b.n	8001abc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5c:	d01a      	beq.n	8001a94 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001a5e:	f7ff fc07 	bl	8001270 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d302      	bcc.n	8001a74 <HAL_DMA2D_PollForTransfer+0x182>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10f      	bne.n	8001a94 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a78:	f043 0220 	orr.w	r2, r3, #32
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2203      	movs	r2, #3
 8001a84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e013      	b.n	8001abc <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0a1      	beq.n	80019e6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2212      	movs	r2, #18
 8001aa8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d026      	beq.n	8001b34 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d021      	beq.n	8001b34 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001afe:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b04:	f043 0201 	orr.w	r2, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2201      	movs	r2, #1
 8001b12:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2204      	movs	r2, #4
 8001b18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 0320 	and.w	r3, r3, #32
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d026      	beq.n	8001b8c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d021      	beq.n	8001b8c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b56:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b64:	f043 0202 	orr.w	r2, r3, #2
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2204      	movs	r2, #4
 8001b70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d026      	beq.n	8001be4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d021      	beq.n	8001be4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bae:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2208      	movs	r2, #8
 8001bb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbc:	f043 0204 	orr.w	r2, r3, #4
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d013      	beq.n	8001c16 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00e      	beq.n	8001c16 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c06:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f853 	bl	8001cbc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d024      	beq.n	8001c6a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d01f      	beq.n	8001c6a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c38:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d01f      	beq.n	8001cb4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d01a      	beq.n	8001cb4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c8c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2210      	movs	r2, #16
 8001c94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f80e 	bl	8001cd0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_DMA2D_ConfigLayer+0x20>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e079      	b.n	8001df8 <HAL_DMA2D_ConfigLayer+0x114>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	3318      	adds	r3, #24
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	041b      	lsls	r3, r3, #16
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001d2e:	4b35      	ldr	r3, [pc, #212]	; (8001e04 <HAL_DMA2D_ConfigLayer+0x120>)
 8001d30:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b0a      	cmp	r3, #10
 8001d38:	d003      	beq.n	8001d42 <HAL_DMA2D_ConfigLayer+0x5e>
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b09      	cmp	r3, #9
 8001d40:	d107      	bne.n	8001d52 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	e005      	b.n	8001d5e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	061b      	lsls	r3, r3, #24
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d120      	bne.n	8001da6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	ea02 0103 	and.w	r1, r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b0a      	cmp	r3, #10
 8001d8c:	d003      	beq.n	8001d96 <HAL_DMA2D_ConfigLayer+0xb2>
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b09      	cmp	r3, #9
 8001d94:	d127      	bne.n	8001de6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28
 8001da4:	e01f      	b.n	8001de6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	69da      	ldr	r2, [r3, #28]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	ea02 0103 	and.w	r1, r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b0a      	cmp	r3, #10
 8001dce:	d003      	beq.n	8001dd8 <HAL_DMA2D_ConfigLayer+0xf4>
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b09      	cmp	r3, #9
 8001dd6:	d106      	bne.n	8001de6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001de4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	ff03000f 	.word	0xff03000f

08001e08 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b08b      	sub	sp, #44	; 0x2c
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	041a      	lsls	r2, r3, #16
 8001e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e26:	431a      	orrs	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e40:	d174      	bne.n	8001f2c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001e48:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001e50:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001e58:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d108      	bne.n	8001e7a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
 8001e78:	e053      	b.n	8001f22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d106      	bne.n	8001e90 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8e:	e048      	b.n	8001f22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d111      	bne.n	8001ebc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	0cdb      	lsrs	r3, r3, #19
 8001e9c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	0a9b      	lsrs	r3, r3, #10
 8001ea2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	08db      	lsrs	r3, r3, #3
 8001ea8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	015a      	lsls	r2, r3, #5
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	02db      	lsls	r3, r3, #11
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eba:	e032      	b.n	8001f22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d117      	bne.n	8001ef4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	0fdb      	lsrs	r3, r3, #31
 8001ec8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	0cdb      	lsrs	r3, r3, #19
 8001ece:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	0adb      	lsrs	r3, r3, #11
 8001ed4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	08db      	lsrs	r3, r3, #3
 8001eda:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	015a      	lsls	r2, r3, #5
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	029b      	lsls	r3, r3, #10
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	03db      	lsls	r3, r3, #15
 8001eea:	4313      	orrs	r3, r2
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef2:	e016      	b.n	8001f22 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	0f1b      	lsrs	r3, r3, #28
 8001ef8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	0d1b      	lsrs	r3, r3, #20
 8001efe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	0b1b      	lsrs	r3, r3, #12
 8001f04:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	011a      	lsls	r2, r3, #4
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	021b      	lsls	r3, r3, #8
 8001f14:	431a      	orrs	r2, r3
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	031b      	lsls	r3, r3, #12
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f28:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001f2a:	e003      	b.n	8001f34 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	60da      	str	r2, [r3, #12]
}
 8001f34:	bf00      	nop
 8001f36:	372c      	adds	r7, #44	; 0x2c
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	; 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
 8001f5e:	e175      	b.n	800224c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001f60:	2201      	movs	r2, #1
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	f040 8164 	bne.w	8002246 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0x4e>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b12      	cmp	r3, #18
 8001f8c:	d123      	bne.n	8001fd6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	08da      	lsrs	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3208      	adds	r2, #8
 8001f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	691a      	ldr	r2, [r3, #16]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	08da      	lsrs	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	69b9      	ldr	r1, [r7, #24]
 8001fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 0203 	and.w	r2, r3, #3
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d00b      	beq.n	800202a <HAL_GPIO_Init+0xea>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d007      	beq.n	800202a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800201e:	2b11      	cmp	r3, #17
 8002020:	d003      	beq.n	800202a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b12      	cmp	r3, #18
 8002028:	d130      	bne.n	800208c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	2203      	movs	r2, #3
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002060:	2201      	movs	r2, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	f003 0201 	and.w	r2, r3, #1
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80be 	beq.w	8002246 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ca:	4b65      	ldr	r3, [pc, #404]	; (8002260 <HAL_GPIO_Init+0x320>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	4a64      	ldr	r2, [pc, #400]	; (8002260 <HAL_GPIO_Init+0x320>)
 80020d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d4:	6453      	str	r3, [r2, #68]	; 0x44
 80020d6:	4b62      	ldr	r3, [pc, #392]	; (8002260 <HAL_GPIO_Init+0x320>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80020e2:	4a60      	ldr	r2, [pc, #384]	; (8002264 <HAL_GPIO_Init+0x324>)
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	3302      	adds	r3, #2
 80020ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	220f      	movs	r2, #15
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a57      	ldr	r2, [pc, #348]	; (8002268 <HAL_GPIO_Init+0x328>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d037      	beq.n	800217e <HAL_GPIO_Init+0x23e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a56      	ldr	r2, [pc, #344]	; (800226c <HAL_GPIO_Init+0x32c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d031      	beq.n	800217a <HAL_GPIO_Init+0x23a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a55      	ldr	r2, [pc, #340]	; (8002270 <HAL_GPIO_Init+0x330>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d02b      	beq.n	8002176 <HAL_GPIO_Init+0x236>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a54      	ldr	r2, [pc, #336]	; (8002274 <HAL_GPIO_Init+0x334>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d025      	beq.n	8002172 <HAL_GPIO_Init+0x232>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a53      	ldr	r2, [pc, #332]	; (8002278 <HAL_GPIO_Init+0x338>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d01f      	beq.n	800216e <HAL_GPIO_Init+0x22e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a52      	ldr	r2, [pc, #328]	; (800227c <HAL_GPIO_Init+0x33c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d019      	beq.n	800216a <HAL_GPIO_Init+0x22a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a51      	ldr	r2, [pc, #324]	; (8002280 <HAL_GPIO_Init+0x340>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_GPIO_Init+0x226>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a50      	ldr	r2, [pc, #320]	; (8002284 <HAL_GPIO_Init+0x344>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00d      	beq.n	8002162 <HAL_GPIO_Init+0x222>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4f      	ldr	r2, [pc, #316]	; (8002288 <HAL_GPIO_Init+0x348>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d007      	beq.n	800215e <HAL_GPIO_Init+0x21e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a4e      	ldr	r2, [pc, #312]	; (800228c <HAL_GPIO_Init+0x34c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d101      	bne.n	800215a <HAL_GPIO_Init+0x21a>
 8002156:	2309      	movs	r3, #9
 8002158:	e012      	b.n	8002180 <HAL_GPIO_Init+0x240>
 800215a:	230a      	movs	r3, #10
 800215c:	e010      	b.n	8002180 <HAL_GPIO_Init+0x240>
 800215e:	2308      	movs	r3, #8
 8002160:	e00e      	b.n	8002180 <HAL_GPIO_Init+0x240>
 8002162:	2307      	movs	r3, #7
 8002164:	e00c      	b.n	8002180 <HAL_GPIO_Init+0x240>
 8002166:	2306      	movs	r3, #6
 8002168:	e00a      	b.n	8002180 <HAL_GPIO_Init+0x240>
 800216a:	2305      	movs	r3, #5
 800216c:	e008      	b.n	8002180 <HAL_GPIO_Init+0x240>
 800216e:	2304      	movs	r3, #4
 8002170:	e006      	b.n	8002180 <HAL_GPIO_Init+0x240>
 8002172:	2303      	movs	r3, #3
 8002174:	e004      	b.n	8002180 <HAL_GPIO_Init+0x240>
 8002176:	2302      	movs	r3, #2
 8002178:	e002      	b.n	8002180 <HAL_GPIO_Init+0x240>
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <HAL_GPIO_Init+0x240>
 800217e:	2300      	movs	r3, #0
 8002180:	69fa      	ldr	r2, [r7, #28]
 8002182:	f002 0203 	and.w	r2, r2, #3
 8002186:	0092      	lsls	r2, r2, #2
 8002188:	4093      	lsls	r3, r2
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002190:	4934      	ldr	r1, [pc, #208]	; (8002264 <HAL_GPIO_Init+0x324>)
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	089b      	lsrs	r3, r3, #2
 8002196:	3302      	adds	r3, #2
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800219e:	4b3c      	ldr	r3, [pc, #240]	; (8002290 <HAL_GPIO_Init+0x350>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021c2:	4a33      	ldr	r2, [pc, #204]	; (8002290 <HAL_GPIO_Init+0x350>)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021c8:	4b31      	ldr	r3, [pc, #196]	; (8002290 <HAL_GPIO_Init+0x350>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ec:	4a28      	ldr	r2, [pc, #160]	; (8002290 <HAL_GPIO_Init+0x350>)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021f2:	4b27      	ldr	r3, [pc, #156]	; (8002290 <HAL_GPIO_Init+0x350>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002216:	4a1e      	ldr	r2, [pc, #120]	; (8002290 <HAL_GPIO_Init+0x350>)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800221c:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <HAL_GPIO_Init+0x350>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002240:	4a13      	ldr	r2, [pc, #76]	; (8002290 <HAL_GPIO_Init+0x350>)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3301      	adds	r3, #1
 800224a:	61fb      	str	r3, [r7, #28]
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	2b0f      	cmp	r3, #15
 8002250:	f67f ae86 	bls.w	8001f60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002254:	bf00      	nop
 8002256:	3724      	adds	r7, #36	; 0x24
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	40023800 	.word	0x40023800
 8002264:	40013800 	.word	0x40013800
 8002268:	40020000 	.word	0x40020000
 800226c:	40020400 	.word	0x40020400
 8002270:	40020800 	.word	0x40020800
 8002274:	40020c00 	.word	0x40020c00
 8002278:	40021000 	.word	0x40021000
 800227c:	40021400 	.word	0x40021400
 8002280:	40021800 	.word	0x40021800
 8002284:	40021c00 	.word	0x40021c00
 8002288:	40022000 	.word	0x40022000
 800228c:	40022400 	.word	0x40022400
 8002290:	40013c00 	.word	0x40013c00

08002294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	807b      	strh	r3, [r7, #2]
 80022a0:	4613      	mov	r3, r2
 80022a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a4:	787b      	ldrb	r3, [r7, #1]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022aa:	887a      	ldrh	r2, [r7, #2]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80022b0:	e003      	b.n	80022ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80022b2:	887b      	ldrh	r3, [r7, #2]
 80022b4:	041a      	lsls	r2, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	619a      	str	r2, [r3, #24]
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	4013      	ands	r3, r2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d006      	beq.n	80022ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022de:	4a05      	ldr	r2, [pc, #20]	; (80022f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f009 f896 	bl	800b418 <HAL_GPIO_EXTI_Callback>
  }
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40013c00 	.word	0x40013c00

080022f8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80022f8:	b590      	push	{r4, r7, lr}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af04      	add	r7, sp, #16
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	4608      	mov	r0, r1
 8002302:	4611      	mov	r1, r2
 8002304:	461a      	mov	r2, r3
 8002306:	4603      	mov	r3, r0
 8002308:	70fb      	strb	r3, [r7, #3]
 800230a:	460b      	mov	r3, r1
 800230c:	70bb      	strb	r3, [r7, #2]
 800230e:	4613      	mov	r3, r2
 8002310:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_HCD_HC_Init+0x28>
 800231c:	2302      	movs	r3, #2
 800231e:	e07f      	b.n	8002420 <HAL_HCD_HC_Init+0x128>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	440b      	add	r3, r1
 8002336:	333d      	adds	r3, #61	; 0x3d
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	440b      	add	r3, r1
 800234a:	3338      	adds	r3, #56	; 0x38
 800234c:	787a      	ldrb	r2, [r7, #1]
 800234e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	440b      	add	r3, r1
 800235e:	3340      	adds	r3, #64	; 0x40
 8002360:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002362:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002364:	78fa      	ldrb	r2, [r7, #3]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	440b      	add	r3, r1
 8002372:	3339      	adds	r3, #57	; 0x39
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	440b      	add	r3, r1
 8002386:	333f      	adds	r3, #63	; 0x3f
 8002388:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800238c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	78bb      	ldrb	r3, [r7, #2]
 8002392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002396:	b2d8      	uxtb	r0, r3
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	440b      	add	r3, r1
 80023a4:	333a      	adds	r3, #58	; 0x3a
 80023a6:	4602      	mov	r2, r0
 80023a8:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80023aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	da0a      	bge.n	80023c8 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	440b      	add	r3, r1
 80023c0:	333b      	adds	r3, #59	; 0x3b
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
 80023c6:	e009      	b.n	80023dc <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	440b      	add	r3, r1
 80023d6:	333b      	adds	r3, #59	; 0x3b
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	440b      	add	r3, r1
 80023ea:	333c      	adds	r3, #60	; 0x3c
 80023ec:	f897 2020 	ldrb.w	r2, [r7, #32]
 80023f0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	787c      	ldrb	r4, [r7, #1]
 80023f8:	78ba      	ldrb	r2, [r7, #2]
 80023fa:	78f9      	ldrb	r1, [r7, #3]
 80023fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023fe:	9302      	str	r3, [sp, #8]
 8002400:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	f897 3020 	ldrb.w	r3, [r7, #32]
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	4623      	mov	r3, r4
 800240e:	f006 f8f5 	bl	80085fc <USB_HC_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800241e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	bd90      	pop	{r4, r7, pc}

08002428 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	4608      	mov	r0, r1
 8002432:	4611      	mov	r1, r2
 8002434:	461a      	mov	r2, r3
 8002436:	4603      	mov	r3, r0
 8002438:	70fb      	strb	r3, [r7, #3]
 800243a:	460b      	mov	r3, r1
 800243c:	70bb      	strb	r3, [r7, #2]
 800243e:	4613      	mov	r3, r2
 8002440:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	333b      	adds	r3, #59	; 0x3b
 8002452:	78ba      	ldrb	r2, [r7, #2]
 8002454:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002456:	78fa      	ldrb	r2, [r7, #3]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	440b      	add	r3, r1
 8002464:	333f      	adds	r3, #63	; 0x3f
 8002466:	787a      	ldrb	r2, [r7, #1]
 8002468:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800246a:	7c3b      	ldrb	r3, [r7, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10a      	bne.n	8002486 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	440b      	add	r3, r1
 800247e:	3342      	adds	r3, #66	; 0x42
 8002480:	2203      	movs	r2, #3
 8002482:	701a      	strb	r2, [r3, #0]
 8002484:	e009      	b.n	800249a <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002486:	78fa      	ldrb	r2, [r7, #3]
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	440b      	add	r3, r1
 8002494:	3342      	adds	r3, #66	; 0x42
 8002496:	2202      	movs	r2, #2
 8002498:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800249a:	787b      	ldrb	r3, [r7, #1]
 800249c:	2b03      	cmp	r3, #3
 800249e:	f200 80d6 	bhi.w	800264e <HAL_HCD_HC_SubmitRequest+0x226>
 80024a2:	a201      	add	r2, pc, #4	; (adr r2, 80024a8 <HAL_HCD_HC_SubmitRequest+0x80>)
 80024a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a8:	080024b9 	.word	0x080024b9
 80024ac:	08002639 	.word	0x08002639
 80024b0:	08002525 	.word	0x08002525
 80024b4:	080025af 	.word	0x080025af
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80024b8:	7c3b      	ldrb	r3, [r7, #16]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	f040 80c9 	bne.w	8002652 <HAL_HCD_HC_SubmitRequest+0x22a>
 80024c0:	78bb      	ldrb	r3, [r7, #2]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 80c5 	bne.w	8002652 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 80024c8:	8b3b      	ldrh	r3, [r7, #24]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	440b      	add	r3, r1
 80024dc:	3351      	adds	r3, #81	; 0x51
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	440b      	add	r3, r1
 80024f0:	3351      	adds	r3, #81	; 0x51
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10a      	bne.n	800250e <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	440b      	add	r3, r1
 8002506:	3342      	adds	r3, #66	; 0x42
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800250c:	e0a1      	b.n	8002652 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	440b      	add	r3, r1
 800251c:	3342      	adds	r3, #66	; 0x42
 800251e:	2202      	movs	r2, #2
 8002520:	701a      	strb	r2, [r3, #0]
      break;
 8002522:	e096      	b.n	8002652 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002524:	78bb      	ldrb	r3, [r7, #2]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d120      	bne.n	800256c <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	440b      	add	r3, r1
 8002538:	3351      	adds	r3, #81	; 0x51
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10a      	bne.n	8002556 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	3342      	adds	r3, #66	; 0x42
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002554:	e07e      	b.n	8002654 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002556:	78fa      	ldrb	r2, [r7, #3]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	440b      	add	r3, r1
 8002564:	3342      	adds	r3, #66	; 0x42
 8002566:	2202      	movs	r2, #2
 8002568:	701a      	strb	r2, [r3, #0]
      break;
 800256a:	e073      	b.n	8002654 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	440b      	add	r3, r1
 800257a:	3350      	adds	r3, #80	; 0x50
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10a      	bne.n	8002598 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002582:	78fa      	ldrb	r2, [r7, #3]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	440b      	add	r3, r1
 8002590:	3342      	adds	r3, #66	; 0x42
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
      break;
 8002596:	e05d      	b.n	8002654 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	440b      	add	r3, r1
 80025a6:	3342      	adds	r3, #66	; 0x42
 80025a8:	2202      	movs	r2, #2
 80025aa:	701a      	strb	r2, [r3, #0]
      break;
 80025ac:	e052      	b.n	8002654 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80025ae:	78bb      	ldrb	r3, [r7, #2]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d120      	bne.n	80025f6 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	3351      	adds	r3, #81	; 0x51
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10a      	bne.n	80025e0 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	440b      	add	r3, r1
 80025d8:	3342      	adds	r3, #66	; 0x42
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80025de:	e039      	b.n	8002654 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	440b      	add	r3, r1
 80025ee:	3342      	adds	r3, #66	; 0x42
 80025f0:	2202      	movs	r2, #2
 80025f2:	701a      	strb	r2, [r3, #0]
      break;
 80025f4:	e02e      	b.n	8002654 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	440b      	add	r3, r1
 8002604:	3350      	adds	r3, #80	; 0x50
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10a      	bne.n	8002622 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	440b      	add	r3, r1
 800261a:	3342      	adds	r3, #66	; 0x42
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
      break;
 8002620:	e018      	b.n	8002654 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002622:	78fa      	ldrb	r2, [r7, #3]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	440b      	add	r3, r1
 8002630:	3342      	adds	r3, #66	; 0x42
 8002632:	2202      	movs	r2, #2
 8002634:	701a      	strb	r2, [r3, #0]
      break;
 8002636:	e00d      	b.n	8002654 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	440b      	add	r3, r1
 8002646:	3342      	adds	r3, #66	; 0x42
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
      break;
 800264c:	e002      	b.n	8002654 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800264e:	bf00      	nop
 8002650:	e000      	b.n	8002654 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8002652:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	440b      	add	r3, r1
 8002662:	3344      	adds	r3, #68	; 0x44
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002668:	78fa      	ldrb	r2, [r7, #3]
 800266a:	8b39      	ldrh	r1, [r7, #24]
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4403      	add	r3, r0
 8002678:	3348      	adds	r3, #72	; 0x48
 800267a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800267c:	78fa      	ldrb	r2, [r7, #3]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	440b      	add	r3, r1
 800268a:	335c      	adds	r3, #92	; 0x5c
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	440b      	add	r3, r1
 800269e:	334c      	adds	r3, #76	; 0x4c
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	440b      	add	r3, r1
 80026b2:	3339      	adds	r3, #57	; 0x39
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80026b8:	78fa      	ldrb	r2, [r7, #3]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	440b      	add	r3, r1
 80026c6:	335d      	adds	r3, #93	; 0x5d
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	3338      	adds	r3, #56	; 0x38
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	18d1      	adds	r1, r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	f006 f892 	bl	8008810 <USB_HC_StartXfer>
 80026ec:	4603      	mov	r3, r0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop

080026f8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f005 feb1 	bl	8008476 <USB_GetMode>
 8002714:	4603      	mov	r3, r0
 8002716:	2b01      	cmp	r3, #1
 8002718:	f040 80f1 	bne.w	80028fe <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f005 fe95 	bl	8008450 <USB_ReadInterrupts>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80e7 	beq.w	80028fc <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f005 fe8c 	bl	8008450 <USB_ReadInterrupts>
 8002738:	4603      	mov	r3, r0
 800273a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002742:	d104      	bne.n	800274e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800274c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f005 fe7c 	bl	8008450 <USB_ReadInterrupts>
 8002758:	4603      	mov	r3, r0
 800275a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800275e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002762:	d104      	bne.n	800276e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800276c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f005 fe6c 	bl	8008450 <USB_ReadInterrupts>
 8002778:	4603      	mov	r3, r0
 800277a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800277e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002782:	d104      	bne.n	800278e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800278c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f005 fe5c 	bl	8008450 <USB_ReadInterrupts>
 8002798:	4603      	mov	r3, r0
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d103      	bne.n	80027aa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2202      	movs	r2, #2
 80027a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f005 fe4e 	bl	8008450 <USB_ReadInterrupts>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027be:	d117      	bne.n	80027f0 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80027ce:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80027d2:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f009 fd35 	bl	800c244 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2101      	movs	r1, #1
 80027e0:	4618      	mov	r0, r3
 80027e2:	f005 fe56 	bl	8008492 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80027ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f005 fe2b 	bl	8008450 <USB_ReadInterrupts>
 80027fa:	4603      	mov	r3, r0
 80027fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002804:	d102      	bne.n	800280c <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f001 f8a6 	bl	8003958 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f005 fe1d 	bl	8008450 <USB_ReadInterrupts>
 8002816:	4603      	mov	r3, r0
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b08      	cmp	r3, #8
 800281e:	d106      	bne.n	800282e <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f009 fcf3 	bl	800c20c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2208      	movs	r2, #8
 800282c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f005 fe0c 	bl	8008450 <USB_ReadInterrupts>
 8002838:	4603      	mov	r3, r0
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002842:	d138      	bne.n	80028b6 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f006 f925 	bl	8008a98 <USB_HC_ReadInterrupt>
 800284e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	e025      	b.n	80028a2 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	fa22 f303 	lsr.w	r3, r2, r3
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d018      	beq.n	800289c <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4413      	add	r3, r2
 8002872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800287c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002880:	d106      	bne.n	8002890 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	4619      	mov	r1, r3
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f8ac 	bl	80029e6 <HCD_HC_IN_IRQHandler>
 800288e:	e005      	b.n	800289c <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	4619      	mov	r1, r3
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fc3c 	bl	8003114 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	3301      	adds	r3, #1
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d3d4      	bcc.n	8002856 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f005 fdc8 	bl	8008450 <USB_ReadInterrupts>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	2b10      	cmp	r3, #16
 80028c8:	d101      	bne.n	80028ce <HAL_HCD_IRQHandler+0x1d6>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <HAL_HCD_IRQHandler+0x1d8>
 80028ce:	2300      	movs	r3, #0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d014      	beq.n	80028fe <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0210 	bic.w	r2, r2, #16
 80028e2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 ff8b 	bl	8003800 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	699a      	ldr	r2, [r3, #24]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0210 	orr.w	r2, r2, #16
 80028f8:	619a      	str	r2, [r3, #24]
 80028fa:	e000      	b.n	80028fe <HAL_HCD_IRQHandler+0x206>
      return;
 80028fc:	bf00      	nop
    }
  }
}
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_HCD_Start+0x16>
 8002916:	2302      	movs	r3, #2
 8002918:	e013      	b.n	8002942 <HAL_HCD_Start+0x3e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f005 fcca 	bl	80082c0 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2101      	movs	r1, #1
 8002932:	4618      	mov	r0, r3
 8002934:	f005 fe11 	bl	800855a <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_HCD_Stop+0x16>
 800295c:	2302      	movs	r3, #2
 800295e:	e00d      	b.n	800297c <HAL_HCD_Stop+0x32>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f006 f9df 	bl	8008d30 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f005 fdb8 	bl	8008506 <USB_ResetPort>
 8002996:	4603      	mov	r3, r0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80029ac:	78fa      	ldrb	r2, [r7, #3]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	440b      	add	r3, r1
 80029ba:	335c      	adds	r3, #92	; 0x5c
 80029bc:	781b      	ldrb	r3, [r3, #0]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f005 fdf8 	bl	80085cc <USB_GetHostSpeed>
 80029dc:	4603      	mov	r3, r0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b086      	sub	sp, #24
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	460b      	mov	r3, r1
 80029f0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d119      	bne.n	8002a4a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	015a      	lsls	r2, r3, #5
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a22:	461a      	mov	r2, r3
 8002a24:	2304      	movs	r3, #4
 8002a26:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	0151      	lsls	r1, r2, #5
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	440a      	add	r2, r1
 8002a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a42:	f043 0302 	orr.w	r3, r3, #2
 8002a46:	60d3      	str	r3, [r2, #12]
 8002a48:	e095      	b.n	8002b76 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 0320 	and.w	r3, r3, #32
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d109      	bne.n	8002a74 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2320      	movs	r3, #32
 8002a70:	6093      	str	r3, [r2, #8]
 8002a72:	e080      	b.n	8002b76 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d134      	bne.n	8002af4 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	0151      	lsls	r1, r2, #5
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	440a      	add	r2, r1
 8002aa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aa4:	f043 0302 	orr.w	r3, r3, #2
 8002aa8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	440b      	add	r3, r1
 8002ab8:	335d      	adds	r3, #93	; 0x5d
 8002aba:	2205      	movs	r2, #5
 8002abc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aca:	461a      	mov	r2, r3
 8002acc:	2310      	movs	r3, #16
 8002ace:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002adc:	461a      	mov	r2, r3
 8002ade:	2308      	movs	r3, #8
 8002ae0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f005 ffe4 	bl	8008aba <USB_HC_Halt>
 8002af2:	e040      	b.n	8002b76 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b0a:	d134      	bne.n	8002b76 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	0151      	lsls	r1, r2, #5
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	440a      	add	r2, r1
 8002b22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b26:	f043 0302 	orr.w	r3, r3, #2
 8002b2a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f005 ffbf 	bl	8008aba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2310      	movs	r3, #16
 8002b4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	440b      	add	r3, r1
 8002b5c:	335d      	adds	r3, #93	; 0x5d
 8002b5e:	2208      	movs	r2, #8
 8002b60:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b74:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	015a      	lsls	r2, r3, #5
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b8c:	d122      	bne.n	8002bd4 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	0151      	lsls	r1, r2, #5
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	440a      	add	r2, r1
 8002ba4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f005 ff7e 	bl	8008aba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bd0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002bd2:	e29b      	b.n	800310c <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	f040 80c1 	bne.w	8002d6e <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01b      	beq.n	8002c2c <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	3348      	adds	r3, #72	; 0x48
 8002c04:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	0159      	lsls	r1, r3, #5
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	440b      	add	r3, r1
 8002c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002c18:	1ad1      	subs	r1, r2, r3
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4403      	add	r3, r0
 8002c28:	334c      	adds	r3, #76	; 0x4c
 8002c2a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	335d      	adds	r3, #93	; 0x5d
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3358      	adds	r3, #88	; 0x58
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c60:	461a      	mov	r2, r3
 8002c62:	2301      	movs	r3, #1
 8002c64:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	440b      	add	r3, r1
 8002c74:	333f      	adds	r3, #63	; 0x3f
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	440b      	add	r3, r1
 8002c8a:	333f      	adds	r3, #63	; 0x3f
 8002c8c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d121      	bne.n	8002cd6 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	0151      	lsls	r1, r2, #5
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	440a      	add	r2, r1
 8002ca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cac:	f043 0302 	orr.w	r3, r3, #2
 8002cb0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f005 fefc 	bl	8008aba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2310      	movs	r3, #16
 8002cd2:	6093      	str	r3, [r2, #8]
 8002cd4:	e034      	b.n	8002d40 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	440b      	add	r3, r1
 8002ce4:	333f      	adds	r3, #63	; 0x3f
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d129      	bne.n	8002d40 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	0151      	lsls	r1, r2, #5
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	440a      	add	r2, r1
 8002d02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d0a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	440b      	add	r3, r1
 8002d1a:	335c      	adds	r3, #92	; 0x5c
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	b2d8      	uxtb	r0, r3
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	335c      	adds	r3, #92	; 0x5c
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	4601      	mov	r1, r0
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f009 fa90 	bl	800c260 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	440b      	add	r3, r1
 8002d4e:	3350      	adds	r3, #80	; 0x50
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	f083 0301 	eor.w	r3, r3, #1
 8002d56:	b2d8      	uxtb	r0, r3
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	440b      	add	r3, r1
 8002d66:	3350      	adds	r3, #80	; 0x50
 8002d68:	4602      	mov	r2, r0
 8002d6a:	701a      	strb	r2, [r3, #0]
}
 8002d6c:	e1ce      	b.n	800310c <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	f040 80f1 	bne.w	8002f68 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	0151      	lsls	r1, r2, #5
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	440a      	add	r2, r1
 8002d9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002da0:	f023 0302 	bic.w	r3, r3, #2
 8002da4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	440b      	add	r3, r1
 8002db4:	335d      	adds	r3, #93	; 0x5d
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d10a      	bne.n	8002dd2 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	440b      	add	r3, r1
 8002dca:	335c      	adds	r3, #92	; 0x5c
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
 8002dd0:	e0b0      	b.n	8002f34 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	440b      	add	r3, r1
 8002de0:	335d      	adds	r3, #93	; 0x5d
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b05      	cmp	r3, #5
 8002de6:	d10a      	bne.n	8002dfe <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	440b      	add	r3, r1
 8002df6:	335c      	adds	r3, #92	; 0x5c
 8002df8:	2205      	movs	r2, #5
 8002dfa:	701a      	strb	r2, [r3, #0]
 8002dfc:	e09a      	b.n	8002f34 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	440b      	add	r3, r1
 8002e0c:	335d      	adds	r3, #93	; 0x5d
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b06      	cmp	r3, #6
 8002e12:	d00a      	beq.n	8002e2a <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	440b      	add	r3, r1
 8002e22:	335d      	adds	r3, #93	; 0x5d
 8002e24:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d156      	bne.n	8002ed8 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	440b      	add	r3, r1
 8002e38:	3358      	adds	r3, #88	; 0x58
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	1c59      	adds	r1, r3, #1
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4403      	add	r3, r0
 8002e4c:	3358      	adds	r3, #88	; 0x58
 8002e4e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	440b      	add	r3, r1
 8002e5e:	3358      	adds	r3, #88	; 0x58
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d914      	bls.n	8002e90 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	440b      	add	r3, r1
 8002e74:	3358      	adds	r3, #88	; 0x58
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	440b      	add	r3, r1
 8002e88:	335c      	adds	r3, #92	; 0x5c
 8002e8a:	2204      	movs	r2, #4
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	e009      	b.n	8002ea4 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	440b      	add	r3, r1
 8002e9e:	335c      	adds	r3, #92	; 0x5c
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002eba:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ec2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	e02d      	b.n	8002f34 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	440b      	add	r3, r1
 8002ee6:	335d      	adds	r3, #93	; 0x5d
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d122      	bne.n	8002f34 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	440b      	add	r3, r1
 8002efc:	335c      	adds	r3, #92	; 0x5c
 8002efe:	2202      	movs	r2, #2
 8002f00:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f18:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f20:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f40:	461a      	mov	r2, r3
 8002f42:	2302      	movs	r3, #2
 8002f44:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	b2d8      	uxtb	r0, r3
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	440b      	add	r3, r1
 8002f58:	335c      	adds	r3, #92	; 0x5c
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4601      	mov	r1, r0
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f009 f97d 	bl	800c260 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f66:	e0d1      	b.n	800310c <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7a:	2b80      	cmp	r3, #128	; 0x80
 8002f7c:	d13e      	bne.n	8002ffc <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	0151      	lsls	r1, r2, #5
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	440a      	add	r2, r1
 8002f94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f98:	f043 0302 	orr.w	r3, r3, #2
 8002f9c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	440b      	add	r3, r1
 8002fac:	3358      	adds	r3, #88	; 0x58
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	1c59      	adds	r1, r3, #1
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4403      	add	r3, r0
 8002fc0:	3358      	adds	r3, #88	; 0x58
 8002fc2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	440b      	add	r3, r1
 8002fd2:	335d      	adds	r3, #93	; 0x5d
 8002fd4:	2206      	movs	r2, #6
 8002fd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f005 fd69 	bl	8008aba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	6093      	str	r3, [r2, #8]
}
 8002ffa:	e087      	b.n	800310c <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	4413      	add	r3, r2
 8003004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0310 	and.w	r3, r3, #16
 800300e:	2b10      	cmp	r3, #16
 8003010:	d17c      	bne.n	800310c <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	440b      	add	r3, r1
 8003020:	333f      	adds	r3, #63	; 0x3f
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b03      	cmp	r3, #3
 8003026:	d122      	bne.n	800306e <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	440b      	add	r3, r1
 8003036:	3358      	adds	r3, #88	; 0x58
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4413      	add	r3, r2
 8003044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	0151      	lsls	r1, r2, #5
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	440a      	add	r2, r1
 8003052:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003056:	f043 0302 	orr.w	r3, r3, #2
 800305a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	4611      	mov	r1, r2
 8003066:	4618      	mov	r0, r3
 8003068:	f005 fd27 	bl	8008aba <USB_HC_Halt>
 800306c:	e045      	b.n	80030fa <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	440b      	add	r3, r1
 800307c:	333f      	adds	r3, #63	; 0x3f
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00a      	beq.n	800309a <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4613      	mov	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	440b      	add	r3, r1
 8003092:	333f      	adds	r3, #63	; 0x3f
 8003094:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003096:	2b02      	cmp	r3, #2
 8003098:	d12f      	bne.n	80030fa <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	440b      	add	r3, r1
 80030a8:	3358      	adds	r3, #88	; 0x58
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d121      	bne.n	80030fa <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	440b      	add	r3, r1
 80030c4:	335d      	adds	r3, #93	; 0x5d
 80030c6:	2203      	movs	r2, #3
 80030c8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	0151      	lsls	r1, r2, #5
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	440a      	add	r2, r1
 80030e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030e4:	f043 0302 	orr.w	r3, r3, #2
 80030e8:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	4611      	mov	r1, r2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f005 fce0 	bl	8008aba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4413      	add	r3, r2
 8003102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003106:	461a      	mov	r2, r3
 8003108:	2310      	movs	r3, #16
 800310a:	6093      	str	r3, [r2, #8]
}
 800310c:	bf00      	nop
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4413      	add	r3, r2
 8003136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b04      	cmp	r3, #4
 8003142:	d119      	bne.n	8003178 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4413      	add	r3, r2
 800314c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003150:	461a      	mov	r2, r3
 8003152:	2304      	movs	r3, #4
 8003154:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4413      	add	r3, r2
 800315e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	0151      	lsls	r1, r2, #5
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	440a      	add	r2, r1
 800316c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003170:	f043 0302 	orr.w	r3, r3, #2
 8003174:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003176:	e33e      	b.n	80037f6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4413      	add	r3, r2
 8003180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b20      	cmp	r3, #32
 800318c:	d141      	bne.n	8003212 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4413      	add	r3, r2
 8003196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319a:	461a      	mov	r2, r3
 800319c:	2320      	movs	r3, #32
 800319e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	440b      	add	r3, r1
 80031ae:	333d      	adds	r3, #61	; 0x3d
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	f040 831f 	bne.w	80037f6 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	440b      	add	r3, r1
 80031c6:	333d      	adds	r3, #61	; 0x3d
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	440b      	add	r3, r1
 80031da:	335c      	adds	r3, #92	; 0x5c
 80031dc:	2202      	movs	r2, #2
 80031de:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	0151      	lsls	r1, r2, #5
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	440a      	add	r2, r1
 80031f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031fa:	f043 0302 	orr.w	r3, r3, #2
 80031fe:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	4611      	mov	r1, r2
 800320a:	4618      	mov	r0, r3
 800320c:	f005 fc55 	bl	8008aba <USB_HC_Halt>
}
 8003210:	e2f1      	b.n	80037f6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4413      	add	r3, r2
 800321a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003224:	2b40      	cmp	r3, #64	; 0x40
 8003226:	d13f      	bne.n	80032a8 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	440b      	add	r3, r1
 8003236:	335d      	adds	r3, #93	; 0x5d
 8003238:	2204      	movs	r2, #4
 800323a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	333d      	adds	r3, #61	; 0x3d
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	440b      	add	r3, r1
 800325e:	3358      	adds	r3, #88	; 0x58
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	4413      	add	r3, r2
 800326c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	0151      	lsls	r1, r2, #5
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	440a      	add	r2, r1
 800327a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800327e:	f043 0302 	orr.w	r3, r3, #2
 8003282:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	4611      	mov	r1, r2
 800328e:	4618      	mov	r0, r3
 8003290:	f005 fc13 	bl	8008aba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4413      	add	r3, r2
 800329c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a0:	461a      	mov	r2, r3
 80032a2:	2340      	movs	r3, #64	; 0x40
 80032a4:	6093      	str	r3, [r2, #8]
}
 80032a6:	e2a6      	b.n	80037f6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032be:	d122      	bne.n	8003306 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	0151      	lsls	r1, r2, #5
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	440a      	add	r2, r1
 80032d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032da:	f043 0302 	orr.w	r3, r3, #2
 80032de:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	4611      	mov	r1, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f005 fbe5 	bl	8008aba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fc:	461a      	mov	r2, r3
 80032fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003302:	6093      	str	r3, [r2, #8]
}
 8003304:	e277      	b.n	80037f6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4413      	add	r3, r2
 800330e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b01      	cmp	r3, #1
 800331a:	d135      	bne.n	8003388 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	440b      	add	r3, r1
 800332a:	3358      	adds	r3, #88	; 0x58
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	0151      	lsls	r1, r2, #5
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	440a      	add	r2, r1
 8003346:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800334a:	f043 0302 	orr.w	r3, r3, #2
 800334e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	4611      	mov	r1, r2
 800335a:	4618      	mov	r0, r3
 800335c:	f005 fbad 	bl	8008aba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4413      	add	r3, r2
 8003368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336c:	461a      	mov	r2, r3
 800336e:	2301      	movs	r3, #1
 8003370:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	440b      	add	r3, r1
 8003380:	335d      	adds	r3, #93	; 0x5d
 8003382:	2201      	movs	r2, #1
 8003384:	701a      	strb	r2, [r3, #0]
}
 8003386:	e236      	b.n	80037f6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4413      	add	r3, r2
 8003390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b08      	cmp	r3, #8
 800339c:	d12b      	bne.n	80033f6 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033aa:	461a      	mov	r2, r3
 80033ac:	2308      	movs	r3, #8
 80033ae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	0151      	lsls	r1, r2, #5
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	440a      	add	r2, r1
 80033c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033ca:	f043 0302 	orr.w	r3, r3, #2
 80033ce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	4611      	mov	r1, r2
 80033da:	4618      	mov	r0, r3
 80033dc:	f005 fb6d 	bl	8008aba <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	440b      	add	r3, r1
 80033ee:	335d      	adds	r3, #93	; 0x5d
 80033f0:	2205      	movs	r2, #5
 80033f2:	701a      	strb	r2, [r3, #0]
}
 80033f4:	e1ff      	b.n	80037f6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	2b10      	cmp	r3, #16
 800340a:	d155      	bne.n	80034b8 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	440b      	add	r3, r1
 800341a:	3358      	adds	r3, #88	; 0x58
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	440b      	add	r3, r1
 800342e:	335d      	adds	r3, #93	; 0x5d
 8003430:	2203      	movs	r2, #3
 8003432:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	440b      	add	r3, r1
 8003442:	333d      	adds	r3, #61	; 0x3d
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d114      	bne.n	8003474 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	440b      	add	r3, r1
 8003458:	333c      	adds	r3, #60	; 0x3c
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d109      	bne.n	8003474 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	440b      	add	r3, r1
 800346e:	333d      	adds	r3, #61	; 0x3d
 8003470:	2201      	movs	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	015a      	lsls	r2, r3, #5
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4413      	add	r3, r2
 800347c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	0151      	lsls	r1, r2, #5
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	440a      	add	r2, r1
 800348a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800348e:	f043 0302 	orr.w	r3, r3, #2
 8003492:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	4611      	mov	r1, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	f005 fb0b 	bl	8008aba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b0:	461a      	mov	r2, r3
 80034b2:	2310      	movs	r3, #16
 80034b4:	6093      	str	r3, [r2, #8]
}
 80034b6:	e19e      	b.n	80037f6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ca:	2b80      	cmp	r3, #128	; 0x80
 80034cc:	d12b      	bne.n	8003526 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	0151      	lsls	r1, r2, #5
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	440a      	add	r2, r1
 80034e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034e8:	f043 0302 	orr.w	r3, r3, #2
 80034ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	4611      	mov	r1, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f005 fade 	bl	8008aba <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	440b      	add	r3, r1
 800350c:	335d      	adds	r3, #93	; 0x5d
 800350e:	2206      	movs	r2, #6
 8003510:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4413      	add	r3, r2
 800351a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351e:	461a      	mov	r2, r3
 8003520:	2380      	movs	r3, #128	; 0x80
 8003522:	6093      	str	r3, [r2, #8]
}
 8003524:	e167      	b.n	80037f6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4413      	add	r3, r2
 800352e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353c:	d135      	bne.n	80035aa <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4413      	add	r3, r2
 8003546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	0151      	lsls	r1, r2, #5
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	440a      	add	r2, r1
 8003554:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003558:	f043 0302 	orr.w	r3, r3, #2
 800355c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	4611      	mov	r1, r2
 8003568:	4618      	mov	r0, r3
 800356a:	f005 faa6 	bl	8008aba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4413      	add	r3, r2
 8003576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357a:	461a      	mov	r2, r3
 800357c:	2310      	movs	r3, #16
 800357e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4413      	add	r3, r2
 8003588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358c:	461a      	mov	r2, r3
 800358e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003592:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	440b      	add	r3, r1
 80035a2:	335d      	adds	r3, #93	; 0x5d
 80035a4:	2208      	movs	r2, #8
 80035a6:	701a      	strb	r2, [r3, #0]
}
 80035a8:	e125      	b.n	80037f6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b02      	cmp	r3, #2
 80035be:	f040 811a 	bne.w	80037f6 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	0151      	lsls	r1, r2, #5
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	440a      	add	r2, r1
 80035d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035dc:	f023 0302 	bic.w	r3, r3, #2
 80035e0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	440b      	add	r3, r1
 80035f0:	335d      	adds	r3, #93	; 0x5d
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d137      	bne.n	8003668 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	440b      	add	r3, r1
 8003606:	335c      	adds	r3, #92	; 0x5c
 8003608:	2201      	movs	r2, #1
 800360a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	440b      	add	r3, r1
 800361a:	333f      	adds	r3, #63	; 0x3f
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d00b      	beq.n	800363a <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4613      	mov	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	440b      	add	r3, r1
 8003630:	333f      	adds	r3, #63	; 0x3f
 8003632:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003634:	2b03      	cmp	r3, #3
 8003636:	f040 80c5 	bne.w	80037c4 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	440b      	add	r3, r1
 8003648:	3351      	adds	r3, #81	; 0x51
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	f083 0301 	eor.w	r3, r3, #1
 8003650:	b2d8      	uxtb	r0, r3
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	440b      	add	r3, r1
 8003660:	3351      	adds	r3, #81	; 0x51
 8003662:	4602      	mov	r2, r0
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	e0ad      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	440b      	add	r3, r1
 8003676:	335d      	adds	r3, #93	; 0x5d
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b03      	cmp	r3, #3
 800367c:	d10a      	bne.n	8003694 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	440b      	add	r3, r1
 800368c:	335c      	adds	r3, #92	; 0x5c
 800368e:	2202      	movs	r2, #2
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	e097      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	440b      	add	r3, r1
 80036a2:	335d      	adds	r3, #93	; 0x5d
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d10a      	bne.n	80036c0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	440b      	add	r3, r1
 80036b8:	335c      	adds	r3, #92	; 0x5c
 80036ba:	2202      	movs	r2, #2
 80036bc:	701a      	strb	r2, [r3, #0]
 80036be:	e081      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	440b      	add	r3, r1
 80036ce:	335d      	adds	r3, #93	; 0x5d
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b05      	cmp	r3, #5
 80036d4:	d10a      	bne.n	80036ec <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	440b      	add	r3, r1
 80036e4:	335c      	adds	r3, #92	; 0x5c
 80036e6:	2205      	movs	r2, #5
 80036e8:	701a      	strb	r2, [r3, #0]
 80036ea:	e06b      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	440b      	add	r3, r1
 80036fa:	335d      	adds	r3, #93	; 0x5d
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b06      	cmp	r3, #6
 8003700:	d00a      	beq.n	8003718 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	440b      	add	r3, r1
 8003710:	335d      	adds	r3, #93	; 0x5d
 8003712:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003714:	2b08      	cmp	r3, #8
 8003716:	d155      	bne.n	80037c4 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	440b      	add	r3, r1
 8003726:	3358      	adds	r3, #88	; 0x58
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	1c59      	adds	r1, r3, #1
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	4403      	add	r3, r0
 800373a:	3358      	adds	r3, #88	; 0x58
 800373c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	440b      	add	r3, r1
 800374c:	3358      	adds	r3, #88	; 0x58
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b03      	cmp	r3, #3
 8003752:	d914      	bls.n	800377e <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	440b      	add	r3, r1
 8003762:	3358      	adds	r3, #88	; 0x58
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	440b      	add	r3, r1
 8003776:	335c      	adds	r3, #92	; 0x5c
 8003778:	2204      	movs	r2, #4
 800377a:	701a      	strb	r2, [r3, #0]
 800377c:	e009      	b.n	8003792 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	440b      	add	r3, r1
 800378c:	335c      	adds	r3, #92	; 0x5c
 800378e:	2202      	movs	r2, #2
 8003790:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4413      	add	r3, r2
 800379a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037a8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037b0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037be:	461a      	mov	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d0:	461a      	mov	r2, r3
 80037d2:	2302      	movs	r3, #2
 80037d4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	b2d8      	uxtb	r0, r3
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4613      	mov	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	440b      	add	r3, r1
 80037e8:	335c      	adds	r3, #92	; 0x5c
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	4601      	mov	r1, r0
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f008 fd35 	bl	800c260 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80037f6:	bf00      	nop
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	; 0x28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	0c5b      	lsrs	r3, r3, #17
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003834:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d003      	beq.n	8003844 <HCD_RXQLVL_IRQHandler+0x44>
 800383c:	2b05      	cmp	r3, #5
 800383e:	f000 8082 	beq.w	8003946 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003842:	e083      	b.n	800394c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d07f      	beq.n	800394a <HCD_RXQLVL_IRQHandler+0x14a>
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	440b      	add	r3, r1
 8003858:	3344      	adds	r3, #68	; 0x44
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d074      	beq.n	800394a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	440b      	add	r3, r1
 8003872:	3344      	adds	r3, #68	; 0x44
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	b292      	uxth	r2, r2
 800387a:	4619      	mov	r1, r3
 800387c:	f004 fdbf 	bl	80083fe <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4613      	mov	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	440b      	add	r3, r1
 800388e:	3344      	adds	r3, #68	; 0x44
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	18d1      	adds	r1, r2, r3
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	4403      	add	r3, r0
 80038a4:	3344      	adds	r3, #68	; 0x44
 80038a6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	440b      	add	r3, r1
 80038b6:	334c      	adds	r3, #76	; 0x4c
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	18d1      	adds	r1, r2, r3
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4403      	add	r3, r0
 80038cc:	334c      	adds	r3, #76	; 0x4c
 80038ce:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	4b1d      	ldr	r3, [pc, #116]	; (8003954 <HCD_RXQLVL_IRQHandler+0x154>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d031      	beq.n	800394a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038fc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003904:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	4413      	add	r3, r2
 800390e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003912:	461a      	mov	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	440b      	add	r3, r1
 8003926:	3350      	adds	r3, #80	; 0x50
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	f083 0301 	eor.w	r3, r3, #1
 800392e:	b2d8      	uxtb	r0, r3
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	440b      	add	r3, r1
 800393e:	3350      	adds	r3, #80	; 0x50
 8003940:	4602      	mov	r2, r0
 8003942:	701a      	strb	r2, [r3, #0]
      break;
 8003944:	e001      	b.n	800394a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003946:	bf00      	nop
 8003948:	e000      	b.n	800394c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800394a:	bf00      	nop
  }
}
 800394c:	bf00      	nop
 800394e:	3728      	adds	r7, #40	; 0x28
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	1ff80000 	.word	0x1ff80000

08003958 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003984:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b02      	cmp	r3, #2
 800398e:	d113      	bne.n	80039b8 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b01      	cmp	r3, #1
 8003998:	d10a      	bne.n	80039b0 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699a      	ldr	r2, [r3, #24]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80039a8:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f008 fc3c 	bl	800c228 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f043 0302 	orr.w	r3, r3, #2
 80039b6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d147      	bne.n	8003a52 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f043 0308 	orr.w	r3, r3, #8
 80039c8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d129      	bne.n	8003a28 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d113      	bne.n	8003a04 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80039e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039e6:	d106      	bne.n	80039f6 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2102      	movs	r1, #2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f004 fd4f 	bl	8008492 <USB_InitFSLSPClkSel>
 80039f4:	e011      	b.n	8003a1a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2101      	movs	r1, #1
 80039fc:	4618      	mov	r0, r3
 80039fe:	f004 fd48 	bl	8008492 <USB_InitFSLSPClkSel>
 8003a02:	e00a      	b.n	8003a1a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d106      	bne.n	8003a1a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a12:	461a      	mov	r2, r3
 8003a14:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003a18:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f008 fc2e 	bl	800c27c <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f008 fc01 	bl	800c228 <HAL_HCD_Connect_Callback>
 8003a26:	e014      	b.n	8003a52 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f008 fc35 	bl	800c298 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003a3c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a40:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699a      	ldr	r2, [r3, #24]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003a50:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d103      	bne.n	8003a64 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f043 0320 	orr.w	r3, r3, #32
 8003a62:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	6013      	str	r3, [r2, #0]
}
 8003a70:	bf00      	nop
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e07f      	b.n	8003b8a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f007 fd72 	bl	800b588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2224      	movs	r2, #36	; 0x24
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ac8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ad8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d107      	bne.n	8003af2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aee:	609a      	str	r2, [r3, #8]
 8003af0:	e006      	b.n	8003b00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003afe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d104      	bne.n	8003b12 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6859      	ldr	r1, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	4b1d      	ldr	r3, [pc, #116]	; (8003b94 <HAL_I2C_Init+0x11c>)
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	ea42 0103 	orr.w	r1, r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	021a      	lsls	r2, r3, #8
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69d9      	ldr	r1, [r3, #28]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1a      	ldr	r2, [r3, #32]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	02008000 	.word	0x02008000

08003b98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d138      	bne.n	8003c20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e032      	b.n	8003c22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2224      	movs	r2, #36	; 0x24
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0201 	bic.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6819      	ldr	r1, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	e000      	b.n	8003c22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c20:	2302      	movs	r3, #2
  }
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b085      	sub	sp, #20
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	d139      	bne.n	8003cb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e033      	b.n	8003cba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2224      	movs	r2, #36	; 0x24
 8003c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0201 	bic.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	021b      	lsls	r3, r3, #8
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	e000      	b.n	8003cba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cb8:	2302      	movs	r3, #2
  }
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e0bf      	b.n	8003e5a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f007 fcc2 	bl	800b678 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699a      	ldr	r2, [r3, #24]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003d0a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6999      	ldr	r1, [r3, #24]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d20:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6899      	ldr	r1, [r3, #8]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	4b4a      	ldr	r3, [pc, #296]	; (8003e64 <HAL_LTDC_Init+0x19c>)
 8003d3c:	400b      	ands	r3, r1
 8003d3e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	041b      	lsls	r3, r3, #16
 8003d46:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6899      	ldr	r1, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68d9      	ldr	r1, [r3, #12]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4b3e      	ldr	r3, [pc, #248]	; (8003e64 <HAL_LTDC_Init+0x19c>)
 8003d6a:	400b      	ands	r3, r1
 8003d6c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	041b      	lsls	r3, r3, #16
 8003d74:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68d9      	ldr	r1, [r3, #12]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1a      	ldr	r2, [r3, #32]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6919      	ldr	r1, [r3, #16]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4b33      	ldr	r3, [pc, #204]	; (8003e64 <HAL_LTDC_Init+0x19c>)
 8003d98:	400b      	ands	r3, r1
 8003d9a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	041b      	lsls	r3, r3, #16
 8003da2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6919      	ldr	r1, [r3, #16]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6959      	ldr	r1, [r3, #20]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	4b27      	ldr	r3, [pc, #156]	; (8003e64 <HAL_LTDC_Init+0x19c>)
 8003dc6:	400b      	ands	r3, r1
 8003dc8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	041b      	lsls	r3, r3, #16
 8003dd0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6959      	ldr	r1, [r3, #20]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dee:	021b      	lsls	r3, r3, #8
 8003df0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003df8:	041b      	lsls	r3, r3, #16
 8003dfa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0206 	orr.w	r2, r2, #6
 8003e36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	f000f800 	.word	0xf000f800

08003e68 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d023      	beq.n	8003ed2 <HAL_LTDC_IRQHandler+0x6a>
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01e      	beq.n	8003ed2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0204 	bic.w	r2, r2, #4
 8003ea2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003eb2:	f043 0201 	orr.w	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2204      	movs	r2, #4
 8003ec0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f86f 	bl	8003fb0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d023      	beq.n	8003f24 <HAL_LTDC_IRQHandler+0xbc>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01e      	beq.n	8003f24 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0202 	bic.w	r2, r2, #2
 8003ef4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2202      	movs	r2, #2
 8003efc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f04:	f043 0202 	orr.w	r2, r3, #2
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2204      	movs	r2, #4
 8003f12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f846 	bl	8003fb0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d01b      	beq.n	8003f66 <HAL_LTDC_IRQHandler+0xfe>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d016      	beq.n	8003f66 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0201 	bic.w	r2, r2, #1
 8003f46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f82f 	bl	8003fc4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d01b      	beq.n	8003fa8 <HAL_LTDC_IRQHandler+0x140>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d016      	beq.n	8003fa8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0208 	bic.w	r2, r2, #8
 8003f88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2208      	movs	r2, #8
 8003f90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f818 	bl	8003fd8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003fec:	b5b0      	push	{r4, r5, r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_LTDC_ConfigLayer+0x1a>
 8004002:	2302      	movs	r3, #2
 8004004:	e02c      	b.n	8004060 <HAL_LTDC_ConfigLayer+0x74>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2202      	movs	r2, #2
 8004012:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2134      	movs	r1, #52	; 0x34
 800401c:	fb01 f303 	mul.w	r3, r1, r3
 8004020:	4413      	add	r3, r2
 8004022:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	4614      	mov	r4, r2
 800402a:	461d      	mov	r5, r3
 800402c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800402e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004038:	682b      	ldr	r3, [r5, #0]
 800403a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	68b9      	ldr	r1, [r7, #8]
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f81f 	bl	8004084 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2201      	movs	r2, #1
 800404c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bdb0      	pop	{r4, r5, r7, pc}

08004068 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004076:	b2db      	uxtb	r3, r3
}
 8004078:	4618      	mov	r0, r3
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004084:	b480      	push	{r7}
 8004086:	b089      	sub	sp, #36	; 0x24
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	0c1b      	lsrs	r3, r3, #16
 800409c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a0:	4413      	add	r3, r2
 80040a2:	041b      	lsls	r3, r3, #16
 80040a4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	01db      	lsls	r3, r3, #7
 80040b0:	4413      	add	r3, r2
 80040b2:	3384      	adds	r3, #132	; 0x84
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	4611      	mov	r1, r2
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	01d2      	lsls	r2, r2, #7
 80040c0:	440a      	add	r2, r1
 80040c2:	3284      	adds	r2, #132	; 0x84
 80040c4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80040c8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	0c1b      	lsrs	r3, r3, #16
 80040d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040da:	4413      	add	r3, r2
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4619      	mov	r1, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	01db      	lsls	r3, r3, #7
 80040e8:	440b      	add	r3, r1
 80040ea:	3384      	adds	r3, #132	; 0x84
 80040ec:	4619      	mov	r1, r3
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004102:	4413      	add	r3, r2
 8004104:	041b      	lsls	r3, r3, #16
 8004106:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	461a      	mov	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	01db      	lsls	r3, r3, #7
 8004112:	4413      	add	r3, r2
 8004114:	3384      	adds	r3, #132	; 0x84
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	4611      	mov	r1, r2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	01d2      	lsls	r2, r2, #7
 8004122:	440a      	add	r2, r1
 8004124:	3284      	adds	r2, #132	; 0x84
 8004126:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800412a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800413a:	4413      	add	r3, r2
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4619      	mov	r1, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	01db      	lsls	r3, r3, #7
 8004148:	440b      	add	r3, r1
 800414a:	3384      	adds	r3, #132	; 0x84
 800414c:	4619      	mov	r1, r3
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	4313      	orrs	r3, r2
 8004152:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	01db      	lsls	r3, r3, #7
 800415e:	4413      	add	r3, r2
 8004160:	3384      	adds	r3, #132	; 0x84
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	4611      	mov	r1, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	01d2      	lsls	r2, r2, #7
 800416e:	440a      	add	r2, r1
 8004170:	3284      	adds	r2, #132	; 0x84
 8004172:	f023 0307 	bic.w	r3, r3, #7
 8004176:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	01db      	lsls	r3, r3, #7
 8004182:	4413      	add	r3, r2
 8004184:	3384      	adds	r3, #132	; 0x84
 8004186:	461a      	mov	r2, r3
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004194:	021b      	lsls	r3, r3, #8
 8004196:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800419e:	041b      	lsls	r3, r3, #16
 80041a0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	061b      	lsls	r3, r3, #24
 80041a8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	01db      	lsls	r3, r3, #7
 80041b4:	4413      	add	r3, r2
 80041b6:	3384      	adds	r3, #132	; 0x84
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	01db      	lsls	r3, r3, #7
 80041c4:	4413      	add	r3, r2
 80041c6:	3384      	adds	r3, #132	; 0x84
 80041c8:	461a      	mov	r2, r3
 80041ca:	2300      	movs	r3, #0
 80041cc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80041d4:	461a      	mov	r2, r3
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	431a      	orrs	r2, r3
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	431a      	orrs	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4619      	mov	r1, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	01db      	lsls	r3, r3, #7
 80041e8:	440b      	add	r3, r1
 80041ea:	3384      	adds	r3, #132	; 0x84
 80041ec:	4619      	mov	r1, r3
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	01db      	lsls	r3, r3, #7
 80041fe:	4413      	add	r3, r2
 8004200:	3384      	adds	r3, #132	; 0x84
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	6812      	ldr	r2, [r2, #0]
 8004208:	4611      	mov	r1, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	01d2      	lsls	r2, r2, #7
 800420e:	440a      	add	r2, r1
 8004210:	3284      	adds	r2, #132	; 0x84
 8004212:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004216:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	01db      	lsls	r3, r3, #7
 8004222:	4413      	add	r3, r2
 8004224:	3384      	adds	r3, #132	; 0x84
 8004226:	461a      	mov	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	01db      	lsls	r3, r3, #7
 8004238:	4413      	add	r3, r2
 800423a:	3384      	adds	r3, #132	; 0x84
 800423c:	69da      	ldr	r2, [r3, #28]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4619      	mov	r1, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	01db      	lsls	r3, r3, #7
 8004248:	440b      	add	r3, r1
 800424a:	3384      	adds	r3, #132	; 0x84
 800424c:	4619      	mov	r1, r3
 800424e:	4b58      	ldr	r3, [pc, #352]	; (80043b0 <LTDC_SetConfig+0x32c>)
 8004250:	4013      	ands	r3, r2
 8004252:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	69da      	ldr	r2, [r3, #28]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	68f9      	ldr	r1, [r7, #12]
 800425e:	6809      	ldr	r1, [r1, #0]
 8004260:	4608      	mov	r0, r1
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	01c9      	lsls	r1, r1, #7
 8004266:	4401      	add	r1, r0
 8004268:	3184      	adds	r1, #132	; 0x84
 800426a:	4313      	orrs	r3, r2
 800426c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	01db      	lsls	r3, r3, #7
 8004278:	4413      	add	r3, r2
 800427a:	3384      	adds	r3, #132	; 0x84
 800427c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	01db      	lsls	r3, r3, #7
 8004288:	4413      	add	r3, r2
 800428a:	3384      	adds	r3, #132	; 0x84
 800428c:	461a      	mov	r2, r3
 800428e:	2300      	movs	r3, #0
 8004290:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	01db      	lsls	r3, r3, #7
 800429c:	4413      	add	r3, r2
 800429e:	3384      	adds	r3, #132	; 0x84
 80042a0:	461a      	mov	r2, r3
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d102      	bne.n	80042b6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80042b0:	2304      	movs	r3, #4
 80042b2:	61fb      	str	r3, [r7, #28]
 80042b4:	e01b      	b.n	80042ee <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d102      	bne.n	80042c4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80042be:	2303      	movs	r3, #3
 80042c0:	61fb      	str	r3, [r7, #28]
 80042c2:	e014      	b.n	80042ee <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d00b      	beq.n	80042e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d007      	beq.n	80042e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80042d8:	2b03      	cmp	r3, #3
 80042da:	d003      	beq.n	80042e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80042e0:	2b07      	cmp	r3, #7
 80042e2:	d102      	bne.n	80042ea <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80042e4:	2302      	movs	r3, #2
 80042e6:	61fb      	str	r3, [r7, #28]
 80042e8:	e001      	b.n	80042ee <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80042ea:	2301      	movs	r3, #1
 80042ec:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	01db      	lsls	r3, r3, #7
 80042f8:	4413      	add	r3, r2
 80042fa:	3384      	adds	r3, #132	; 0x84
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	6812      	ldr	r2, [r2, #0]
 8004302:	4611      	mov	r1, r2
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	01d2      	lsls	r2, r2, #7
 8004308:	440a      	add	r2, r1
 800430a:	3284      	adds	r2, #132	; 0x84
 800430c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004310:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	69fa      	ldr	r2, [r7, #28]
 8004318:	fb02 f303 	mul.w	r3, r2, r3
 800431c:	041a      	lsls	r2, r3, #16
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	6859      	ldr	r1, [r3, #4]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	1acb      	subs	r3, r1, r3
 8004328:	69f9      	ldr	r1, [r7, #28]
 800432a:	fb01 f303 	mul.w	r3, r1, r3
 800432e:	3303      	adds	r3, #3
 8004330:	68f9      	ldr	r1, [r7, #12]
 8004332:	6809      	ldr	r1, [r1, #0]
 8004334:	4608      	mov	r0, r1
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	01c9      	lsls	r1, r1, #7
 800433a:	4401      	add	r1, r0
 800433c:	3184      	adds	r1, #132	; 0x84
 800433e:	4313      	orrs	r3, r2
 8004340:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	01db      	lsls	r3, r3, #7
 800434c:	4413      	add	r3, r2
 800434e:	3384      	adds	r3, #132	; 0x84
 8004350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4619      	mov	r1, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	01db      	lsls	r3, r3, #7
 800435c:	440b      	add	r3, r1
 800435e:	3384      	adds	r3, #132	; 0x84
 8004360:	4619      	mov	r1, r3
 8004362:	4b14      	ldr	r3, [pc, #80]	; (80043b4 <LTDC_SetConfig+0x330>)
 8004364:	4013      	ands	r3, r2
 8004366:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	01db      	lsls	r3, r3, #7
 8004372:	4413      	add	r3, r2
 8004374:	3384      	adds	r3, #132	; 0x84
 8004376:	461a      	mov	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	01db      	lsls	r3, r3, #7
 8004388:	4413      	add	r3, r2
 800438a:	3384      	adds	r3, #132	; 0x84
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	6812      	ldr	r2, [r2, #0]
 8004392:	4611      	mov	r1, r2
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	01d2      	lsls	r2, r2, #7
 8004398:	440a      	add	r2, r1
 800439a:	3284      	adds	r2, #132	; 0x84
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	6013      	str	r3, [r2, #0]
}
 80043a2:	bf00      	nop
 80043a4:	3724      	adds	r7, #36	; 0x24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	fffff8f8 	.word	0xfffff8f8
 80043b4:	fffff800 	.word	0xfffff800

080043b8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043bc:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a04      	ldr	r2, [pc, #16]	; (80043d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c6:	6013      	str	r3, [r2, #0]
}
 80043c8:	bf00      	nop
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40007000 	.word	0x40007000

080043d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80043de:	2300      	movs	r3, #0
 80043e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80043e2:	4b23      	ldr	r3, [pc, #140]	; (8004470 <HAL_PWREx_EnableOverDrive+0x98>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	4a22      	ldr	r2, [pc, #136]	; (8004470 <HAL_PWREx_EnableOverDrive+0x98>)
 80043e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ec:	6413      	str	r3, [r2, #64]	; 0x40
 80043ee:	4b20      	ldr	r3, [pc, #128]	; (8004470 <HAL_PWREx_EnableOverDrive+0x98>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f6:	603b      	str	r3, [r7, #0]
 80043f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80043fa:	4b1e      	ldr	r3, [pc, #120]	; (8004474 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a1d      	ldr	r2, [pc, #116]	; (8004474 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004404:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004406:	f7fc ff33 	bl	8001270 <HAL_GetTick>
 800440a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800440c:	e009      	b.n	8004422 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800440e:	f7fc ff2f 	bl	8001270 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800441c:	d901      	bls.n	8004422 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e022      	b.n	8004468 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004422:	4b14      	ldr	r3, [pc, #80]	; (8004474 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800442a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800442e:	d1ee      	bne.n	800440e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004430:	4b10      	ldr	r3, [pc, #64]	; (8004474 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a0f      	ldr	r2, [pc, #60]	; (8004474 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800443a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800443c:	f7fc ff18 	bl	8001270 <HAL_GetTick>
 8004440:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004442:	e009      	b.n	8004458 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004444:	f7fc ff14 	bl	8001270 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004452:	d901      	bls.n	8004458 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e007      	b.n	8004468 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004458:	4b06      	ldr	r3, [pc, #24]	; (8004474 <HAL_PWREx_EnableOverDrive+0x9c>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004460:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004464:	d1ee      	bne.n	8004444 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40023800 	.word	0x40023800
 8004474:	40007000 	.word	0x40007000

08004478 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af02      	add	r7, sp, #8
 800447e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004484:	f7fc fef4 	bl	8001270 <HAL_GetTick>
 8004488:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e073      	b.n	800457c <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_QSPI_Init+0x2c>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e06b      	b.n	800457c <HAL_QSPI_Init+0x104>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10b      	bne.n	80044d0 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f007 f9a1 	bl	800b808 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80044c6:	f241 3188 	movw	r1, #5000	; 0x1388
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f85e 	bl	800458c <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	3b01      	subs	r3, #1
 80044e0:	021a      	lsls	r2, r3, #8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2200      	movs	r2, #0
 80044f4:	2120      	movs	r1, #32
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f856 	bl	80045a8 <QSPI_WaitFlagStateUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d135      	bne.n	8004572 <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	4b1d      	ldr	r3, [pc, #116]	; (8004584 <HAL_QSPI_Init+0x10c>)
 800450e:	4013      	ands	r3, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6852      	ldr	r2, [r2, #4]
 8004514:	0611      	lsls	r1, r2, #24
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	68d2      	ldr	r2, [r2, #12]
 800451a:	4311      	orrs	r1, r2
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	69d2      	ldr	r2, [r2, #28]
 8004520:	4311      	orrs	r1, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6a12      	ldr	r2, [r2, #32]
 8004526:	4311      	orrs	r1, r2
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6812      	ldr	r2, [r2, #0]
 800452c:	430b      	orrs	r3, r1
 800452e:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	4b14      	ldr	r3, [pc, #80]	; (8004588 <HAL_QSPI_Init+0x110>)
 8004538:	4013      	ands	r3, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6912      	ldr	r2, [r2, #16]
 800453e:	0411      	lsls	r1, r2, #16
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6952      	ldr	r2, [r2, #20]
 8004544:	4311      	orrs	r1, r2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6992      	ldr	r2, [r2, #24]
 800454a:	4311      	orrs	r1, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	430b      	orrs	r3, r1
 8004552:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800457a:	7bfb      	ldrb	r3, [r7, #15]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	00ffff2f 	.word	0x00ffff2f
 8004588:	ffe0f8fe 	.word	0xffe0f8fe

0800458c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	4613      	mov	r3, r2
 80045b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80045b8:	e01a      	b.n	80045f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c0:	d016      	beq.n	80045f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d007      	beq.n	80045d8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80045c8:	f7fc fe52 	bl	8001270 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d20b      	bcs.n	80045f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2204      	movs	r2, #4
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e4:	f043 0201 	orr.w	r2, r3, #1
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e00e      	b.n	800460e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bf14      	ite	ne
 80045fe:	2301      	movne	r3, #1
 8004600:	2300      	moveq	r3, #0
 8004602:	b2db      	uxtb	r3, r3
 8004604:	461a      	mov	r2, r3
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	429a      	cmp	r2, r3
 800460a:	d1d6      	bne.n	80045ba <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
	...

08004618 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8004620:	2300      	movs	r3, #0
 8004622:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e25c      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 8087 	beq.w	800474a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800463c:	4b96      	ldr	r3, [pc, #600]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 030c 	and.w	r3, r3, #12
 8004644:	2b04      	cmp	r3, #4
 8004646:	d00c      	beq.n	8004662 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004648:	4b93      	ldr	r3, [pc, #588]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 030c 	and.w	r3, r3, #12
 8004650:	2b08      	cmp	r3, #8
 8004652:	d112      	bne.n	800467a <HAL_RCC_OscConfig+0x62>
 8004654:	4b90      	ldr	r3, [pc, #576]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004660:	d10b      	bne.n	800467a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004662:	4b8d      	ldr	r3, [pc, #564]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d06c      	beq.n	8004748 <HAL_RCC_OscConfig+0x130>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d168      	bne.n	8004748 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e236      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004682:	d106      	bne.n	8004692 <HAL_RCC_OscConfig+0x7a>
 8004684:	4b84      	ldr	r3, [pc, #528]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a83      	ldr	r2, [pc, #524]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 800468a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	e02e      	b.n	80046f0 <HAL_RCC_OscConfig+0xd8>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10c      	bne.n	80046b4 <HAL_RCC_OscConfig+0x9c>
 800469a:	4b7f      	ldr	r3, [pc, #508]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a7e      	ldr	r2, [pc, #504]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 80046a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	4b7c      	ldr	r3, [pc, #496]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a7b      	ldr	r2, [pc, #492]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 80046ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	e01d      	b.n	80046f0 <HAL_RCC_OscConfig+0xd8>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCC_OscConfig+0xc0>
 80046be:	4b76      	ldr	r3, [pc, #472]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a75      	ldr	r2, [pc, #468]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 80046c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	4b73      	ldr	r3, [pc, #460]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a72      	ldr	r2, [pc, #456]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 80046d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	e00b      	b.n	80046f0 <HAL_RCC_OscConfig+0xd8>
 80046d8:	4b6f      	ldr	r3, [pc, #444]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a6e      	ldr	r2, [pc, #440]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 80046de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	4b6c      	ldr	r3, [pc, #432]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a6b      	ldr	r2, [pc, #428]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 80046ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d013      	beq.n	8004720 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f8:	f7fc fdba 	bl	8001270 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004700:	f7fc fdb6 	bl	8001270 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b64      	cmp	r3, #100	; 0x64
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e1ea      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004712:	4b61      	ldr	r3, [pc, #388]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCC_OscConfig+0xe8>
 800471e:	e014      	b.n	800474a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004720:	f7fc fda6 	bl	8001270 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004728:	f7fc fda2 	bl	8001270 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b64      	cmp	r3, #100	; 0x64
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e1d6      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800473a:	4b57      	ldr	r3, [pc, #348]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1f0      	bne.n	8004728 <HAL_RCC_OscConfig+0x110>
 8004746:	e000      	b.n	800474a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d069      	beq.n	800482a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004756:	4b50      	ldr	r3, [pc, #320]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00b      	beq.n	800477a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004762:	4b4d      	ldr	r3, [pc, #308]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 030c 	and.w	r3, r3, #12
 800476a:	2b08      	cmp	r3, #8
 800476c:	d11c      	bne.n	80047a8 <HAL_RCC_OscConfig+0x190>
 800476e:	4b4a      	ldr	r3, [pc, #296]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d116      	bne.n	80047a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800477a:	4b47      	ldr	r3, [pc, #284]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d005      	beq.n	8004792 <HAL_RCC_OscConfig+0x17a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d001      	beq.n	8004792 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e1aa      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004792:	4b41      	ldr	r3, [pc, #260]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	493d      	ldr	r1, [pc, #244]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047a6:	e040      	b.n	800482a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d023      	beq.n	80047f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047b0:	4b39      	ldr	r3, [pc, #228]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a38      	ldr	r2, [pc, #224]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fc fd58 	bl	8001270 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047c4:	f7fc fd54 	bl	8001270 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e188      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d6:	4b30      	ldr	r3, [pc, #192]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e2:	4b2d      	ldr	r3, [pc, #180]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	4929      	ldr	r1, [pc, #164]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	600b      	str	r3, [r1, #0]
 80047f6:	e018      	b.n	800482a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047f8:	4b27      	ldr	r3, [pc, #156]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a26      	ldr	r2, [pc, #152]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 80047fe:	f023 0301 	bic.w	r3, r3, #1
 8004802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fc fd34 	bl	8001270 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800480c:	f7fc fd30 	bl	8001270 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e164      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481e:	4b1e      	ldr	r3, [pc, #120]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d038      	beq.n	80048a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d019      	beq.n	8004872 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800483e:	4b16      	ldr	r3, [pc, #88]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 8004840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004842:	4a15      	ldr	r2, [pc, #84]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 8004844:	f043 0301 	orr.w	r3, r3, #1
 8004848:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484a:	f7fc fd11 	bl	8001270 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004852:	f7fc fd0d 	bl	8001270 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e141      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004864:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 8004866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f0      	beq.n	8004852 <HAL_RCC_OscConfig+0x23a>
 8004870:	e01a      	b.n	80048a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004872:	4b09      	ldr	r3, [pc, #36]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 8004874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004876:	4a08      	ldr	r2, [pc, #32]	; (8004898 <HAL_RCC_OscConfig+0x280>)
 8004878:	f023 0301 	bic.w	r3, r3, #1
 800487c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487e:	f7fc fcf7 	bl	8001270 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004884:	e00a      	b.n	800489c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004886:	f7fc fcf3 	bl	8001270 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d903      	bls.n	800489c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e127      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4d0>
 8004898:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800489c:	4b94      	ldr	r3, [pc, #592]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 800489e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1ee      	bne.n	8004886 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 80a4 	beq.w	80049fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048b6:	4b8e      	ldr	r3, [pc, #568]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10d      	bne.n	80048de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c2:	4b8b      	ldr	r3, [pc, #556]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	4a8a      	ldr	r2, [pc, #552]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 80048c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048cc:	6413      	str	r3, [r2, #64]	; 0x40
 80048ce:	4b88      	ldr	r3, [pc, #544]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80048da:	2301      	movs	r3, #1
 80048dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048de:	4b85      	ldr	r3, [pc, #532]	; (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d118      	bne.n	800491c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80048ea:	4b82      	ldr	r3, [pc, #520]	; (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a81      	ldr	r2, [pc, #516]	; (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 80048f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048f6:	f7fc fcbb 	bl	8001270 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80048fe:	f7fc fcb7 	bl	8001270 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b64      	cmp	r3, #100	; 0x64
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e0eb      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004910:	4b78      	ldr	r3, [pc, #480]	; (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0f0      	beq.n	80048fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d106      	bne.n	8004932 <HAL_RCC_OscConfig+0x31a>
 8004924:	4b72      	ldr	r3, [pc, #456]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004928:	4a71      	ldr	r2, [pc, #452]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 800492a:	f043 0301 	orr.w	r3, r3, #1
 800492e:	6713      	str	r3, [r2, #112]	; 0x70
 8004930:	e02d      	b.n	800498e <HAL_RCC_OscConfig+0x376>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10c      	bne.n	8004954 <HAL_RCC_OscConfig+0x33c>
 800493a:	4b6d      	ldr	r3, [pc, #436]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 800493c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493e:	4a6c      	ldr	r2, [pc, #432]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004940:	f023 0301 	bic.w	r3, r3, #1
 8004944:	6713      	str	r3, [r2, #112]	; 0x70
 8004946:	4b6a      	ldr	r3, [pc, #424]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494a:	4a69      	ldr	r2, [pc, #420]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 800494c:	f023 0304 	bic.w	r3, r3, #4
 8004950:	6713      	str	r3, [r2, #112]	; 0x70
 8004952:	e01c      	b.n	800498e <HAL_RCC_OscConfig+0x376>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	2b05      	cmp	r3, #5
 800495a:	d10c      	bne.n	8004976 <HAL_RCC_OscConfig+0x35e>
 800495c:	4b64      	ldr	r3, [pc, #400]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 800495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004960:	4a63      	ldr	r2, [pc, #396]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004962:	f043 0304 	orr.w	r3, r3, #4
 8004966:	6713      	str	r3, [r2, #112]	; 0x70
 8004968:	4b61      	ldr	r3, [pc, #388]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 800496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496c:	4a60      	ldr	r2, [pc, #384]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	6713      	str	r3, [r2, #112]	; 0x70
 8004974:	e00b      	b.n	800498e <HAL_RCC_OscConfig+0x376>
 8004976:	4b5e      	ldr	r3, [pc, #376]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497a:	4a5d      	ldr	r2, [pc, #372]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 800497c:	f023 0301 	bic.w	r3, r3, #1
 8004980:	6713      	str	r3, [r2, #112]	; 0x70
 8004982:	4b5b      	ldr	r3, [pc, #364]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004986:	4a5a      	ldr	r2, [pc, #360]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004988:	f023 0304 	bic.w	r3, r3, #4
 800498c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d015      	beq.n	80049c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004996:	f7fc fc6b 	bl	8001270 <HAL_GetTick>
 800499a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499c:	e00a      	b.n	80049b4 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800499e:	f7fc fc67 	bl	8001270 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e099      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b4:	4b4e      	ldr	r3, [pc, #312]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 80049b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0ee      	beq.n	800499e <HAL_RCC_OscConfig+0x386>
 80049c0:	e014      	b.n	80049ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c2:	f7fc fc55 	bl	8001270 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c8:	e00a      	b.n	80049e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ca:	f7fc fc51 	bl	8001270 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d8:	4293      	cmp	r3, r2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e083      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e0:	4b43      	ldr	r3, [pc, #268]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 80049e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1ee      	bne.n	80049ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049ec:	7dfb      	ldrb	r3, [r7, #23]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d105      	bne.n	80049fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f2:	4b3f      	ldr	r3, [pc, #252]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	4a3e      	ldr	r2, [pc, #248]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 80049f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d06f      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a06:	4b3a      	ldr	r3, [pc, #232]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 030c 	and.w	r3, r3, #12
 8004a0e:	2b08      	cmp	r3, #8
 8004a10:	d067      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d149      	bne.n	8004aae <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1a:	4b35      	ldr	r3, [pc, #212]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a34      	ldr	r2, [pc, #208]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004a20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a26:	f7fc fc23 	bl	8001270 <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2c:	e008      	b.n	8004a40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a2e:	f7fc fc1f 	bl	8001270 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e053      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a40:	4b2b      	ldr	r3, [pc, #172]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1f0      	bne.n	8004a2e <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	69da      	ldr	r2, [r3, #28]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	019b      	lsls	r3, r3, #6
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a62:	085b      	lsrs	r3, r3, #1
 8004a64:	3b01      	subs	r3, #1
 8004a66:	041b      	lsls	r3, r3, #16
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6e:	061b      	lsls	r3, r3, #24
 8004a70:	4313      	orrs	r3, r2
 8004a72:	4a1f      	ldr	r2, [pc, #124]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004a74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a78:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a7a:	4b1d      	ldr	r3, [pc, #116]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a1c      	ldr	r2, [pc, #112]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004a80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a86:	f7fc fbf3 	bl	8001270 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a8e:	f7fc fbef 	bl	8001270 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e023      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa0:	4b13      	ldr	r3, [pc, #76]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0f0      	beq.n	8004a8e <HAL_RCC_OscConfig+0x476>
 8004aac:	e01b      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aae:	4b10      	ldr	r3, [pc, #64]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a0f      	ldr	r2, [pc, #60]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004ab4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aba:	f7fc fbd9 	bl	8001270 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ac2:	f7fc fbd5 	bl	8001270 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e009      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad4:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f0      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x4aa>
 8004ae0:	e001      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40023800 	.word	0x40023800
 8004af4:	40007000 	.word	0x40007000

08004af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e0ce      	b.n	8004cae <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b10:	4b69      	ldr	r3, [pc, #420]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d910      	bls.n	8004b40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1e:	4b66      	ldr	r3, [pc, #408]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f023 020f 	bic.w	r2, r3, #15
 8004b26:	4964      	ldr	r1, [pc, #400]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2e:	4b62      	ldr	r3, [pc, #392]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d001      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e0b6      	b.n	8004cae <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d020      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b58:	4b58      	ldr	r3, [pc, #352]	; (8004cbc <HAL_RCC_ClockConfig+0x1c4>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	4a57      	ldr	r2, [pc, #348]	; (8004cbc <HAL_RCC_ClockConfig+0x1c4>)
 8004b5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d005      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b70:	4b52      	ldr	r3, [pc, #328]	; (8004cbc <HAL_RCC_ClockConfig+0x1c4>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	4a51      	ldr	r2, [pc, #324]	; (8004cbc <HAL_RCC_ClockConfig+0x1c4>)
 8004b76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b7c:	4b4f      	ldr	r3, [pc, #316]	; (8004cbc <HAL_RCC_ClockConfig+0x1c4>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	494c      	ldr	r1, [pc, #304]	; (8004cbc <HAL_RCC_ClockConfig+0x1c4>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d040      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d107      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba2:	4b46      	ldr	r3, [pc, #280]	; (8004cbc <HAL_RCC_ClockConfig+0x1c4>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d115      	bne.n	8004bda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e07d      	b.n	8004cae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d107      	bne.n	8004bca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bba:	4b40      	ldr	r3, [pc, #256]	; (8004cbc <HAL_RCC_ClockConfig+0x1c4>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e071      	b.n	8004cae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bca:	4b3c      	ldr	r3, [pc, #240]	; (8004cbc <HAL_RCC_ClockConfig+0x1c4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e069      	b.n	8004cae <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bda:	4b38      	ldr	r3, [pc, #224]	; (8004cbc <HAL_RCC_ClockConfig+0x1c4>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f023 0203 	bic.w	r2, r3, #3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	4935      	ldr	r1, [pc, #212]	; (8004cbc <HAL_RCC_ClockConfig+0x1c4>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bec:	f7fc fb40 	bl	8001270 <HAL_GetTick>
 8004bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf2:	e00a      	b.n	8004c0a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf4:	f7fc fb3c 	bl	8001270 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e051      	b.n	8004cae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0a:	4b2c      	ldr	r3, [pc, #176]	; (8004cbc <HAL_RCC_ClockConfig+0x1c4>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 020c 	and.w	r2, r3, #12
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d1eb      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c1c:	4b26      	ldr	r3, [pc, #152]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d210      	bcs.n	8004c4c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2a:	4b23      	ldr	r3, [pc, #140]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f023 020f 	bic.w	r2, r3, #15
 8004c32:	4921      	ldr	r1, [pc, #132]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c3a:	4b1f      	ldr	r3, [pc, #124]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d001      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e030      	b.n	8004cae <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d008      	beq.n	8004c6a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c58:	4b18      	ldr	r3, [pc, #96]	; (8004cbc <HAL_RCC_ClockConfig+0x1c4>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	4915      	ldr	r1, [pc, #84]	; (8004cbc <HAL_RCC_ClockConfig+0x1c4>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d009      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c76:	4b11      	ldr	r3, [pc, #68]	; (8004cbc <HAL_RCC_ClockConfig+0x1c4>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	490d      	ldr	r1, [pc, #52]	; (8004cbc <HAL_RCC_ClockConfig+0x1c4>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c8a:	f000 f81d 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8004c8e:	4601      	mov	r1, r0
 8004c90:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <HAL_RCC_ClockConfig+0x1c4>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	091b      	lsrs	r3, r3, #4
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	4a09      	ldr	r2, [pc, #36]	; (8004cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8004c9c:	5cd3      	ldrb	r3, [r2, r3]
 8004c9e:	fa21 f303 	lsr.w	r3, r1, r3
 8004ca2:	4a08      	ldr	r2, [pc, #32]	; (8004cc4 <HAL_RCC_ClockConfig+0x1cc>)
 8004ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	f007 f9b8 	bl	800c01c <HAL_InitTick>

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40023c00 	.word	0x40023c00
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	0800e090 	.word	0x0800e090
 8004cc4:	2000000c 	.word	0x2000000c

08004cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cde:	4b50      	ldr	r3, [pc, #320]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 030c 	and.w	r3, r3, #12
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d007      	beq.n	8004cfa <HAL_RCC_GetSysClockFreq+0x32>
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	d008      	beq.n	8004d00 <HAL_RCC_GetSysClockFreq+0x38>
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f040 808d 	bne.w	8004e0e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cf4:	4b4b      	ldr	r3, [pc, #300]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004cf6:	60bb      	str	r3, [r7, #8]
       break;
 8004cf8:	e08c      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cfa:	4b4b      	ldr	r3, [pc, #300]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x160>)
 8004cfc:	60bb      	str	r3, [r7, #8]
      break;
 8004cfe:	e089      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d00:	4b47      	ldr	r3, [pc, #284]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x158>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d08:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004d0a:	4b45      	ldr	r3, [pc, #276]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x158>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d023      	beq.n	8004d5e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d16:	4b42      	ldr	r3, [pc, #264]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x158>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	099b      	lsrs	r3, r3, #6
 8004d1c:	f04f 0400 	mov.w	r4, #0
 8004d20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d24:	f04f 0200 	mov.w	r2, #0
 8004d28:	ea03 0501 	and.w	r5, r3, r1
 8004d2c:	ea04 0602 	and.w	r6, r4, r2
 8004d30:	4a3d      	ldr	r2, [pc, #244]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d32:	fb02 f106 	mul.w	r1, r2, r6
 8004d36:	2200      	movs	r2, #0
 8004d38:	fb02 f205 	mul.w	r2, r2, r5
 8004d3c:	440a      	add	r2, r1
 8004d3e:	493a      	ldr	r1, [pc, #232]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d40:	fba5 0101 	umull	r0, r1, r5, r1
 8004d44:	1853      	adds	r3, r2, r1
 8004d46:	4619      	mov	r1, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f04f 0400 	mov.w	r4, #0
 8004d4e:	461a      	mov	r2, r3
 8004d50:	4623      	mov	r3, r4
 8004d52:	f7fb fa59 	bl	8000208 <__aeabi_uldivmod>
 8004d56:	4603      	mov	r3, r0
 8004d58:	460c      	mov	r4, r1
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	e049      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5e:	4b30      	ldr	r3, [pc, #192]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x158>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	099b      	lsrs	r3, r3, #6
 8004d64:	f04f 0400 	mov.w	r4, #0
 8004d68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	ea03 0501 	and.w	r5, r3, r1
 8004d74:	ea04 0602 	and.w	r6, r4, r2
 8004d78:	4629      	mov	r1, r5
 8004d7a:	4632      	mov	r2, r6
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	f04f 0400 	mov.w	r4, #0
 8004d84:	0154      	lsls	r4, r2, #5
 8004d86:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d8a:	014b      	lsls	r3, r1, #5
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4622      	mov	r2, r4
 8004d90:	1b49      	subs	r1, r1, r5
 8004d92:	eb62 0206 	sbc.w	r2, r2, r6
 8004d96:	f04f 0300 	mov.w	r3, #0
 8004d9a:	f04f 0400 	mov.w	r4, #0
 8004d9e:	0194      	lsls	r4, r2, #6
 8004da0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004da4:	018b      	lsls	r3, r1, #6
 8004da6:	1a5b      	subs	r3, r3, r1
 8004da8:	eb64 0402 	sbc.w	r4, r4, r2
 8004dac:	f04f 0100 	mov.w	r1, #0
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	00e2      	lsls	r2, r4, #3
 8004db6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004dba:	00d9      	lsls	r1, r3, #3
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4614      	mov	r4, r2
 8004dc0:	195b      	adds	r3, r3, r5
 8004dc2:	eb44 0406 	adc.w	r4, r4, r6
 8004dc6:	f04f 0100 	mov.w	r1, #0
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	02a2      	lsls	r2, r4, #10
 8004dd0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004dd4:	0299      	lsls	r1, r3, #10
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4614      	mov	r4, r2
 8004dda:	4618      	mov	r0, r3
 8004ddc:	4621      	mov	r1, r4
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f04f 0400 	mov.w	r4, #0
 8004de4:	461a      	mov	r2, r3
 8004de6:	4623      	mov	r3, r4
 8004de8:	f7fb fa0e 	bl	8000208 <__aeabi_uldivmod>
 8004dec:	4603      	mov	r3, r0
 8004dee:	460c      	mov	r4, r1
 8004df0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8004df2:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x158>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	0c1b      	lsrs	r3, r3, #16
 8004df8:	f003 0303 	and.w	r3, r3, #3
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0a:	60bb      	str	r3, [r7, #8]
      break;
 8004e0c:	e002      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e0e:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004e10:	60bb      	str	r3, [r7, #8]
      break;
 8004e12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e14:	68bb      	ldr	r3, [r7, #8]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40023800 	.word	0x40023800
 8004e24:	00f42400 	.word	0x00f42400
 8004e28:	017d7840 	.word	0x017d7840

08004e2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e30:	4b03      	ldr	r3, [pc, #12]	; (8004e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e32:	681b      	ldr	r3, [r3, #0]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	2000000c 	.word	0x2000000c

08004e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e48:	f7ff fff0 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8004e4c:	4601      	mov	r1, r0
 8004e4e:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	0a9b      	lsrs	r3, r3, #10
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	4a03      	ldr	r2, [pc, #12]	; (8004e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e5a:	5cd3      	ldrb	r3, [r2, r3]
 8004e5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40023800 	.word	0x40023800
 8004e68:	0800e0a0 	.word	0x0800e0a0

08004e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e70:	f7ff ffdc 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8004e74:	4601      	mov	r1, r0
 8004e76:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	0b5b      	lsrs	r3, r3, #13
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	4a03      	ldr	r2, [pc, #12]	; (8004e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e82:	5cd3      	ldrb	r3, [r2, r3]
 8004e84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	0800e0a0 	.word	0x0800e0a0

08004e94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	220f      	movs	r2, #15
 8004ea2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ea4:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f003 0203 	and.w	r2, r3, #3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004eb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ebc:	4b0c      	ldr	r3, [pc, #48]	; (8004ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004ec8:	4b09      	ldr	r3, [pc, #36]	; (8004ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	08db      	lsrs	r3, r3, #3
 8004ece:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ed6:	4b07      	ldr	r3, [pc, #28]	; (8004ef4 <HAL_RCC_GetClockConfig+0x60>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 020f 	and.w	r2, r3, #15
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	601a      	str	r2, [r3, #0]
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	40023800 	.word	0x40023800
 8004ef4:	40023c00 	.word	0x40023c00

08004ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004f10:	2300      	movs	r3, #0
 8004f12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d012      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f20:	4b69      	ldr	r3, [pc, #420]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	4a68      	ldr	r2, [pc, #416]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004f2a:	6093      	str	r3, [r2, #8]
 8004f2c:	4b66      	ldr	r3, [pc, #408]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f34:	4964      	ldr	r1, [pc, #400]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004f42:	2301      	movs	r3, #1
 8004f44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d017      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f52:	4b5d      	ldr	r3, [pc, #372]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f60:	4959      	ldr	r1, [pc, #356]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f70:	d101      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004f72:	2301      	movs	r3, #1
 8004f74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d017      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f8e:	4b4e      	ldr	r3, [pc, #312]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	494a      	ldr	r1, [pc, #296]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fac:	d101      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0320 	and.w	r3, r3, #32
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 808b 	beq.w	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fdc:	4b3a      	ldr	r3, [pc, #232]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	4a39      	ldr	r2, [pc, #228]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8004fe8:	4b37      	ldr	r3, [pc, #220]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff0:	60bb      	str	r3, [r7, #8]
 8004ff2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ff4:	4b35      	ldr	r3, [pc, #212]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a34      	ldr	r2, [pc, #208]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ffe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005000:	f7fc f936 	bl	8001270 <HAL_GetTick>
 8005004:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005006:	e008      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005008:	f7fc f932 	bl	8001270 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b64      	cmp	r3, #100	; 0x64
 8005014:	d901      	bls.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e355      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800501a:	4b2c      	ldr	r3, [pc, #176]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0f0      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005026:	4b28      	ldr	r3, [pc, #160]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800502e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d035      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	429a      	cmp	r2, r3
 8005042:	d02e      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005044:	4b20      	ldr	r3, [pc, #128]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800504c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800504e:	4b1e      	ldr	r3, [pc, #120]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005052:	4a1d      	ldr	r2, [pc, #116]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005058:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800505a:	4b1b      	ldr	r3, [pc, #108]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800505c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505e:	4a1a      	ldr	r2, [pc, #104]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005064:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005066:	4a18      	ldr	r2, [pc, #96]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800506c:	4b16      	ldr	r3, [pc, #88]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800506e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b01      	cmp	r3, #1
 8005076:	d114      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005078:	f7fc f8fa 	bl	8001270 <HAL_GetTick>
 800507c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800507e:	e00a      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005080:	f7fc f8f6 	bl	8001270 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	f241 3288 	movw	r2, #5000	; 0x1388
 800508e:	4293      	cmp	r3, r2
 8005090:	d901      	bls.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e317      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005096:	4b0c      	ldr	r3, [pc, #48]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0ee      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ae:	d111      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80050bc:	4b04      	ldr	r3, [pc, #16]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050be:	400b      	ands	r3, r1
 80050c0:	4901      	ldr	r1, [pc, #4]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	608b      	str	r3, [r1, #8]
 80050c6:	e00b      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80050c8:	40023800 	.word	0x40023800
 80050cc:	40007000 	.word	0x40007000
 80050d0:	0ffffcff 	.word	0x0ffffcff
 80050d4:	4bb0      	ldr	r3, [pc, #704]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	4aaf      	ldr	r2, [pc, #700]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80050da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050de:	6093      	str	r3, [r2, #8]
 80050e0:	4bad      	ldr	r3, [pc, #692]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80050e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ec:	49aa      	ldr	r1, [pc, #680]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0310 	and.w	r3, r3, #16
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d010      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050fe:	4ba6      	ldr	r3, [pc, #664]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005104:	4aa4      	ldr	r2, [pc, #656]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800510a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800510e:	4ba2      	ldr	r3, [pc, #648]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005110:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005118:	499f      	ldr	r1, [pc, #636]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800512c:	4b9a      	ldr	r3, [pc, #616]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800512e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005132:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800513a:	4997      	ldr	r1, [pc, #604]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800514e:	4b92      	ldr	r3, [pc, #584]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005154:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800515c:	498e      	ldr	r1, [pc, #568]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005170:	4b89      	ldr	r3, [pc, #548]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005176:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800517e:	4986      	ldr	r1, [pc, #536]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005192:	4b81      	ldr	r3, [pc, #516]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005198:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a0:	497d      	ldr	r1, [pc, #500]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051b4:	4b78      	ldr	r3, [pc, #480]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80051b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ba:	f023 0203 	bic.w	r2, r3, #3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c2:	4975      	ldr	r1, [pc, #468]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051d6:	4b70      	ldr	r3, [pc, #448]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80051d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051dc:	f023 020c 	bic.w	r2, r3, #12
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e4:	496c      	ldr	r1, [pc, #432]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051f8:	4b67      	ldr	r3, [pc, #412]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80051fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005206:	4964      	ldr	r1, [pc, #400]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800521a:	4b5f      	ldr	r3, [pc, #380]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800521c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005220:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005228:	495b      	ldr	r1, [pc, #364]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800523c:	4b56      	ldr	r3, [pc, #344]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800523e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005242:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524a:	4953      	ldr	r1, [pc, #332]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800525e:	4b4e      	ldr	r3, [pc, #312]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005264:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526c:	494a      	ldr	r1, [pc, #296]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00a      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005280:	4b45      	ldr	r3, [pc, #276]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005286:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800528e:	4942      	ldr	r1, [pc, #264]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005290:	4313      	orrs	r3, r2
 8005292:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80052a2:	4b3d      	ldr	r3, [pc, #244]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80052a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b0:	4939      	ldr	r1, [pc, #228]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00a      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052c4:	4b34      	ldr	r3, [pc, #208]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052d2:	4931      	ldr	r1, [pc, #196]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d011      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80052e6:	4b2c      	ldr	r3, [pc, #176]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80052e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052f4:	4928      	ldr	r1, [pc, #160]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005304:	d101      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005306:	2301      	movs	r3, #1
 8005308:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005316:	2301      	movs	r3, #1
 8005318:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005326:	4b1c      	ldr	r3, [pc, #112]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005334:	4918      	ldr	r1, [pc, #96]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005336:	4313      	orrs	r3, r2
 8005338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00b      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005348:	4b13      	ldr	r3, [pc, #76]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800534a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005358:	490f      	ldr	r1, [pc, #60]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d005      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800536e:	f040 80d8 	bne.w	8005522 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005372:	4b09      	ldr	r3, [pc, #36]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a08      	ldr	r2, [pc, #32]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005378:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800537c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800537e:	f7fb ff77 	bl	8001270 <HAL_GetTick>
 8005382:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005384:	e00a      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005386:	f7fb ff73 	bl	8001270 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b64      	cmp	r3, #100	; 0x64
 8005392:	d903      	bls.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e196      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005398:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800539c:	4b6c      	ldr	r3, [pc, #432]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1ee      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d021      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d11d      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80053bc:	4b64      	ldr	r3, [pc, #400]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80053be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053c2:	0c1b      	lsrs	r3, r3, #16
 80053c4:	f003 0303 	and.w	r3, r3, #3
 80053c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053ca:	4b61      	ldr	r3, [pc, #388]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80053cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053d0:	0e1b      	lsrs	r3, r3, #24
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	019a      	lsls	r2, r3, #6
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	041b      	lsls	r3, r3, #16
 80053e2:	431a      	orrs	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	061b      	lsls	r3, r3, #24
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	071b      	lsls	r3, r3, #28
 80053f0:	4957      	ldr	r1, [pc, #348]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d004      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005408:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800540c:	d00a      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005416:	2b00      	cmp	r3, #0
 8005418:	d02e      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005422:	d129      	bne.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005424:	4b4a      	ldr	r3, [pc, #296]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800542a:	0c1b      	lsrs	r3, r3, #16
 800542c:	f003 0303 	and.w	r3, r3, #3
 8005430:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005432:	4b47      	ldr	r3, [pc, #284]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005438:	0f1b      	lsrs	r3, r3, #28
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	019a      	lsls	r2, r3, #6
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	041b      	lsls	r3, r3, #16
 800544a:	431a      	orrs	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	061b      	lsls	r3, r3, #24
 8005452:	431a      	orrs	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	071b      	lsls	r3, r3, #28
 8005458:	493d      	ldr	r1, [pc, #244]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800545a:	4313      	orrs	r3, r2
 800545c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005460:	4b3b      	ldr	r3, [pc, #236]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005466:	f023 021f 	bic.w	r2, r3, #31
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	3b01      	subs	r3, #1
 8005470:	4937      	ldr	r1, [pc, #220]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01d      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005484:	4b32      	ldr	r3, [pc, #200]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800548a:	0e1b      	lsrs	r3, r3, #24
 800548c:	f003 030f 	and.w	r3, r3, #15
 8005490:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005492:	4b2f      	ldr	r3, [pc, #188]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005498:	0f1b      	lsrs	r3, r3, #28
 800549a:	f003 0307 	and.w	r3, r3, #7
 800549e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	019a      	lsls	r2, r3, #6
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	041b      	lsls	r3, r3, #16
 80054ac:	431a      	orrs	r2, r3
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	061b      	lsls	r3, r3, #24
 80054b2:	431a      	orrs	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	071b      	lsls	r3, r3, #28
 80054b8:	4925      	ldr	r1, [pc, #148]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d011      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	019a      	lsls	r2, r3, #6
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	041b      	lsls	r3, r3, #16
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	061b      	lsls	r3, r3, #24
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	071b      	lsls	r3, r3, #28
 80054e8:	4919      	ldr	r1, [pc, #100]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054f0:	4b17      	ldr	r3, [pc, #92]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a16      	ldr	r2, [pc, #88]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80054f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054fc:	f7fb feb8 	bl	8001270 <HAL_GetTick>
 8005500:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005502:	e008      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005504:	f7fb feb4 	bl	8001270 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b64      	cmp	r3, #100	; 0x64
 8005510:	d901      	bls.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e0d7      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005516:	4b0e      	ldr	r3, [pc, #56]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0f0      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	2b01      	cmp	r3, #1
 8005526:	f040 80cd 	bne.w	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800552a:	4b09      	ldr	r3, [pc, #36]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a08      	ldr	r2, [pc, #32]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005536:	f7fb fe9b 	bl	8001270 <HAL_GetTick>
 800553a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800553c:	e00a      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800553e:	f7fb fe97 	bl	8001270 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b64      	cmp	r3, #100	; 0x64
 800554a:	d903      	bls.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e0ba      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005550:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005554:	4b5e      	ldr	r3, [pc, #376]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800555c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005560:	d0ed      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005572:	2b00      	cmp	r3, #0
 8005574:	d009      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800557e:	2b00      	cmp	r3, #0
 8005580:	d02e      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	d12a      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800558a:	4b51      	ldr	r3, [pc, #324]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800558c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005590:	0c1b      	lsrs	r3, r3, #16
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005598:	4b4d      	ldr	r3, [pc, #308]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800559a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559e:	0f1b      	lsrs	r3, r3, #28
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	019a      	lsls	r2, r3, #6
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	041b      	lsls	r3, r3, #16
 80055b0:	431a      	orrs	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	061b      	lsls	r3, r3, #24
 80055b8:	431a      	orrs	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	071b      	lsls	r3, r3, #28
 80055be:	4944      	ldr	r1, [pc, #272]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80055c6:	4b42      	ldr	r3, [pc, #264]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80055c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d4:	3b01      	subs	r3, #1
 80055d6:	021b      	lsls	r3, r3, #8
 80055d8:	493d      	ldr	r1, [pc, #244]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d022      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055f4:	d11d      	bne.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055f6:	4b36      	ldr	r3, [pc, #216]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80055f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fc:	0e1b      	lsrs	r3, r3, #24
 80055fe:	f003 030f 	and.w	r3, r3, #15
 8005602:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005604:	4b32      	ldr	r3, [pc, #200]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560a:	0f1b      	lsrs	r3, r3, #28
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	019a      	lsls	r2, r3, #6
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	041b      	lsls	r3, r3, #16
 800561e:	431a      	orrs	r2, r3
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	061b      	lsls	r3, r3, #24
 8005624:	431a      	orrs	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	071b      	lsls	r3, r3, #28
 800562a:	4929      	ldr	r1, [pc, #164]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b00      	cmp	r3, #0
 800563c:	d028      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800563e:	4b24      	ldr	r3, [pc, #144]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005644:	0e1b      	lsrs	r3, r3, #24
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800564c:	4b20      	ldr	r3, [pc, #128]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800564e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005652:	0c1b      	lsrs	r3, r3, #16
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	019a      	lsls	r2, r3, #6
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	041b      	lsls	r3, r3, #16
 8005664:	431a      	orrs	r2, r3
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	061b      	lsls	r3, r3, #24
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	071b      	lsls	r3, r3, #28
 8005672:	4917      	ldr	r1, [pc, #92]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005674:	4313      	orrs	r3, r2
 8005676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800567a:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800567c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005680:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005688:	4911      	ldr	r1, [pc, #68]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005690:	4b0f      	ldr	r3, [pc, #60]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a0e      	ldr	r2, [pc, #56]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800569a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800569c:	f7fb fde8 	bl	8001270 <HAL_GetTick>
 80056a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056a2:	e008      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80056a4:	f7fb fde4 	bl	8001270 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b64      	cmp	r3, #100	; 0x64
 80056b0:	d901      	bls.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e007      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056b6:	4b06      	ldr	r3, [pc, #24]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056c2:	d1ef      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3720      	adds	r7, #32
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	40023800 	.word	0x40023800

080056d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80056e4:	2300      	movs	r3, #0
 80056e6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80056e8:	2300      	movs	r3, #0
 80056ea:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056f2:	f040 8086 	bne.w	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 80056f6:	4b8d      	ldr	r3, [pc, #564]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80056f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056fc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005704:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800570c:	d03e      	beq.n	800578c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 800570e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005712:	d073      	beq.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8005714:	2b00      	cmp	r3, #0
 8005716:	d000      	beq.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005718:	e074      	b.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800571a:	4b84      	ldr	r3, [pc, #528]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d108      	bne.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005726:	4b81      	ldr	r3, [pc, #516]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800572e:	4a80      	ldr	r2, [pc, #512]	; (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005730:	fbb2 f3f3 	udiv	r3, r2, r3
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	e007      	b.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005738:	4b7c      	ldr	r3, [pc, #496]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005740:	4a7c      	ldr	r2, [pc, #496]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005742:	fbb2 f3f3 	udiv	r3, r2, r3
 8005746:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005748:	4b78      	ldr	r3, [pc, #480]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800574a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574e:	0e1b      	lsrs	r3, r3, #24
 8005750:	f003 030f 	and.w	r3, r3, #15
 8005754:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005756:	4b75      	ldr	r3, [pc, #468]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575c:	099b      	lsrs	r3, r3, #6
 800575e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	fb02 f203 	mul.w	r2, r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	fbb2 f3f3 	udiv	r3, r2, r3
 800576e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005770:	4b6e      	ldr	r3, [pc, #440]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005776:	0a1b      	lsrs	r3, r3, #8
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	3301      	adds	r3, #1
 800577e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	fbb2 f3f3 	udiv	r3, r2, r3
 8005788:	617b      	str	r3, [r7, #20]
        break;
 800578a:	e03b      	b.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800578c:	4b67      	ldr	r3, [pc, #412]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d108      	bne.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005798:	4b64      	ldr	r3, [pc, #400]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057a0:	4a63      	ldr	r2, [pc, #396]	; (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80057a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a6:	613b      	str	r3, [r7, #16]
 80057a8:	e007      	b.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80057aa:	4b60      	ldr	r3, [pc, #384]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057b2:	4a60      	ldr	r2, [pc, #384]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80057b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80057ba:	4b5c      	ldr	r3, [pc, #368]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80057bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057c0:	0e1b      	lsrs	r3, r3, #24
 80057c2:	f003 030f 	and.w	r3, r3, #15
 80057c6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80057c8:	4b58      	ldr	r3, [pc, #352]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80057ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ce:	099b      	lsrs	r3, r3, #6
 80057d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	fb02 f203 	mul.w	r2, r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80057e2:	4b52      	ldr	r3, [pc, #328]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80057e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057e8:	f003 031f 	and.w	r3, r3, #31
 80057ec:	3301      	adds	r3, #1
 80057ee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f8:	617b      	str	r3, [r7, #20]
        break;
 80057fa:	e003      	b.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 80057fc:	4b4e      	ldr	r3, [pc, #312]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80057fe:	617b      	str	r3, [r7, #20]
        break;
 8005800:	e000      	b.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8005802:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800580a:	f040 8086 	bne.w	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 800580e:	4b47      	ldr	r3, [pc, #284]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005814:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800581c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005824:	d03e      	beq.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005826:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800582a:	d073      	beq.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800582c:	2b00      	cmp	r3, #0
 800582e:	d000      	beq.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005830:	e074      	b.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005832:	4b3e      	ldr	r3, [pc, #248]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d108      	bne.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800583e:	4b3b      	ldr	r3, [pc, #236]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005846:	4a3a      	ldr	r2, [pc, #232]	; (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005848:	fbb2 f3f3 	udiv	r3, r2, r3
 800584c:	613b      	str	r3, [r7, #16]
 800584e:	e007      	b.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005850:	4b36      	ldr	r3, [pc, #216]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005858:	4a36      	ldr	r2, [pc, #216]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800585a:	fbb2 f3f3 	udiv	r3, r2, r3
 800585e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005860:	4b32      	ldr	r3, [pc, #200]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005866:	0e1b      	lsrs	r3, r3, #24
 8005868:	f003 030f 	and.w	r3, r3, #15
 800586c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800586e:	4b2f      	ldr	r3, [pc, #188]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005874:	099b      	lsrs	r3, r3, #6
 8005876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	fb02 f203 	mul.w	r2, r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	fbb2 f3f3 	udiv	r3, r2, r3
 8005886:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005888:	4b28      	ldr	r3, [pc, #160]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800588a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800588e:	0a1b      	lsrs	r3, r3, #8
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	3301      	adds	r3, #1
 8005896:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a0:	617b      	str	r3, [r7, #20]
        break;
 80058a2:	e03b      	b.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80058a4:	4b21      	ldr	r3, [pc, #132]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d108      	bne.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80058b0:	4b1e      	ldr	r3, [pc, #120]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058b8:	4a1d      	ldr	r2, [pc, #116]	; (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80058ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80058be:	613b      	str	r3, [r7, #16]
 80058c0:	e007      	b.n	80058d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80058c2:	4b1a      	ldr	r3, [pc, #104]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058ca:	4a1a      	ldr	r2, [pc, #104]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80058cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80058d2:	4b16      	ldr	r3, [pc, #88]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80058d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058d8:	0e1b      	lsrs	r3, r3, #24
 80058da:	f003 030f 	and.w	r3, r3, #15
 80058de:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80058e0:	4b12      	ldr	r3, [pc, #72]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80058e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e6:	099b      	lsrs	r3, r3, #6
 80058e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	fb02 f203 	mul.w	r2, r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80058fa:	4b0c      	ldr	r3, [pc, #48]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80058fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005900:	f003 031f 	and.w	r3, r3, #31
 8005904:	3301      	adds	r3, #1
 8005906:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005910:	617b      	str	r3, [r7, #20]
        break;
 8005912:	e003      	b.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005914:	4b08      	ldr	r3, [pc, #32]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005916:	617b      	str	r3, [r7, #20]
        break;
 8005918:	e000      	b.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800591a:	bf00      	nop

  return frequency;
 800591c:	697b      	ldr	r3, [r7, #20]
}
 800591e:	4618      	mov	r0, r3
 8005920:	371c      	adds	r7, #28
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40023800 	.word	0x40023800
 8005930:	00f42400 	.word	0x00f42400
 8005934:	017d7840 	.word	0x017d7840
 8005938:	00bb8000 	.word	0x00bb8000

0800593c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e01c      	b.n	8005988 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	795b      	ldrb	r3, [r3, #5]
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d105      	bne.n	8005964 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f005 ffe2 	bl	800b928 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f042 0204 	orr.w	r2, r2, #4
 8005978:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	791b      	ldrb	r3, [r3, #4]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_RNG_GenerateRandomNumber+0x1a>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e03d      	b.n	8005a26 <HAL_RNG_GenerateRandomNumber+0x96>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	795b      	ldrb	r3, [r3, #5]
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d12c      	bne.n	8005a14 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2202      	movs	r2, #2
 80059be:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059c0:	f7fb fc56 	bl	8001270 <HAL_GetTick>
 80059c4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80059c6:	e011      	b.n	80059ec <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80059c8:	f7fb fc52 	bl	8001270 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d90a      	bls.n	80059ec <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e01c      	b.n	8005a26 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d1e6      	bne.n	80059c8 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	715a      	strb	r2, [r3, #5]
 8005a12:	e004      	b.n	8005a1e <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2204      	movs	r2, #4
 8005a18:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	711a      	strb	r2, [r3, #4]

  return status;
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b082      	sub	sp, #8
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	330c      	adds	r3, #12
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7ff ffa7 	bl	8005990 <HAL_RNG_GenerateRandomNumber>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d102      	bne.n	8005a4e <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	e000      	b.n	8005a50 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8005a4e:	2300      	movs	r3, #0
  }
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e06b      	b.n	8005b42 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	7f5b      	ldrb	r3, [r3, #29]
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d105      	bne.n	8005a80 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f005 ff74 	bl	800b968 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	22ca      	movs	r2, #202	; 0xca
 8005a8c:	625a      	str	r2, [r3, #36]	; 0x24
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2253      	movs	r2, #83	; 0x53
 8005a94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fb00 	bl	800609c <RTC_EnterInitMode>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d008      	beq.n	8005ab4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	22ff      	movs	r2, #255	; 0xff
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2204      	movs	r2, #4
 8005aae:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e046      	b.n	8005b42 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6899      	ldr	r1, [r3, #8]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	4b23      	ldr	r3, [pc, #140]	; (8005b4c <HAL_RTC_Init+0xf4>)
 8005ac0:	400b      	ands	r3, r1
 8005ac2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6899      	ldr	r1, [r3, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	68d2      	ldr	r2, [r2, #12]
 8005aea:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6919      	ldr	r1, [r3, #16]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	041a      	lsls	r2, r3, #16
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b0e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0208 	bic.w	r2, r2, #8
 8005b1e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	699a      	ldr	r2, [r3, #24]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	22ff      	movs	r2, #255	; 0xff
 8005b38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005b40:	2300      	movs	r3, #0
  }
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	ff8fffbf 	.word	0xff8fffbf

08005b50 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b50:	b590      	push	{r4, r7, lr}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	7f1b      	ldrb	r3, [r3, #28]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d101      	bne.n	8005b6c <HAL_RTC_SetTime+0x1c>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e0a8      	b.n	8005cbe <HAL_RTC_SetTime+0x16e>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2202      	movs	r2, #2
 8005b76:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d126      	bne.n	8005bcc <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d102      	bne.n	8005b92 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 faac 	bl	80060f4 <RTC_ByteToBcd2>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	785b      	ldrb	r3, [r3, #1]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 faa5 	bl	80060f4 <RTC_ByteToBcd2>
 8005baa:	4603      	mov	r3, r0
 8005bac:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005bae:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	789b      	ldrb	r3, [r3, #2]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fa9d 	bl	80060f4 <RTC_ByteToBcd2>
 8005bba:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005bbc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	7b1b      	ldrb	r3, [r3, #12]
 8005bc4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]
 8005bca:	e018      	b.n	8005bfe <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d102      	bne.n	8005be0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	785b      	ldrb	r3, [r3, #1]
 8005bea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005bec:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005bf2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	7b1b      	ldrb	r3, [r3, #12]
 8005bf8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	22ca      	movs	r2, #202	; 0xca
 8005c04:	625a      	str	r2, [r3, #36]	; 0x24
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2253      	movs	r2, #83	; 0x53
 8005c0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 fa44 	bl	800609c <RTC_EnterInitMode>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00b      	beq.n	8005c32 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	22ff      	movs	r2, #255	; 0xff
 8005c20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2204      	movs	r2, #4
 8005c26:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e045      	b.n	8005cbe <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	6979      	ldr	r1, [r7, #20]
 8005c38:	4b23      	ldr	r3, [pc, #140]	; (8005cc8 <HAL_RTC_SetTime+0x178>)
 8005c3a:	400b      	ands	r3, r1
 8005c3c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c4c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6899      	ldr	r1, [r3, #8]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	691a      	ldr	r2, [r3, #16]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c74:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f003 0320 	and.w	r3, r3, #32
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d111      	bne.n	8005ca8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 f9e1 	bl	800604c <HAL_RTC_WaitForSynchro>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00b      	beq.n	8005ca8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	22ff      	movs	r2, #255	; 0xff
 8005c96:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2204      	movs	r2, #4
 8005c9c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e00a      	b.n	8005cbe <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	22ff      	movs	r2, #255	; 0xff
 8005cae:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
  }
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd90      	pop	{r4, r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	007f7f7f 	.word	0x007f7f7f

08005ccc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ccc:	b590      	push	{r4, r7, lr}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	7f1b      	ldrb	r3, [r3, #28]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <HAL_RTC_SetDate+0x1c>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e092      	b.n	8005e0e <HAL_RTC_SetDate+0x142>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2201      	movs	r2, #1
 8005cec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10e      	bne.n	8005d18 <HAL_RTC_SetDate+0x4c>
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	785b      	ldrb	r3, [r3, #1]
 8005cfe:	f003 0310 	and.w	r3, r3, #16
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d008      	beq.n	8005d18 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	785b      	ldrb	r3, [r3, #1]
 8005d0a:	f023 0310 	bic.w	r3, r3, #16
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	330a      	adds	r3, #10
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d11c      	bne.n	8005d58 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	78db      	ldrb	r3, [r3, #3]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 f9e6 	bl	80060f4 <RTC_ByteToBcd2>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	785b      	ldrb	r3, [r3, #1]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 f9df 	bl	80060f4 <RTC_ByteToBcd2>
 8005d36:	4603      	mov	r3, r0
 8005d38:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005d3a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	789b      	ldrb	r3, [r3, #2]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 f9d7 	bl	80060f4 <RTC_ByteToBcd2>
 8005d46:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005d48:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005d52:	4313      	orrs	r3, r2
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	e00e      	b.n	8005d76 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	78db      	ldrb	r3, [r3, #3]
 8005d5c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	785b      	ldrb	r3, [r3, #1]
 8005d62:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005d64:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8005d6a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	22ca      	movs	r2, #202	; 0xca
 8005d7c:	625a      	str	r2, [r3, #36]	; 0x24
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2253      	movs	r2, #83	; 0x53
 8005d84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f988 	bl	800609c <RTC_EnterInitMode>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00b      	beq.n	8005daa <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	22ff      	movs	r2, #255	; 0xff
 8005d98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2204      	movs	r2, #4
 8005d9e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e031      	b.n	8005e0e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	6979      	ldr	r1, [r7, #20]
 8005db0:	4b19      	ldr	r3, [pc, #100]	; (8005e18 <HAL_RTC_SetDate+0x14c>)
 8005db2:	400b      	ands	r3, r1
 8005db4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dc4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f003 0320 	and.w	r3, r3, #32
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d111      	bne.n	8005df8 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 f939 	bl	800604c <HAL_RTC_WaitForSynchro>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00b      	beq.n	8005df8 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	22ff      	movs	r2, #255	; 0xff
 8005de6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2204      	movs	r2, #4
 8005dec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e00a      	b.n	8005e0e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	22ff      	movs	r2, #255	; 0xff
 8005dfe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2201      	movs	r2, #1
 8005e04:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
  }
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	371c      	adds	r7, #28
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd90      	pop	{r4, r7, pc}
 8005e16:	bf00      	nop
 8005e18:	00ffff3f 	.word	0x00ffff3f

08005e1c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005e1c:	b590      	push	{r4, r7, lr}
 8005e1e:	b089      	sub	sp, #36	; 0x24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	61fb      	str	r3, [r7, #28]
 8005e30:	2300      	movs	r3, #0
 8005e32:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	7f1b      	ldrb	r3, [r3, #28]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <HAL_RTC_SetAlarm+0x24>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	e101      	b.n	8006044 <HAL_RTC_SetAlarm+0x228>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2201      	movs	r2, #1
 8005e44:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2202      	movs	r2, #2
 8005e4a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d137      	bne.n	8005ec2 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d102      	bne.n	8005e66 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2200      	movs	r2, #0
 8005e64:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 f942 	bl	80060f4 <RTC_ByteToBcd2>
 8005e70:	4603      	mov	r3, r0
 8005e72:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	785b      	ldrb	r3, [r3, #1]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f000 f93b 	bl	80060f4 <RTC_ByteToBcd2>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005e82:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	789b      	ldrb	r3, [r3, #2]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 f933 	bl	80060f4 <RTC_ByteToBcd2>
 8005e8e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005e90:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	7b1b      	ldrb	r3, [r3, #12]
 8005e98:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005e9a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 f925 	bl	80060f4 <RTC_ByteToBcd2>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005eae:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8005eb6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	61fb      	str	r3, [r7, #28]
 8005ec0:	e023      	b.n	8005f0a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d102      	bne.n	8005ed6 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	785b      	ldrb	r3, [r3, #1]
 8005ee0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005ee2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005ee8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	7b1b      	ldrb	r3, [r3, #12]
 8005eee:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005ef0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ef8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005efa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005f00:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005f06:	4313      	orrs	r3, r2
 8005f08:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	22ca      	movs	r2, #202	; 0xca
 8005f1c:	625a      	str	r2, [r3, #36]	; 0x24
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2253      	movs	r2, #83	; 0x53
 8005f24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f2e:	d13f      	bne.n	8005fb0 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689a      	ldr	r2, [r3, #8]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f3e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689a      	ldr	r2, [r3, #8]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f4e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f50:	f7fb f98e 	bl	8001270 <HAL_GetTick>
 8005f54:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005f56:	e013      	b.n	8005f80 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005f58:	f7fb f98a 	bl	8001270 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f66:	d90b      	bls.n	8005f80 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	22ff      	movs	r2, #255	; 0xff
 8005f6e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2203      	movs	r2, #3
 8005f74:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e061      	b.n	8006044 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0e4      	beq.n	8005f58 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69fa      	ldr	r2, [r7, #28]
 8005f94:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fac:	609a      	str	r2, [r3, #8]
 8005fae:	e03e      	b.n	800602e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005fbe:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689a      	ldr	r2, [r3, #8]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fce:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fd0:	f7fb f94e 	bl	8001270 <HAL_GetTick>
 8005fd4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005fd6:	e013      	b.n	8006000 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005fd8:	f7fb f94a 	bl	8001270 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fe6:	d90b      	bls.n	8006000 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	22ff      	movs	r2, #255	; 0xff
 8005fee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2203      	movs	r2, #3
 8005ff4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e021      	b.n	8006044 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0e4      	beq.n	8005fd8 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69fa      	ldr	r2, [r7, #28]
 8006014:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800602c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	22ff      	movs	r2, #255	; 0xff
 8006034:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2201      	movs	r2, #1
 800603a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3724      	adds	r7, #36	; 0x24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd90      	pop	{r4, r7, pc}

0800604c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006054:	2300      	movs	r3, #0
 8006056:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006066:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006068:	f7fb f902 	bl	8001270 <HAL_GetTick>
 800606c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800606e:	e009      	b.n	8006084 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006070:	f7fb f8fe 	bl	8001270 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800607e:	d901      	bls.n	8006084 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e007      	b.n	8006094 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b00      	cmp	r3, #0
 8006090:	d0ee      	beq.n	8006070 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80060a4:	2300      	movs	r3, #0
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d119      	bne.n	80060ea <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f04f 32ff 	mov.w	r2, #4294967295
 80060be:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060c0:	f7fb f8d6 	bl	8001270 <HAL_GetTick>
 80060c4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80060c6:	e009      	b.n	80060dc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80060c8:	f7fb f8d2 	bl	8001270 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060d6:	d901      	bls.n	80060dc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e007      	b.n	80060ec <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d0ee      	beq.n	80060c8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	4603      	mov	r3, r0
 80060fc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80060fe:	2300      	movs	r3, #0
 8006100:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8006102:	e005      	b.n	8006110 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	3301      	adds	r3, #1
 8006108:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800610a:	79fb      	ldrb	r3, [r7, #7]
 800610c:	3b0a      	subs	r3, #10
 800610e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8006110:	79fb      	ldrb	r3, [r7, #7]
 8006112:	2b09      	cmp	r3, #9
 8006114:	d8f6      	bhi.n	8006104 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	b2db      	uxtb	r3, r3
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	b2da      	uxtb	r2, r3
 800611e:	79fb      	ldrb	r3, [r7, #7]
 8006120:	4313      	orrs	r3, r2
 8006122:	b2db      	uxtb	r3, r3
}
 8006124:	4618      	mov	r0, r3
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	7f1b      	ldrb	r3, [r3, #28]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d101      	bne.n	800614c <HAL_RTCEx_SetTimeStamp+0x1c>
 8006148:	2302      	movs	r3, #2
 800614a:	e03e      	b.n	80061ca <HAL_RTCEx_SetTimeStamp+0x9a>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2201      	movs	r2, #1
 8006150:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2202      	movs	r2, #2
 8006156:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	4b1e      	ldr	r3, [pc, #120]	; (80061d8 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8006160:	4013      	ands	r3, r2
 8006162:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	4313      	orrs	r3, r2
 800616a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	22ca      	movs	r2, #202	; 0xca
 8006172:	625a      	str	r2, [r3, #36]	; 0x24
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2253      	movs	r2, #83	; 0x53
 800617a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0206 	bic.w	r2, r2, #6
 800618a:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	430a      	orrs	r2, r1
 800619a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689a      	ldr	r2, [r3, #8]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061b2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	22ff      	movs	r2, #255	; 0xff
 80061ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2201      	movs	r2, #1
 80061c0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	371c      	adds	r7, #28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	fffff7f7 	.word	0xfffff7f7

080061dc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b088      	sub	sp, #32
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80061e4:	2300      	movs	r3, #0
 80061e6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80061e8:	2300      	movs	r3, #0
 80061ea:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80061ec:	2300      	movs	r3, #0
 80061ee:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e149      	b.n	800648e <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d106      	bne.n	8006214 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f005 fe9a 	bl	800bf48 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f94f 	bl	80064c0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d007      	beq.n	800623a <HAL_SAI_Init+0x5e>
 800622a:	2b01      	cmp	r3, #1
 800622c:	d302      	bcc.n	8006234 <HAL_SAI_Init+0x58>
 800622e:	2b02      	cmp	r3, #2
 8006230:	d006      	beq.n	8006240 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8006232:	e008      	b.n	8006246 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8006234:	2300      	movs	r3, #0
 8006236:	61fb      	str	r3, [r7, #28]
      break;
 8006238:	e005      	b.n	8006246 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800623a:	2310      	movs	r3, #16
 800623c:	61fb      	str	r3, [r7, #28]
      break;
 800623e:	e002      	b.n	8006246 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006240:	2320      	movs	r3, #32
 8006242:	61fb      	str	r3, [r7, #28]
      break;
 8006244:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	2b03      	cmp	r3, #3
 800624c:	d81d      	bhi.n	800628a <HAL_SAI_Init+0xae>
 800624e:	a201      	add	r2, pc, #4	; (adr r2, 8006254 <HAL_SAI_Init+0x78>)
 8006250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006254:	08006265 	.word	0x08006265
 8006258:	0800626b 	.word	0x0800626b
 800625c:	08006273 	.word	0x08006273
 8006260:	0800627b 	.word	0x0800627b
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8006264:	2300      	movs	r3, #0
 8006266:	617b      	str	r3, [r7, #20]
      }
      break;
 8006268:	e010      	b.n	800628c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800626a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800626e:	617b      	str	r3, [r7, #20]
      }
      break;
 8006270:	e00c      	b.n	800628c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8006272:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006276:	617b      	str	r3, [r7, #20]
      }
      break;
 8006278:	e008      	b.n	800628c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800627a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800627e:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	f043 0301 	orr.w	r3, r3, #1
 8006286:	61fb      	str	r3, [r7, #28]
      }
      break;
 8006288:	e000      	b.n	800628c <HAL_SAI_Init+0xb0>
  default:
    break;
 800628a:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a81      	ldr	r2, [pc, #516]	; (8006498 <HAL_SAI_Init+0x2bc>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d004      	beq.n	80062a0 <HAL_SAI_Init+0xc4>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a80      	ldr	r2, [pc, #512]	; (800649c <HAL_SAI_Init+0x2c0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d103      	bne.n	80062a8 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 80062a0:	4a7f      	ldr	r2, [pc, #508]	; (80064a0 <HAL_SAI_Init+0x2c4>)
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	6013      	str	r3, [r2, #0]
 80062a6:	e002      	b.n	80062ae <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80062a8:	4a7e      	ldr	r2, [pc, #504]	; (80064a4 <HAL_SAI_Init+0x2c8>)
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d043      	beq.n	800633e <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 80062b6:	2300      	movs	r3, #0
 80062b8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a76      	ldr	r2, [pc, #472]	; (8006498 <HAL_SAI_Init+0x2bc>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d004      	beq.n	80062ce <HAL_SAI_Init+0xf2>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a74      	ldr	r2, [pc, #464]	; (800649c <HAL_SAI_Init+0x2c0>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d104      	bne.n	80062d8 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80062ce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80062d2:	f7ff f9ff 	bl	80056d4 <HAL_RCCEx_GetPeriphCLKFreq>
 80062d6:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a72      	ldr	r2, [pc, #456]	; (80064a8 <HAL_SAI_Init+0x2cc>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d004      	beq.n	80062ec <HAL_SAI_Init+0x110>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a71      	ldr	r2, [pc, #452]	; (80064ac <HAL_SAI_Init+0x2d0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d104      	bne.n	80062f6 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80062ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80062f0:	f7ff f9f0 	bl	80056d4 <HAL_RCCEx_GetPeriphCLKFreq>
 80062f4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	4613      	mov	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	461a      	mov	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	025b      	lsls	r3, r3, #9
 8006308:	fbb2 f3f3 	udiv	r3, r2, r3
 800630c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4a67      	ldr	r2, [pc, #412]	; (80064b0 <HAL_SAI_Init+0x2d4>)
 8006312:	fba2 2303 	umull	r2, r3, r2, r3
 8006316:	08da      	lsrs	r2, r3, #3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 800631c:	68f9      	ldr	r1, [r7, #12]
 800631e:	4b64      	ldr	r3, [pc, #400]	; (80064b0 <HAL_SAI_Init+0x2d4>)
 8006320:	fba3 2301 	umull	r2, r3, r3, r1
 8006324:	08da      	lsrs	r2, r3, #3
 8006326:	4613      	mov	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	005b      	lsls	r3, r3, #1
 800632e:	1aca      	subs	r2, r1, r3
 8006330:	2a08      	cmp	r2, #8
 8006332:	d904      	bls.n	800633e <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <HAL_SAI_Init+0x172>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	2b02      	cmp	r3, #2
 800634c:	d109      	bne.n	8006362 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006352:	2b01      	cmp	r3, #1
 8006354:	d101      	bne.n	800635a <HAL_SAI_Init+0x17e>
 8006356:	2300      	movs	r3, #0
 8006358:	e001      	b.n	800635e <HAL_SAI_Init+0x182>
 800635a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800635e:	61bb      	str	r3, [r7, #24]
 8006360:	e008      	b.n	8006374 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006366:	2b01      	cmp	r3, #1
 8006368:	d102      	bne.n	8006370 <HAL_SAI_Init+0x194>
 800636a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800636e:	e000      	b.n	8006372 <HAL_SAI_Init+0x196>
 8006370:	2300      	movs	r3, #0
 8006372:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6819      	ldr	r1, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	4b4d      	ldr	r3, [pc, #308]	; (80064b4 <HAL_SAI_Init+0x2d8>)
 8006380:	400b      	ands	r3, r1
 8006382:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6819      	ldr	r1, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006392:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006398:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639e:	431a      	orrs	r2, r3
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 80063ac:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80063b8:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	051b      	lsls	r3, r3, #20
 80063c0:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	6859      	ldr	r1, [r3, #4]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	4b38      	ldr	r3, [pc, #224]	; (80064b8 <HAL_SAI_Init+0x2dc>)
 80063d6:	400b      	ands	r3, r1
 80063d8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6859      	ldr	r1, [r3, #4]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	699a      	ldr	r2, [r3, #24]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e8:	431a      	orrs	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	431a      	orrs	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6899      	ldr	r1, [r3, #8]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	4b2e      	ldr	r3, [pc, #184]	; (80064bc <HAL_SAI_Init+0x2e0>)
 8006404:	400b      	ands	r3, r1
 8006406:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6899      	ldr	r1, [r3, #8]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006412:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006418:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800641e:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8006424:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642a:	3b01      	subs	r3, #1
 800642c:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 800642e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68d9      	ldr	r1, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006446:	400b      	ands	r3, r1
 8006448:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68d9      	ldr	r1, [r3, #12]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006458:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800645e:	041b      	lsls	r3, r3, #16
 8006460:	431a      	orrs	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006466:	3b01      	subs	r3, #1
 8006468:	021b      	lsls	r3, r3, #8
 800646a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	430a      	orrs	r2, r1
 8006472:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3720      	adds	r7, #32
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	40015804 	.word	0x40015804
 800649c:	40015824 	.word	0x40015824
 80064a0:	40015800 	.word	0x40015800
 80064a4:	40015c00 	.word	0x40015c00
 80064a8:	40015c04 	.word	0x40015c04
 80064ac:	40015c24 	.word	0x40015c24
 80064b0:	cccccccd 	.word	0xcccccccd
 80064b4:	ff05c010 	.word	0xff05c010
 80064b8:	ffff1ff0 	.word	0xffff1ff0
 80064bc:	fff88000 	.word	0xfff88000

080064c0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80064c0:	b490      	push	{r4, r7}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80064c8:	4b16      	ldr	r3, [pc, #88]	; (8006524 <SAI_Disable+0x64>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a16      	ldr	r2, [pc, #88]	; (8006528 <SAI_Disable+0x68>)
 80064ce:	fba2 2303 	umull	r2, r3, r2, r3
 80064d2:	0b1b      	lsrs	r3, r3, #12
 80064d4:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80064e8:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80064ea:	4623      	mov	r3, r4
 80064ec:	1e5c      	subs	r4, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10a      	bne.n	8006508 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	73fb      	strb	r3, [r7, #15]
      break;
 8006506:	e006      	b.n	8006516 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e9      	bne.n	80064ea <SAI_Disable+0x2a>

  return status;
 8006516:	7bfb      	ldrb	r3, [r7, #15]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bc90      	pop	{r4, r7}
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	2000000c 	.word	0x2000000c
 8006528:	95cbec1b 	.word	0x95cbec1b

0800652c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e025      	b.n	800658c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d106      	bne.n	800655a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f005 fced 	bl	800bf34 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2202      	movs	r2, #2
 800655e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3304      	adds	r3, #4
 800656a:	4619      	mov	r1, r3
 800656c:	4610      	mov	r0, r2
 800656e:	f001 fd81 	bl	8008074 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6818      	ldr	r0, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	461a      	mov	r2, r3
 800657c:	6839      	ldr	r1, [r7, #0]
 800657e:	f001 fdeb 	bl	8008158 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d101      	bne.n	80065b0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80065ac:	2302      	movs	r3, #2
 80065ae:	e018      	b.n	80065e2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2202      	movs	r2, #2
 80065b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	68b9      	ldr	r1, [r7, #8]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f001 fe49 	bl	8008258 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d104      	bne.n	80065d8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2205      	movs	r2, #5
 80065d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80065d6:	e003      	b.n	80065e0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b082      	sub	sp, #8
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d101      	bne.n	8006604 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006600:	2302      	movs	r3, #2
 8006602:	e00e      	b.n	8006622 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2202      	movs	r2, #2
 8006608:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f001 fe41 	bl	800829a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
	...

0800662c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e04c      	b.n	80066d8 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d106      	bne.n	8006658 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f005 f9a2 	bl	800b99c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 0203 	bic.w	r2, r2, #3
 800666e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	4b19      	ldr	r3, [pc, #100]	; (80066e0 <HAL_SPDIFRX_Init+0xb4>)
 800667c:	4013      	ands	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8006688:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800668e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8006694:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800669a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80066a0:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 80066a6:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 80066ac:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 80066b2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 80066b8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4313      	orrs	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	fff88407 	.word	0xfff88407

080066e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e084      	b.n	8006800 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d106      	bne.n	8006716 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f005 f985 	bl	800ba20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2202      	movs	r2, #2
 800671a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800672c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006736:	d902      	bls.n	800673e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006738:	2300      	movs	r3, #0
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	e002      	b.n	8006744 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800673e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006742:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800674c:	d007      	beq.n	800675e <HAL_SPI_Init+0x7a>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006756:	d002      	beq.n	800675e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10b      	bne.n	800677e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800676e:	d903      	bls.n	8006778 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	631a      	str	r2, [r3, #48]	; 0x30
 8006776:	e002      	b.n	800677e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800679c:	431a      	orrs	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	ea42 0103 	orr.w	r1, r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	430a      	orrs	r2, r1
 80067b6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	0c1b      	lsrs	r3, r3, #16
 80067be:	f003 0204 	and.w	r2, r3, #4
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	431a      	orrs	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067cc:	431a      	orrs	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	ea42 0103 	orr.w	r1, r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	430a      	orrs	r2, r1
 80067de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	69da      	ldr	r2, [r3, #28]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e01d      	b.n	8006856 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d106      	bne.n	8006834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f005 f958 	bl	800bae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	3304      	adds	r3, #4
 8006844:	4619      	mov	r1, r3
 8006846:	4610      	mov	r0, r2
 8006848:	f000 fb78 	bl	8006f3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
	...

08006860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0201 	orr.w	r2, r2, #1
 8006876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689a      	ldr	r2, [r3, #8]
 800687e:	4b0c      	ldr	r3, [pc, #48]	; (80068b0 <HAL_TIM_Base_Start_IT+0x50>)
 8006880:	4013      	ands	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b06      	cmp	r3, #6
 8006888:	d00b      	beq.n	80068a2 <HAL_TIM_Base_Start_IT+0x42>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006890:	d007      	beq.n	80068a2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f042 0201 	orr.w	r2, r2, #1
 80068a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	00010007 	.word	0x00010007

080068b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e01d      	b.n	8006902 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d106      	bne.n	80068e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f005 f970 	bl	800bbc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	3304      	adds	r3, #4
 80068f0:	4619      	mov	r1, r3
 80068f2:	4610      	mov	r0, r2
 80068f4:	f000 fb22 	bl	8006f3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b082      	sub	sp, #8
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b02      	cmp	r3, #2
 800691e:	d122      	bne.n	8006966 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b02      	cmp	r3, #2
 800692c:	d11b      	bne.n	8006966 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f06f 0202 	mvn.w	r2, #2
 8006936:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	f003 0303 	and.w	r3, r3, #3
 8006948:	2b00      	cmp	r3, #0
 800694a:	d003      	beq.n	8006954 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fad7 	bl	8006f00 <HAL_TIM_IC_CaptureCallback>
 8006952:	e005      	b.n	8006960 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fac9 	bl	8006eec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fada 	bl	8006f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b04      	cmp	r3, #4
 8006972:	d122      	bne.n	80069ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f003 0304 	and.w	r3, r3, #4
 800697e:	2b04      	cmp	r3, #4
 8006980:	d11b      	bne.n	80069ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f06f 0204 	mvn.w	r2, #4
 800698a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 faad 	bl	8006f00 <HAL_TIM_IC_CaptureCallback>
 80069a6:	e005      	b.n	80069b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fa9f 	bl	8006eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fab0 	bl	8006f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	f003 0308 	and.w	r3, r3, #8
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d122      	bne.n	8006a0e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b08      	cmp	r3, #8
 80069d4:	d11b      	bne.n	8006a0e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f06f 0208 	mvn.w	r2, #8
 80069de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2204      	movs	r2, #4
 80069e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	f003 0303 	and.w	r3, r3, #3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d003      	beq.n	80069fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fa83 	bl	8006f00 <HAL_TIM_IC_CaptureCallback>
 80069fa:	e005      	b.n	8006a08 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fa75 	bl	8006eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fa86 	bl	8006f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	f003 0310 	and.w	r3, r3, #16
 8006a18:	2b10      	cmp	r3, #16
 8006a1a:	d122      	bne.n	8006a62 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f003 0310 	and.w	r3, r3, #16
 8006a26:	2b10      	cmp	r3, #16
 8006a28:	d11b      	bne.n	8006a62 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f06f 0210 	mvn.w	r2, #16
 8006a32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2208      	movs	r2, #8
 8006a38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fa59 	bl	8006f00 <HAL_TIM_IC_CaptureCallback>
 8006a4e:	e005      	b.n	8006a5c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fa4b 	bl	8006eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fa5c 	bl	8006f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d10e      	bne.n	8006a8e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d107      	bne.n	8006a8e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f06f 0201 	mvn.w	r2, #1
 8006a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f004 fd19 	bl	800b4c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a98:	2b80      	cmp	r3, #128	; 0x80
 8006a9a:	d10e      	bne.n	8006aba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa6:	2b80      	cmp	r3, #128	; 0x80
 8006aa8:	d107      	bne.n	8006aba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 febd 	bl	8007834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ac8:	d10e      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad4:	2b80      	cmp	r3, #128	; 0x80
 8006ad6:	d107      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 feb0 	bl	8007848 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af2:	2b40      	cmp	r3, #64	; 0x40
 8006af4:	d10e      	bne.n	8006b14 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b00:	2b40      	cmp	r3, #64	; 0x40
 8006b02:	d107      	bne.n	8006b14 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fa0a 	bl	8006f28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	f003 0320 	and.w	r3, r3, #32
 8006b1e:	2b20      	cmp	r3, #32
 8006b20:	d10e      	bne.n	8006b40 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f003 0320 	and.w	r3, r3, #32
 8006b2c:	2b20      	cmp	r3, #32
 8006b2e:	d107      	bne.n	8006b40 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f06f 0220 	mvn.w	r2, #32
 8006b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fe70 	bl	8007820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b40:	bf00      	nop
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d101      	bne.n	8006b62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006b5e:	2302      	movs	r3, #2
 8006b60:	e105      	b.n	8006d6e <HAL_TIM_PWM_ConfigChannel+0x226>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b14      	cmp	r3, #20
 8006b76:	f200 80f0 	bhi.w	8006d5a <HAL_TIM_PWM_ConfigChannel+0x212>
 8006b7a:	a201      	add	r2, pc, #4	; (adr r2, 8006b80 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b80:	08006bd5 	.word	0x08006bd5
 8006b84:	08006d5b 	.word	0x08006d5b
 8006b88:	08006d5b 	.word	0x08006d5b
 8006b8c:	08006d5b 	.word	0x08006d5b
 8006b90:	08006c15 	.word	0x08006c15
 8006b94:	08006d5b 	.word	0x08006d5b
 8006b98:	08006d5b 	.word	0x08006d5b
 8006b9c:	08006d5b 	.word	0x08006d5b
 8006ba0:	08006c57 	.word	0x08006c57
 8006ba4:	08006d5b 	.word	0x08006d5b
 8006ba8:	08006d5b 	.word	0x08006d5b
 8006bac:	08006d5b 	.word	0x08006d5b
 8006bb0:	08006c97 	.word	0x08006c97
 8006bb4:	08006d5b 	.word	0x08006d5b
 8006bb8:	08006d5b 	.word	0x08006d5b
 8006bbc:	08006d5b 	.word	0x08006d5b
 8006bc0:	08006cd9 	.word	0x08006cd9
 8006bc4:	08006d5b 	.word	0x08006d5b
 8006bc8:	08006d5b 	.word	0x08006d5b
 8006bcc:	08006d5b 	.word	0x08006d5b
 8006bd0:	08006d19 	.word	0x08006d19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68b9      	ldr	r1, [r7, #8]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fa4e 	bl	800707c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	699a      	ldr	r2, [r3, #24]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0208 	orr.w	r2, r2, #8
 8006bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699a      	ldr	r2, [r3, #24]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 0204 	bic.w	r2, r2, #4
 8006bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6999      	ldr	r1, [r3, #24]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	691a      	ldr	r2, [r3, #16]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	619a      	str	r2, [r3, #24]
      break;
 8006c12:	e0a3      	b.n	8006d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68b9      	ldr	r1, [r7, #8]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 faa0 	bl	8007160 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699a      	ldr	r2, [r3, #24]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6999      	ldr	r1, [r3, #24]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	021a      	lsls	r2, r3, #8
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	619a      	str	r2, [r3, #24]
      break;
 8006c54:	e082      	b.n	8006d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68b9      	ldr	r1, [r7, #8]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 faf7 	bl	8007250 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69da      	ldr	r2, [r3, #28]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f042 0208 	orr.w	r2, r2, #8
 8006c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69da      	ldr	r2, [r3, #28]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0204 	bic.w	r2, r2, #4
 8006c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69d9      	ldr	r1, [r3, #28]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	691a      	ldr	r2, [r3, #16]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	61da      	str	r2, [r3, #28]
      break;
 8006c94:	e062      	b.n	8006d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68b9      	ldr	r1, [r7, #8]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 fb4d 	bl	800733c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69da      	ldr	r2, [r3, #28]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69da      	ldr	r2, [r3, #28]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69d9      	ldr	r1, [r3, #28]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	021a      	lsls	r2, r3, #8
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	61da      	str	r2, [r3, #28]
      break;
 8006cd6:	e041      	b.n	8006d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68b9      	ldr	r1, [r7, #8]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fb84 	bl	80073ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f042 0208 	orr.w	r2, r2, #8
 8006cf2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0204 	bic.w	r2, r2, #4
 8006d02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	691a      	ldr	r2, [r3, #16]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d16:	e021      	b.n	8006d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68b9      	ldr	r1, [r7, #8]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 fbb6 	bl	8007490 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	021a      	lsls	r2, r3, #8
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d58:	e000      	b.n	8006d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006d5a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop

08006d78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d101      	bne.n	8006d90 <HAL_TIM_ConfigClockSource+0x18>
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	e0a6      	b.n	8006ede <HAL_TIM_ConfigClockSource+0x166>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	4b4f      	ldr	r3, [pc, #316]	; (8006ee8 <HAL_TIM_ConfigClockSource+0x170>)
 8006dac:	4013      	ands	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006db6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b40      	cmp	r3, #64	; 0x40
 8006dc6:	d067      	beq.n	8006e98 <HAL_TIM_ConfigClockSource+0x120>
 8006dc8:	2b40      	cmp	r3, #64	; 0x40
 8006dca:	d80b      	bhi.n	8006de4 <HAL_TIM_ConfigClockSource+0x6c>
 8006dcc:	2b10      	cmp	r3, #16
 8006dce:	d073      	beq.n	8006eb8 <HAL_TIM_ConfigClockSource+0x140>
 8006dd0:	2b10      	cmp	r3, #16
 8006dd2:	d802      	bhi.n	8006dda <HAL_TIM_ConfigClockSource+0x62>
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d06f      	beq.n	8006eb8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006dd8:	e078      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006dda:	2b20      	cmp	r3, #32
 8006ddc:	d06c      	beq.n	8006eb8 <HAL_TIM_ConfigClockSource+0x140>
 8006dde:	2b30      	cmp	r3, #48	; 0x30
 8006de0:	d06a      	beq.n	8006eb8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006de2:	e073      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006de4:	2b70      	cmp	r3, #112	; 0x70
 8006de6:	d00d      	beq.n	8006e04 <HAL_TIM_ConfigClockSource+0x8c>
 8006de8:	2b70      	cmp	r3, #112	; 0x70
 8006dea:	d804      	bhi.n	8006df6 <HAL_TIM_ConfigClockSource+0x7e>
 8006dec:	2b50      	cmp	r3, #80	; 0x50
 8006dee:	d033      	beq.n	8006e58 <HAL_TIM_ConfigClockSource+0xe0>
 8006df0:	2b60      	cmp	r3, #96	; 0x60
 8006df2:	d041      	beq.n	8006e78 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006df4:	e06a      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dfa:	d066      	beq.n	8006eca <HAL_TIM_ConfigClockSource+0x152>
 8006dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e00:	d017      	beq.n	8006e32 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006e02:	e063      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6818      	ldr	r0, [r3, #0]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	6899      	ldr	r1, [r3, #8]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f000 fc0a 	bl	800762c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e26:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	609a      	str	r2, [r3, #8]
      break;
 8006e30:	e04c      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6818      	ldr	r0, [r3, #0]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	6899      	ldr	r1, [r3, #8]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	f000 fbf3 	bl	800762c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e54:	609a      	str	r2, [r3, #8]
      break;
 8006e56:	e039      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6818      	ldr	r0, [r3, #0]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	6859      	ldr	r1, [r3, #4]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	461a      	mov	r2, r3
 8006e66:	f000 fb67 	bl	8007538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2150      	movs	r1, #80	; 0x50
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 fbc0 	bl	80075f6 <TIM_ITRx_SetConfig>
      break;
 8006e76:	e029      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6818      	ldr	r0, [r3, #0]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	6859      	ldr	r1, [r3, #4]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	461a      	mov	r2, r3
 8006e86:	f000 fb86 	bl	8007596 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2160      	movs	r1, #96	; 0x60
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 fbb0 	bl	80075f6 <TIM_ITRx_SetConfig>
      break;
 8006e96:	e019      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6818      	ldr	r0, [r3, #0]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	6859      	ldr	r1, [r3, #4]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f000 fb47 	bl	8007538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2140      	movs	r1, #64	; 0x40
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 fba0 	bl	80075f6 <TIM_ITRx_SetConfig>
      break;
 8006eb6:	e009      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	f000 fb97 	bl	80075f6 <TIM_ITRx_SetConfig>
      break;
 8006ec8:	e000      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006eca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	fffeff88 	.word	0xfffeff88

08006eec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a40      	ldr	r2, [pc, #256]	; (8007050 <TIM_Base_SetConfig+0x114>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d013      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f5a:	d00f      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a3d      	ldr	r2, [pc, #244]	; (8007054 <TIM_Base_SetConfig+0x118>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d00b      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a3c      	ldr	r2, [pc, #240]	; (8007058 <TIM_Base_SetConfig+0x11c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d007      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a3b      	ldr	r2, [pc, #236]	; (800705c <TIM_Base_SetConfig+0x120>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d003      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a3a      	ldr	r2, [pc, #232]	; (8007060 <TIM_Base_SetConfig+0x124>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d108      	bne.n	8006f8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a2f      	ldr	r2, [pc, #188]	; (8007050 <TIM_Base_SetConfig+0x114>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d02b      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9c:	d027      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a2c      	ldr	r2, [pc, #176]	; (8007054 <TIM_Base_SetConfig+0x118>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d023      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a2b      	ldr	r2, [pc, #172]	; (8007058 <TIM_Base_SetConfig+0x11c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d01f      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a2a      	ldr	r2, [pc, #168]	; (800705c <TIM_Base_SetConfig+0x120>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d01b      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a29      	ldr	r2, [pc, #164]	; (8007060 <TIM_Base_SetConfig+0x124>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d017      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a28      	ldr	r2, [pc, #160]	; (8007064 <TIM_Base_SetConfig+0x128>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d013      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a27      	ldr	r2, [pc, #156]	; (8007068 <TIM_Base_SetConfig+0x12c>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00f      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a26      	ldr	r2, [pc, #152]	; (800706c <TIM_Base_SetConfig+0x130>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d00b      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a25      	ldr	r2, [pc, #148]	; (8007070 <TIM_Base_SetConfig+0x134>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d007      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a24      	ldr	r2, [pc, #144]	; (8007074 <TIM_Base_SetConfig+0x138>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d003      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a23      	ldr	r2, [pc, #140]	; (8007078 <TIM_Base_SetConfig+0x13c>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d108      	bne.n	8007000 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a0a      	ldr	r2, [pc, #40]	; (8007050 <TIM_Base_SetConfig+0x114>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d003      	beq.n	8007034 <TIM_Base_SetConfig+0xf8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a0c      	ldr	r2, [pc, #48]	; (8007060 <TIM_Base_SetConfig+0x124>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d103      	bne.n	800703c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	691a      	ldr	r2, [r3, #16]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	615a      	str	r2, [r3, #20]
}
 8007042:	bf00      	nop
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	40010000 	.word	0x40010000
 8007054:	40000400 	.word	0x40000400
 8007058:	40000800 	.word	0x40000800
 800705c:	40000c00 	.word	0x40000c00
 8007060:	40010400 	.word	0x40010400
 8007064:	40014000 	.word	0x40014000
 8007068:	40014400 	.word	0x40014400
 800706c:	40014800 	.word	0x40014800
 8007070:	40001800 	.word	0x40001800
 8007074:	40001c00 	.word	0x40001c00
 8007078:	40002000 	.word	0x40002000

0800707c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	f023 0201 	bic.w	r2, r3, #1
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	4b2b      	ldr	r3, [pc, #172]	; (8007154 <TIM_OC1_SetConfig+0xd8>)
 80070a8:	4013      	ands	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 0303 	bic.w	r3, r3, #3
 80070b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f023 0302 	bic.w	r3, r3, #2
 80070c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a21      	ldr	r2, [pc, #132]	; (8007158 <TIM_OC1_SetConfig+0xdc>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d003      	beq.n	80070e0 <TIM_OC1_SetConfig+0x64>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a20      	ldr	r2, [pc, #128]	; (800715c <TIM_OC1_SetConfig+0xe0>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d10c      	bne.n	80070fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f023 0308 	bic.w	r3, r3, #8
 80070e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f023 0304 	bic.w	r3, r3, #4
 80070f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a16      	ldr	r2, [pc, #88]	; (8007158 <TIM_OC1_SetConfig+0xdc>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d003      	beq.n	800710a <TIM_OC1_SetConfig+0x8e>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a15      	ldr	r2, [pc, #84]	; (800715c <TIM_OC1_SetConfig+0xe0>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d111      	bne.n	800712e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	4313      	orrs	r3, r2
 8007122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	4313      	orrs	r3, r2
 800712c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	621a      	str	r2, [r3, #32]
}
 8007148:	bf00      	nop
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	fffeff8f 	.word	0xfffeff8f
 8007158:	40010000 	.word	0x40010000
 800715c:	40010400 	.word	0x40010400

08007160 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	f023 0210 	bic.w	r2, r3, #16
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	4b2e      	ldr	r3, [pc, #184]	; (8007244 <TIM_OC2_SetConfig+0xe4>)
 800718c:	4013      	ands	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	021b      	lsls	r3, r3, #8
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f023 0320 	bic.w	r3, r3, #32
 80071aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	011b      	lsls	r3, r3, #4
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a23      	ldr	r2, [pc, #140]	; (8007248 <TIM_OC2_SetConfig+0xe8>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d003      	beq.n	80071c8 <TIM_OC2_SetConfig+0x68>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a22      	ldr	r2, [pc, #136]	; (800724c <TIM_OC2_SetConfig+0xec>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d10d      	bne.n	80071e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	011b      	lsls	r3, r3, #4
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	4313      	orrs	r3, r2
 80071da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a18      	ldr	r2, [pc, #96]	; (8007248 <TIM_OC2_SetConfig+0xe8>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d003      	beq.n	80071f4 <TIM_OC2_SetConfig+0x94>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a17      	ldr	r2, [pc, #92]	; (800724c <TIM_OC2_SetConfig+0xec>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d113      	bne.n	800721c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007202:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	4313      	orrs	r3, r2
 800720e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	4313      	orrs	r3, r2
 800721a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	621a      	str	r2, [r3, #32]
}
 8007236:	bf00      	nop
 8007238:	371c      	adds	r7, #28
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	feff8fff 	.word	0xfeff8fff
 8007248:	40010000 	.word	0x40010000
 800724c:	40010400 	.word	0x40010400

08007250 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007250:	b480      	push	{r7}
 8007252:	b087      	sub	sp, #28
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	4b2d      	ldr	r3, [pc, #180]	; (8007330 <TIM_OC3_SetConfig+0xe0>)
 800727c:	4013      	ands	r3, r2
 800727e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f023 0303 	bic.w	r3, r3, #3
 8007286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	4313      	orrs	r3, r2
 8007290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	021b      	lsls	r3, r3, #8
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a22      	ldr	r2, [pc, #136]	; (8007334 <TIM_OC3_SetConfig+0xe4>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d003      	beq.n	80072b6 <TIM_OC3_SetConfig+0x66>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a21      	ldr	r2, [pc, #132]	; (8007338 <TIM_OC3_SetConfig+0xe8>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d10d      	bne.n	80072d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	021b      	lsls	r3, r3, #8
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a17      	ldr	r2, [pc, #92]	; (8007334 <TIM_OC3_SetConfig+0xe4>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d003      	beq.n	80072e2 <TIM_OC3_SetConfig+0x92>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a16      	ldr	r2, [pc, #88]	; (8007338 <TIM_OC3_SetConfig+0xe8>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d113      	bne.n	800730a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	011b      	lsls	r3, r3, #4
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	4313      	orrs	r3, r2
 8007308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	621a      	str	r2, [r3, #32]
}
 8007324:	bf00      	nop
 8007326:	371c      	adds	r7, #28
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	fffeff8f 	.word	0xfffeff8f
 8007334:	40010000 	.word	0x40010000
 8007338:	40010400 	.word	0x40010400

0800733c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800733c:	b480      	push	{r7}
 800733e:	b087      	sub	sp, #28
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	4b1e      	ldr	r3, [pc, #120]	; (80073e0 <TIM_OC4_SetConfig+0xa4>)
 8007368:	4013      	ands	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	021b      	lsls	r3, r3, #8
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	4313      	orrs	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007386:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	031b      	lsls	r3, r3, #12
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	4313      	orrs	r3, r2
 8007392:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a13      	ldr	r2, [pc, #76]	; (80073e4 <TIM_OC4_SetConfig+0xa8>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d003      	beq.n	80073a4 <TIM_OC4_SetConfig+0x68>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a12      	ldr	r2, [pc, #72]	; (80073e8 <TIM_OC4_SetConfig+0xac>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d109      	bne.n	80073b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	019b      	lsls	r3, r3, #6
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	621a      	str	r2, [r3, #32]
}
 80073d2:	bf00      	nop
 80073d4:	371c      	adds	r7, #28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	feff8fff 	.word	0xfeff8fff
 80073e4:	40010000 	.word	0x40010000
 80073e8:	40010400 	.word	0x40010400

080073ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b087      	sub	sp, #28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	4b1b      	ldr	r3, [pc, #108]	; (8007484 <TIM_OC5_SetConfig+0x98>)
 8007418:	4013      	ands	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	4313      	orrs	r3, r2
 8007424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800742c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	041b      	lsls	r3, r3, #16
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	4313      	orrs	r3, r2
 8007438:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a12      	ldr	r2, [pc, #72]	; (8007488 <TIM_OC5_SetConfig+0x9c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d003      	beq.n	800744a <TIM_OC5_SetConfig+0x5e>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a11      	ldr	r2, [pc, #68]	; (800748c <TIM_OC5_SetConfig+0xa0>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d109      	bne.n	800745e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007450:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	021b      	lsls	r3, r3, #8
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	4313      	orrs	r3, r2
 800745c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	621a      	str	r2, [r3, #32]
}
 8007478:	bf00      	nop
 800747a:	371c      	adds	r7, #28
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr
 8007484:	fffeff8f 	.word	0xfffeff8f
 8007488:	40010000 	.word	0x40010000
 800748c:	40010400 	.word	0x40010400

08007490 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	4b1c      	ldr	r3, [pc, #112]	; (800752c <TIM_OC6_SetConfig+0x9c>)
 80074bc:	4013      	ands	r3, r2
 80074be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	021b      	lsls	r3, r3, #8
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	051b      	lsls	r3, r3, #20
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	4313      	orrs	r3, r2
 80074de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a13      	ldr	r2, [pc, #76]	; (8007530 <TIM_OC6_SetConfig+0xa0>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d003      	beq.n	80074f0 <TIM_OC6_SetConfig+0x60>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a12      	ldr	r2, [pc, #72]	; (8007534 <TIM_OC6_SetConfig+0xa4>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d109      	bne.n	8007504 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	029b      	lsls	r3, r3, #10
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	4313      	orrs	r3, r2
 8007502:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	621a      	str	r2, [r3, #32]
}
 800751e:	bf00      	nop
 8007520:	371c      	adds	r7, #28
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	feff8fff 	.word	0xfeff8fff
 8007530:	40010000 	.word	0x40010000
 8007534:	40010400 	.word	0x40010400

08007538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6a1b      	ldr	r3, [r3, #32]
 8007548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	f023 0201 	bic.w	r2, r3, #1
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	4313      	orrs	r3, r2
 800756c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f023 030a 	bic.w	r3, r3, #10
 8007574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	4313      	orrs	r3, r2
 800757c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	621a      	str	r2, [r3, #32]
}
 800758a:	bf00      	nop
 800758c:	371c      	adds	r7, #28
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007596:	b480      	push	{r7}
 8007598:	b087      	sub	sp, #28
 800759a:	af00      	add	r7, sp, #0
 800759c:	60f8      	str	r0, [r7, #12]
 800759e:	60b9      	str	r1, [r7, #8]
 80075a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	f023 0210 	bic.w	r2, r3, #16
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	031b      	lsls	r3, r3, #12
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	011b      	lsls	r3, r3, #4
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	4313      	orrs	r3, r2
 80075dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	621a      	str	r2, [r3, #32]
}
 80075ea:	bf00      	nop
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b085      	sub	sp, #20
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800760c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4313      	orrs	r3, r2
 8007614:	f043 0307 	orr.w	r3, r3, #7
 8007618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	609a      	str	r2, [r3, #8]
}
 8007620:	bf00      	nop
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800762c:	b480      	push	{r7}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
 8007638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	021a      	lsls	r2, r3, #8
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	431a      	orrs	r2, r3
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	4313      	orrs	r3, r2
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	4313      	orrs	r3, r2
 8007658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	609a      	str	r2, [r3, #8]
}
 8007660:	bf00      	nop
 8007662:	371c      	adds	r7, #28
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800767c:	2b01      	cmp	r3, #1
 800767e:	d101      	bne.n	8007684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007680:	2302      	movs	r3, #2
 8007682:	e045      	b.n	8007710 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2202      	movs	r2, #2
 8007690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a1c      	ldr	r2, [pc, #112]	; (800771c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d004      	beq.n	80076b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a1b      	ldr	r2, [pc, #108]	; (8007720 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d108      	bne.n	80076ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80076be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	4313      	orrs	r3, r2
 80076da:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076e2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	40010000 	.word	0x40010000
 8007720:	40010400 	.word	0x40010400

08007724 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800772e:	2300      	movs	r3, #0
 8007730:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007738:	2b01      	cmp	r3, #1
 800773a:	d101      	bne.n	8007740 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800773c:	2302      	movs	r3, #2
 800773e:	e065      	b.n	800780c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	4313      	orrs	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	4313      	orrs	r3, r2
 8007762:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	4313      	orrs	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4313      	orrs	r3, r2
 800777e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	4313      	orrs	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	4313      	orrs	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	041b      	lsls	r3, r3, #16
 80077b6:	4313      	orrs	r3, r2
 80077b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a16      	ldr	r2, [pc, #88]	; (8007818 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d004      	beq.n	80077ce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a14      	ldr	r2, [pc, #80]	; (800781c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d115      	bne.n	80077fa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	051b      	lsls	r3, r3, #20
 80077da:	4313      	orrs	r3, r2
 80077dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	69db      	ldr	r3, [r3, #28]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	40010000 	.word	0x40010000
 800781c:	40010400 	.word	0x40010400

08007820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e040      	b.n	80078f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007872:	2b00      	cmp	r3, #0
 8007874:	d106      	bne.n	8007884 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f004 fa66 	bl	800bd50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2224      	movs	r2, #36	; 0x24
 8007888:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 0201 	bic.w	r2, r2, #1
 8007898:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f82c 	bl	80078f8 <UART_SetConfig>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d101      	bne.n	80078aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e022      	b.n	80078f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fac4 	bl	8007e40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	689a      	ldr	r2, [r3, #8]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078d6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f042 0201 	orr.w	r2, r2, #1
 80078e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fb4b 	bl	8007f84 <UART_CheckIdleState>
 80078ee:	4603      	mov	r3, r0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b088      	sub	sp, #32
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007900:	2300      	movs	r3, #0
 8007902:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007904:	2300      	movs	r3, #0
 8007906:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689a      	ldr	r2, [r3, #8]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	431a      	orrs	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	431a      	orrs	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	69db      	ldr	r3, [r3, #28]
 800791c:	4313      	orrs	r3, r2
 800791e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	4bb1      	ldr	r3, [pc, #708]	; (8007bec <UART_SetConfig+0x2f4>)
 8007928:	4013      	ands	r3, r2
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	6812      	ldr	r2, [r2, #0]
 800792e:	6939      	ldr	r1, [r7, #16]
 8007930:	430b      	orrs	r3, r1
 8007932:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	4313      	orrs	r3, r2
 8007958:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	430a      	orrs	r2, r1
 800796c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a9f      	ldr	r2, [pc, #636]	; (8007bf0 <UART_SetConfig+0x2f8>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d121      	bne.n	80079bc <UART_SetConfig+0xc4>
 8007978:	4b9e      	ldr	r3, [pc, #632]	; (8007bf4 <UART_SetConfig+0x2fc>)
 800797a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800797e:	f003 0303 	and.w	r3, r3, #3
 8007982:	2b03      	cmp	r3, #3
 8007984:	d816      	bhi.n	80079b4 <UART_SetConfig+0xbc>
 8007986:	a201      	add	r2, pc, #4	; (adr r2, 800798c <UART_SetConfig+0x94>)
 8007988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798c:	0800799d 	.word	0x0800799d
 8007990:	080079a9 	.word	0x080079a9
 8007994:	080079a3 	.word	0x080079a3
 8007998:	080079af 	.word	0x080079af
 800799c:	2301      	movs	r3, #1
 800799e:	77fb      	strb	r3, [r7, #31]
 80079a0:	e151      	b.n	8007c46 <UART_SetConfig+0x34e>
 80079a2:	2302      	movs	r3, #2
 80079a4:	77fb      	strb	r3, [r7, #31]
 80079a6:	e14e      	b.n	8007c46 <UART_SetConfig+0x34e>
 80079a8:	2304      	movs	r3, #4
 80079aa:	77fb      	strb	r3, [r7, #31]
 80079ac:	e14b      	b.n	8007c46 <UART_SetConfig+0x34e>
 80079ae:	2308      	movs	r3, #8
 80079b0:	77fb      	strb	r3, [r7, #31]
 80079b2:	e148      	b.n	8007c46 <UART_SetConfig+0x34e>
 80079b4:	2310      	movs	r3, #16
 80079b6:	77fb      	strb	r3, [r7, #31]
 80079b8:	bf00      	nop
 80079ba:	e144      	b.n	8007c46 <UART_SetConfig+0x34e>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a8d      	ldr	r2, [pc, #564]	; (8007bf8 <UART_SetConfig+0x300>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d134      	bne.n	8007a30 <UART_SetConfig+0x138>
 80079c6:	4b8b      	ldr	r3, [pc, #556]	; (8007bf4 <UART_SetConfig+0x2fc>)
 80079c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079cc:	f003 030c 	and.w	r3, r3, #12
 80079d0:	2b0c      	cmp	r3, #12
 80079d2:	d829      	bhi.n	8007a28 <UART_SetConfig+0x130>
 80079d4:	a201      	add	r2, pc, #4	; (adr r2, 80079dc <UART_SetConfig+0xe4>)
 80079d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079da:	bf00      	nop
 80079dc:	08007a11 	.word	0x08007a11
 80079e0:	08007a29 	.word	0x08007a29
 80079e4:	08007a29 	.word	0x08007a29
 80079e8:	08007a29 	.word	0x08007a29
 80079ec:	08007a1d 	.word	0x08007a1d
 80079f0:	08007a29 	.word	0x08007a29
 80079f4:	08007a29 	.word	0x08007a29
 80079f8:	08007a29 	.word	0x08007a29
 80079fc:	08007a17 	.word	0x08007a17
 8007a00:	08007a29 	.word	0x08007a29
 8007a04:	08007a29 	.word	0x08007a29
 8007a08:	08007a29 	.word	0x08007a29
 8007a0c:	08007a23 	.word	0x08007a23
 8007a10:	2300      	movs	r3, #0
 8007a12:	77fb      	strb	r3, [r7, #31]
 8007a14:	e117      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007a16:	2302      	movs	r3, #2
 8007a18:	77fb      	strb	r3, [r7, #31]
 8007a1a:	e114      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007a1c:	2304      	movs	r3, #4
 8007a1e:	77fb      	strb	r3, [r7, #31]
 8007a20:	e111      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007a22:	2308      	movs	r3, #8
 8007a24:	77fb      	strb	r3, [r7, #31]
 8007a26:	e10e      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007a28:	2310      	movs	r3, #16
 8007a2a:	77fb      	strb	r3, [r7, #31]
 8007a2c:	bf00      	nop
 8007a2e:	e10a      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a71      	ldr	r2, [pc, #452]	; (8007bfc <UART_SetConfig+0x304>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d120      	bne.n	8007a7c <UART_SetConfig+0x184>
 8007a3a:	4b6e      	ldr	r3, [pc, #440]	; (8007bf4 <UART_SetConfig+0x2fc>)
 8007a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a44:	2b10      	cmp	r3, #16
 8007a46:	d00f      	beq.n	8007a68 <UART_SetConfig+0x170>
 8007a48:	2b10      	cmp	r3, #16
 8007a4a:	d802      	bhi.n	8007a52 <UART_SetConfig+0x15a>
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d005      	beq.n	8007a5c <UART_SetConfig+0x164>
 8007a50:	e010      	b.n	8007a74 <UART_SetConfig+0x17c>
 8007a52:	2b20      	cmp	r3, #32
 8007a54:	d005      	beq.n	8007a62 <UART_SetConfig+0x16a>
 8007a56:	2b30      	cmp	r3, #48	; 0x30
 8007a58:	d009      	beq.n	8007a6e <UART_SetConfig+0x176>
 8007a5a:	e00b      	b.n	8007a74 <UART_SetConfig+0x17c>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	77fb      	strb	r3, [r7, #31]
 8007a60:	e0f1      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007a62:	2302      	movs	r3, #2
 8007a64:	77fb      	strb	r3, [r7, #31]
 8007a66:	e0ee      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007a68:	2304      	movs	r3, #4
 8007a6a:	77fb      	strb	r3, [r7, #31]
 8007a6c:	e0eb      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007a6e:	2308      	movs	r3, #8
 8007a70:	77fb      	strb	r3, [r7, #31]
 8007a72:	e0e8      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007a74:	2310      	movs	r3, #16
 8007a76:	77fb      	strb	r3, [r7, #31]
 8007a78:	bf00      	nop
 8007a7a:	e0e4      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a5f      	ldr	r2, [pc, #380]	; (8007c00 <UART_SetConfig+0x308>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d120      	bne.n	8007ac8 <UART_SetConfig+0x1d0>
 8007a86:	4b5b      	ldr	r3, [pc, #364]	; (8007bf4 <UART_SetConfig+0x2fc>)
 8007a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a90:	2b40      	cmp	r3, #64	; 0x40
 8007a92:	d00f      	beq.n	8007ab4 <UART_SetConfig+0x1bc>
 8007a94:	2b40      	cmp	r3, #64	; 0x40
 8007a96:	d802      	bhi.n	8007a9e <UART_SetConfig+0x1a6>
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d005      	beq.n	8007aa8 <UART_SetConfig+0x1b0>
 8007a9c:	e010      	b.n	8007ac0 <UART_SetConfig+0x1c8>
 8007a9e:	2b80      	cmp	r3, #128	; 0x80
 8007aa0:	d005      	beq.n	8007aae <UART_SetConfig+0x1b6>
 8007aa2:	2bc0      	cmp	r3, #192	; 0xc0
 8007aa4:	d009      	beq.n	8007aba <UART_SetConfig+0x1c2>
 8007aa6:	e00b      	b.n	8007ac0 <UART_SetConfig+0x1c8>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	77fb      	strb	r3, [r7, #31]
 8007aac:	e0cb      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007aae:	2302      	movs	r3, #2
 8007ab0:	77fb      	strb	r3, [r7, #31]
 8007ab2:	e0c8      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007ab4:	2304      	movs	r3, #4
 8007ab6:	77fb      	strb	r3, [r7, #31]
 8007ab8:	e0c5      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007aba:	2308      	movs	r3, #8
 8007abc:	77fb      	strb	r3, [r7, #31]
 8007abe:	e0c2      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007ac0:	2310      	movs	r3, #16
 8007ac2:	77fb      	strb	r3, [r7, #31]
 8007ac4:	bf00      	nop
 8007ac6:	e0be      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a4d      	ldr	r2, [pc, #308]	; (8007c04 <UART_SetConfig+0x30c>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d124      	bne.n	8007b1c <UART_SetConfig+0x224>
 8007ad2:	4b48      	ldr	r3, [pc, #288]	; (8007bf4 <UART_SetConfig+0x2fc>)
 8007ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ae0:	d012      	beq.n	8007b08 <UART_SetConfig+0x210>
 8007ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ae6:	d802      	bhi.n	8007aee <UART_SetConfig+0x1f6>
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d007      	beq.n	8007afc <UART_SetConfig+0x204>
 8007aec:	e012      	b.n	8007b14 <UART_SetConfig+0x21c>
 8007aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007af2:	d006      	beq.n	8007b02 <UART_SetConfig+0x20a>
 8007af4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007af8:	d009      	beq.n	8007b0e <UART_SetConfig+0x216>
 8007afa:	e00b      	b.n	8007b14 <UART_SetConfig+0x21c>
 8007afc:	2300      	movs	r3, #0
 8007afe:	77fb      	strb	r3, [r7, #31]
 8007b00:	e0a1      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007b02:	2302      	movs	r3, #2
 8007b04:	77fb      	strb	r3, [r7, #31]
 8007b06:	e09e      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007b08:	2304      	movs	r3, #4
 8007b0a:	77fb      	strb	r3, [r7, #31]
 8007b0c:	e09b      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007b0e:	2308      	movs	r3, #8
 8007b10:	77fb      	strb	r3, [r7, #31]
 8007b12:	e098      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007b14:	2310      	movs	r3, #16
 8007b16:	77fb      	strb	r3, [r7, #31]
 8007b18:	bf00      	nop
 8007b1a:	e094      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a39      	ldr	r2, [pc, #228]	; (8007c08 <UART_SetConfig+0x310>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d124      	bne.n	8007b70 <UART_SetConfig+0x278>
 8007b26:	4b33      	ldr	r3, [pc, #204]	; (8007bf4 <UART_SetConfig+0x2fc>)
 8007b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b34:	d012      	beq.n	8007b5c <UART_SetConfig+0x264>
 8007b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b3a:	d802      	bhi.n	8007b42 <UART_SetConfig+0x24a>
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d007      	beq.n	8007b50 <UART_SetConfig+0x258>
 8007b40:	e012      	b.n	8007b68 <UART_SetConfig+0x270>
 8007b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b46:	d006      	beq.n	8007b56 <UART_SetConfig+0x25e>
 8007b48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b4c:	d009      	beq.n	8007b62 <UART_SetConfig+0x26a>
 8007b4e:	e00b      	b.n	8007b68 <UART_SetConfig+0x270>
 8007b50:	2301      	movs	r3, #1
 8007b52:	77fb      	strb	r3, [r7, #31]
 8007b54:	e077      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007b56:	2302      	movs	r3, #2
 8007b58:	77fb      	strb	r3, [r7, #31]
 8007b5a:	e074      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007b5c:	2304      	movs	r3, #4
 8007b5e:	77fb      	strb	r3, [r7, #31]
 8007b60:	e071      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007b62:	2308      	movs	r3, #8
 8007b64:	77fb      	strb	r3, [r7, #31]
 8007b66:	e06e      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007b68:	2310      	movs	r3, #16
 8007b6a:	77fb      	strb	r3, [r7, #31]
 8007b6c:	bf00      	nop
 8007b6e:	e06a      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a25      	ldr	r2, [pc, #148]	; (8007c0c <UART_SetConfig+0x314>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d124      	bne.n	8007bc4 <UART_SetConfig+0x2cc>
 8007b7a:	4b1e      	ldr	r3, [pc, #120]	; (8007bf4 <UART_SetConfig+0x2fc>)
 8007b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b80:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b88:	d012      	beq.n	8007bb0 <UART_SetConfig+0x2b8>
 8007b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b8e:	d802      	bhi.n	8007b96 <UART_SetConfig+0x29e>
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d007      	beq.n	8007ba4 <UART_SetConfig+0x2ac>
 8007b94:	e012      	b.n	8007bbc <UART_SetConfig+0x2c4>
 8007b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b9a:	d006      	beq.n	8007baa <UART_SetConfig+0x2b2>
 8007b9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ba0:	d009      	beq.n	8007bb6 <UART_SetConfig+0x2be>
 8007ba2:	e00b      	b.n	8007bbc <UART_SetConfig+0x2c4>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	77fb      	strb	r3, [r7, #31]
 8007ba8:	e04d      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007baa:	2302      	movs	r3, #2
 8007bac:	77fb      	strb	r3, [r7, #31]
 8007bae:	e04a      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007bb0:	2304      	movs	r3, #4
 8007bb2:	77fb      	strb	r3, [r7, #31]
 8007bb4:	e047      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007bb6:	2308      	movs	r3, #8
 8007bb8:	77fb      	strb	r3, [r7, #31]
 8007bba:	e044      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007bbc:	2310      	movs	r3, #16
 8007bbe:	77fb      	strb	r3, [r7, #31]
 8007bc0:	bf00      	nop
 8007bc2:	e040      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a11      	ldr	r2, [pc, #68]	; (8007c10 <UART_SetConfig+0x318>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d139      	bne.n	8007c42 <UART_SetConfig+0x34a>
 8007bce:	4b09      	ldr	r3, [pc, #36]	; (8007bf4 <UART_SetConfig+0x2fc>)
 8007bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007bd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bdc:	d027      	beq.n	8007c2e <UART_SetConfig+0x336>
 8007bde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007be2:	d817      	bhi.n	8007c14 <UART_SetConfig+0x31c>
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d01c      	beq.n	8007c22 <UART_SetConfig+0x32a>
 8007be8:	e027      	b.n	8007c3a <UART_SetConfig+0x342>
 8007bea:	bf00      	nop
 8007bec:	efff69f3 	.word	0xefff69f3
 8007bf0:	40011000 	.word	0x40011000
 8007bf4:	40023800 	.word	0x40023800
 8007bf8:	40004400 	.word	0x40004400
 8007bfc:	40004800 	.word	0x40004800
 8007c00:	40004c00 	.word	0x40004c00
 8007c04:	40005000 	.word	0x40005000
 8007c08:	40011400 	.word	0x40011400
 8007c0c:	40007800 	.word	0x40007800
 8007c10:	40007c00 	.word	0x40007c00
 8007c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c18:	d006      	beq.n	8007c28 <UART_SetConfig+0x330>
 8007c1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007c1e:	d009      	beq.n	8007c34 <UART_SetConfig+0x33c>
 8007c20:	e00b      	b.n	8007c3a <UART_SetConfig+0x342>
 8007c22:	2300      	movs	r3, #0
 8007c24:	77fb      	strb	r3, [r7, #31]
 8007c26:	e00e      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007c28:	2302      	movs	r3, #2
 8007c2a:	77fb      	strb	r3, [r7, #31]
 8007c2c:	e00b      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007c2e:	2304      	movs	r3, #4
 8007c30:	77fb      	strb	r3, [r7, #31]
 8007c32:	e008      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007c34:	2308      	movs	r3, #8
 8007c36:	77fb      	strb	r3, [r7, #31]
 8007c38:	e005      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007c3a:	2310      	movs	r3, #16
 8007c3c:	77fb      	strb	r3, [r7, #31]
 8007c3e:	bf00      	nop
 8007c40:	e001      	b.n	8007c46 <UART_SetConfig+0x34e>
 8007c42:	2310      	movs	r3, #16
 8007c44:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c4e:	d17c      	bne.n	8007d4a <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8007c50:	7ffb      	ldrb	r3, [r7, #31]
 8007c52:	2b08      	cmp	r3, #8
 8007c54:	d859      	bhi.n	8007d0a <UART_SetConfig+0x412>
 8007c56:	a201      	add	r2, pc, #4	; (adr r2, 8007c5c <UART_SetConfig+0x364>)
 8007c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5c:	08007c81 	.word	0x08007c81
 8007c60:	08007c9f 	.word	0x08007c9f
 8007c64:	08007cbd 	.word	0x08007cbd
 8007c68:	08007d0b 	.word	0x08007d0b
 8007c6c:	08007cd5 	.word	0x08007cd5
 8007c70:	08007d0b 	.word	0x08007d0b
 8007c74:	08007d0b 	.word	0x08007d0b
 8007c78:	08007d0b 	.word	0x08007d0b
 8007c7c:	08007cf3 	.word	0x08007cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007c80:	f7fd f8e0 	bl	8004e44 <HAL_RCC_GetPCLK1Freq>
 8007c84:	4603      	mov	r3, r0
 8007c86:	005a      	lsls	r2, r3, #1
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	085b      	lsrs	r3, r3, #1
 8007c8e:	441a      	add	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	61bb      	str	r3, [r7, #24]
        break;
 8007c9c:	e038      	b.n	8007d10 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007c9e:	f7fd f8e5 	bl	8004e6c <HAL_RCC_GetPCLK2Freq>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	005a      	lsls	r2, r3, #1
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	085b      	lsrs	r3, r3, #1
 8007cac:	441a      	add	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	61bb      	str	r3, [r7, #24]
        break;
 8007cba:	e029      	b.n	8007d10 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	085a      	lsrs	r2, r3, #1
 8007cc2:	4b5d      	ldr	r3, [pc, #372]	; (8007e38 <UART_SetConfig+0x540>)
 8007cc4:	4413      	add	r3, r2
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	6852      	ldr	r2, [r2, #4]
 8007cca:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	61bb      	str	r3, [r7, #24]
        break;
 8007cd2:	e01d      	b.n	8007d10 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007cd4:	f7fc fff8 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	005a      	lsls	r2, r3, #1
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	085b      	lsrs	r3, r3, #1
 8007ce2:	441a      	add	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	61bb      	str	r3, [r7, #24]
        break;
 8007cf0:	e00e      	b.n	8007d10 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	085b      	lsrs	r3, r3, #1
 8007cf8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	61bb      	str	r3, [r7, #24]
        break;
 8007d08:	e002      	b.n	8007d10 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	75fb      	strb	r3, [r7, #23]
        break;
 8007d0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	2b0f      	cmp	r3, #15
 8007d14:	d916      	bls.n	8007d44 <UART_SetConfig+0x44c>
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d1c:	d212      	bcs.n	8007d44 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	f023 030f 	bic.w	r3, r3, #15
 8007d26:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	085b      	lsrs	r3, r3, #1
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	f003 0307 	and.w	r3, r3, #7
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	89fb      	ldrh	r3, [r7, #14]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	89fa      	ldrh	r2, [r7, #14]
 8007d40:	60da      	str	r2, [r3, #12]
 8007d42:	e06e      	b.n	8007e22 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	75fb      	strb	r3, [r7, #23]
 8007d48:	e06b      	b.n	8007e22 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8007d4a:	7ffb      	ldrb	r3, [r7, #31]
 8007d4c:	2b08      	cmp	r3, #8
 8007d4e:	d857      	bhi.n	8007e00 <UART_SetConfig+0x508>
 8007d50:	a201      	add	r2, pc, #4	; (adr r2, 8007d58 <UART_SetConfig+0x460>)
 8007d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d56:	bf00      	nop
 8007d58:	08007d7d 	.word	0x08007d7d
 8007d5c:	08007d99 	.word	0x08007d99
 8007d60:	08007db5 	.word	0x08007db5
 8007d64:	08007e01 	.word	0x08007e01
 8007d68:	08007dcd 	.word	0x08007dcd
 8007d6c:	08007e01 	.word	0x08007e01
 8007d70:	08007e01 	.word	0x08007e01
 8007d74:	08007e01 	.word	0x08007e01
 8007d78:	08007de9 	.word	0x08007de9
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007d7c:	f7fd f862 	bl	8004e44 <HAL_RCC_GetPCLK1Freq>
 8007d80:	4602      	mov	r2, r0
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	085b      	lsrs	r3, r3, #1
 8007d88:	441a      	add	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	61bb      	str	r3, [r7, #24]
        break;
 8007d96:	e036      	b.n	8007e06 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007d98:	f7fd f868 	bl	8004e6c <HAL_RCC_GetPCLK2Freq>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	085b      	lsrs	r3, r3, #1
 8007da4:	441a      	add	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	61bb      	str	r3, [r7, #24]
        break;
 8007db2:	e028      	b.n	8007e06 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	085a      	lsrs	r2, r3, #1
 8007dba:	4b20      	ldr	r3, [pc, #128]	; (8007e3c <UART_SetConfig+0x544>)
 8007dbc:	4413      	add	r3, r2
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	6852      	ldr	r2, [r2, #4]
 8007dc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	61bb      	str	r3, [r7, #24]
        break;
 8007dca:	e01c      	b.n	8007e06 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007dcc:	f7fc ff7c 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	085b      	lsrs	r3, r3, #1
 8007dd8:	441a      	add	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	61bb      	str	r3, [r7, #24]
        break;
 8007de6:	e00e      	b.n	8007e06 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	085b      	lsrs	r3, r3, #1
 8007dee:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	61bb      	str	r3, [r7, #24]
        break;
 8007dfe:	e002      	b.n	8007e06 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	75fb      	strb	r3, [r7, #23]
        break;
 8007e04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	2b0f      	cmp	r3, #15
 8007e0a:	d908      	bls.n	8007e1e <UART_SetConfig+0x526>
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e12:	d204      	bcs.n	8007e1e <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	69ba      	ldr	r2, [r7, #24]
 8007e1a:	60da      	str	r2, [r3, #12]
 8007e1c:	e001      	b.n	8007e22 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3720      	adds	r7, #32
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	01e84800 	.word	0x01e84800
 8007e3c:	00f42400 	.word	0x00f42400

08007e40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00a      	beq.n	8007e6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	430a      	orrs	r2, r1
 8007e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	f003 0302 	and.w	r3, r3, #2
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00a      	beq.n	8007e8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	430a      	orrs	r2, r1
 8007e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	f003 0304 	and.w	r3, r3, #4
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00a      	beq.n	8007eae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	f003 0308 	and.w	r3, r3, #8
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00a      	beq.n	8007ed0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	430a      	orrs	r2, r1
 8007ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed4:	f003 0310 	and.w	r3, r3, #16
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00a      	beq.n	8007ef2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef6:	f003 0320 	and.w	r3, r3, #32
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00a      	beq.n	8007f14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d01a      	beq.n	8007f56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	430a      	orrs	r2, r1
 8007f34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f3e:	d10a      	bne.n	8007f56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	430a      	orrs	r2, r1
 8007f54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00a      	beq.n	8007f78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	430a      	orrs	r2, r1
 8007f76:	605a      	str	r2, [r3, #4]
  }
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af02      	add	r7, sp, #8
 8007f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007f92:	f7f9 f96d 	bl	8001270 <HAL_GetTick>
 8007f96:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0308 	and.w	r3, r3, #8
 8007fa2:	2b08      	cmp	r3, #8
 8007fa4:	d10e      	bne.n	8007fc4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fa6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007faa:	9300      	str	r3, [sp, #0]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f814 	bl	8007fe2 <UART_WaitOnFlagUntilTimeout>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e00a      	b.n	8007fda <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b084      	sub	sp, #16
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	60f8      	str	r0, [r7, #12]
 8007fea:	60b9      	str	r1, [r7, #8]
 8007fec:	603b      	str	r3, [r7, #0]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ff2:	e02a      	b.n	800804a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffa:	d026      	beq.n	800804a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ffc:	f7f9 f938 	bl	8001270 <HAL_GetTick>
 8008000:	4602      	mov	r2, r0
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	69ba      	ldr	r2, [r7, #24]
 8008008:	429a      	cmp	r2, r3
 800800a:	d302      	bcc.n	8008012 <UART_WaitOnFlagUntilTimeout+0x30>
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d11b      	bne.n	800804a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008020:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0201 	bic.w	r2, r2, #1
 8008030:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2220      	movs	r2, #32
 8008036:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2220      	movs	r2, #32
 800803c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e00f      	b.n	800806a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	69da      	ldr	r2, [r3, #28]
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	4013      	ands	r3, r2
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	429a      	cmp	r2, r3
 8008058:	bf0c      	ite	eq
 800805a:	2301      	moveq	r3, #1
 800805c:	2300      	movne	r3, #0
 800805e:	b2db      	uxtb	r3, r3
 8008060:	461a      	mov	r2, r3
 8008062:	79fb      	ldrb	r3, [r7, #7]
 8008064:	429a      	cmp	r2, r3
 8008066:	d0c5      	beq.n	8007ff4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
	...

08008074 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800807e:	2300      	movs	r3, #0
 8008080:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008082:	2300      	movs	r3, #0
 8008084:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d027      	beq.n	80080de <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	4b2f      	ldr	r3, [pc, #188]	; (8008154 <FMC_SDRAM_Init+0xe0>)
 8008098:	4013      	ands	r3, r2
 800809a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80080a4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80080aa:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80080b0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80080b6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80080bc:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80080c2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80080c8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80080ce:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	601a      	str	r2, [r3, #0]
 80080dc:	e032      	b.n	8008144 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080ea:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80080f4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80080fa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	4b12      	ldr	r3, [pc, #72]	; (8008154 <FMC_SDRAM_Init+0xe0>)
 800810c:	4013      	ands	r3, r2
 800810e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008118:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800811e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8008124:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800812a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8008130:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	4313      	orrs	r3, r2
 8008136:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	ffff8000 	.word	0xffff8000

08008158 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008158:	b480      	push	{r7}
 800815a:	b087      	sub	sp, #28
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8008164:	2300      	movs	r3, #0
 8008166:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8008168:	2300      	movs	r3, #0
 800816a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d02e      	beq.n	80081d0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800817e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	3b01      	subs	r3, #1
 800818c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800818e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	3b01      	subs	r3, #1
 8008196:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008198:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	3b01      	subs	r3, #1
 80081a0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80081a2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80081ac:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	3b01      	subs	r3, #1
 80081b4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80081b6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	3b01      	subs	r3, #1
 80081be:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80081c0:	4313      	orrs	r3, r2
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	697a      	ldr	r2, [r7, #20]
 80081cc:	609a      	str	r2, [r3, #8]
 80081ce:	e039      	b.n	8008244 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	4b1e      	ldr	r3, [pc, #120]	; (8008254 <FMC_SDRAM_Timing_Init+0xfc>)
 80081da:	4013      	ands	r3, r2
 80081dc:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	3b01      	subs	r3, #1
 80081ec:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80081ee:	4313      	orrs	r3, r2
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008202:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	3b01      	subs	r3, #1
 8008210:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008212:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	3b01      	subs	r3, #1
 800821a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800821c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	3b01      	subs	r3, #1
 8008224:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008226:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	3b01      	subs	r3, #1
 800822e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008230:	4313      	orrs	r3, r2
 8008232:	693a      	ldr	r2, [r7, #16]
 8008234:	4313      	orrs	r3, r2
 8008236:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	371c      	adds	r7, #28
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	ff0f0fff 	.word	0xff0f0fff

08008258 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008258:	b480      	push	{r7}
 800825a:	b087      	sub	sp, #28
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8008264:	2300      	movs	r3, #0
 8008266:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008270:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	3b01      	subs	r3, #1
 8008278:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800827a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008282:	4313      	orrs	r3, r2
 8008284:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8008286:	697a      	ldr	r2, [r7, #20]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	371c      	adds	r7, #28
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr

0800829a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800829a:	b480      	push	{r7}
 800829c:	b083      	sub	sp, #12
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	695a      	ldr	r2, [r3, #20]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	431a      	orrs	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f043 0201 	orr.w	r2, r3, #1
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f023 0201 	bic.w	r2, r3, #1
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800830e:	2300      	movs	r3, #0
 8008310:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	019b      	lsls	r3, r3, #6
 8008316:	f043 0220 	orr.w	r2, r3, #32
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3301      	adds	r3, #1
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	4a09      	ldr	r2, [pc, #36]	; (800834c <USB_FlushTxFifo+0x48>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d901      	bls.n	8008330 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e006      	b.n	800833e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	f003 0320 	and.w	r3, r3, #32
 8008338:	2b20      	cmp	r3, #32
 800833a:	d0f0      	beq.n	800831e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3714      	adds	r7, #20
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	00030d40 	.word	0x00030d40

08008350 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008358:	2300      	movs	r3, #0
 800835a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2210      	movs	r2, #16
 8008360:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	3301      	adds	r3, #1
 8008366:	60fb      	str	r3, [r7, #12]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4a09      	ldr	r2, [pc, #36]	; (8008390 <USB_FlushRxFifo+0x40>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d901      	bls.n	8008374 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	e006      	b.n	8008382 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	f003 0310 	and.w	r3, r3, #16
 800837c:	2b10      	cmp	r3, #16
 800837e:	d0f0      	beq.n	8008362 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	00030d40 	.word	0x00030d40

08008394 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008394:	b480      	push	{r7}
 8008396:	b089      	sub	sp, #36	; 0x24
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	4611      	mov	r1, r2
 80083a0:	461a      	mov	r2, r3
 80083a2:	460b      	mov	r3, r1
 80083a4:	71fb      	strb	r3, [r7, #7]
 80083a6:	4613      	mov	r3, r2
 80083a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80083b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d11a      	bne.n	80083f0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80083ba:	88bb      	ldrh	r3, [r7, #4]
 80083bc:	3303      	adds	r3, #3
 80083be:	089b      	lsrs	r3, r3, #2
 80083c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80083c2:	2300      	movs	r3, #0
 80083c4:	61bb      	str	r3, [r7, #24]
 80083c6:	e00f      	b.n	80083e8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 80083c8:	79fb      	ldrb	r3, [r7, #7]
 80083ca:	031a      	lsls	r2, r3, #12
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083d4:	461a      	mov	r2, r3
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	3304      	adds	r3, #4
 80083e0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	3301      	adds	r3, #1
 80083e6:	61bb      	str	r3, [r7, #24]
 80083e8:	69ba      	ldr	r2, [r7, #24]
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d3eb      	bcc.n	80083c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3724      	adds	r7, #36	; 0x24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80083fe:	b480      	push	{r7}
 8008400:	b089      	sub	sp, #36	; 0x24
 8008402:	af00      	add	r7, sp, #0
 8008404:	60f8      	str	r0, [r7, #12]
 8008406:	60b9      	str	r1, [r7, #8]
 8008408:	4613      	mov	r3, r2
 800840a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008414:	88fb      	ldrh	r3, [r7, #6]
 8008416:	3303      	adds	r3, #3
 8008418:	089b      	lsrs	r3, r3, #2
 800841a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800841c:	2300      	movs	r3, #0
 800841e:	61bb      	str	r3, [r7, #24]
 8008420:	e00b      	b.n	800843a <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	601a      	str	r2, [r3, #0]
    pDest++;
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	3304      	adds	r3, #4
 8008432:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	3301      	adds	r3, #1
 8008438:	61bb      	str	r3, [r7, #24]
 800843a:	69ba      	ldr	r2, [r7, #24]
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	429a      	cmp	r2, r3
 8008440:	d3ef      	bcc.n	8008422 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008442:	69fb      	ldr	r3, [r7, #28]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3724      	adds	r7, #36	; 0x24
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	695b      	ldr	r3, [r3, #20]
 800845c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	4013      	ands	r3, r2
 8008466:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008468:	68fb      	ldr	r3, [r7, #12]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3714      	adds	r7, #20
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr

08008476 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008476:	b480      	push	{r7}
 8008478:	b083      	sub	sp, #12
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	f003 0301 	and.w	r3, r3, #1
}
 8008486:	4618      	mov	r0, r3
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008492:	b480      	push	{r7}
 8008494:	b085      	sub	sp, #20
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	460b      	mov	r3, r1
 800849c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80084b0:	f023 0303 	bic.w	r3, r3, #3
 80084b4:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	78fb      	ldrb	r3, [r7, #3]
 80084c0:	f003 0303 	and.w	r3, r3, #3
 80084c4:	68f9      	ldr	r1, [r7, #12]
 80084c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80084ca:	4313      	orrs	r3, r2
 80084cc:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80084ce:	78fb      	ldrb	r3, [r7, #3]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d107      	bne.n	80084e4 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084da:	461a      	mov	r2, r3
 80084dc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80084e0:	6053      	str	r3, [r2, #4]
 80084e2:	e009      	b.n	80084f8 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80084e4:	78fb      	ldrb	r3, [r7, #3]
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d106      	bne.n	80084f8 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084f0:	461a      	mov	r2, r3
 80084f2:	f241 7370 	movw	r3, #6000	; 0x1770
 80084f6:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr

08008506 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b084      	sub	sp, #16
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008512:	2300      	movs	r3, #0
 8008514:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008526:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008534:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008536:	2064      	movs	r0, #100	; 0x64
 8008538:	f7f8 fea6 	bl	8001288 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008548:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800854a:	200a      	movs	r0, #10
 800854c:	f7f8 fe9c 	bl	8001288 <HAL_Delay>

  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800855a:	b480      	push	{r7}
 800855c:	b085      	sub	sp, #20
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	460b      	mov	r3, r1
 8008564:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800856a:	2300      	movs	r3, #0
 800856c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800857e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d109      	bne.n	800859e <USB_DriveVbus+0x44>
 800858a:	78fb      	ldrb	r3, [r7, #3]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d106      	bne.n	800859e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008598:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800859c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085a8:	d109      	bne.n	80085be <USB_DriveVbus+0x64>
 80085aa:	78fb      	ldrb	r3, [r7, #3]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d106      	bne.n	80085be <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80085b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085bc:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3714      	adds	r7, #20
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80085d8:	2300      	movs	r3, #0
 80085da:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	0c5b      	lsrs	r3, r3, #17
 80085ea:	f003 0303 	and.w	r3, r3, #3
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3714      	adds	r7, #20
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
	...

080085fc <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	4608      	mov	r0, r1
 8008606:	4611      	mov	r1, r2
 8008608:	461a      	mov	r2, r3
 800860a:	4603      	mov	r3, r0
 800860c:	70fb      	strb	r3, [r7, #3]
 800860e:	460b      	mov	r3, r1
 8008610:	70bb      	strb	r3, [r7, #2]
 8008612:	4613      	mov	r3, r2
 8008614:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800861e:	78fb      	ldrb	r3, [r7, #3]
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	4413      	add	r3, r2
 8008626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800862a:	461a      	mov	r2, r3
 800862c:	f04f 33ff 	mov.w	r3, #4294967295
 8008630:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008632:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008636:	2b03      	cmp	r3, #3
 8008638:	d87e      	bhi.n	8008738 <USB_HC_Init+0x13c>
 800863a:	a201      	add	r2, pc, #4	; (adr r2, 8008640 <USB_HC_Init+0x44>)
 800863c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008640:	08008651 	.word	0x08008651
 8008644:	080086fb 	.word	0x080086fb
 8008648:	08008651 	.word	0x08008651
 800864c:	080086bd 	.word	0x080086bd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008650:	78fb      	ldrb	r3, [r7, #3]
 8008652:	015a      	lsls	r2, r3, #5
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	4413      	add	r3, r2
 8008658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800865c:	461a      	mov	r2, r3
 800865e:	f240 439d 	movw	r3, #1181	; 0x49d
 8008662:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008664:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008668:	2b00      	cmp	r3, #0
 800866a:	da10      	bge.n	800868e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800866c:	78fb      	ldrb	r3, [r7, #3]
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	4413      	add	r3, r2
 8008674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	78fa      	ldrb	r2, [r7, #3]
 800867c:	0151      	lsls	r1, r2, #5
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	440a      	add	r2, r1
 8008682:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800868a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800868c:	e057      	b.n	800873e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008696:	2b00      	cmp	r3, #0
 8008698:	d051      	beq.n	800873e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800869a:	78fb      	ldrb	r3, [r7, #3]
 800869c:	015a      	lsls	r2, r3, #5
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	4413      	add	r3, r2
 80086a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	78fa      	ldrb	r2, [r7, #3]
 80086aa:	0151      	lsls	r1, r2, #5
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	440a      	add	r2, r1
 80086b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80086b8:	60d3      	str	r3, [r2, #12]
      break;
 80086ba:	e040      	b.n	800873e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80086bc:	78fb      	ldrb	r3, [r7, #3]
 80086be:	015a      	lsls	r2, r3, #5
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	4413      	add	r3, r2
 80086c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086c8:	461a      	mov	r2, r3
 80086ca:	f240 639d 	movw	r3, #1693	; 0x69d
 80086ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80086d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	da34      	bge.n	8008742 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80086d8:	78fb      	ldrb	r3, [r7, #3]
 80086da:	015a      	lsls	r2, r3, #5
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	4413      	add	r3, r2
 80086e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	78fa      	ldrb	r2, [r7, #3]
 80086e8:	0151      	lsls	r1, r2, #5
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	440a      	add	r2, r1
 80086ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086f6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80086f8:	e023      	b.n	8008742 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80086fa:	78fb      	ldrb	r3, [r7, #3]
 80086fc:	015a      	lsls	r2, r3, #5
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	4413      	add	r3, r2
 8008702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008706:	461a      	mov	r2, r3
 8008708:	f240 2325 	movw	r3, #549	; 0x225
 800870c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800870e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008712:	2b00      	cmp	r3, #0
 8008714:	da17      	bge.n	8008746 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008716:	78fb      	ldrb	r3, [r7, #3]
 8008718:	015a      	lsls	r2, r3, #5
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	4413      	add	r3, r2
 800871e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	78fa      	ldrb	r2, [r7, #3]
 8008726:	0151      	lsls	r1, r2, #5
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	440a      	add	r2, r1
 800872c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008730:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008734:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008736:	e006      	b.n	8008746 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	75fb      	strb	r3, [r7, #23]
      break;
 800873c:	e004      	b.n	8008748 <USB_HC_Init+0x14c>
      break;
 800873e:	bf00      	nop
 8008740:	e002      	b.n	8008748 <USB_HC_Init+0x14c>
      break;
 8008742:	bf00      	nop
 8008744:	e000      	b.n	8008748 <USB_HC_Init+0x14c>
      break;
 8008746:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800874e:	699a      	ldr	r2, [r3, #24]
 8008750:	78fb      	ldrb	r3, [r7, #3]
 8008752:	f003 030f 	and.w	r3, r3, #15
 8008756:	2101      	movs	r1, #1
 8008758:	fa01 f303 	lsl.w	r3, r1, r3
 800875c:	68b9      	ldr	r1, [r7, #8]
 800875e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008762:	4313      	orrs	r3, r2
 8008764:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008772:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008776:	2b00      	cmp	r3, #0
 8008778:	da03      	bge.n	8008782 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800877a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800877e:	613b      	str	r3, [r7, #16]
 8008780:	e001      	b.n	8008786 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008782:	2300      	movs	r3, #0
 8008784:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8008786:	f897 3020 	ldrb.w	r3, [r7, #32]
 800878a:	2b02      	cmp	r3, #2
 800878c:	d103      	bne.n	8008796 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800878e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	e001      	b.n	800879a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800879a:	787b      	ldrb	r3, [r7, #1]
 800879c:	059b      	lsls	r3, r3, #22
 800879e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80087a2:	78bb      	ldrb	r3, [r7, #2]
 80087a4:	02db      	lsls	r3, r3, #11
 80087a6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80087aa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80087ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80087b0:	049b      	lsls	r3, r3, #18
 80087b2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80087b6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80087b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80087be:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80087c4:	78fb      	ldrb	r3, [r7, #3]
 80087c6:	0159      	lsls	r1, r3, #5
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	440b      	add	r3, r1
 80087cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087d0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80087d6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80087d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80087dc:	2b03      	cmp	r3, #3
 80087de:	d10f      	bne.n	8008800 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80087e0:	78fb      	ldrb	r3, [r7, #3]
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	78fa      	ldrb	r2, [r7, #3]
 80087f0:	0151      	lsls	r1, r2, #5
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	440a      	add	r2, r1
 80087f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087fe:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008800:	7dfb      	ldrb	r3, [r7, #23]
}
 8008802:	4618      	mov	r0, r3
 8008804:	371c      	adds	r7, #28
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop

08008810 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b08c      	sub	sp, #48	; 0x30
 8008814:	af02      	add	r7, sp, #8
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	4613      	mov	r3, r2
 800881c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	785b      	ldrb	r3, [r3, #1]
 8008826:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800882c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008836:	2b00      	cmp	r3, #0
 8008838:	d028      	beq.n	800888c <USB_HC_StartXfer+0x7c>
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	791b      	ldrb	r3, [r3, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d124      	bne.n	800888c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8008842:	79fb      	ldrb	r3, [r7, #7]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10b      	bne.n	8008860 <USB_HC_StartXfer+0x50>
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	795b      	ldrb	r3, [r3, #5]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d107      	bne.n	8008860 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	785b      	ldrb	r3, [r3, #1]
 8008854:	4619      	mov	r1, r3
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f000 fa2e 	bl	8008cb8 <USB_DoPing>
      return HAL_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	e112      	b.n	8008a86 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8008860:	79fb      	ldrb	r3, [r7, #7]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d112      	bne.n	800888c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	015a      	lsls	r2, r3, #5
 800886a:	6a3b      	ldr	r3, [r7, #32]
 800886c:	4413      	add	r3, r2
 800886e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	69fa      	ldr	r2, [r7, #28]
 8008876:	0151      	lsls	r1, r2, #5
 8008878:	6a3a      	ldr	r2, [r7, #32]
 800887a:	440a      	add	r2, r1
 800887c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008880:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8008884:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	2200      	movs	r2, #0
 800888a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d018      	beq.n	80088c6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	8912      	ldrh	r2, [r2, #8]
 800889c:	4413      	add	r3, r2
 800889e:	3b01      	subs	r3, #1
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	8912      	ldrh	r2, [r2, #8]
 80088a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80088a8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80088aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80088ac:	8b7b      	ldrh	r3, [r7, #26]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d90b      	bls.n	80088ca <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80088b2:	8b7b      	ldrh	r3, [r7, #26]
 80088b4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80088b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	8912      	ldrh	r2, [r2, #8]
 80088bc:	fb02 f203 	mul.w	r2, r2, r3
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	611a      	str	r2, [r3, #16]
 80088c4:	e001      	b.n	80088ca <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80088c6:	2301      	movs	r3, #1
 80088c8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	78db      	ldrb	r3, [r3, #3]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d006      	beq.n	80088e0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80088d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	8912      	ldrh	r2, [r2, #8]
 80088d8:	fb02 f203 	mul.w	r2, r2, r3
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80088e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088ea:	04d9      	lsls	r1, r3, #19
 80088ec:	4b68      	ldr	r3, [pc, #416]	; (8008a90 <USB_HC_StartXfer+0x280>)
 80088ee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80088f0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	7a9b      	ldrb	r3, [r3, #10]
 80088f6:	075b      	lsls	r3, r3, #29
 80088f8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80088fc:	69f9      	ldr	r1, [r7, #28]
 80088fe:	0148      	lsls	r0, r1, #5
 8008900:	6a39      	ldr	r1, [r7, #32]
 8008902:	4401      	add	r1, r0
 8008904:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008908:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800890a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800890c:	79fb      	ldrb	r3, [r7, #7]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d009      	beq.n	8008926 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	68d9      	ldr	r1, [r3, #12]
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	015a      	lsls	r2, r3, #5
 800891a:	6a3b      	ldr	r3, [r7, #32]
 800891c:	4413      	add	r3, r2
 800891e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008922:	460a      	mov	r2, r1
 8008924:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	2b00      	cmp	r3, #0
 8008934:	bf0c      	ite	eq
 8008936:	2301      	moveq	r3, #1
 8008938:	2300      	movne	r3, #0
 800893a:	b2db      	uxtb	r3, r3
 800893c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	015a      	lsls	r2, r3, #5
 8008942:	6a3b      	ldr	r3, [r7, #32]
 8008944:	4413      	add	r3, r2
 8008946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	69fa      	ldr	r2, [r7, #28]
 800894e:	0151      	lsls	r1, r2, #5
 8008950:	6a3a      	ldr	r2, [r7, #32]
 8008952:	440a      	add	r2, r1
 8008954:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008958:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800895c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	015a      	lsls	r2, r3, #5
 8008962:	6a3b      	ldr	r3, [r7, #32]
 8008964:	4413      	add	r3, r2
 8008966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	7e7b      	ldrb	r3, [r7, #25]
 800896e:	075b      	lsls	r3, r3, #29
 8008970:	69f9      	ldr	r1, [r7, #28]
 8008972:	0148      	lsls	r0, r1, #5
 8008974:	6a39      	ldr	r1, [r7, #32]
 8008976:	4401      	add	r1, r0
 8008978:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800897c:	4313      	orrs	r3, r2
 800897e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	6a3b      	ldr	r3, [r7, #32]
 8008986:	4413      	add	r3, r2
 8008988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a41      	ldr	r2, [pc, #260]	; (8008a94 <USB_HC_StartXfer+0x284>)
 8008990:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008992:	4b40      	ldr	r3, [pc, #256]	; (8008a94 <USB_HC_StartXfer+0x284>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800899a:	4a3e      	ldr	r2, [pc, #248]	; (8008a94 <USB_HC_StartXfer+0x284>)
 800899c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	78db      	ldrb	r3, [r3, #3]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d006      	beq.n	80089b4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80089a6:	4b3b      	ldr	r3, [pc, #236]	; (8008a94 <USB_HC_StartXfer+0x284>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089ae:	4a39      	ldr	r2, [pc, #228]	; (8008a94 <USB_HC_StartXfer+0x284>)
 80089b0:	6013      	str	r3, [r2, #0]
 80089b2:	e005      	b.n	80089c0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80089b4:	4b37      	ldr	r3, [pc, #220]	; (8008a94 <USB_HC_StartXfer+0x284>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089bc:	4a35      	ldr	r2, [pc, #212]	; (8008a94 <USB_HC_StartXfer+0x284>)
 80089be:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80089c0:	4b34      	ldr	r3, [pc, #208]	; (8008a94 <USB_HC_StartXfer+0x284>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089c8:	4a32      	ldr	r2, [pc, #200]	; (8008a94 <USB_HC_StartXfer+0x284>)
 80089ca:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	015a      	lsls	r2, r3, #5
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	4413      	add	r3, r2
 80089d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089d8:	461a      	mov	r2, r3
 80089da:	4b2e      	ldr	r3, [pc, #184]	; (8008a94 <USB_HC_StartXfer+0x284>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80089e0:	79fb      	ldrb	r3, [r7, #7]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d14e      	bne.n	8008a84 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	78db      	ldrb	r3, [r3, #3]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d14a      	bne.n	8008a84 <USB_HC_StartXfer+0x274>
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d046      	beq.n	8008a84 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	79db      	ldrb	r3, [r3, #7]
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d830      	bhi.n	8008a60 <USB_HC_StartXfer+0x250>
 80089fe:	a201      	add	r2, pc, #4	; (adr r2, 8008a04 <USB_HC_StartXfer+0x1f4>)
 8008a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a04:	08008a15 	.word	0x08008a15
 8008a08:	08008a39 	.word	0x08008a39
 8008a0c:	08008a15 	.word	0x08008a15
 8008a10:	08008a39 	.word	0x08008a39
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	3303      	adds	r3, #3
 8008a1a:	089b      	lsrs	r3, r3, #2
 8008a1c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008a1e:	8afa      	ldrh	r2, [r7, #22]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d91c      	bls.n	8008a64 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	f043 0220 	orr.w	r2, r3, #32
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	619a      	str	r2, [r3, #24]
          }
          break;
 8008a36:	e015      	b.n	8008a64 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	3303      	adds	r3, #3
 8008a3e:	089b      	lsrs	r3, r3, #2
 8008a40:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008a42:	8afa      	ldrh	r2, [r7, #22]
 8008a44:	6a3b      	ldr	r3, [r7, #32]
 8008a46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d90a      	bls.n	8008a68 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	619a      	str	r2, [r3, #24]
          }
          break;
 8008a5e:	e003      	b.n	8008a68 <USB_HC_StartXfer+0x258>

        default:
          break;
 8008a60:	bf00      	nop
 8008a62:	e002      	b.n	8008a6a <USB_HC_StartXfer+0x25a>
          break;
 8008a64:	bf00      	nop
 8008a66:	e000      	b.n	8008a6a <USB_HC_StartXfer+0x25a>
          break;
 8008a68:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	68d9      	ldr	r1, [r3, #12]
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	785a      	ldrb	r2, [r3, #1]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	b298      	uxth	r0, r3
 8008a78:	2300      	movs	r3, #0
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f7ff fc88 	bl	8008394 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3728      	adds	r7, #40	; 0x28
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	1ff80000 	.word	0x1ff80000
 8008a94:	20000198 	.word	0x20000198

08008a98 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008aaa:	695b      	ldr	r3, [r3, #20]
 8008aac:	b29b      	uxth	r3, r3
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b087      	sub	sp, #28
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8008aca:	78fb      	ldrb	r3, [r7, #3]
 8008acc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	0c9b      	lsrs	r3, r3, #18
 8008ae2:	f003 0303 	and.w	r3, r3, #3
 8008ae6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d002      	beq.n	8008af4 <USB_HC_Halt+0x3a>
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d16c      	bne.n	8008bce <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	0151      	lsls	r1, r2, #5
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	440a      	add	r2, r1
 8008b0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b12:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d143      	bne.n	8008ba8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	0151      	lsls	r1, r2, #5
 8008b32:	693a      	ldr	r2, [r7, #16]
 8008b34:	440a      	add	r2, r1
 8008b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b3e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	015a      	lsls	r2, r3, #5
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	4413      	add	r3, r2
 8008b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	0151      	lsls	r1, r2, #5
 8008b52:	693a      	ldr	r2, [r7, #16]
 8008b54:	440a      	add	r2, r1
 8008b56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b5e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	015a      	lsls	r2, r3, #5
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	4413      	add	r3, r2
 8008b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	0151      	lsls	r1, r2, #5
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	440a      	add	r2, r1
 8008b76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b7e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	3301      	adds	r3, #1
 8008b84:	617b      	str	r3, [r7, #20]
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b8c:	d81d      	bhi.n	8008bca <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	015a      	lsls	r2, r3, #5
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	4413      	add	r3, r2
 8008b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ba4:	d0ec      	beq.n	8008b80 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008ba6:	e080      	b.n	8008caa <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	015a      	lsls	r2, r3, #5
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	4413      	add	r3, r2
 8008bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	0151      	lsls	r1, r2, #5
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	440a      	add	r2, r1
 8008bbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bc6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008bc8:	e06f      	b.n	8008caa <USB_HC_Halt+0x1f0>
          break;
 8008bca:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008bcc:	e06d      	b.n	8008caa <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	015a      	lsls	r2, r3, #5
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	0151      	lsls	r1, r2, #5
 8008be0:	693a      	ldr	r2, [r7, #16]
 8008be2:	440a      	add	r2, r1
 8008be4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008be8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bec:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d143      	bne.n	8008c86 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	015a      	lsls	r2, r3, #5
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	4413      	add	r3, r2
 8008c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	0151      	lsls	r1, r2, #5
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	440a      	add	r2, r1
 8008c14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c1c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	015a      	lsls	r2, r3, #5
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	0151      	lsls	r1, r2, #5
 8008c30:	693a      	ldr	r2, [r7, #16]
 8008c32:	440a      	add	r2, r1
 8008c34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c3c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	015a      	lsls	r2, r3, #5
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	4413      	add	r3, r2
 8008c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	0151      	lsls	r1, r2, #5
 8008c50:	693a      	ldr	r2, [r7, #16]
 8008c52:	440a      	add	r2, r1
 8008c54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c5c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	3301      	adds	r3, #1
 8008c62:	617b      	str	r3, [r7, #20]
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c6a:	d81d      	bhi.n	8008ca8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	015a      	lsls	r2, r3, #5
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c82:	d0ec      	beq.n	8008c5e <USB_HC_Halt+0x1a4>
 8008c84:	e011      	b.n	8008caa <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	015a      	lsls	r2, r3, #5
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	0151      	lsls	r1, r2, #5
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	440a      	add	r2, r1
 8008c9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ca0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ca4:	6013      	str	r3, [r2, #0]
 8008ca6:	e000      	b.n	8008caa <USB_HC_Halt+0x1f0>
          break;
 8008ca8:	bf00      	nop
    }
  }

  return HAL_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	371c      	adds	r7, #28
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b087      	sub	sp, #28
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008cc8:	78fb      	ldrb	r3, [r7, #3]
 8008cca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	04da      	lsls	r2, r3, #19
 8008cd4:	4b15      	ldr	r3, [pc, #84]	; (8008d2c <USB_DoPing+0x74>)
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	0151      	lsls	r1, r2, #5
 8008cdc:	697a      	ldr	r2, [r7, #20]
 8008cde:	440a      	add	r2, r1
 8008ce0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ce4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ce8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	015a      	lsls	r2, r3, #5
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d00:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d08:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	015a      	lsls	r2, r3, #5
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	4413      	add	r3, r2
 8008d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d16:	461a      	mov	r2, r3
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	371c      	adds	r7, #28
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	1ff80000 	.word	0x1ff80000

08008d30 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7ff face 	bl	80082e2 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008d46:	2110      	movs	r1, #16
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7ff fadb 	bl	8008304 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7ff fafe 	bl	8008350 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008d54:	2300      	movs	r3, #0
 8008d56:	613b      	str	r3, [r7, #16]
 8008d58:	e01f      	b.n	8008d9a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d70:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d78:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d80:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	015a      	lsls	r2, r3, #5
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	4413      	add	r3, r2
 8008d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d8e:	461a      	mov	r2, r3
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	3301      	adds	r3, #1
 8008d98:	613b      	str	r3, [r7, #16]
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	2b0f      	cmp	r3, #15
 8008d9e:	d9dc      	bls.n	8008d5a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008da0:	2300      	movs	r3, #0
 8008da2:	613b      	str	r3, [r7, #16]
 8008da4:	e034      	b.n	8008e10 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	015a      	lsls	r2, r3, #5
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	4413      	add	r3, r2
 8008dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008dbc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008dc4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008dcc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	015a      	lsls	r2, r3, #5
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dda:	461a      	mov	r2, r3
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	3301      	adds	r3, #1
 8008de4:	617b      	str	r3, [r7, #20]
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dec:	d80c      	bhi.n	8008e08 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	015a      	lsls	r2, r3, #5
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	4413      	add	r3, r2
 8008df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e04:	d0ec      	beq.n	8008de0 <USB_StopHost+0xb0>
 8008e06:	e000      	b.n	8008e0a <USB_StopHost+0xda>
        break;
 8008e08:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	613b      	str	r3, [r7, #16]
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	2b0f      	cmp	r3, #15
 8008e14:	d9c7      	bls.n	8008da6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e22:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f04f 32ff 	mov.w	r2, #4294967295
 8008e2a:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f7ff fa47 	bl	80082c0 <USB_EnableGlobalInt>

  return HAL_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3718      	adds	r7, #24
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008e44:	2300      	movs	r3, #0
 8008e46:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8008e48:	e008      	b.n	8008e5c <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	32e0      	adds	r2, #224	; 0xe0
 8008e50:	2100      	movs	r1, #0
 8008e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	60fb      	str	r3, [r7, #12]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2b0e      	cmp	r3, #14
 8008e60:	d9f3      	bls.n	8008e4a <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8008e62:	2300      	movs	r3, #0
 8008e64:	60fb      	str	r3, [r7, #12]
 8008e66:	e009      	b.n	8008e7c <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008e72:	2200      	movs	r2, #0
 8008e74:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	60fb      	str	r3, [r7, #12]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e82:	d3f1      	bcc.n	8008e68 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2240      	movs	r2, #64	; 0x40
 8008ea8:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3714      	adds	r7, #20
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
	...

08008ed0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b088      	sub	sp, #32
 8008ed4:	af04      	add	r7, sp, #16
 8008ed6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008ed8:	2302      	movs	r3, #2
 8008eda:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008edc:	2300      	movs	r3, #0
 8008ede:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fadd 	bl	80094a0 <USBH_IsPortEnabled>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d10c      	bne.n	8008f06 <USBH_Process+0x36>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d007      	beq.n	8008f06 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	2b03      	cmp	r3, #3
 8008efe:	d002      	beq.n	8008f06 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2203      	movs	r2, #3
 8008f04:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	2b0b      	cmp	r3, #11
 8008f0e:	f200 814c 	bhi.w	80091aa <USBH_Process+0x2da>
 8008f12:	a201      	add	r2, pc, #4	; (adr r2, 8008f18 <USBH_Process+0x48>)
 8008f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f18:	08008f49 	.word	0x08008f49
 8008f1c:	08008f6b 	.word	0x08008f6b
 8008f20:	08008f7f 	.word	0x08008f7f
 8008f24:	08009185 	.word	0x08009185
 8008f28:	080091ab 	.word	0x080091ab
 8008f2c:	0800900d 	.word	0x0800900d
 8008f30:	0800913b 	.word	0x0800913b
 8008f34:	0800903d 	.word	0x0800903d
 8008f38:	0800905d 	.word	0x0800905d
 8008f3c:	0800907d 	.word	0x0800907d
 8008f40:	080090ab 	.word	0x080090ab
 8008f44:	0800916d 	.word	0x0800916d
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f000 812c 	beq.w	80091ae <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8008f5c:	20c8      	movs	r0, #200	; 0xc8
 8008f5e:	f003 fa92 	bl	800c486 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f003 fa01 	bl	800c36a <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8008f68:	e121      	b.n	80091ae <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	f040 811e 	bne.w	80091b2 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2202      	movs	r2, #2
 8008f7a:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008f7c:	e119      	b.n	80091b2 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8008f7e:	2064      	movs	r0, #100	; 0x64
 8008f80:	f003 fa81 	bl	800c486 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f003 f9cb 	bl	800c320 <USBH_LL_GetSpeed>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2205      	movs	r2, #5
 8008f98:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 ffe3 	bl	8009f68 <USBH_AllocPipe>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8008faa:	2180      	movs	r1, #128	; 0x80
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 ffdb 	bl	8009f68 <USBH_AllocPipe>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	7919      	ldrb	r1, [r3, #4]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8008fce:	b292      	uxth	r2, r2
 8008fd0:	9202      	str	r2, [sp, #8]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	9201      	str	r2, [sp, #4]
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2280      	movs	r2, #128	; 0x80
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 ffa4 	bl	8009f2a <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	7959      	ldrb	r1, [r3, #5]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8008ff6:	b292      	uxth	r2, r2
 8008ff8:	9202      	str	r2, [sp, #8]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	9201      	str	r2, [sp, #4]
 8008ffe:	9300      	str	r3, [sp, #0]
 8009000:	4603      	mov	r3, r0
 8009002:	2200      	movs	r2, #0
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 ff90 	bl	8009f2a <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800900a:	e0e3      	b.n	80091d4 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 f8e7 	bl	80091e0 <USBH_HandleEnum>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	f040 80ce 	bne.w	80091b6 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8009028:	2b01      	cmp	r3, #1
 800902a:	d103      	bne.n	8009034 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2208      	movs	r2, #8
 8009030:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8009032:	e0c0      	b.n	80091b6 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2207      	movs	r2, #7
 8009038:	701a      	strb	r2, [r3, #0]
    break;
 800903a:	e0bc      	b.n	80091b6 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009042:	2b00      	cmp	r3, #0
 8009044:	f000 80b9 	beq.w	80091ba <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800904e:	2101      	movs	r1, #1
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2208      	movs	r2, #8
 8009058:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800905a:	e0ae      	b.n	80091ba <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8009062:	b29b      	uxth	r3, r3
 8009064:	4619      	mov	r1, r3
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fb4a 	bl	8009700 <USBH_SetCfg>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	f040 80a5 	bne.w	80091be <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2209      	movs	r2, #9
 8009078:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800907a:	e0a0      	b.n	80091be <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8009082:	f003 0320 	and.w	r3, r3, #32
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00b      	beq.n	80090a2 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800908a:	2101      	movs	r1, #1
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fb5a 	bl	8009746 <USBH_SetFeature>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	f040 8094 	bne.w	80091c2 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	220a      	movs	r2, #10
 800909e:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80090a0:	e08f      	b.n	80091c2 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	220a      	movs	r2, #10
 80090a6:	701a      	strb	r2, [r3, #0]
    break;
 80090a8:	e08b      	b.n	80091c2 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 8088 	beq.w	80091c6 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80090be:	2300      	movs	r3, #0
 80090c0:	73fb      	strb	r3, [r7, #15]
 80090c2:	e017      	b.n	80090f4 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80090c4:	7bfb      	ldrb	r3, [r7, #15]
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	33dc      	adds	r3, #220	; 0xdc
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	791a      	ldrb	r2, [r3, #4]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80090d8:	429a      	cmp	r2, r3
 80090da:	d108      	bne.n	80090ee <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	33dc      	adds	r3, #220	; 0xdc
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4413      	add	r3, r2
 80090e6:	685a      	ldr	r2, [r3, #4]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
 80090f0:	3301      	adds	r3, #1
 80090f2:	73fb      	strb	r3, [r7, #15]
 80090f4:	7bfb      	ldrb	r3, [r7, #15]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d0e4      	beq.n	80090c4 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009100:	2b00      	cmp	r3, #0
 8009102:	d016      	beq.n	8009132 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	4798      	blx	r3
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d109      	bne.n	800912a <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2206      	movs	r2, #6
 800911a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009122:	2103      	movs	r1, #3
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8009128:	e04d      	b.n	80091c6 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	220d      	movs	r2, #13
 800912e:	701a      	strb	r2, [r3, #0]
    break;
 8009130:	e049      	b.n	80091c6 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	220d      	movs	r2, #13
 8009136:	701a      	strb	r2, [r3, #0]
    break;
 8009138:	e045      	b.n	80091c6 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009140:	2b00      	cmp	r3, #0
 8009142:	d00f      	beq.n	8009164 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	4798      	blx	r3
 8009150:	4603      	mov	r3, r0
 8009152:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8009154:	7bbb      	ldrb	r3, [r7, #14]
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b00      	cmp	r3, #0
 800915a:	d136      	bne.n	80091ca <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	220b      	movs	r2, #11
 8009160:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8009162:	e032      	b.n	80091ca <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	220d      	movs	r2, #13
 8009168:	701a      	strb	r2, [r3, #0]
    break;
 800916a:	e02e      	b.n	80091ca <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009172:	2b00      	cmp	r3, #0
 8009174:	d02b      	beq.n	80091ce <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800917c:	695b      	ldr	r3, [r3, #20]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	4798      	blx	r3
    }
    break;
 8009182:	e024      	b.n	80091ce <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f7ff fe59 	bl	8008e3c <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009190:	2b00      	cmp	r3, #0
 8009192:	d01e      	beq.n	80091d2 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 80091a8:	e013      	b.n	80091d2 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 80091aa:	bf00      	nop
 80091ac:	e012      	b.n	80091d4 <USBH_Process+0x304>
    break;
 80091ae:	bf00      	nop
 80091b0:	e010      	b.n	80091d4 <USBH_Process+0x304>
    break;
 80091b2:	bf00      	nop
 80091b4:	e00e      	b.n	80091d4 <USBH_Process+0x304>
    break;
 80091b6:	bf00      	nop
 80091b8:	e00c      	b.n	80091d4 <USBH_Process+0x304>
    break;
 80091ba:	bf00      	nop
 80091bc:	e00a      	b.n	80091d4 <USBH_Process+0x304>
    break;
 80091be:	bf00      	nop
 80091c0:	e008      	b.n	80091d4 <USBH_Process+0x304>
    break;
 80091c2:	bf00      	nop
 80091c4:	e006      	b.n	80091d4 <USBH_Process+0x304>
    break;
 80091c6:	bf00      	nop
 80091c8:	e004      	b.n	80091d4 <USBH_Process+0x304>
    break;
 80091ca:	bf00      	nop
 80091cc:	e002      	b.n	80091d4 <USBH_Process+0x304>
    break;
 80091ce:	bf00      	nop
 80091d0:	e000      	b.n	80091d4 <USBH_Process+0x304>
    break;
 80091d2:	bf00      	nop
  }
 return USBH_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop

080091e0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b088      	sub	sp, #32
 80091e4:	af04      	add	r7, sp, #16
 80091e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80091e8:	2301      	movs	r3, #1
 80091ea:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	785b      	ldrb	r3, [r3, #1]
 80091f0:	2b07      	cmp	r3, #7
 80091f2:	f200 80f8 	bhi.w	80093e6 <USBH_HandleEnum+0x206>
 80091f6:	a201      	add	r2, pc, #4	; (adr r2, 80091fc <USBH_HandleEnum+0x1c>)
 80091f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fc:	0800921d 	.word	0x0800921d
 8009200:	0800928f 	.word	0x0800928f
 8009204:	080092a7 	.word	0x080092a7
 8009208:	0800931d 	.word	0x0800931d
 800920c:	08009333 	.word	0x08009333
 8009210:	0800934f 	.word	0x0800934f
 8009214:	08009383 	.word	0x08009383
 8009218:	080093b7 	.word	0x080093b7
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800921c:	2108      	movs	r1, #8
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f99e 	bl	8009560 <USBH_Get_DevDesc>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	f040 80df 	bne.w	80093ea <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2201      	movs	r2, #1
 800923a:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	7919      	ldrb	r1, [r3, #4]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009250:	b292      	uxth	r2, r2
 8009252:	9202      	str	r2, [sp, #8]
 8009254:	2200      	movs	r2, #0
 8009256:	9201      	str	r2, [sp, #4]
 8009258:	9300      	str	r3, [sp, #0]
 800925a:	4603      	mov	r3, r0
 800925c:	2280      	movs	r2, #128	; 0x80
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fe63 	bl	8009f2a <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	7959      	ldrb	r1, [r3, #5]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009278:	b292      	uxth	r2, r2
 800927a:	9202      	str	r2, [sp, #8]
 800927c:	2200      	movs	r2, #0
 800927e:	9201      	str	r2, [sp, #4]
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	4603      	mov	r3, r0
 8009284:	2200      	movs	r2, #0
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fe4f 	bl	8009f2a <USBH_OpenPipe>

    }
    break;
 800928c:	e0ad      	b.n	80093ea <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800928e:	2112      	movs	r1, #18
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f965 	bl	8009560 <USBH_Get_DevDesc>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	f040 80a8 	bne.w	80093ee <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2202      	movs	r2, #2
 80092a2:	705a      	strb	r2, [r3, #1]

    }
    break;
 80092a4:	e0a3      	b.n	80093ee <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80092a6:	2101      	movs	r1, #1
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fa05 	bl	80096b8 <USBH_SetAddress>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f040 809e 	bne.w	80093f2 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 80092b6:	2002      	movs	r0, #2
 80092b8:	f003 f8e5 	bl	800c486 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2203      	movs	r2, #3
 80092c8:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	7919      	ldrb	r1, [r3, #4]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80092de:	b292      	uxth	r2, r2
 80092e0:	9202      	str	r2, [sp, #8]
 80092e2:	2200      	movs	r2, #0
 80092e4:	9201      	str	r2, [sp, #4]
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	4603      	mov	r3, r0
 80092ea:	2280      	movs	r2, #128	; 0x80
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fe1c 	bl	8009f2a <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	7959      	ldrb	r1, [r3, #5]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009306:	b292      	uxth	r2, r2
 8009308:	9202      	str	r2, [sp, #8]
 800930a:	2200      	movs	r2, #0
 800930c:	9201      	str	r2, [sp, #4]
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	4603      	mov	r3, r0
 8009312:	2200      	movs	r2, #0
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fe08 	bl	8009f2a <USBH_OpenPipe>
    }
    break;
 800931a:	e06a      	b.n	80093f2 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800931c:	2109      	movs	r1, #9
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f946 	bl	80095b0 <USBH_Get_CfgDesc>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d165      	bne.n	80093f6 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2204      	movs	r2, #4
 800932e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8009330:	e061      	b.n	80093f6 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8009338:	4619      	mov	r1, r3
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f938 	bl	80095b0 <USBH_Get_CfgDesc>
 8009340:	4603      	mov	r3, r0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d159      	bne.n	80093fa <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2205      	movs	r2, #5
 800934a:	705a      	strb	r2, [r3, #1]
    }
    break;
 800934c:	e055      	b.n	80093fa <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8009354:	2b00      	cmp	r3, #0
 8009356:	d010      	beq.n	800937a <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009364:	23ff      	movs	r3, #255	; 0xff
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f946 	bl	80095f8 <USBH_Get_StringDesc>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d145      	bne.n	80093fe <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2206      	movs	r2, #6
 8009376:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009378:	e041      	b.n	80093fe <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2206      	movs	r2, #6
 800937e:	705a      	strb	r2, [r3, #1]
    break;
 8009380:	e03d      	b.n	80093fe <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8009388:	2b00      	cmp	r3, #0
 800938a:	d010      	beq.n	80093ae <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009398:	23ff      	movs	r3, #255	; 0xff
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 f92c 	bl	80095f8 <USBH_Get_StringDesc>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d12d      	bne.n	8009402 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2207      	movs	r2, #7
 80093aa:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80093ac:	e029      	b.n	8009402 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2207      	movs	r2, #7
 80093b2:	705a      	strb	r2, [r3, #1]
    break;
 80093b4:	e025      	b.n	8009402 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00f      	beq.n	80093e0 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80093cc:	23ff      	movs	r3, #255	; 0xff
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f912 	bl	80095f8 <USBH_Get_StringDesc>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d115      	bne.n	8009406 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80093de:	e012      	b.n	8009406 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	73fb      	strb	r3, [r7, #15]
    break;
 80093e4:	e00f      	b.n	8009406 <USBH_HandleEnum+0x226>

  default:
    break;
 80093e6:	bf00      	nop
 80093e8:	e00e      	b.n	8009408 <USBH_HandleEnum+0x228>
    break;
 80093ea:	bf00      	nop
 80093ec:	e00c      	b.n	8009408 <USBH_HandleEnum+0x228>
    break;
 80093ee:	bf00      	nop
 80093f0:	e00a      	b.n	8009408 <USBH_HandleEnum+0x228>
    break;
 80093f2:	bf00      	nop
 80093f4:	e008      	b.n	8009408 <USBH_HandleEnum+0x228>
    break;
 80093f6:	bf00      	nop
 80093f8:	e006      	b.n	8009408 <USBH_HandleEnum+0x228>
    break;
 80093fa:	bf00      	nop
 80093fc:	e004      	b.n	8009408 <USBH_HandleEnum+0x228>
    break;
 80093fe:	bf00      	nop
 8009400:	e002      	b.n	8009408 <USBH_HandleEnum+0x228>
    break;
 8009402:	bf00      	nop
 8009404:	e000      	b.n	8009408 <USBH_HandleEnum+0x228>
    break;
 8009406:	bf00      	nop
  }
  return Status;
 8009408:	7bfb      	ldrb	r3, [r7, #15]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop

08009414 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f804 	bl	8009438 <USBH_HandleSof>
}
 8009430:	bf00      	nop
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	b2db      	uxtb	r3, r3
 8009446:	2b0b      	cmp	r3, #11
 8009448:	d10a      	bne.n	8009460 <USBH_HandleSof+0x28>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009450:	2b00      	cmp	r3, #0
 8009452:	d005      	beq.n	8009460 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	4798      	blx	r3
  }
}
 8009460:	bf00      	nop
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8009478:	bf00      	nop
}
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8009494:	bf00      	nop
}
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b082      	sub	sp, #8
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d10f      	bne.n	80094ec <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00e      	beq.n	80094fc <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80094e4:	2104      	movs	r1, #4
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	4798      	blx	r3
 80094ea:	e007      	b.n	80094fc <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d102      	bne.n	80094fc <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2202      	movs	r2, #2
 80094fa:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b082      	sub	sp, #8
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f002 feeb 	bl	800c2ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	791b      	ldrb	r3, [r3, #4]
 8009518:	4619      	mov	r1, r3
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fd42 	bl	8009fa4 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	795b      	ldrb	r3, [r3, #5]
 8009524:	4619      	mov	r1, r3
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fd3c 	bl	8009fa4 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800953a:	2b00      	cmp	r3, #0
 800953c:	d005      	beq.n	800954a <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009544:	2105      	movs	r1, #5
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f002 feb2 	bl	800c2b4 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2203      	movs	r2, #3
 8009554:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009556:	2300      	movs	r3, #0
}
 8009558:	4618      	mov	r0, r3
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b086      	sub	sp, #24
 8009564:	af02      	add	r7, sp, #8
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8009572:	78fb      	ldrb	r3, [r7, #3]
 8009574:	b29b      	uxth	r3, r3
 8009576:	9300      	str	r3, [sp, #0]
 8009578:	4613      	mov	r3, r2
 800957a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800957e:	2100      	movs	r1, #0
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f864 	bl	800964e <USBH_GetDescriptor>
 8009586:	4603      	mov	r3, r0
 8009588:	73fb      	strb	r3, [r7, #15]
 800958a:	7bfb      	ldrb	r3, [r7, #15]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10a      	bne.n	80095a6 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f203 3022 	addw	r0, r3, #802	; 0x322
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800959c:	78fa      	ldrb	r2, [r7, #3]
 800959e:	b292      	uxth	r2, r2
 80095a0:	4619      	mov	r1, r3
 80095a2:	f000 f8f4 	bl	800978e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 80095a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af02      	add	r7, sp, #8
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	460b      	mov	r3, r1
 80095ba:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	331c      	adds	r3, #28
 80095c0:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 80095c2:	887b      	ldrh	r3, [r7, #2]
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095cc:	2100      	movs	r1, #0
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f83d 	bl	800964e <USBH_GetDescriptor>
 80095d4:	4603      	mov	r3, r0
 80095d6:	72fb      	strb	r3, [r7, #11]
 80095d8:	7afb      	ldrb	r3, [r7, #11]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d107      	bne.n	80095ee <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80095e4:	887a      	ldrh	r2, [r7, #2]
 80095e6:	68f9      	ldr	r1, [r7, #12]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 f940 	bl	800986e <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 80095ee:	7afb      	ldrb	r3, [r7, #11]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b088      	sub	sp, #32
 80095fc:	af02      	add	r7, sp, #8
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	607a      	str	r2, [r7, #4]
 8009602:	461a      	mov	r2, r3
 8009604:	460b      	mov	r3, r1
 8009606:	72fb      	strb	r3, [r7, #11]
 8009608:	4613      	mov	r3, r2
 800960a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800960c:	7afb      	ldrb	r3, [r7, #11]
 800960e:	b29b      	uxth	r3, r3
 8009610:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009614:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800961c:	893b      	ldrh	r3, [r7, #8]
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	460b      	mov	r3, r1
 8009622:	2100      	movs	r1, #0
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f000 f812 	bl	800964e <USBH_GetDescriptor>
 800962a:	4603      	mov	r3, r0
 800962c:	75fb      	strb	r3, [r7, #23]
 800962e:	7dfb      	ldrb	r3, [r7, #23]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d107      	bne.n	8009644 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800963a:	893a      	ldrh	r2, [r7, #8]
 800963c:	6879      	ldr	r1, [r7, #4]
 800963e:	4618      	mov	r0, r3
 8009640:	f000 fa13 	bl	8009a6a <USBH_ParseStringDesc>
  }
  return status;
 8009644:	7dfb      	ldrb	r3, [r7, #23]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3718      	adds	r7, #24
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b084      	sub	sp, #16
 8009652:	af00      	add	r7, sp, #0
 8009654:	60f8      	str	r0, [r7, #12]
 8009656:	607b      	str	r3, [r7, #4]
 8009658:	460b      	mov	r3, r1
 800965a:	72fb      	strb	r3, [r7, #11]
 800965c:	4613      	mov	r3, r2
 800965e:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	789b      	ldrb	r3, [r3, #2]
 8009664:	2b01      	cmp	r3, #1
 8009666:	d11c      	bne.n	80096a2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009668:	7afb      	ldrb	r3, [r7, #11]
 800966a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800966e:	b2da      	uxtb	r2, r3
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2206      	movs	r2, #6
 8009678:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	893a      	ldrh	r2, [r7, #8]
 800967e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009680:	893b      	ldrh	r3, [r7, #8]
 8009682:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800968a:	d104      	bne.n	8009696 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f240 4209 	movw	r2, #1033	; 0x409
 8009692:	829a      	strh	r2, [r3, #20]
 8009694:	e002      	b.n	800969c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	8b3a      	ldrh	r2, [r7, #24]
 80096a0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 80096a2:	8b3b      	ldrh	r3, [r7, #24]
 80096a4:	461a      	mov	r2, r3
 80096a6:	6879      	ldr	r1, [r7, #4]
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f000 fa2c 	bl	8009b06 <USBH_CtlReq>
 80096ae:	4603      	mov	r3, r0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	460b      	mov	r3, r1
 80096c2:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	789b      	ldrb	r3, [r3, #2]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d10f      	bne.n	80096ec <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2205      	movs	r2, #5
 80096d6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80096d8:	78fb      	ldrb	r3, [r7, #3]
 80096da:	b29a      	uxth	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80096ec:	2200      	movs	r2, #0
 80096ee:	2100      	movs	r1, #0
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 fa08 	bl	8009b06 <USBH_CtlReq>
 80096f6:	4603      	mov	r3, r0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3708      	adds	r7, #8
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	460b      	mov	r3, r1
 800970a:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	789b      	ldrb	r3, [r3, #2]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d10e      	bne.n	8009732 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2209      	movs	r2, #9
 800971e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	887a      	ldrh	r2, [r7, #2]
 8009724:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8009732:	2200      	movs	r2, #0
 8009734:	2100      	movs	r1, #0
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f9e5 	bl	8009b06 <USBH_CtlReq>
 800973c:	4603      	mov	r3, r0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b082      	sub	sp, #8
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	460b      	mov	r3, r1
 8009750:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	789b      	ldrb	r3, [r3, #2]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d10f      	bne.n	800977a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2203      	movs	r2, #3
 8009764:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009766:	78fb      	ldrb	r3, [r7, #3]
 8009768:	b29a      	uxth	r2, r3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800977a:	2200      	movs	r2, #0
 800977c:	2100      	movs	r1, #0
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f9c1 	bl	8009b06 <USBH_CtlReq>
 8009784:	4603      	mov	r3, r0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3708      	adds	r7, #8
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800978e:	b480      	push	{r7}
 8009790:	b085      	sub	sp, #20
 8009792:	af00      	add	r7, sp, #0
 8009794:	60f8      	str	r0, [r7, #12]
 8009796:	60b9      	str	r1, [r7, #8]
 8009798:	4613      	mov	r3, r2
 800979a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	781a      	ldrb	r2, [r3, #0]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	785a      	ldrb	r2, [r3, #1]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	3302      	adds	r3, #2
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	3303      	adds	r3, #3
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	021b      	lsls	r3, r3, #8
 80097be:	b29b      	uxth	r3, r3
 80097c0:	4313      	orrs	r3, r2
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	791a      	ldrb	r2, [r3, #4]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	795a      	ldrb	r2, [r3, #5]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	799a      	ldrb	r2, [r3, #6]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	79da      	ldrb	r2, [r3, #7]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80097e8:	88fb      	ldrh	r3, [r7, #6]
 80097ea:	2b08      	cmp	r3, #8
 80097ec:	d939      	bls.n	8009862 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	3308      	adds	r3, #8
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	b29a      	uxth	r2, r3
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	3309      	adds	r3, #9
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	021b      	lsls	r3, r3, #8
 8009800:	b29b      	uxth	r3, r3
 8009802:	4313      	orrs	r3, r2
 8009804:	b29a      	uxth	r2, r3
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	330a      	adds	r3, #10
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	b29a      	uxth	r2, r3
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	330b      	adds	r3, #11
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	b29b      	uxth	r3, r3
 800981a:	021b      	lsls	r3, r3, #8
 800981c:	b29b      	uxth	r3, r3
 800981e:	4313      	orrs	r3, r2
 8009820:	b29a      	uxth	r2, r3
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	330c      	adds	r3, #12
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	b29a      	uxth	r2, r3
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	330d      	adds	r3, #13
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	b29b      	uxth	r3, r3
 8009836:	021b      	lsls	r3, r3, #8
 8009838:	b29b      	uxth	r3, r3
 800983a:	4313      	orrs	r3, r2
 800983c:	b29a      	uxth	r2, r3
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	7b9a      	ldrb	r2, [r3, #14]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	7bda      	ldrb	r2, [r3, #15]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	7c1a      	ldrb	r2, [r3, #16]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	7c5a      	ldrb	r2, [r3, #17]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	745a      	strb	r2, [r3, #17]
  }
}
 8009862:	bf00      	nop
 8009864:	3714      	adds	r7, #20
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b08a      	sub	sp, #40	; 0x28
 8009872:	af00      	add	r7, sp, #0
 8009874:	60f8      	str	r0, [r7, #12]
 8009876:	60b9      	str	r1, [r7, #8]
 8009878:	4613      	mov	r3, r2
 800987a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009880:	2300      	movs	r3, #0
 8009882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009886:	2300      	movs	r3, #0
 8009888:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	781a      	ldrb	r2, [r3, #0]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	785a      	ldrb	r2, [r3, #1]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	3302      	adds	r3, #2
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	3303      	adds	r3, #3
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	021b      	lsls	r3, r3, #8
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	4313      	orrs	r3, r2
 80098b6:	b29a      	uxth	r2, r3
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	791a      	ldrb	r2, [r3, #4]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	795a      	ldrb	r2, [r3, #5]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	799a      	ldrb	r2, [r3, #6]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	79da      	ldrb	r2, [r3, #7]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	7a1a      	ldrb	r2, [r3, #8]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 80098e4:	88fb      	ldrh	r3, [r7, #6]
 80098e6:	2b09      	cmp	r3, #9
 80098e8:	d95f      	bls.n	80099aa <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80098ea:	2309      	movs	r3, #9
 80098ec:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80098ee:	2300      	movs	r3, #0
 80098f0:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80098f2:	e051      	b.n	8009998 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80098f4:	f107 0316 	add.w	r3, r7, #22
 80098f8:	4619      	mov	r1, r3
 80098fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80098fc:	f000 f8e8 	bl	8009ad0 <USBH_GetNextDesc>
 8009900:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009904:	785b      	ldrb	r3, [r3, #1]
 8009906:	2b04      	cmp	r3, #4
 8009908:	d146      	bne.n	8009998 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800990a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800990e:	221a      	movs	r2, #26
 8009910:	fb02 f303 	mul.w	r3, r2, r3
 8009914:	3308      	adds	r3, #8
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	4413      	add	r3, r2
 800991a:	3302      	adds	r3, #2
 800991c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800991e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009920:	69f8      	ldr	r0, [r7, #28]
 8009922:	f000 f846 	bl	80099b2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009926:	2300      	movs	r3, #0
 8009928:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800992c:	2300      	movs	r3, #0
 800992e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009930:	e022      	b.n	8009978 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8009932:	f107 0316 	add.w	r3, r7, #22
 8009936:	4619      	mov	r1, r3
 8009938:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800993a:	f000 f8c9 	bl	8009ad0 <USBH_GetNextDesc>
 800993e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009942:	785b      	ldrb	r3, [r3, #1]
 8009944:	2b05      	cmp	r3, #5
 8009946:	d117      	bne.n	8009978 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009948:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800994c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009950:	3201      	adds	r2, #1
 8009952:	00d2      	lsls	r2, r2, #3
 8009954:	211a      	movs	r1, #26
 8009956:	fb01 f303 	mul.w	r3, r1, r3
 800995a:	4413      	add	r3, r2
 800995c:	3308      	adds	r3, #8
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	4413      	add	r3, r2
 8009962:	3304      	adds	r3, #4
 8009964:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8009966:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009968:	69b8      	ldr	r0, [r7, #24]
 800996a:	f000 f851 	bl	8009a10 <USBH_ParseEPDesc>
            ep_ix++;
 800996e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009972:	3301      	adds	r3, #1
 8009974:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	791b      	ldrb	r3, [r3, #4]
 800997c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009980:	429a      	cmp	r2, r3
 8009982:	d204      	bcs.n	800998e <USBH_ParseCfgDesc+0x120>
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	885a      	ldrh	r2, [r3, #2]
 8009988:	8afb      	ldrh	r3, [r7, #22]
 800998a:	429a      	cmp	r2, r3
 800998c:	d8d1      	bhi.n	8009932 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800998e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009992:	3301      	adds	r3, #1
 8009994:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009998:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800999c:	2b01      	cmp	r3, #1
 800999e:	d804      	bhi.n	80099aa <USBH_ParseCfgDesc+0x13c>
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	885a      	ldrh	r2, [r3, #2]
 80099a4:	8afb      	ldrh	r3, [r7, #22]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d8a4      	bhi.n	80098f4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80099aa:	bf00      	nop
 80099ac:	3728      	adds	r7, #40	; 0x28
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b083      	sub	sp, #12
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
 80099ba:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	781a      	ldrb	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	785a      	ldrb	r2, [r3, #1]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	789a      	ldrb	r2, [r3, #2]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	78da      	ldrb	r2, [r3, #3]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	791a      	ldrb	r2, [r3, #4]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	795a      	ldrb	r2, [r3, #5]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	799a      	ldrb	r2, [r3, #6]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	79da      	ldrb	r2, [r3, #7]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	7a1a      	ldrb	r2, [r3, #8]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	721a      	strb	r2, [r3, #8]
}
 8009a04:	bf00      	nop
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	781a      	ldrb	r2, [r3, #0]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	785a      	ldrb	r2, [r3, #1]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	789a      	ldrb	r2, [r3, #2]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	78da      	ldrb	r2, [r3, #3]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	3305      	adds	r3, #5
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	021b      	lsls	r3, r3, #8
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	799a      	ldrb	r2, [r3, #6]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	719a      	strb	r2, [r3, #6]
}
 8009a5e:	bf00      	nop
 8009a60:	370c      	adds	r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8009a6a:	b480      	push	{r7}
 8009a6c:	b087      	sub	sp, #28
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	60f8      	str	r0, [r7, #12]
 8009a72:	60b9      	str	r1, [r7, #8]
 8009a74:	4613      	mov	r3, r2
 8009a76:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	2b03      	cmp	r3, #3
 8009a80:	d120      	bne.n	8009ac4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	1e9a      	subs	r2, r3, #2
 8009a88:	88fb      	ldrh	r3, [r7, #6]
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	bf28      	it	cs
 8009a8e:	4613      	movcs	r3, r2
 8009a90:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	3302      	adds	r3, #2
 8009a96:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009a98:	2300      	movs	r3, #0
 8009a9a:	82fb      	strh	r3, [r7, #22]
 8009a9c:	e00b      	b.n	8009ab6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009a9e:	8afb      	ldrh	r3, [r7, #22]
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	781a      	ldrb	r2, [r3, #0]
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	3301      	adds	r3, #1
 8009aae:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009ab0:	8afb      	ldrh	r3, [r7, #22]
 8009ab2:	3302      	adds	r3, #2
 8009ab4:	82fb      	strh	r3, [r7, #22]
 8009ab6:	8afa      	ldrh	r2, [r7, #22]
 8009ab8:	8abb      	ldrh	r3, [r7, #20]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d3ef      	bcc.n	8009a9e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	701a      	strb	r2, [r3, #0]
  }
}
 8009ac4:	bf00      	nop
 8009ac6:	371c      	adds	r7, #28
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	881a      	ldrh	r2, [r3, #0]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	4413      	add	r3, r2
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4413      	add	r3, r2
 8009af6:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8009af8:	68fb      	ldr	r3, [r7, #12]
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3714      	adds	r7, #20
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr

08009b06 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b086      	sub	sp, #24
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	60f8      	str	r0, [r7, #12]
 8009b0e:	60b9      	str	r1, [r7, #8]
 8009b10:	4613      	mov	r3, r2
 8009b12:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009b14:	2301      	movs	r3, #1
 8009b16:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	789b      	ldrb	r3, [r3, #2]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d002      	beq.n	8009b26 <USBH_CtlReq+0x20>
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d00f      	beq.n	8009b44 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8009b24:	e034      	b.n	8009b90 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	88fa      	ldrh	r2, [r7, #6]
 8009b30:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2201      	movs	r2, #1
 8009b36:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	75fb      	strb	r3, [r7, #23]
    break;
 8009b42:	e025      	b.n	8009b90 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8009b44:	68f8      	ldr	r0, [r7, #12]
 8009b46:	f000 f829 	bl	8009b9c <USBH_HandleControl>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8009b4e:	7dfb      	ldrb	r3, [r7, #23]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d108      	bne.n	8009b66 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2201      	movs	r2, #1
 8009b58:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8009b60:	2300      	movs	r3, #0
 8009b62:	75fb      	strb	r3, [r7, #23]
    break;
 8009b64:	e013      	b.n	8009b8e <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8009b66:	7dfb      	ldrb	r3, [r7, #23]
 8009b68:	2b03      	cmp	r3, #3
 8009b6a:	d108      	bne.n	8009b7e <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	75fb      	strb	r3, [r7, #23]
    break;
 8009b7c:	e007      	b.n	8009b8e <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8009b7e:	7dfb      	ldrb	r3, [r7, #23]
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d104      	bne.n	8009b8e <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2201      	movs	r2, #1
 8009b88:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8009b8a:	2302      	movs	r3, #2
 8009b8c:	75fb      	strb	r3, [r7, #23]
    break;
 8009b8e:	bf00      	nop
  }
  return status;
 8009b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3718      	adds	r7, #24
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
	...

08009b9c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b086      	sub	sp, #24
 8009ba0:	af02      	add	r7, sp, #8
 8009ba2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	7e1b      	ldrb	r3, [r3, #24]
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	2b0a      	cmp	r3, #10
 8009bb4:	f200 814c 	bhi.w	8009e50 <USBH_HandleControl+0x2b4>
 8009bb8:	a201      	add	r2, pc, #4	; (adr r2, 8009bc0 <USBH_HandleControl+0x24>)
 8009bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bbe:	bf00      	nop
 8009bc0:	08009bed 	.word	0x08009bed
 8009bc4:	08009c07 	.word	0x08009c07
 8009bc8:	08009c71 	.word	0x08009c71
 8009bcc:	08009c97 	.word	0x08009c97
 8009bd0:	08009ccf 	.word	0x08009ccf
 8009bd4:	08009cfb 	.word	0x08009cfb
 8009bd8:	08009d4d 	.word	0x08009d4d
 8009bdc:	08009d6f 	.word	0x08009d6f
 8009be0:	08009dab 	.word	0x08009dab
 8009be4:	08009dd3 	.word	0x08009dd3
 8009be8:	08009e11 	.word	0x08009e11
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f103 0110 	add.w	r1, r3, #16
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	795b      	ldrb	r3, [r3, #5]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f939 	bl	8009e70 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2202      	movs	r2, #2
 8009c02:	761a      	strb	r2, [r3, #24]
    break;
 8009c04:	e12f      	b.n	8009e66 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	795b      	ldrb	r3, [r3, #5]
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f002 fc27 	bl	800c460 <USBH_LL_GetURBState>
 8009c12:	4603      	mov	r3, r0
 8009c14:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8009c16:	7bbb      	ldrb	r3, [r7, #14]
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d11e      	bne.n	8009c5a <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	7c1b      	ldrb	r3, [r3, #16]
 8009c20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009c24:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	8adb      	ldrh	r3, [r3, #22]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00a      	beq.n	8009c44 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8009c2e:	7b7b      	ldrb	r3, [r7, #13]
 8009c30:	2b80      	cmp	r3, #128	; 0x80
 8009c32:	d103      	bne.n	8009c3c <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2203      	movs	r2, #3
 8009c38:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009c3a:	e10b      	b.n	8009e54 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2205      	movs	r2, #5
 8009c40:	761a      	strb	r2, [r3, #24]
    break;
 8009c42:	e107      	b.n	8009e54 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8009c44:	7b7b      	ldrb	r3, [r7, #13]
 8009c46:	2b80      	cmp	r3, #128	; 0x80
 8009c48:	d103      	bne.n	8009c52 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2209      	movs	r2, #9
 8009c4e:	761a      	strb	r2, [r3, #24]
    break;
 8009c50:	e100      	b.n	8009e54 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2207      	movs	r2, #7
 8009c56:	761a      	strb	r2, [r3, #24]
    break;
 8009c58:	e0fc      	b.n	8009e54 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009c5a:	7bbb      	ldrb	r3, [r7, #14]
 8009c5c:	2b04      	cmp	r3, #4
 8009c5e:	d003      	beq.n	8009c68 <USBH_HandleControl+0xcc>
 8009c60:	7bbb      	ldrb	r3, [r7, #14]
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	f040 80f6 	bne.w	8009e54 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	220b      	movs	r2, #11
 8009c6c:	761a      	strb	r2, [r3, #24]
    break;
 8009c6e:	e0f1      	b.n	8009e54 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6899      	ldr	r1, [r3, #8]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	899a      	ldrh	r2, [r3, #12]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	791b      	ldrb	r3, [r3, #4]
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 f930 	bl	8009eee <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2204      	movs	r2, #4
 8009c92:	761a      	strb	r2, [r3, #24]
    break;
 8009c94:	e0e7      	b.n	8009e66 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	791b      	ldrb	r3, [r3, #4]
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f002 fbdf 	bl	800c460 <USBH_LL_GetURBState>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8009ca6:	7bbb      	ldrb	r3, [r7, #14]
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d102      	bne.n	8009cb2 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2209      	movs	r2, #9
 8009cb0:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8009cb2:	7bbb      	ldrb	r3, [r7, #14]
 8009cb4:	2b05      	cmp	r3, #5
 8009cb6:	d102      	bne.n	8009cbe <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009cbc:	e0cc      	b.n	8009e58 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8009cbe:	7bbb      	ldrb	r3, [r7, #14]
 8009cc0:	2b04      	cmp	r3, #4
 8009cc2:	f040 80c9 	bne.w	8009e58 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	220b      	movs	r2, #11
 8009cca:	761a      	strb	r2, [r3, #24]
    break;
 8009ccc:	e0c4      	b.n	8009e58 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6899      	ldr	r1, [r3, #8]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	899a      	ldrh	r2, [r3, #12]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	7958      	ldrb	r0, [r3, #5]
 8009cda:	2301      	movs	r3, #1
 8009cdc:	9300      	str	r3, [sp, #0]
 8009cde:	4603      	mov	r3, r0
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f8df 	bl	8009ea4 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2206      	movs	r2, #6
 8009cf6:	761a      	strb	r2, [r3, #24]
    break;
 8009cf8:	e0b5      	b.n	8009e66 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	795b      	ldrb	r3, [r3, #5]
 8009cfe:	4619      	mov	r1, r3
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f002 fbad 	bl	800c460 <USBH_LL_GetURBState>
 8009d06:	4603      	mov	r3, r0
 8009d08:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8009d0a:	7bbb      	ldrb	r3, [r7, #14]
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d103      	bne.n	8009d18 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2207      	movs	r2, #7
 8009d14:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009d16:	e0a1      	b.n	8009e5c <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8009d18:	7bbb      	ldrb	r3, [r7, #14]
 8009d1a:	2b05      	cmp	r3, #5
 8009d1c:	d105      	bne.n	8009d2a <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	220c      	movs	r2, #12
 8009d22:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8009d24:	2303      	movs	r3, #3
 8009d26:	73fb      	strb	r3, [r7, #15]
    break;
 8009d28:	e098      	b.n	8009e5c <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8009d2a:	7bbb      	ldrb	r3, [r7, #14]
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d103      	bne.n	8009d38 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2205      	movs	r2, #5
 8009d34:	761a      	strb	r2, [r3, #24]
    break;
 8009d36:	e091      	b.n	8009e5c <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8009d38:	7bbb      	ldrb	r3, [r7, #14]
 8009d3a:	2b04      	cmp	r3, #4
 8009d3c:	f040 808e 	bne.w	8009e5c <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	220b      	movs	r2, #11
 8009d44:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8009d46:	2302      	movs	r3, #2
 8009d48:	73fb      	strb	r3, [r7, #15]
    break;
 8009d4a:	e087      	b.n	8009e5c <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	791b      	ldrb	r3, [r3, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	2100      	movs	r1, #0
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f8ca 	bl	8009eee <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009d60:	b29a      	uxth	r2, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2208      	movs	r2, #8
 8009d6a:	761a      	strb	r2, [r3, #24]

    break;
 8009d6c:	e07b      	b.n	8009e66 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	791b      	ldrb	r3, [r3, #4]
 8009d72:	4619      	mov	r1, r3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f002 fb73 	bl	800c460 <USBH_LL_GetURBState>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8009d7e:	7bbb      	ldrb	r3, [r7, #14]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d105      	bne.n	8009d90 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	220d      	movs	r2, #13
 8009d88:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009d8e:	e067      	b.n	8009e60 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8009d90:	7bbb      	ldrb	r3, [r7, #14]
 8009d92:	2b04      	cmp	r3, #4
 8009d94:	d103      	bne.n	8009d9e <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	220b      	movs	r2, #11
 8009d9a:	761a      	strb	r2, [r3, #24]
    break;
 8009d9c:	e060      	b.n	8009e60 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8009d9e:	7bbb      	ldrb	r3, [r7, #14]
 8009da0:	2b05      	cmp	r3, #5
 8009da2:	d15d      	bne.n	8009e60 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8009da4:	2303      	movs	r3, #3
 8009da6:	73fb      	strb	r3, [r7, #15]
    break;
 8009da8:	e05a      	b.n	8009e60 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	795a      	ldrb	r2, [r3, #5]
 8009dae:	2301      	movs	r3, #1
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	4613      	mov	r3, r2
 8009db4:	2200      	movs	r2, #0
 8009db6:	2100      	movs	r1, #0
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f873 	bl	8009ea4 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	220a      	movs	r2, #10
 8009dce:	761a      	strb	r2, [r3, #24]
    break;
 8009dd0:	e049      	b.n	8009e66 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	795b      	ldrb	r3, [r3, #5]
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f002 fb41 	bl	800c460 <USBH_LL_GetURBState>
 8009dde:	4603      	mov	r3, r0
 8009de0:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8009de2:	7bbb      	ldrb	r3, [r7, #14]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d105      	bne.n	8009df4 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8009de8:	2300      	movs	r3, #0
 8009dea:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	220d      	movs	r2, #13
 8009df0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8009df2:	e037      	b.n	8009e64 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8009df4:	7bbb      	ldrb	r3, [r7, #14]
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d103      	bne.n	8009e02 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2209      	movs	r2, #9
 8009dfe:	761a      	strb	r2, [r3, #24]
    break;
 8009e00:	e030      	b.n	8009e64 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8009e02:	7bbb      	ldrb	r3, [r7, #14]
 8009e04:	2b04      	cmp	r3, #4
 8009e06:	d12d      	bne.n	8009e64 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	220b      	movs	r2, #11
 8009e0c:	761a      	strb	r2, [r3, #24]
    break;
 8009e0e:	e029      	b.n	8009e64 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	7e5b      	ldrb	r3, [r3, #25]
 8009e14:	3301      	adds	r3, #1
 8009e16:	b2da      	uxtb	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	765a      	strb	r2, [r3, #25]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	7e5b      	ldrb	r3, [r3, #25]
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	d809      	bhi.n	8009e38 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f002 fa60 	bl	800c2ea <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8009e36:	e016      	b.n	8009e66 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009e3e:	2106      	movs	r1, #6
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8009e4a:	2302      	movs	r3, #2
 8009e4c:	73fb      	strb	r3, [r7, #15]
    break;
 8009e4e:	e00a      	b.n	8009e66 <USBH_HandleControl+0x2ca>

  default:
    break;
 8009e50:	bf00      	nop
 8009e52:	e008      	b.n	8009e66 <USBH_HandleControl+0x2ca>
    break;
 8009e54:	bf00      	nop
 8009e56:	e006      	b.n	8009e66 <USBH_HandleControl+0x2ca>
    break;
 8009e58:	bf00      	nop
 8009e5a:	e004      	b.n	8009e66 <USBH_HandleControl+0x2ca>
    break;
 8009e5c:	bf00      	nop
 8009e5e:	e002      	b.n	8009e66 <USBH_HandleControl+0x2ca>
    break;
 8009e60:	bf00      	nop
 8009e62:	e000      	b.n	8009e66 <USBH_HandleControl+0x2ca>
    break;
 8009e64:	bf00      	nop
  }
  return status;
 8009e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b088      	sub	sp, #32
 8009e74:	af04      	add	r7, sp, #16
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009e7e:	79f9      	ldrb	r1, [r7, #7]
 8009e80:	2300      	movs	r3, #0
 8009e82:	9303      	str	r3, [sp, #12]
 8009e84:	2308      	movs	r3, #8
 8009e86:	9302      	str	r3, [sp, #8]
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	9301      	str	r3, [sp, #4]
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	2300      	movs	r3, #0
 8009e92:	2200      	movs	r2, #0
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f002 fab2 	bl	800c3fe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b088      	sub	sp, #32
 8009ea8:	af04      	add	r7, sp, #16
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	4611      	mov	r1, r2
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	80fb      	strh	r3, [r7, #6]
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009ec8:	7979      	ldrb	r1, [r7, #5]
 8009eca:	7e3b      	ldrb	r3, [r7, #24]
 8009ecc:	9303      	str	r3, [sp, #12]
 8009ece:	88fb      	ldrh	r3, [r7, #6]
 8009ed0:	9302      	str	r3, [sp, #8]
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	9301      	str	r3, [sp, #4]
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	2300      	movs	r3, #0
 8009edc:	2200      	movs	r2, #0
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f002 fa8d 	bl	800c3fe <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b088      	sub	sp, #32
 8009ef2:	af04      	add	r7, sp, #16
 8009ef4:	60f8      	str	r0, [r7, #12]
 8009ef6:	60b9      	str	r1, [r7, #8]
 8009ef8:	4611      	mov	r1, r2
 8009efa:	461a      	mov	r2, r3
 8009efc:	460b      	mov	r3, r1
 8009efe:	80fb      	strh	r3, [r7, #6]
 8009f00:	4613      	mov	r3, r2
 8009f02:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009f04:	7979      	ldrb	r1, [r7, #5]
 8009f06:	2300      	movs	r3, #0
 8009f08:	9303      	str	r3, [sp, #12]
 8009f0a:	88fb      	ldrh	r3, [r7, #6]
 8009f0c:	9302      	str	r3, [sp, #8]
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	9301      	str	r3, [sp, #4]
 8009f12:	2301      	movs	r3, #1
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	2300      	movs	r3, #0
 8009f18:	2201      	movs	r2, #1
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f002 fa6f 	bl	800c3fe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009f20:	2300      	movs	r3, #0

}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b086      	sub	sp, #24
 8009f2e:	af04      	add	r7, sp, #16
 8009f30:	6078      	str	r0, [r7, #4]
 8009f32:	4608      	mov	r0, r1
 8009f34:	4611      	mov	r1, r2
 8009f36:	461a      	mov	r2, r3
 8009f38:	4603      	mov	r3, r0
 8009f3a:	70fb      	strb	r3, [r7, #3]
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	70bb      	strb	r3, [r7, #2]
 8009f40:	4613      	mov	r3, r2
 8009f42:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8009f44:	7878      	ldrb	r0, [r7, #1]
 8009f46:	78ba      	ldrb	r2, [r7, #2]
 8009f48:	78f9      	ldrb	r1, [r7, #3]
 8009f4a:	8b3b      	ldrh	r3, [r7, #24]
 8009f4c:	9302      	str	r3, [sp, #8]
 8009f4e:	7d3b      	ldrb	r3, [r7, #20]
 8009f50:	9301      	str	r3, [sp, #4]
 8009f52:	7c3b      	ldrb	r3, [r7, #16]
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	4603      	mov	r3, r0
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f002 fa21 	bl	800c3a0 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8009f5e:	2300      	movs	r3, #0

}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3708      	adds	r7, #8
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	460b      	mov	r3, r1
 8009f72:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f831 	bl	8009fdc <USBH_GetFreePipe>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009f7e:	89fb      	ldrh	r3, [r7, #14]
 8009f80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d007      	beq.n	8009f98 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8009f88:	78fb      	ldrb	r3, [r7, #3]
 8009f8a:	89fa      	ldrh	r2, [r7, #14]
 8009f8c:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	32e0      	adds	r2, #224	; 0xe0
 8009f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8009f98:	89fb      	ldrh	r3, [r7, #14]
 8009f9a:	b2db      	uxtb	r3, r3
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	460b      	mov	r3, r1
 8009fae:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8009fb0:	78fb      	ldrb	r3, [r7, #3]
 8009fb2:	2b0a      	cmp	r3, #10
 8009fb4:	d80b      	bhi.n	8009fce <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8009fb6:	78fa      	ldrb	r2, [r7, #3]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	32e0      	adds	r2, #224	; 0xe0
 8009fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc0:	78fa      	ldrb	r2, [r7, #3]
 8009fc2:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	32e0      	adds	r2, #224	; 0xe0
 8009fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009fe8:	2300      	movs	r3, #0
 8009fea:	73fb      	strb	r3, [r7, #15]
 8009fec:	e00e      	b.n	800a00c <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009fee:	7bfa      	ldrb	r2, [r7, #15]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	32e0      	adds	r2, #224	; 0xe0
 8009ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ff8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d102      	bne.n	800a006 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800a000:	7bfb      	ldrb	r3, [r7, #15]
 800a002:	b29b      	uxth	r3, r3
 800a004:	e007      	b.n	800a016 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800a006:	7bfb      	ldrb	r3, [r7, #15]
 800a008:	3301      	adds	r3, #1
 800a00a:	73fb      	strb	r3, [r7, #15]
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
 800a00e:	2b0a      	cmp	r3, #10
 800a010:	d9ed      	bls.n	8009fee <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800a012:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a016:	4618      	mov	r0, r3
 800a018:	3714      	adds	r7, #20
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
	...

0800a024 <blink_game_state_led>:
	HAL_Delay(1000);
	HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, INVERTED_OFF);
	HAL_Delay(1000);
}

void blink_game_state_led(game_state_t state) {
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	4603      	mov	r3, r0
 800a02c:	71fb      	strb	r3, [r7, #7]
	switch (state) {
 800a02e:	79fb      	ldrb	r3, [r7, #7]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <blink_game_state_led+0x16>
 800a034:	2b01      	cmp	r3, #1
 800a036:	d012      	beq.n	800a05e <blink_game_state_led+0x3a>
		HAL_GPIO_WritePin(GAME_STATE_LED_GPIO_Port, GAME_STATE_LED_Pin, 0);
		HAL_Delay(500);
	case STARTED:
		HAL_GPIO_WritePin(GAME_STATE_LED_GPIO_Port, GAME_STATE_LED_Pin, 0);
	default:
		break;
 800a038:	e016      	b.n	800a068 <blink_game_state_led+0x44>
		HAL_GPIO_WritePin(GAME_STATE_LED_GPIO_Port, GAME_STATE_LED_Pin, 1);
 800a03a:	2201      	movs	r2, #1
 800a03c:	2180      	movs	r1, #128	; 0x80
 800a03e:	480d      	ldr	r0, [pc, #52]	; (800a074 <blink_game_state_led+0x50>)
 800a040:	f7f8 f928 	bl	8002294 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800a044:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a048:	f7f7 f91e 	bl	8001288 <HAL_Delay>
		HAL_GPIO_WritePin(GAME_STATE_LED_GPIO_Port, GAME_STATE_LED_Pin, 0);
 800a04c:	2200      	movs	r2, #0
 800a04e:	2180      	movs	r1, #128	; 0x80
 800a050:	4808      	ldr	r0, [pc, #32]	; (800a074 <blink_game_state_led+0x50>)
 800a052:	f7f8 f91f 	bl	8002294 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800a056:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a05a:	f7f7 f915 	bl	8001288 <HAL_Delay>
		HAL_GPIO_WritePin(GAME_STATE_LED_GPIO_Port, GAME_STATE_LED_Pin, 0);
 800a05e:	2200      	movs	r2, #0
 800a060:	2180      	movs	r1, #128	; 0x80
 800a062:	4804      	ldr	r0, [pc, #16]	; (800a074 <blink_game_state_led+0x50>)
 800a064:	f7f8 f916 	bl	8002294 <HAL_GPIO_WritePin>
		break;
 800a068:	bf00      	nop
	}
}
 800a06a:	bf00      	nop
 800a06c:	3708      	adds	r7, #8
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	40020800 	.word	0x40020800

0800a078 <generate_random_number>:

int generate_random_number(void) {
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
	unsigned int rand = HAL_RNG_GetRandomNumber(&hrng);
 800a07e:	4809      	ldr	r0, [pc, #36]	; (800a0a4 <generate_random_number+0x2c>)
 800a080:	f7fb fcd5 	bl	8005a2e <HAL_RNG_GetRandomNumber>
 800a084:	6078      	str	r0, [r7, #4]
	return rand % 10;
 800a086:	6879      	ldr	r1, [r7, #4]
 800a088:	4b07      	ldr	r3, [pc, #28]	; (800a0a8 <generate_random_number+0x30>)
 800a08a:	fba3 2301 	umull	r2, r3, r3, r1
 800a08e:	08da      	lsrs	r2, r3, #3
 800a090:	4613      	mov	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4413      	add	r3, r2
 800a096:	005b      	lsls	r3, r3, #1
 800a098:	1aca      	subs	r2, r1, r3
 800a09a:	4613      	mov	r3, r2
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3708      	adds	r7, #8
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	2000086c 	.word	0x2000086c
 800a0a8:	cccccccd 	.word	0xcccccccd

0800a0ac <start_single_player_game>:
	random_counter++;
	random = generate_random_number();
	HAL_Delay(1000);
}

void start_single_player_game(void) {
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	af00      	add	r7, sp, #0
	random = generate_random_number() * 1000;
 800a0b0:	f7ff ffe2 	bl	800a078 <generate_random_number>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a0ba:	fb03 f302 	mul.w	r3, r3, r2
 800a0be:	461a      	mov	r2, r3
 800a0c0:	4b09      	ldr	r3, [pc, #36]	; (800a0e8 <start_single_player_game+0x3c>)
 800a0c2:	601a      	str	r2, [r3, #0]
	HAL_Delay(random);
 800a0c4:	4b08      	ldr	r3, [pc, #32]	; (800a0e8 <start_single_player_game+0x3c>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7f7 f8dd 	bl	8001288 <HAL_Delay>
	HAL_GPIO_WritePin(GAME_STATE_LED_GPIO_Port, GAME_STATE_LED_Pin, 1);
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	2180      	movs	r1, #128	; 0x80
 800a0d2:	4806      	ldr	r0, [pc, #24]	; (800a0ec <start_single_player_game+0x40>)
 800a0d4:	f7f8 f8de 	bl	8002294 <HAL_GPIO_WritePin>
	player_one_timer_start = HAL_GetTick();
 800a0d8:	f7f7 f8ca 	bl	8001270 <HAL_GetTick>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	4b04      	ldr	r3, [pc, #16]	; (800a0f0 <start_single_player_game+0x44>)
 800a0e0:	601a      	str	r2, [r3, #0]
}
 800a0e2:	bf00      	nop
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	20000310 	.word	0x20000310
 800a0ec:	40020800 	.word	0x40020800
 800a0f0:	200008fc 	.word	0x200008fc

0800a0f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a0f8:	f7f7 f898 	bl	800122c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a0fc:	f000 f87e 	bl	800a1fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a100:	f000 ff68 	bl	800afd4 <MX_GPIO_Init>
  MX_DMA2D_Init();
 800a104:	f000 f938 	bl	800a378 <MX_DMA2D_Init>
  MX_FMC_Init();
 800a108:	f000 ff14 	bl	800af34 <MX_FMC_Init>
  MX_I2C1_Init();
 800a10c:	f000 f966 	bl	800a3dc <MX_I2C1_Init>
  MX_I2C3_Init();
 800a110:	f000 f9a4 	bl	800a45c <MX_I2C3_Init>
  MX_LTDC_Init();
 800a114:	f000 f9e2 	bl	800a4dc <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800a118:	f000 fa62 	bl	800a5e0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800a11c:	f000 faa0 	bl	800a660 <MX_RTC_Init>
  MX_SAI2_Init();
 800a120:	f000 fb46 	bl	800a7b0 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 800a124:	f000 fbec 	bl	800a900 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 800a128:	f000 fc1a 	bl	800a960 <MX_SPI2_Init>
  MX_TIM1_Init();
 800a12c:	f000 fc56 	bl	800a9dc <MX_TIM1_Init>
  MX_TIM2_Init();
 800a130:	f000 fd00 	bl	800ab34 <MX_TIM2_Init>
  MX_TIM3_Init();
 800a134:	f000 fd74 	bl	800ac20 <MX_TIM3_Init>
  MX_TIM5_Init();
 800a138:	f000 fdc0 	bl	800acbc <MX_TIM5_Init>
  MX_TIM8_Init();
 800a13c:	f000 fe34 	bl	800ada8 <MX_TIM8_Init>
  MX_TIM12_Init();
 800a140:	f000 fe84 	bl	800ae4c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800a144:	f000 fec6 	bl	800aed4 <MX_USART1_UART_Init>
  MX_RNG_Init();
 800a148:	f000 fa76 	bl	800a638 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 800a14c:	f7f6 f9dc 	bl	8000508 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 800a150:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800a154:	2001      	movs	r0, #1
 800a156:	f7f6 fa6f 	bl	8000638 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 800a15a:	2001      	movs	r0, #1
 800a15c:	f7f6 facc 	bl	80006f8 <BSP_LCD_SelectLayer>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800a160:	4821      	ldr	r0, [pc, #132]	; (800a1e8 <main+0xf4>)
 800a162:	f7f6 faf3 	bl	800074c <BSP_LCD_SetFont>
  //BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800a166:	f04f 30ff 	mov.w	r0, #4294967295
 800a16a:	f7f6 fad5 	bl	8000718 <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800a16e:	f04f 30ff 	mov.w	r0, #4294967295
 800a172:	f7f6 fb1b 	bl	80007ac <BSP_LCD_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BSP_LCD_DisplayStringAtLine(1, "Hello Embedded world");
 800a176:	491d      	ldr	r1, [pc, #116]	; (800a1ec <main+0xf8>)
 800a178:	2001      	movs	r0, #1
 800a17a:	f7f6 fc47 	bl	8000a0c <BSP_LCD_DisplayStringAtLine>

	  if(game_state == WAITING) {
 800a17e:	4b1c      	ldr	r3, [pc, #112]	; (800a1f0 <main+0xfc>)
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d103      	bne.n	800a18e <main+0x9a>
		  blink_game_state_led(WAITING);
 800a186:	2000      	movs	r0, #0
 800a188:	f7ff ff4c 	bl	800a024 <blink_game_state_led>
 800a18c:	e029      	b.n	800a1e2 <main+0xee>
	  } else if(game_state == STARTED) {
 800a18e:	4b18      	ldr	r3, [pc, #96]	; (800a1f0 <main+0xfc>)
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	2b01      	cmp	r3, #1
 800a194:	d108      	bne.n	800a1a8 <main+0xb4>
		  blink_game_state_led(STARTED);
 800a196:	2001      	movs	r0, #1
 800a198:	f7ff ff44 	bl	800a024 <blink_game_state_led>
		  start_single_player_game();
 800a19c:	f7ff ff86 	bl	800a0ac <start_single_player_game>
		  game_state = REACTION;
 800a1a0:	4b13      	ldr	r3, [pc, #76]	; (800a1f0 <main+0xfc>)
 800a1a2:	2202      	movs	r2, #2
 800a1a4:	701a      	strb	r2, [r3, #0]
 800a1a6:	e01c      	b.n	800a1e2 <main+0xee>
	  } else if(game_state == REACTION) {
 800a1a8:	4b11      	ldr	r3, [pc, #68]	; (800a1f0 <main+0xfc>)
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d103      	bne.n	800a1b8 <main+0xc4>
		  game_state = FINISHED;
 800a1b0:	4b0f      	ldr	r3, [pc, #60]	; (800a1f0 <main+0xfc>)
 800a1b2:	2203      	movs	r2, #3
 800a1b4:	701a      	strb	r2, [r3, #0]
 800a1b6:	e014      	b.n	800a1e2 <main+0xee>
	  } else if(game_state == FINISHED) {
 800a1b8:	4b0d      	ldr	r3, [pc, #52]	; (800a1f0 <main+0xfc>)
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	2b03      	cmp	r3, #3
 800a1be:	d110      	bne.n	800a1e2 <main+0xee>
		  HAL_Delay(3000);
 800a1c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a1c4:	f7f7 f860 	bl	8001288 <HAL_Delay>
		  HAL_GPIO_WritePin(RGB_RED_GPIO_Port, RGB_RED_Pin, INVERTED_OFF);
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	2140      	movs	r1, #64	; 0x40
 800a1cc:	4809      	ldr	r0, [pc, #36]	; (800a1f4 <main+0x100>)
 800a1ce:	f7f8 f861 	bl	8002294 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, INVERTED_OFF);
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	2110      	movs	r1, #16
 800a1d6:	4808      	ldr	r0, [pc, #32]	; (800a1f8 <main+0x104>)
 800a1d8:	f7f8 f85c 	bl	8002294 <HAL_GPIO_WritePin>
		  game_state = WAITING;
 800a1dc:	4b04      	ldr	r3, [pc, #16]	; (800a1f0 <main+0xfc>)
 800a1de:	2200      	movs	r2, #0
 800a1e0:	701a      	strb	r2, [r3, #0]
	  }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800a1e2:	f002 f809 	bl	800c1f8 <MX_USB_HOST_Process>
	  BSP_LCD_DisplayStringAtLine(1, "Hello Embedded world");
 800a1e6:	e7c6      	b.n	800a176 <main+0x82>
 800a1e8:	20000000 	.word	0x20000000
 800a1ec:	0800c5b8 	.word	0x0800c5b8
 800a1f0:	2000019c 	.word	0x2000019c
 800a1f4:	40020800 	.word	0x40020800
 800a1f8:	40020400 	.word	0x40020400

0800a1fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b0b4      	sub	sp, #208	; 0xd0
 800a200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a202:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a206:	2230      	movs	r2, #48	; 0x30
 800a208:	2100      	movs	r1, #0
 800a20a:	4618      	mov	r0, r3
 800a20c:	f002 f9c0 	bl	800c590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a210:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a214:	2200      	movs	r2, #0
 800a216:	601a      	str	r2, [r3, #0]
 800a218:	605a      	str	r2, [r3, #4]
 800a21a:	609a      	str	r2, [r3, #8]
 800a21c:	60da      	str	r2, [r3, #12]
 800a21e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a220:	f107 0308 	add.w	r3, r7, #8
 800a224:	2284      	movs	r2, #132	; 0x84
 800a226:	2100      	movs	r1, #0
 800a228:	4618      	mov	r0, r3
 800a22a:	f002 f9b1 	bl	800c590 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800a22e:	f7fa f8c3 	bl	80043b8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a232:	4b4e      	ldr	r3, [pc, #312]	; (800a36c <SystemClock_Config+0x170>)
 800a234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a236:	4a4d      	ldr	r2, [pc, #308]	; (800a36c <SystemClock_Config+0x170>)
 800a238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a23c:	6413      	str	r3, [r2, #64]	; 0x40
 800a23e:	4b4b      	ldr	r3, [pc, #300]	; (800a36c <SystemClock_Config+0x170>)
 800a240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a246:	607b      	str	r3, [r7, #4]
 800a248:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a24a:	4b49      	ldr	r3, [pc, #292]	; (800a370 <SystemClock_Config+0x174>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a48      	ldr	r2, [pc, #288]	; (800a370 <SystemClock_Config+0x174>)
 800a250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a254:	6013      	str	r3, [r2, #0]
 800a256:	4b46      	ldr	r3, [pc, #280]	; (800a370 <SystemClock_Config+0x174>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a25e:	603b      	str	r3, [r7, #0]
 800a260:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800a262:	2309      	movs	r3, #9
 800a264:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a26c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800a270:	2301      	movs	r3, #1
 800a272:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a276:	2302      	movs	r3, #2
 800a278:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a27c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a280:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800a284:	2319      	movs	r3, #25
 800a286:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800a28a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a28e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a292:	2302      	movs	r3, #2
 800a294:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800a298:	2309      	movs	r3, #9
 800a29a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a29e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fa f9b8 	bl	8004618 <HAL_RCC_OscConfig>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800a2ae:	f001 f919 	bl	800b4e4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800a2b2:	f7fa f891 	bl	80043d8 <HAL_PWREx_EnableOverDrive>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d001      	beq.n	800a2c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800a2bc:	f001 f912 	bl	800b4e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a2c0:	230f      	movs	r3, #15
 800a2c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a2d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a2d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a2da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800a2e2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a2e6:	2106      	movs	r1, #6
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7fa fc05 	bl	8004af8 <HAL_RCC_ClockConfig>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d001      	beq.n	800a2f8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800a2f4:	f001 f8f6 	bl	800b4e4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 800a2f8:	4b1e      	ldr	r3, [pc, #120]	; (800a374 <SystemClock_Config+0x178>)
 800a2fa:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800a2fc:	2364      	movs	r3, #100	; 0x64
 800a2fe:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800a300:	2302      	movs	r3, #2
 800a302:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800a304:	2302      	movs	r3, #2
 800a306:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800a308:	2302      	movs	r3, #2
 800a30a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800a30c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800a310:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800a312:	2305      	movs	r3, #5
 800a314:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800a316:	2302      	movs	r3, #2
 800a318:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800a31a:	2303      	movs	r3, #3
 800a31c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800a31e:	2301      	movs	r3, #1
 800a320:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800a322:	2301      	movs	r3, #1
 800a324:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800a326:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a32a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800a32c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a330:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800a332:	2300      	movs	r3, #0
 800a334:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a336:	2300      	movs	r3, #0
 800a338:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800a33a:	2300      	movs	r3, #0
 800a33c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800a33e:	2300      	movs	r3, #0
 800a340:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800a342:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a346:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800a34a:	2300      	movs	r3, #0
 800a34c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a350:	f107 0308 	add.w	r3, r7, #8
 800a354:	4618      	mov	r0, r3
 800a356:	f7fa fdcf 	bl	8004ef8 <HAL_RCCEx_PeriphCLKConfig>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d001      	beq.n	800a364 <SystemClock_Config+0x168>
  {
    Error_Handler();
 800a360:	f001 f8c0 	bl	800b4e4 <Error_Handler>
  }
}
 800a364:	bf00      	nop
 800a366:	37d0      	adds	r7, #208	; 0xd0
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	40023800 	.word	0x40023800
 800a370:	40007000 	.word	0x40007000
 800a374:	01b14068 	.word	0x01b14068

0800a378 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800a37c:	4b15      	ldr	r3, [pc, #84]	; (800a3d4 <MX_DMA2D_Init+0x5c>)
 800a37e:	4a16      	ldr	r2, [pc, #88]	; (800a3d8 <MX_DMA2D_Init+0x60>)
 800a380:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800a382:	4b14      	ldr	r3, [pc, #80]	; (800a3d4 <MX_DMA2D_Init+0x5c>)
 800a384:	2200      	movs	r2, #0
 800a386:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800a388:	4b12      	ldr	r3, [pc, #72]	; (800a3d4 <MX_DMA2D_Init+0x5c>)
 800a38a:	2200      	movs	r2, #0
 800a38c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800a38e:	4b11      	ldr	r3, [pc, #68]	; (800a3d4 <MX_DMA2D_Init+0x5c>)
 800a390:	2200      	movs	r2, #0
 800a392:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800a394:	4b0f      	ldr	r3, [pc, #60]	; (800a3d4 <MX_DMA2D_Init+0x5c>)
 800a396:	2200      	movs	r2, #0
 800a398:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800a39a:	4b0e      	ldr	r3, [pc, #56]	; (800a3d4 <MX_DMA2D_Init+0x5c>)
 800a39c:	2200      	movs	r2, #0
 800a39e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800a3a0:	4b0c      	ldr	r3, [pc, #48]	; (800a3d4 <MX_DMA2D_Init+0x5c>)
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800a3a6:	4b0b      	ldr	r3, [pc, #44]	; (800a3d4 <MX_DMA2D_Init+0x5c>)
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800a3ac:	4809      	ldr	r0, [pc, #36]	; (800a3d4 <MX_DMA2D_Init+0x5c>)
 800a3ae:	f7f7 fa2b 	bl	8001808 <HAL_DMA2D_Init>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d001      	beq.n	800a3bc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800a3b8:	f001 f894 	bl	800b4e4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800a3bc:	2101      	movs	r1, #1
 800a3be:	4805      	ldr	r0, [pc, #20]	; (800a3d4 <MX_DMA2D_Init+0x5c>)
 800a3c0:	f7f7 fc90 	bl	8001ce4 <HAL_DMA2D_ConfigLayer>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800a3ca:	f001 f88b 	bl	800b4e4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800a3ce:	bf00      	nop
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	2000087c 	.word	0x2000087c
 800a3d8:	4002b000 	.word	0x4002b000

0800a3dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a3e0:	4b1b      	ldr	r3, [pc, #108]	; (800a450 <MX_I2C1_Init+0x74>)
 800a3e2:	4a1c      	ldr	r2, [pc, #112]	; (800a454 <MX_I2C1_Init+0x78>)
 800a3e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800a3e6:	4b1a      	ldr	r3, [pc, #104]	; (800a450 <MX_I2C1_Init+0x74>)
 800a3e8:	4a1b      	ldr	r2, [pc, #108]	; (800a458 <MX_I2C1_Init+0x7c>)
 800a3ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800a3ec:	4b18      	ldr	r3, [pc, #96]	; (800a450 <MX_I2C1_Init+0x74>)
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a3f2:	4b17      	ldr	r3, [pc, #92]	; (800a450 <MX_I2C1_Init+0x74>)
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a3f8:	4b15      	ldr	r3, [pc, #84]	; (800a450 <MX_I2C1_Init+0x74>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800a3fe:	4b14      	ldr	r3, [pc, #80]	; (800a450 <MX_I2C1_Init+0x74>)
 800a400:	2200      	movs	r2, #0
 800a402:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a404:	4b12      	ldr	r3, [pc, #72]	; (800a450 <MX_I2C1_Init+0x74>)
 800a406:	2200      	movs	r2, #0
 800a408:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a40a:	4b11      	ldr	r3, [pc, #68]	; (800a450 <MX_I2C1_Init+0x74>)
 800a40c:	2200      	movs	r2, #0
 800a40e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a410:	4b0f      	ldr	r3, [pc, #60]	; (800a450 <MX_I2C1_Init+0x74>)
 800a412:	2200      	movs	r2, #0
 800a414:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a416:	480e      	ldr	r0, [pc, #56]	; (800a450 <MX_I2C1_Init+0x74>)
 800a418:	f7f9 fb2e 	bl	8003a78 <HAL_I2C_Init>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800a422:	f001 f85f 	bl	800b4e4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a426:	2100      	movs	r1, #0
 800a428:	4809      	ldr	r0, [pc, #36]	; (800a450 <MX_I2C1_Init+0x74>)
 800a42a:	f7f9 fbb5 	bl	8003b98 <HAL_I2CEx_ConfigAnalogFilter>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d001      	beq.n	800a438 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800a434:	f001 f856 	bl	800b4e4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800a438:	2100      	movs	r1, #0
 800a43a:	4805      	ldr	r0, [pc, #20]	; (800a450 <MX_I2C1_Init+0x74>)
 800a43c:	f7f9 fbf7 	bl	8003c2e <HAL_I2CEx_ConfigDigitalFilter>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800a446:	f001 f84d 	bl	800b4e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a44a:	bf00      	nop
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	200004d4 	.word	0x200004d4
 800a454:	40005400 	.word	0x40005400
 800a458:	00c0eaff 	.word	0x00c0eaff

0800a45c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800a460:	4b1b      	ldr	r3, [pc, #108]	; (800a4d0 <MX_I2C3_Init+0x74>)
 800a462:	4a1c      	ldr	r2, [pc, #112]	; (800a4d4 <MX_I2C3_Init+0x78>)
 800a464:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800a466:	4b1a      	ldr	r3, [pc, #104]	; (800a4d0 <MX_I2C3_Init+0x74>)
 800a468:	4a1b      	ldr	r2, [pc, #108]	; (800a4d8 <MX_I2C3_Init+0x7c>)
 800a46a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800a46c:	4b18      	ldr	r3, [pc, #96]	; (800a4d0 <MX_I2C3_Init+0x74>)
 800a46e:	2200      	movs	r2, #0
 800a470:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a472:	4b17      	ldr	r3, [pc, #92]	; (800a4d0 <MX_I2C3_Init+0x74>)
 800a474:	2201      	movs	r2, #1
 800a476:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a478:	4b15      	ldr	r3, [pc, #84]	; (800a4d0 <MX_I2C3_Init+0x74>)
 800a47a:	2200      	movs	r2, #0
 800a47c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800a47e:	4b14      	ldr	r3, [pc, #80]	; (800a4d0 <MX_I2C3_Init+0x74>)
 800a480:	2200      	movs	r2, #0
 800a482:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a484:	4b12      	ldr	r3, [pc, #72]	; (800a4d0 <MX_I2C3_Init+0x74>)
 800a486:	2200      	movs	r2, #0
 800a488:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a48a:	4b11      	ldr	r3, [pc, #68]	; (800a4d0 <MX_I2C3_Init+0x74>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a490:	4b0f      	ldr	r3, [pc, #60]	; (800a4d0 <MX_I2C3_Init+0x74>)
 800a492:	2200      	movs	r2, #0
 800a494:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800a496:	480e      	ldr	r0, [pc, #56]	; (800a4d0 <MX_I2C3_Init+0x74>)
 800a498:	f7f9 faee 	bl	8003a78 <HAL_I2C_Init>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d001      	beq.n	800a4a6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800a4a2:	f001 f81f 	bl	800b4e4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	4809      	ldr	r0, [pc, #36]	; (800a4d0 <MX_I2C3_Init+0x74>)
 800a4aa:	f7f9 fb75 	bl	8003b98 <HAL_I2CEx_ConfigAnalogFilter>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d001      	beq.n	800a4b8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800a4b4:	f001 f816 	bl	800b4e4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	4805      	ldr	r0, [pc, #20]	; (800a4d0 <MX_I2C3_Init+0x74>)
 800a4bc:	f7f9 fbb7 	bl	8003c2e <HAL_I2CEx_ConfigDigitalFilter>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d001      	beq.n	800a4ca <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800a4c6:	f001 f80d 	bl	800b4e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800a4ca:	bf00      	nop
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	20000314 	.word	0x20000314
 800a4d4:	40005c00 	.word	0x40005c00
 800a4d8:	00c0eaff 	.word	0x00c0eaff

0800a4dc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b08e      	sub	sp, #56	; 0x38
 800a4e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800a4e2:	1d3b      	adds	r3, r7, #4
 800a4e4:	2234      	movs	r2, #52	; 0x34
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f002 f851 	bl	800c590 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800a4ee:	4b3a      	ldr	r3, [pc, #232]	; (800a5d8 <MX_LTDC_Init+0xfc>)
 800a4f0:	4a3a      	ldr	r2, [pc, #232]	; (800a5dc <MX_LTDC_Init+0x100>)
 800a4f2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800a4f4:	4b38      	ldr	r3, [pc, #224]	; (800a5d8 <MX_LTDC_Init+0xfc>)
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800a4fa:	4b37      	ldr	r3, [pc, #220]	; (800a5d8 <MX_LTDC_Init+0xfc>)
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800a500:	4b35      	ldr	r3, [pc, #212]	; (800a5d8 <MX_LTDC_Init+0xfc>)
 800a502:	2200      	movs	r2, #0
 800a504:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800a506:	4b34      	ldr	r3, [pc, #208]	; (800a5d8 <MX_LTDC_Init+0xfc>)
 800a508:	2200      	movs	r2, #0
 800a50a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800a50c:	4b32      	ldr	r3, [pc, #200]	; (800a5d8 <MX_LTDC_Init+0xfc>)
 800a50e:	2228      	movs	r2, #40	; 0x28
 800a510:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800a512:	4b31      	ldr	r3, [pc, #196]	; (800a5d8 <MX_LTDC_Init+0xfc>)
 800a514:	2209      	movs	r2, #9
 800a516:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800a518:	4b2f      	ldr	r3, [pc, #188]	; (800a5d8 <MX_LTDC_Init+0xfc>)
 800a51a:	2235      	movs	r2, #53	; 0x35
 800a51c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800a51e:	4b2e      	ldr	r3, [pc, #184]	; (800a5d8 <MX_LTDC_Init+0xfc>)
 800a520:	220b      	movs	r2, #11
 800a522:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800a524:	4b2c      	ldr	r3, [pc, #176]	; (800a5d8 <MX_LTDC_Init+0xfc>)
 800a526:	f240 2215 	movw	r2, #533	; 0x215
 800a52a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800a52c:	4b2a      	ldr	r3, [pc, #168]	; (800a5d8 <MX_LTDC_Init+0xfc>)
 800a52e:	f240 121b 	movw	r2, #283	; 0x11b
 800a532:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800a534:	4b28      	ldr	r3, [pc, #160]	; (800a5d8 <MX_LTDC_Init+0xfc>)
 800a536:	f240 2235 	movw	r2, #565	; 0x235
 800a53a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800a53c:	4b26      	ldr	r3, [pc, #152]	; (800a5d8 <MX_LTDC_Init+0xfc>)
 800a53e:	f240 121d 	movw	r2, #285	; 0x11d
 800a542:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800a544:	4b24      	ldr	r3, [pc, #144]	; (800a5d8 <MX_LTDC_Init+0xfc>)
 800a546:	2200      	movs	r2, #0
 800a548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800a54c:	4b22      	ldr	r3, [pc, #136]	; (800a5d8 <MX_LTDC_Init+0xfc>)
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800a554:	4b20      	ldr	r3, [pc, #128]	; (800a5d8 <MX_LTDC_Init+0xfc>)
 800a556:	2200      	movs	r2, #0
 800a558:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800a55c:	481e      	ldr	r0, [pc, #120]	; (800a5d8 <MX_LTDC_Init+0xfc>)
 800a55e:	f7f9 fbb3 	bl	8003cc8 <HAL_LTDC_Init>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d001      	beq.n	800a56c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800a568:	f000 ffbc 	bl	800b4e4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800a570:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800a574:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800a576:	2300      	movs	r3, #0
 800a578:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800a57a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a57e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800a580:	2302      	movs	r3, #2
 800a582:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800a584:	23ff      	movs	r3, #255	; 0xff
 800a586:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800a588:	2300      	movs	r3, #0
 800a58a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800a58c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a590:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800a592:	2307      	movs	r3, #7
 800a594:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800a596:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800a59a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800a59c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800a5a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800a5a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a5a6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800a5ba:	1d3b      	adds	r3, r7, #4
 800a5bc:	2200      	movs	r2, #0
 800a5be:	4619      	mov	r1, r3
 800a5c0:	4805      	ldr	r0, [pc, #20]	; (800a5d8 <MX_LTDC_Init+0xfc>)
 800a5c2:	f7f9 fd13 	bl	8003fec <HAL_LTDC_ConfigLayer>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d001      	beq.n	800a5d0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800a5cc:	f000 ff8a 	bl	800b4e4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800a5d0:	bf00      	nop
 800a5d2:	3738      	adds	r7, #56	; 0x38
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	20000648 	.word	0x20000648
 800a5dc:	40016800 	.word	0x40016800

0800a5e0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800a5e4:	4b12      	ldr	r3, [pc, #72]	; (800a630 <MX_QUADSPI_Init+0x50>)
 800a5e6:	4a13      	ldr	r2, [pc, #76]	; (800a634 <MX_QUADSPI_Init+0x54>)
 800a5e8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800a5ea:	4b11      	ldr	r3, [pc, #68]	; (800a630 <MX_QUADSPI_Init+0x50>)
 800a5ec:	22ff      	movs	r2, #255	; 0xff
 800a5ee:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800a5f0:	4b0f      	ldr	r3, [pc, #60]	; (800a630 <MX_QUADSPI_Init+0x50>)
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800a5f6:	4b0e      	ldr	r3, [pc, #56]	; (800a630 <MX_QUADSPI_Init+0x50>)
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800a5fc:	4b0c      	ldr	r3, [pc, #48]	; (800a630 <MX_QUADSPI_Init+0x50>)
 800a5fe:	2201      	movs	r2, #1
 800a600:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800a602:	4b0b      	ldr	r3, [pc, #44]	; (800a630 <MX_QUADSPI_Init+0x50>)
 800a604:	2200      	movs	r2, #0
 800a606:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800a608:	4b09      	ldr	r3, [pc, #36]	; (800a630 <MX_QUADSPI_Init+0x50>)
 800a60a:	2200      	movs	r2, #0
 800a60c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800a60e:	4b08      	ldr	r3, [pc, #32]	; (800a630 <MX_QUADSPI_Init+0x50>)
 800a610:	2200      	movs	r2, #0
 800a612:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800a614:	4b06      	ldr	r3, [pc, #24]	; (800a630 <MX_QUADSPI_Init+0x50>)
 800a616:	2200      	movs	r2, #0
 800a618:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800a61a:	4805      	ldr	r0, [pc, #20]	; (800a630 <MX_QUADSPI_Init+0x50>)
 800a61c:	f7f9 ff2c 	bl	8004478 <HAL_QSPI_Init>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d001      	beq.n	800a62a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800a626:	f000 ff5d 	bl	800b4e4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800a62a:	bf00      	nop
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	200009c0 	.word	0x200009c0
 800a634:	a0001000 	.word	0xa0001000

0800a638 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800a63c:	4b06      	ldr	r3, [pc, #24]	; (800a658 <MX_RNG_Init+0x20>)
 800a63e:	4a07      	ldr	r2, [pc, #28]	; (800a65c <MX_RNG_Init+0x24>)
 800a640:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800a642:	4805      	ldr	r0, [pc, #20]	; (800a658 <MX_RNG_Init+0x20>)
 800a644:	f7fb f97a 	bl	800593c <HAL_RNG_Init>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d001      	beq.n	800a652 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800a64e:	f000 ff49 	bl	800b4e4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800a652:	bf00      	nop
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	2000086c 	.word	0x2000086c
 800a65c:	50060800 	.word	0x50060800

0800a660 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b092      	sub	sp, #72	; 0x48
 800a664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800a666:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a66a:	2200      	movs	r2, #0
 800a66c:	601a      	str	r2, [r3, #0]
 800a66e:	605a      	str	r2, [r3, #4]
 800a670:	609a      	str	r2, [r3, #8]
 800a672:	60da      	str	r2, [r3, #12]
 800a674:	611a      	str	r2, [r3, #16]
 800a676:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800a678:	2300      	movs	r3, #0
 800a67a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800a67c:	463b      	mov	r3, r7
 800a67e:	222c      	movs	r2, #44	; 0x2c
 800a680:	2100      	movs	r1, #0
 800a682:	4618      	mov	r0, r3
 800a684:	f001 ff84 	bl	800c590 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800a688:	4b47      	ldr	r3, [pc, #284]	; (800a7a8 <MX_RTC_Init+0x148>)
 800a68a:	4a48      	ldr	r2, [pc, #288]	; (800a7ac <MX_RTC_Init+0x14c>)
 800a68c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a68e:	4b46      	ldr	r3, [pc, #280]	; (800a7a8 <MX_RTC_Init+0x148>)
 800a690:	2200      	movs	r2, #0
 800a692:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a694:	4b44      	ldr	r3, [pc, #272]	; (800a7a8 <MX_RTC_Init+0x148>)
 800a696:	227f      	movs	r2, #127	; 0x7f
 800a698:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a69a:	4b43      	ldr	r3, [pc, #268]	; (800a7a8 <MX_RTC_Init+0x148>)
 800a69c:	22ff      	movs	r2, #255	; 0xff
 800a69e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a6a0:	4b41      	ldr	r3, [pc, #260]	; (800a7a8 <MX_RTC_Init+0x148>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a6a6:	4b40      	ldr	r3, [pc, #256]	; (800a7a8 <MX_RTC_Init+0x148>)
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a6ac:	4b3e      	ldr	r3, [pc, #248]	; (800a7a8 <MX_RTC_Init+0x148>)
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a6b2:	483d      	ldr	r0, [pc, #244]	; (800a7a8 <MX_RTC_Init+0x148>)
 800a6b4:	f7fb f9d0 	bl	8005a58 <HAL_RTC_Init>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d001      	beq.n	800a6c2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800a6be:	f000 ff11 	bl	800b4e4 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800a6dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	4830      	ldr	r0, [pc, #192]	; (800a7a8 <MX_RTC_Init+0x148>)
 800a6e6:	f7fb fa33 	bl	8005b50 <HAL_RTC_SetTime>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d001      	beq.n	800a6f4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800a6f0:	f000 fef8 	bl	800b4e4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 800a700:	2301      	movs	r3, #1
 800a702:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800a706:	2300      	movs	r3, #0
 800a708:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800a70c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a710:	2201      	movs	r2, #1
 800a712:	4619      	mov	r1, r3
 800a714:	4824      	ldr	r0, [pc, #144]	; (800a7a8 <MX_RTC_Init+0x148>)
 800a716:	f7fb fad9 	bl	8005ccc <HAL_RTC_SetDate>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d001      	beq.n	800a724 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800a720:	f000 fee0 	bl	800b4e4 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800a724:	2300      	movs	r3, #0
 800a726:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800a728:	2300      	movs	r3, #0
 800a72a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800a72c:	2300      	movs	r3, #0
 800a72e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800a730:	2300      	movs	r3, #0
 800a732:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a734:	2300      	movs	r3, #0
 800a736:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a738:	2300      	movs	r3, #0
 800a73a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800a73c:	2300      	movs	r3, #0
 800a73e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800a740:	2300      	movs	r3, #0
 800a742:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800a744:	2300      	movs	r3, #0
 800a746:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 800a748:	2301      	movs	r3, #1
 800a74a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800a74e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a752:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800a754:	463b      	mov	r3, r7
 800a756:	2201      	movs	r2, #1
 800a758:	4619      	mov	r1, r3
 800a75a:	4813      	ldr	r0, [pc, #76]	; (800a7a8 <MX_RTC_Init+0x148>)
 800a75c:	f7fb fb5e 	bl	8005e1c <HAL_RTC_SetAlarm>
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	d001      	beq.n	800a76a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800a766:	f000 febd 	bl	800b4e4 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 800a76a:	2301      	movs	r3, #1
 800a76c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 800a770:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a774:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800a776:	463b      	mov	r3, r7
 800a778:	2201      	movs	r2, #1
 800a77a:	4619      	mov	r1, r3
 800a77c:	480a      	ldr	r0, [pc, #40]	; (800a7a8 <MX_RTC_Init+0x148>)
 800a77e:	f7fb fb4d 	bl	8005e1c <HAL_RTC_SetAlarm>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d001      	beq.n	800a78c <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 800a788:	f000 feac 	bl	800b4e4 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800a78c:	2202      	movs	r2, #2
 800a78e:	2100      	movs	r1, #0
 800a790:	4805      	ldr	r0, [pc, #20]	; (800a7a8 <MX_RTC_Init+0x148>)
 800a792:	f7fb fccd 	bl	8006130 <HAL_RTCEx_SetTimeStamp>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d001      	beq.n	800a7a0 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 800a79c:	f000 fea2 	bl	800b4e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a7a0:	bf00      	nop
 800a7a2:	3748      	adds	r7, #72	; 0x48
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	2000080c 	.word	0x2000080c
 800a7ac:	40002800 	.word	0x40002800

0800a7b0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800a7b4:	4b4d      	ldr	r3, [pc, #308]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a7b6:	4a4e      	ldr	r2, [pc, #312]	; (800a8f0 <MX_SAI2_Init+0x140>)
 800a7b8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800a7ba:	4b4c      	ldr	r3, [pc, #304]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800a7c0:	4b4a      	ldr	r3, [pc, #296]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800a7c6:	4b49      	ldr	r3, [pc, #292]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a7c8:	2240      	movs	r2, #64	; 0x40
 800a7ca:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800a7cc:	4b47      	ldr	r3, [pc, #284]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a7d2:	4b46      	ldr	r3, [pc, #280]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800a7d8:	4b44      	ldr	r3, [pc, #272]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a7da:	2200      	movs	r2, #0
 800a7dc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800a7de:	4b43      	ldr	r3, [pc, #268]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800a7e4:	4b41      	ldr	r3, [pc, #260]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800a7ea:	4b40      	ldr	r3, [pc, #256]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800a7f0:	4b3e      	ldr	r3, [pc, #248]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a7f2:	4a40      	ldr	r2, [pc, #256]	; (800a8f4 <MX_SAI2_Init+0x144>)
 800a7f4:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800a7f6:	4b3d      	ldr	r3, [pc, #244]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800a7fc:	4b3b      	ldr	r3, [pc, #236]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a7fe:	2200      	movs	r2, #0
 800a800:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800a802:	4b3a      	ldr	r3, [pc, #232]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a804:	2200      	movs	r2, #0
 800a806:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800a808:	4b38      	ldr	r3, [pc, #224]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a80a:	2200      	movs	r2, #0
 800a80c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800a80e:	4b37      	ldr	r3, [pc, #220]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a810:	2208      	movs	r2, #8
 800a812:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800a814:	4b35      	ldr	r3, [pc, #212]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a816:	2201      	movs	r2, #1
 800a818:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800a81a:	4b34      	ldr	r3, [pc, #208]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a81c:	2200      	movs	r2, #0
 800a81e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a820:	4b32      	ldr	r3, [pc, #200]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a822:	2200      	movs	r2, #0
 800a824:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800a826:	4b31      	ldr	r3, [pc, #196]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a828:	2200      	movs	r2, #0
 800a82a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800a82c:	4b2f      	ldr	r3, [pc, #188]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a82e:	2200      	movs	r2, #0
 800a830:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800a832:	4b2e      	ldr	r3, [pc, #184]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a834:	2200      	movs	r2, #0
 800a836:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800a838:	4b2c      	ldr	r3, [pc, #176]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a83a:	2201      	movs	r2, #1
 800a83c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800a83e:	4b2b      	ldr	r3, [pc, #172]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a840:	2200      	movs	r2, #0
 800a842:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800a844:	4829      	ldr	r0, [pc, #164]	; (800a8ec <MX_SAI2_Init+0x13c>)
 800a846:	f7fb fcc9 	bl	80061dc <HAL_SAI_Init>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d001      	beq.n	800a854 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 800a850:	f000 fe48 	bl	800b4e4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800a854:	4b28      	ldr	r3, [pc, #160]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a856:	4a29      	ldr	r2, [pc, #164]	; (800a8fc <MX_SAI2_Init+0x14c>)
 800a858:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800a85a:	4b27      	ldr	r3, [pc, #156]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a85c:	2200      	movs	r2, #0
 800a85e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800a860:	4b25      	ldr	r3, [pc, #148]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a862:	2203      	movs	r2, #3
 800a864:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800a866:	4b24      	ldr	r3, [pc, #144]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a868:	2240      	movs	r2, #64	; 0x40
 800a86a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800a86c:	4b22      	ldr	r3, [pc, #136]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a86e:	2200      	movs	r2, #0
 800a870:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a872:	4b21      	ldr	r3, [pc, #132]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a874:	2200      	movs	r2, #0
 800a876:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800a878:	4b1f      	ldr	r3, [pc, #124]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a87a:	2201      	movs	r2, #1
 800a87c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800a87e:	4b1e      	ldr	r3, [pc, #120]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a880:	2200      	movs	r2, #0
 800a882:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800a884:	4b1c      	ldr	r3, [pc, #112]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a886:	2200      	movs	r2, #0
 800a888:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800a88a:	4b1b      	ldr	r3, [pc, #108]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a88c:	2200      	movs	r2, #0
 800a88e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800a890:	4b19      	ldr	r3, [pc, #100]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a892:	2200      	movs	r2, #0
 800a894:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800a896:	4b18      	ldr	r3, [pc, #96]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a898:	2200      	movs	r2, #0
 800a89a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800a89c:	4b16      	ldr	r3, [pc, #88]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a89e:	2200      	movs	r2, #0
 800a8a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800a8a2:	4b15      	ldr	r3, [pc, #84]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a8a4:	2208      	movs	r2, #8
 800a8a6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800a8a8:	4b13      	ldr	r3, [pc, #76]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800a8ae:	4b12      	ldr	r3, [pc, #72]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a8b4:	4b10      	ldr	r3, [pc, #64]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800a8ba:	4b0f      	ldr	r3, [pc, #60]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a8bc:	2200      	movs	r2, #0
 800a8be:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800a8c0:	4b0d      	ldr	r3, [pc, #52]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800a8c6:	4b0c      	ldr	r3, [pc, #48]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800a8cc:	4b0a      	ldr	r3, [pc, #40]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800a8d2:	4b09      	ldr	r3, [pc, #36]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800a8d8:	4807      	ldr	r0, [pc, #28]	; (800a8f8 <MX_SAI2_Init+0x148>)
 800a8da:	f7fb fc7f 	bl	80061dc <HAL_SAI_Init>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d001      	beq.n	800a8e8 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 800a8e4:	f000 fdfe 	bl	800b4e4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800a8e8:	bf00      	nop
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	20000450 	.word	0x20000450
 800a8f0:	40015c04 	.word	0x40015c04
 800a8f4:	0002ee00 	.word	0x0002ee00
 800a8f8:	2000028c 	.word	0x2000028c
 800a8fc:	40015c24 	.word	0x40015c24

0800a900 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 800a904:	4b15      	ldr	r3, [pc, #84]	; (800a95c <MX_SPDIFRX_Init+0x5c>)
 800a906:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800a90a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800a90c:	4b13      	ldr	r3, [pc, #76]	; (800a95c <MX_SPDIFRX_Init+0x5c>)
 800a90e:	2200      	movs	r2, #0
 800a910:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800a912:	4b12      	ldr	r3, [pc, #72]	; (800a95c <MX_SPDIFRX_Init+0x5c>)
 800a914:	2200      	movs	r2, #0
 800a916:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800a918:	4b10      	ldr	r3, [pc, #64]	; (800a95c <MX_SPDIFRX_Init+0x5c>)
 800a91a:	2200      	movs	r2, #0
 800a91c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800a91e:	4b0f      	ldr	r3, [pc, #60]	; (800a95c <MX_SPDIFRX_Init+0x5c>)
 800a920:	2200      	movs	r2, #0
 800a922:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 800a924:	4b0d      	ldr	r3, [pc, #52]	; (800a95c <MX_SPDIFRX_Init+0x5c>)
 800a926:	2200      	movs	r2, #0
 800a928:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800a92a:	4b0c      	ldr	r3, [pc, #48]	; (800a95c <MX_SPDIFRX_Init+0x5c>)
 800a92c:	2200      	movs	r2, #0
 800a92e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 800a930:	4b0a      	ldr	r3, [pc, #40]	; (800a95c <MX_SPDIFRX_Init+0x5c>)
 800a932:	2200      	movs	r2, #0
 800a934:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800a936:	4b09      	ldr	r3, [pc, #36]	; (800a95c <MX_SPDIFRX_Init+0x5c>)
 800a938:	2200      	movs	r2, #0
 800a93a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800a93c:	4b07      	ldr	r3, [pc, #28]	; (800a95c <MX_SPDIFRX_Init+0x5c>)
 800a93e:	2200      	movs	r2, #0
 800a940:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800a942:	4b06      	ldr	r3, [pc, #24]	; (800a95c <MX_SPDIFRX_Init+0x5c>)
 800a944:	2200      	movs	r2, #0
 800a946:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800a948:	4804      	ldr	r0, [pc, #16]	; (800a95c <MX_SPDIFRX_Init+0x5c>)
 800a94a:	f7fb fe6f 	bl	800662c <HAL_SPDIFRX_Init>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d001      	beq.n	800a958 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 800a954:	f000 fdc6 	bl	800b4e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800a958:	bf00      	nop
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	20000404 	.word	0x20000404

0800a960 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800a964:	4b1b      	ldr	r3, [pc, #108]	; (800a9d4 <MX_SPI2_Init+0x74>)
 800a966:	4a1c      	ldr	r2, [pc, #112]	; (800a9d8 <MX_SPI2_Init+0x78>)
 800a968:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800a96a:	4b1a      	ldr	r3, [pc, #104]	; (800a9d4 <MX_SPI2_Init+0x74>)
 800a96c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a970:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800a972:	4b18      	ldr	r3, [pc, #96]	; (800a9d4 <MX_SPI2_Init+0x74>)
 800a974:	2200      	movs	r2, #0
 800a976:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800a978:	4b16      	ldr	r3, [pc, #88]	; (800a9d4 <MX_SPI2_Init+0x74>)
 800a97a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800a97e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a980:	4b14      	ldr	r3, [pc, #80]	; (800a9d4 <MX_SPI2_Init+0x74>)
 800a982:	2200      	movs	r2, #0
 800a984:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a986:	4b13      	ldr	r3, [pc, #76]	; (800a9d4 <MX_SPI2_Init+0x74>)
 800a988:	2200      	movs	r2, #0
 800a98a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800a98c:	4b11      	ldr	r3, [pc, #68]	; (800a9d4 <MX_SPI2_Init+0x74>)
 800a98e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a992:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a994:	4b0f      	ldr	r3, [pc, #60]	; (800a9d4 <MX_SPI2_Init+0x74>)
 800a996:	2200      	movs	r2, #0
 800a998:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a99a:	4b0e      	ldr	r3, [pc, #56]	; (800a9d4 <MX_SPI2_Init+0x74>)
 800a99c:	2200      	movs	r2, #0
 800a99e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800a9a0:	4b0c      	ldr	r3, [pc, #48]	; (800a9d4 <MX_SPI2_Init+0x74>)
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a9a6:	4b0b      	ldr	r3, [pc, #44]	; (800a9d4 <MX_SPI2_Init+0x74>)
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800a9ac:	4b09      	ldr	r3, [pc, #36]	; (800a9d4 <MX_SPI2_Init+0x74>)
 800a9ae:	2207      	movs	r2, #7
 800a9b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a9b2:	4b08      	ldr	r3, [pc, #32]	; (800a9d4 <MX_SPI2_Init+0x74>)
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800a9b8:	4b06      	ldr	r3, [pc, #24]	; (800a9d4 <MX_SPI2_Init+0x74>)
 800a9ba:	2208      	movs	r2, #8
 800a9bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800a9be:	4805      	ldr	r0, [pc, #20]	; (800a9d4 <MX_SPI2_Init+0x74>)
 800a9c0:	f7fb fe90 	bl	80066e4 <HAL_SPI_Init>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d001      	beq.n	800a9ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800a9ca:	f000 fd8b 	bl	800b4e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800a9ce:	bf00      	nop
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	20000360 	.word	0x20000360
 800a9d8:	40003800 	.word	0x40003800

0800a9dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b09a      	sub	sp, #104	; 0x68
 800a9e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a9e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	601a      	str	r2, [r3, #0]
 800a9ea:	605a      	str	r2, [r3, #4]
 800a9ec:	609a      	str	r2, [r3, #8]
 800a9ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a9f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	601a      	str	r2, [r3, #0]
 800a9f8:	605a      	str	r2, [r3, #4]
 800a9fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a9fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aa00:	2200      	movs	r2, #0
 800aa02:	601a      	str	r2, [r3, #0]
 800aa04:	605a      	str	r2, [r3, #4]
 800aa06:	609a      	str	r2, [r3, #8]
 800aa08:	60da      	str	r2, [r3, #12]
 800aa0a:	611a      	str	r2, [r3, #16]
 800aa0c:	615a      	str	r2, [r3, #20]
 800aa0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800aa10:	1d3b      	adds	r3, r7, #4
 800aa12:	222c      	movs	r2, #44	; 0x2c
 800aa14:	2100      	movs	r1, #0
 800aa16:	4618      	mov	r0, r3
 800aa18:	f001 fdba 	bl	800c590 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800aa1c:	4b43      	ldr	r3, [pc, #268]	; (800ab2c <MX_TIM1_Init+0x150>)
 800aa1e:	4a44      	ldr	r2, [pc, #272]	; (800ab30 <MX_TIM1_Init+0x154>)
 800aa20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800aa22:	4b42      	ldr	r3, [pc, #264]	; (800ab2c <MX_TIM1_Init+0x150>)
 800aa24:	2200      	movs	r2, #0
 800aa26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aa28:	4b40      	ldr	r3, [pc, #256]	; (800ab2c <MX_TIM1_Init+0x150>)
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800aa2e:	4b3f      	ldr	r3, [pc, #252]	; (800ab2c <MX_TIM1_Init+0x150>)
 800aa30:	2200      	movs	r2, #0
 800aa32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aa34:	4b3d      	ldr	r3, [pc, #244]	; (800ab2c <MX_TIM1_Init+0x150>)
 800aa36:	2200      	movs	r2, #0
 800aa38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800aa3a:	4b3c      	ldr	r3, [pc, #240]	; (800ab2c <MX_TIM1_Init+0x150>)
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aa40:	4b3a      	ldr	r3, [pc, #232]	; (800ab2c <MX_TIM1_Init+0x150>)
 800aa42:	2200      	movs	r2, #0
 800aa44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800aa46:	4839      	ldr	r0, [pc, #228]	; (800ab2c <MX_TIM1_Init+0x150>)
 800aa48:	f7fb fede 	bl	8006808 <HAL_TIM_Base_Init>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d001      	beq.n	800aa56 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800aa52:	f000 fd47 	bl	800b4e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800aa56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa5a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800aa5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800aa60:	4619      	mov	r1, r3
 800aa62:	4832      	ldr	r0, [pc, #200]	; (800ab2c <MX_TIM1_Init+0x150>)
 800aa64:	f7fc f988 	bl	8006d78 <HAL_TIM_ConfigClockSource>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d001      	beq.n	800aa72 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800aa6e:	f000 fd39 	bl	800b4e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800aa72:	482e      	ldr	r0, [pc, #184]	; (800ab2c <MX_TIM1_Init+0x150>)
 800aa74:	f7fb ff1e 	bl	80068b4 <HAL_TIM_PWM_Init>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d001      	beq.n	800aa82 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800aa7e:	f000 fd31 	bl	800b4e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aa82:	2300      	movs	r3, #0
 800aa84:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800aa86:	2300      	movs	r3, #0
 800aa88:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800aa8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800aa92:	4619      	mov	r1, r3
 800aa94:	4825      	ldr	r0, [pc, #148]	; (800ab2c <MX_TIM1_Init+0x150>)
 800aa96:	f7fc fde9 	bl	800766c <HAL_TIMEx_MasterConfigSynchronization>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d001      	beq.n	800aaa4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800aaa0:	f000 fd20 	bl	800b4e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800aaa4:	2360      	movs	r3, #96	; 0x60
 800aaa6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800aaac:	2300      	movs	r3, #0
 800aaae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800aab0:	2300      	movs	r3, #0
 800aab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800aab4:	2300      	movs	r3, #0
 800aab6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800aab8:	2300      	movs	r3, #0
 800aaba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800aabc:	2300      	movs	r3, #0
 800aabe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800aac0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aac4:	2200      	movs	r2, #0
 800aac6:	4619      	mov	r1, r3
 800aac8:	4818      	ldr	r0, [pc, #96]	; (800ab2c <MX_TIM1_Init+0x150>)
 800aaca:	f7fc f83d 	bl	8006b48 <HAL_TIM_PWM_ConfigChannel>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d001      	beq.n	800aad8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800aad4:	f000 fd06 	bl	800b4e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800aad8:	2300      	movs	r3, #0
 800aada:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800aadc:	2300      	movs	r3, #0
 800aade:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800aae0:	2300      	movs	r3, #0
 800aae2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800aae4:	2300      	movs	r3, #0
 800aae6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800aae8:	2300      	movs	r3, #0
 800aaea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800aaec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aaf0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800aafa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aafe:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800ab00:	2300      	movs	r3, #0
 800ab02:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800ab04:	2300      	movs	r3, #0
 800ab06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800ab08:	1d3b      	adds	r3, r7, #4
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	4807      	ldr	r0, [pc, #28]	; (800ab2c <MX_TIM1_Init+0x150>)
 800ab0e:	f7fc fe09 	bl	8007724 <HAL_TIMEx_ConfigBreakDeadTime>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d001      	beq.n	800ab1c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800ab18:	f000 fce4 	bl	800b4e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800ab1c:	4803      	ldr	r0, [pc, #12]	; (800ab2c <MX_TIM1_Init+0x150>)
 800ab1e:	f001 f86f 	bl	800bc00 <HAL_TIM_MspPostInit>

}
 800ab22:	bf00      	nop
 800ab24:	3768      	adds	r7, #104	; 0x68
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	2000082c 	.word	0x2000082c
 800ab30:	40010000 	.word	0x40010000

0800ab34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b08e      	sub	sp, #56	; 0x38
 800ab38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ab3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ab3e:	2200      	movs	r2, #0
 800ab40:	601a      	str	r2, [r3, #0]
 800ab42:	605a      	str	r2, [r3, #4]
 800ab44:	609a      	str	r2, [r3, #8]
 800ab46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ab48:	f107 031c 	add.w	r3, r7, #28
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	601a      	str	r2, [r3, #0]
 800ab50:	605a      	str	r2, [r3, #4]
 800ab52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ab54:	463b      	mov	r3, r7
 800ab56:	2200      	movs	r2, #0
 800ab58:	601a      	str	r2, [r3, #0]
 800ab5a:	605a      	str	r2, [r3, #4]
 800ab5c:	609a      	str	r2, [r3, #8]
 800ab5e:	60da      	str	r2, [r3, #12]
 800ab60:	611a      	str	r2, [r3, #16]
 800ab62:	615a      	str	r2, [r3, #20]
 800ab64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800ab66:	4b2d      	ldr	r3, [pc, #180]	; (800ac1c <MX_TIM2_Init+0xe8>)
 800ab68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ab6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800ab6e:	4b2b      	ldr	r3, [pc, #172]	; (800ac1c <MX_TIM2_Init+0xe8>)
 800ab70:	2200      	movs	r2, #0
 800ab72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ab74:	4b29      	ldr	r3, [pc, #164]	; (800ac1c <MX_TIM2_Init+0xe8>)
 800ab76:	2200      	movs	r2, #0
 800ab78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800ab7a:	4b28      	ldr	r3, [pc, #160]	; (800ac1c <MX_TIM2_Init+0xe8>)
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ab80:	4b26      	ldr	r3, [pc, #152]	; (800ac1c <MX_TIM2_Init+0xe8>)
 800ab82:	2200      	movs	r2, #0
 800ab84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ab86:	4b25      	ldr	r3, [pc, #148]	; (800ac1c <MX_TIM2_Init+0xe8>)
 800ab88:	2200      	movs	r2, #0
 800ab8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800ab8c:	4823      	ldr	r0, [pc, #140]	; (800ac1c <MX_TIM2_Init+0xe8>)
 800ab8e:	f7fb fe3b 	bl	8006808 <HAL_TIM_Base_Init>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d001      	beq.n	800ab9c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800ab98:	f000 fca4 	bl	800b4e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ab9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aba0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800aba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aba6:	4619      	mov	r1, r3
 800aba8:	481c      	ldr	r0, [pc, #112]	; (800ac1c <MX_TIM2_Init+0xe8>)
 800abaa:	f7fc f8e5 	bl	8006d78 <HAL_TIM_ConfigClockSource>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d001      	beq.n	800abb8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800abb4:	f000 fc96 	bl	800b4e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800abb8:	4818      	ldr	r0, [pc, #96]	; (800ac1c <MX_TIM2_Init+0xe8>)
 800abba:	f7fb fe7b 	bl	80068b4 <HAL_TIM_PWM_Init>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d001      	beq.n	800abc8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800abc4:	f000 fc8e 	bl	800b4e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800abc8:	2300      	movs	r3, #0
 800abca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800abcc:	2300      	movs	r3, #0
 800abce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800abd0:	f107 031c 	add.w	r3, r7, #28
 800abd4:	4619      	mov	r1, r3
 800abd6:	4811      	ldr	r0, [pc, #68]	; (800ac1c <MX_TIM2_Init+0xe8>)
 800abd8:	f7fc fd48 	bl	800766c <HAL_TIMEx_MasterConfigSynchronization>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d001      	beq.n	800abe6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800abe2:	f000 fc7f 	bl	800b4e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800abe6:	2360      	movs	r3, #96	; 0x60
 800abe8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800abea:	2300      	movs	r3, #0
 800abec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800abee:	2300      	movs	r3, #0
 800abf0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800abf2:	2300      	movs	r3, #0
 800abf4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800abf6:	463b      	mov	r3, r7
 800abf8:	2200      	movs	r2, #0
 800abfa:	4619      	mov	r1, r3
 800abfc:	4807      	ldr	r0, [pc, #28]	; (800ac1c <MX_TIM2_Init+0xe8>)
 800abfe:	f7fb ffa3 	bl	8006b48 <HAL_TIM_PWM_ConfigChannel>
 800ac02:	4603      	mov	r3, r0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d001      	beq.n	800ac0c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800ac08:	f000 fc6c 	bl	800b4e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800ac0c:	4803      	ldr	r0, [pc, #12]	; (800ac1c <MX_TIM2_Init+0xe8>)
 800ac0e:	f000 fff7 	bl	800bc00 <HAL_TIM_MspPostInit>

}
 800ac12:	bf00      	nop
 800ac14:	3738      	adds	r7, #56	; 0x38
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	200008bc 	.word	0x200008bc

0800ac20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b088      	sub	sp, #32
 800ac24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ac26:	f107 0310 	add.w	r3, r7, #16
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	601a      	str	r2, [r3, #0]
 800ac2e:	605a      	str	r2, [r3, #4]
 800ac30:	609a      	str	r2, [r3, #8]
 800ac32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ac34:	1d3b      	adds	r3, r7, #4
 800ac36:	2200      	movs	r2, #0
 800ac38:	601a      	str	r2, [r3, #0]
 800ac3a:	605a      	str	r2, [r3, #4]
 800ac3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800ac3e:	4b1d      	ldr	r3, [pc, #116]	; (800acb4 <MX_TIM3_Init+0x94>)
 800ac40:	4a1d      	ldr	r2, [pc, #116]	; (800acb8 <MX_TIM3_Init+0x98>)
 800ac42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800ac44:	4b1b      	ldr	r3, [pc, #108]	; (800acb4 <MX_TIM3_Init+0x94>)
 800ac46:	2200      	movs	r2, #0
 800ac48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac4a:	4b1a      	ldr	r3, [pc, #104]	; (800acb4 <MX_TIM3_Init+0x94>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800ac50:	4b18      	ldr	r3, [pc, #96]	; (800acb4 <MX_TIM3_Init+0x94>)
 800ac52:	2200      	movs	r2, #0
 800ac54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ac56:	4b17      	ldr	r3, [pc, #92]	; (800acb4 <MX_TIM3_Init+0x94>)
 800ac58:	2200      	movs	r2, #0
 800ac5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac5c:	4b15      	ldr	r3, [pc, #84]	; (800acb4 <MX_TIM3_Init+0x94>)
 800ac5e:	2200      	movs	r2, #0
 800ac60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800ac62:	4814      	ldr	r0, [pc, #80]	; (800acb4 <MX_TIM3_Init+0x94>)
 800ac64:	f7fb fdd0 	bl	8006808 <HAL_TIM_Base_Init>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d001      	beq.n	800ac72 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800ac6e:	f000 fc39 	bl	800b4e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ac72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800ac78:	f107 0310 	add.w	r3, r7, #16
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	480d      	ldr	r0, [pc, #52]	; (800acb4 <MX_TIM3_Init+0x94>)
 800ac80:	f7fc f87a 	bl	8006d78 <HAL_TIM_ConfigClockSource>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d001      	beq.n	800ac8e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800ac8a:	f000 fc2b 	bl	800b4e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ac92:	2300      	movs	r3, #0
 800ac94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ac96:	1d3b      	adds	r3, r7, #4
 800ac98:	4619      	mov	r1, r3
 800ac9a:	4806      	ldr	r0, [pc, #24]	; (800acb4 <MX_TIM3_Init+0x94>)
 800ac9c:	f7fc fce6 	bl	800766c <HAL_TIMEx_MasterConfigSynchronization>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d001      	beq.n	800acaa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800aca6:	f000 fc1d 	bl	800b4e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800acaa:	bf00      	nop
 800acac:	3720      	adds	r7, #32
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	20000608 	.word	0x20000608
 800acb8:	40000400 	.word	0x40000400

0800acbc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b08e      	sub	sp, #56	; 0x38
 800acc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800acc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800acc6:	2200      	movs	r2, #0
 800acc8:	601a      	str	r2, [r3, #0]
 800acca:	605a      	str	r2, [r3, #4]
 800accc:	609a      	str	r2, [r3, #8]
 800acce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800acd0:	f107 031c 	add.w	r3, r7, #28
 800acd4:	2200      	movs	r2, #0
 800acd6:	601a      	str	r2, [r3, #0]
 800acd8:	605a      	str	r2, [r3, #4]
 800acda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800acdc:	463b      	mov	r3, r7
 800acde:	2200      	movs	r2, #0
 800ace0:	601a      	str	r2, [r3, #0]
 800ace2:	605a      	str	r2, [r3, #4]
 800ace4:	609a      	str	r2, [r3, #8]
 800ace6:	60da      	str	r2, [r3, #12]
 800ace8:	611a      	str	r2, [r3, #16]
 800acea:	615a      	str	r2, [r3, #20]
 800acec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800acee:	4b2c      	ldr	r3, [pc, #176]	; (800ada0 <MX_TIM5_Init+0xe4>)
 800acf0:	4a2c      	ldr	r2, [pc, #176]	; (800ada4 <MX_TIM5_Init+0xe8>)
 800acf2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800acf4:	4b2a      	ldr	r3, [pc, #168]	; (800ada0 <MX_TIM5_Init+0xe4>)
 800acf6:	2200      	movs	r2, #0
 800acf8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800acfa:	4b29      	ldr	r3, [pc, #164]	; (800ada0 <MX_TIM5_Init+0xe4>)
 800acfc:	2200      	movs	r2, #0
 800acfe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 800ad00:	4b27      	ldr	r3, [pc, #156]	; (800ada0 <MX_TIM5_Init+0xe4>)
 800ad02:	2200      	movs	r2, #0
 800ad04:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ad06:	4b26      	ldr	r3, [pc, #152]	; (800ada0 <MX_TIM5_Init+0xe4>)
 800ad08:	2200      	movs	r2, #0
 800ad0a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ad0c:	4b24      	ldr	r3, [pc, #144]	; (800ada0 <MX_TIM5_Init+0xe4>)
 800ad0e:	2200      	movs	r2, #0
 800ad10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800ad12:	4823      	ldr	r0, [pc, #140]	; (800ada0 <MX_TIM5_Init+0xe4>)
 800ad14:	f7fb fd78 	bl	8006808 <HAL_TIM_Base_Init>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d001      	beq.n	800ad22 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800ad1e:	f000 fbe1 	bl	800b4e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ad22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800ad28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	481c      	ldr	r0, [pc, #112]	; (800ada0 <MX_TIM5_Init+0xe4>)
 800ad30:	f7fc f822 	bl	8006d78 <HAL_TIM_ConfigClockSource>
 800ad34:	4603      	mov	r3, r0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d001      	beq.n	800ad3e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800ad3a:	f000 fbd3 	bl	800b4e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800ad3e:	4818      	ldr	r0, [pc, #96]	; (800ada0 <MX_TIM5_Init+0xe4>)
 800ad40:	f7fb fdb8 	bl	80068b4 <HAL_TIM_PWM_Init>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d001      	beq.n	800ad4e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800ad4a:	f000 fbcb 	bl	800b4e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ad52:	2300      	movs	r3, #0
 800ad54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800ad56:	f107 031c 	add.w	r3, r7, #28
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	4810      	ldr	r0, [pc, #64]	; (800ada0 <MX_TIM5_Init+0xe4>)
 800ad5e:	f7fc fc85 	bl	800766c <HAL_TIMEx_MasterConfigSynchronization>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d001      	beq.n	800ad6c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800ad68:	f000 fbbc 	bl	800b4e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ad6c:	2360      	movs	r3, #96	; 0x60
 800ad6e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800ad70:	2300      	movs	r3, #0
 800ad72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ad74:	2300      	movs	r3, #0
 800ad76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800ad7c:	463b      	mov	r3, r7
 800ad7e:	220c      	movs	r2, #12
 800ad80:	4619      	mov	r1, r3
 800ad82:	4807      	ldr	r0, [pc, #28]	; (800ada0 <MX_TIM5_Init+0xe4>)
 800ad84:	f7fb fee0 	bl	8006b48 <HAL_TIM_PWM_ConfigChannel>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d001      	beq.n	800ad92 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800ad8e:	f000 fba9 	bl	800b4e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800ad92:	4803      	ldr	r0, [pc, #12]	; (800ada0 <MX_TIM5_Init+0xe4>)
 800ad94:	f000 ff34 	bl	800bc00 <HAL_TIM_MspPostInit>

}
 800ad98:	bf00      	nop
 800ad9a:	3738      	adds	r7, #56	; 0x38
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	200005c8 	.word	0x200005c8
 800ada4:	40000c00 	.word	0x40000c00

0800ada8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b088      	sub	sp, #32
 800adac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800adae:	f107 0310 	add.w	r3, r7, #16
 800adb2:	2200      	movs	r2, #0
 800adb4:	601a      	str	r2, [r3, #0]
 800adb6:	605a      	str	r2, [r3, #4]
 800adb8:	609a      	str	r2, [r3, #8]
 800adba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800adbc:	1d3b      	adds	r3, r7, #4
 800adbe:	2200      	movs	r2, #0
 800adc0:	601a      	str	r2, [r3, #0]
 800adc2:	605a      	str	r2, [r3, #4]
 800adc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800adc6:	4b1f      	ldr	r3, [pc, #124]	; (800ae44 <MX_TIM8_Init+0x9c>)
 800adc8:	4a1f      	ldr	r2, [pc, #124]	; (800ae48 <MX_TIM8_Init+0xa0>)
 800adca:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800adcc:	4b1d      	ldr	r3, [pc, #116]	; (800ae44 <MX_TIM8_Init+0x9c>)
 800adce:	2200      	movs	r2, #0
 800add0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800add2:	4b1c      	ldr	r3, [pc, #112]	; (800ae44 <MX_TIM8_Init+0x9c>)
 800add4:	2200      	movs	r2, #0
 800add6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 800add8:	4b1a      	ldr	r3, [pc, #104]	; (800ae44 <MX_TIM8_Init+0x9c>)
 800adda:	2200      	movs	r2, #0
 800addc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800adde:	4b19      	ldr	r3, [pc, #100]	; (800ae44 <MX_TIM8_Init+0x9c>)
 800ade0:	2200      	movs	r2, #0
 800ade2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800ade4:	4b17      	ldr	r3, [pc, #92]	; (800ae44 <MX_TIM8_Init+0x9c>)
 800ade6:	2200      	movs	r2, #0
 800ade8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800adea:	4b16      	ldr	r3, [pc, #88]	; (800ae44 <MX_TIM8_Init+0x9c>)
 800adec:	2200      	movs	r2, #0
 800adee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800adf0:	4814      	ldr	r0, [pc, #80]	; (800ae44 <MX_TIM8_Init+0x9c>)
 800adf2:	f7fb fd09 	bl	8006808 <HAL_TIM_Base_Init>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d001      	beq.n	800ae00 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800adfc:	f000 fb72 	bl	800b4e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ae00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800ae06:	f107 0310 	add.w	r3, r7, #16
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	480d      	ldr	r0, [pc, #52]	; (800ae44 <MX_TIM8_Init+0x9c>)
 800ae0e:	f7fb ffb3 	bl	8006d78 <HAL_TIM_ConfigClockSource>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d001      	beq.n	800ae1c <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 800ae18:	f000 fb64 	bl	800b4e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800ae20:	2300      	movs	r3, #0
 800ae22:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ae24:	2300      	movs	r3, #0
 800ae26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800ae28:	1d3b      	adds	r3, r7, #4
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	4805      	ldr	r0, [pc, #20]	; (800ae44 <MX_TIM8_Init+0x9c>)
 800ae2e:	f7fc fc1d 	bl	800766c <HAL_TIMEx_MasterConfigSynchronization>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d001      	beq.n	800ae3c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800ae38:	f000 fb54 	bl	800b4e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800ae3c:	bf00      	nop
 800ae3e:	3720      	adds	r7, #32
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	200003c4 	.word	0x200003c4
 800ae48:	40010400 	.word	0x40010400

0800ae4c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b088      	sub	sp, #32
 800ae50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800ae52:	1d3b      	adds	r3, r7, #4
 800ae54:	2200      	movs	r2, #0
 800ae56:	601a      	str	r2, [r3, #0]
 800ae58:	605a      	str	r2, [r3, #4]
 800ae5a:	609a      	str	r2, [r3, #8]
 800ae5c:	60da      	str	r2, [r3, #12]
 800ae5e:	611a      	str	r2, [r3, #16]
 800ae60:	615a      	str	r2, [r3, #20]
 800ae62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800ae64:	4b19      	ldr	r3, [pc, #100]	; (800aecc <MX_TIM12_Init+0x80>)
 800ae66:	4a1a      	ldr	r2, [pc, #104]	; (800aed0 <MX_TIM12_Init+0x84>)
 800ae68:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800ae6a:	4b18      	ldr	r3, [pc, #96]	; (800aecc <MX_TIM12_Init+0x80>)
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ae70:	4b16      	ldr	r3, [pc, #88]	; (800aecc <MX_TIM12_Init+0x80>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 800ae76:	4b15      	ldr	r3, [pc, #84]	; (800aecc <MX_TIM12_Init+0x80>)
 800ae78:	2200      	movs	r2, #0
 800ae7a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ae7c:	4b13      	ldr	r3, [pc, #76]	; (800aecc <MX_TIM12_Init+0x80>)
 800ae7e:	2200      	movs	r2, #0
 800ae80:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ae82:	4b12      	ldr	r3, [pc, #72]	; (800aecc <MX_TIM12_Init+0x80>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800ae88:	4810      	ldr	r0, [pc, #64]	; (800aecc <MX_TIM12_Init+0x80>)
 800ae8a:	f7fb fd13 	bl	80068b4 <HAL_TIM_PWM_Init>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d001      	beq.n	800ae98 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 800ae94:	f000 fb26 	bl	800b4e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ae98:	2360      	movs	r3, #96	; 0x60
 800ae9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800aea0:	2300      	movs	r3, #0
 800aea2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800aea4:	2300      	movs	r3, #0
 800aea6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800aea8:	1d3b      	adds	r3, r7, #4
 800aeaa:	2200      	movs	r2, #0
 800aeac:	4619      	mov	r1, r3
 800aeae:	4807      	ldr	r0, [pc, #28]	; (800aecc <MX_TIM12_Init+0x80>)
 800aeb0:	f7fb fe4a 	bl	8006b48 <HAL_TIM_PWM_ConfigChannel>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d001      	beq.n	800aebe <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 800aeba:	f000 fb13 	bl	800b4e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800aebe:	4803      	ldr	r0, [pc, #12]	; (800aecc <MX_TIM12_Init+0x80>)
 800aec0:	f000 fe9e 	bl	800bc00 <HAL_TIM_MspPostInit>

}
 800aec4:	bf00      	nop
 800aec6:	3720      	adds	r7, #32
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	20000900 	.word	0x20000900
 800aed0:	40001800 	.word	0x40001800

0800aed4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800aed8:	4b14      	ldr	r3, [pc, #80]	; (800af2c <MX_USART1_UART_Init+0x58>)
 800aeda:	4a15      	ldr	r2, [pc, #84]	; (800af30 <MX_USART1_UART_Init+0x5c>)
 800aedc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800aede:	4b13      	ldr	r3, [pc, #76]	; (800af2c <MX_USART1_UART_Init+0x58>)
 800aee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800aee4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800aee6:	4b11      	ldr	r3, [pc, #68]	; (800af2c <MX_USART1_UART_Init+0x58>)
 800aee8:	2200      	movs	r2, #0
 800aeea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800aeec:	4b0f      	ldr	r3, [pc, #60]	; (800af2c <MX_USART1_UART_Init+0x58>)
 800aeee:	2200      	movs	r2, #0
 800aef0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800aef2:	4b0e      	ldr	r3, [pc, #56]	; (800af2c <MX_USART1_UART_Init+0x58>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800aef8:	4b0c      	ldr	r3, [pc, #48]	; (800af2c <MX_USART1_UART_Init+0x58>)
 800aefa:	220c      	movs	r2, #12
 800aefc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aefe:	4b0b      	ldr	r3, [pc, #44]	; (800af2c <MX_USART1_UART_Init+0x58>)
 800af00:	2200      	movs	r2, #0
 800af02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800af04:	4b09      	ldr	r3, [pc, #36]	; (800af2c <MX_USART1_UART_Init+0x58>)
 800af06:	2200      	movs	r2, #0
 800af08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800af0a:	4b08      	ldr	r3, [pc, #32]	; (800af2c <MX_USART1_UART_Init+0x58>)
 800af0c:	2200      	movs	r2, #0
 800af0e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800af10:	4b06      	ldr	r3, [pc, #24]	; (800af2c <MX_USART1_UART_Init+0x58>)
 800af12:	2200      	movs	r2, #0
 800af14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800af16:	4805      	ldr	r0, [pc, #20]	; (800af2c <MX_USART1_UART_Init+0x58>)
 800af18:	f7fc fca0 	bl	800785c <HAL_UART_Init>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800af22:	f000 fadf 	bl	800b4e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800af26:	bf00      	nop
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	20000788 	.word	0x20000788
 800af30:	40011000 	.word	0x40011000

0800af34 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b088      	sub	sp, #32
 800af38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800af3a:	1d3b      	adds	r3, r7, #4
 800af3c:	2200      	movs	r2, #0
 800af3e:	601a      	str	r2, [r3, #0]
 800af40:	605a      	str	r2, [r3, #4]
 800af42:	609a      	str	r2, [r3, #8]
 800af44:	60da      	str	r2, [r3, #12]
 800af46:	611a      	str	r2, [r3, #16]
 800af48:	615a      	str	r2, [r3, #20]
 800af4a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800af4c:	4b1f      	ldr	r3, [pc, #124]	; (800afcc <MX_FMC_Init+0x98>)
 800af4e:	4a20      	ldr	r2, [pc, #128]	; (800afd0 <MX_FMC_Init+0x9c>)
 800af50:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800af52:	4b1e      	ldr	r3, [pc, #120]	; (800afcc <MX_FMC_Init+0x98>)
 800af54:	2200      	movs	r2, #0
 800af56:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800af58:	4b1c      	ldr	r3, [pc, #112]	; (800afcc <MX_FMC_Init+0x98>)
 800af5a:	2200      	movs	r2, #0
 800af5c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800af5e:	4b1b      	ldr	r3, [pc, #108]	; (800afcc <MX_FMC_Init+0x98>)
 800af60:	2204      	movs	r2, #4
 800af62:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800af64:	4b19      	ldr	r3, [pc, #100]	; (800afcc <MX_FMC_Init+0x98>)
 800af66:	2210      	movs	r2, #16
 800af68:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800af6a:	4b18      	ldr	r3, [pc, #96]	; (800afcc <MX_FMC_Init+0x98>)
 800af6c:	2240      	movs	r2, #64	; 0x40
 800af6e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800af70:	4b16      	ldr	r3, [pc, #88]	; (800afcc <MX_FMC_Init+0x98>)
 800af72:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800af76:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800af78:	4b14      	ldr	r3, [pc, #80]	; (800afcc <MX_FMC_Init+0x98>)
 800af7a:	2200      	movs	r2, #0
 800af7c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800af7e:	4b13      	ldr	r3, [pc, #76]	; (800afcc <MX_FMC_Init+0x98>)
 800af80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af84:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800af86:	4b11      	ldr	r3, [pc, #68]	; (800afcc <MX_FMC_Init+0x98>)
 800af88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800af8c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800af8e:	4b0f      	ldr	r3, [pc, #60]	; (800afcc <MX_FMC_Init+0x98>)
 800af90:	2200      	movs	r2, #0
 800af92:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800af94:	2302      	movs	r3, #2
 800af96:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800af98:	2307      	movs	r3, #7
 800af9a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800af9c:	2304      	movs	r3, #4
 800af9e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800afa0:	2307      	movs	r3, #7
 800afa2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800afa4:	2303      	movs	r3, #3
 800afa6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800afa8:	2302      	movs	r3, #2
 800afaa:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800afac:	2302      	movs	r3, #2
 800afae:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800afb0:	1d3b      	adds	r3, r7, #4
 800afb2:	4619      	mov	r1, r3
 800afb4:	4805      	ldr	r0, [pc, #20]	; (800afcc <MX_FMC_Init+0x98>)
 800afb6:	f7fb fab9 	bl	800652c <HAL_SDRAM_Init>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d001      	beq.n	800afc4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800afc0:	f000 fa90 	bl	800b4e4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800afc4:	bf00      	nop
 800afc6:	3720      	adds	r7, #32
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	20000940 	.word	0x20000940
 800afd0:	a0000140 	.word	0xa0000140

0800afd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b090      	sub	sp, #64	; 0x40
 800afd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800afde:	2200      	movs	r2, #0
 800afe0:	601a      	str	r2, [r3, #0]
 800afe2:	605a      	str	r2, [r3, #4]
 800afe4:	609a      	str	r2, [r3, #8]
 800afe6:	60da      	str	r2, [r3, #12]
 800afe8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800afea:	4bb0      	ldr	r3, [pc, #704]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800afec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afee:	4aaf      	ldr	r2, [pc, #700]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800aff0:	f043 0310 	orr.w	r3, r3, #16
 800aff4:	6313      	str	r3, [r2, #48]	; 0x30
 800aff6:	4bad      	ldr	r3, [pc, #692]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800aff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affa:	f003 0310 	and.w	r3, r3, #16
 800affe:	62bb      	str	r3, [r7, #40]	; 0x28
 800b000:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b002:	4baa      	ldr	r3, [pc, #680]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b006:	4aa9      	ldr	r2, [pc, #676]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b00c:	6313      	str	r3, [r2, #48]	; 0x30
 800b00e:	4ba7      	ldr	r3, [pc, #668]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b016:	627b      	str	r3, [r7, #36]	; 0x24
 800b018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b01a:	4ba4      	ldr	r3, [pc, #656]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b01e:	4aa3      	ldr	r2, [pc, #652]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b020:	f043 0302 	orr.w	r3, r3, #2
 800b024:	6313      	str	r3, [r2, #48]	; 0x30
 800b026:	4ba1      	ldr	r3, [pc, #644]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b02a:	f003 0302 	and.w	r3, r3, #2
 800b02e:	623b      	str	r3, [r7, #32]
 800b030:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b032:	4b9e      	ldr	r3, [pc, #632]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b036:	4a9d      	ldr	r2, [pc, #628]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b038:	f043 0308 	orr.w	r3, r3, #8
 800b03c:	6313      	str	r3, [r2, #48]	; 0x30
 800b03e:	4b9b      	ldr	r3, [pc, #620]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b042:	f003 0308 	and.w	r3, r3, #8
 800b046:	61fb      	str	r3, [r7, #28]
 800b048:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b04a:	4b98      	ldr	r3, [pc, #608]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b04c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b04e:	4a97      	ldr	r2, [pc, #604]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b050:	f043 0304 	orr.w	r3, r3, #4
 800b054:	6313      	str	r3, [r2, #48]	; 0x30
 800b056:	4b95      	ldr	r3, [pc, #596]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b05a:	f003 0304 	and.w	r3, r3, #4
 800b05e:	61bb      	str	r3, [r7, #24]
 800b060:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b062:	4b92      	ldr	r3, [pc, #584]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b066:	4a91      	ldr	r2, [pc, #580]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b068:	f043 0301 	orr.w	r3, r3, #1
 800b06c:	6313      	str	r3, [r2, #48]	; 0x30
 800b06e:	4b8f      	ldr	r3, [pc, #572]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b072:	f003 0301 	and.w	r3, r3, #1
 800b076:	617b      	str	r3, [r7, #20]
 800b078:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800b07a:	4b8c      	ldr	r3, [pc, #560]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b07c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b07e:	4a8b      	ldr	r2, [pc, #556]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b080:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b084:	6313      	str	r3, [r2, #48]	; 0x30
 800b086:	4b89      	ldr	r3, [pc, #548]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b08a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b08e:	613b      	str	r3, [r7, #16]
 800b090:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800b092:	4b86      	ldr	r3, [pc, #536]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b096:	4a85      	ldr	r2, [pc, #532]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b09c:	6313      	str	r3, [r2, #48]	; 0x30
 800b09e:	4b83      	ldr	r3, [pc, #524]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0a6:	60fb      	str	r3, [r7, #12]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800b0aa:	4b80      	ldr	r3, [pc, #512]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ae:	4a7f      	ldr	r2, [pc, #508]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b0b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b0b4:	6313      	str	r3, [r2, #48]	; 0x30
 800b0b6:	4b7d      	ldr	r3, [pc, #500]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0be:	60bb      	str	r3, [r7, #8]
 800b0c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800b0c2:	4b7a      	ldr	r3, [pc, #488]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c6:	4a79      	ldr	r2, [pc, #484]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b0c8:	f043 0320 	orr.w	r3, r3, #32
 800b0cc:	6313      	str	r3, [r2, #48]	; 0x30
 800b0ce:	4b77      	ldr	r3, [pc, #476]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d2:	f003 0320 	and.w	r3, r3, #32
 800b0d6:	607b      	str	r3, [r7, #4]
 800b0d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b0da:	4b74      	ldr	r3, [pc, #464]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b0dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0de:	4a73      	ldr	r2, [pc, #460]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b0e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0e4:	6313      	str	r3, [r2, #48]	; 0x30
 800b0e6:	4b71      	ldr	r3, [pc, #452]	; (800b2ac <MX_GPIO_Init+0x2d8>)
 800b0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0ee:	603b      	str	r3, [r7, #0]
 800b0f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, GPIO_PIN_SET);
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	2110      	movs	r1, #16
 800b0f6:	486e      	ldr	r0, [pc, #440]	; (800b2b0 <MX_GPIO_Init+0x2dc>)
 800b0f8:	f7f7 f8cc 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	2120      	movs	r1, #32
 800b100:	486c      	ldr	r0, [pc, #432]	; (800b2b4 <MX_GPIO_Init+0x2e0>)
 800b102:	f7f7 f8c7 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800b106:	2200      	movs	r2, #0
 800b108:	210c      	movs	r1, #12
 800b10a:	486b      	ldr	r0, [pc, #428]	; (800b2b8 <MX_GPIO_Init+0x2e4>)
 800b10c:	f7f7 f8c2 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800b110:	2201      	movs	r2, #1
 800b112:	2108      	movs	r1, #8
 800b114:	4869      	ldr	r0, [pc, #420]	; (800b2bc <MX_GPIO_Init+0x2e8>)
 800b116:	f7f7 f8bd 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800b11a:	2201      	movs	r2, #1
 800b11c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b120:	4865      	ldr	r0, [pc, #404]	; (800b2b8 <MX_GPIO_Init+0x2e4>)
 800b122:	f7f7 f8b7 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800b126:	2200      	movs	r2, #0
 800b128:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b12c:	4864      	ldr	r0, [pc, #400]	; (800b2c0 <MX_GPIO_Init+0x2ec>)
 800b12e:	f7f7 f8b1 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GAME_STATE_LED_GPIO_Port, GAME_STATE_LED_Pin, GPIO_PIN_RESET);
 800b132:	2200      	movs	r2, #0
 800b134:	2180      	movs	r1, #128	; 0x80
 800b136:	4863      	ldr	r0, [pc, #396]	; (800b2c4 <MX_GPIO_Init+0x2f0>)
 800b138:	f7f7 f8ac 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_RED_GPIO_Port, RGB_RED_Pin, GPIO_PIN_SET);
 800b13c:	2201      	movs	r2, #1
 800b13e:	2140      	movs	r1, #64	; 0x40
 800b140:	4860      	ldr	r0, [pc, #384]	; (800b2c4 <MX_GPIO_Init+0x2f0>)
 800b142:	f7f7 f8a7 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800b146:	2200      	movs	r2, #0
 800b148:	2188      	movs	r1, #136	; 0x88
 800b14a:	485f      	ldr	r0, [pc, #380]	; (800b2c8 <MX_GPIO_Init+0x2f4>)
 800b14c:	f7f7 f8a2 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, GPIO_PIN_SET);
 800b150:	2201      	movs	r2, #1
 800b152:	2140      	movs	r1, #64	; 0x40
 800b154:	485c      	ldr	r0, [pc, #368]	; (800b2c8 <MX_GPIO_Init+0x2f4>)
 800b156:	f7f7 f89d 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800b15a:	2308      	movs	r3, #8
 800b15c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b15e:	2300      	movs	r3, #0
 800b160:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b162:	2300      	movs	r3, #0
 800b164:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800b166:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b16a:	4619      	mov	r1, r3
 800b16c:	4857      	ldr	r0, [pc, #348]	; (800b2cc <MX_GPIO_Init+0x2f8>)
 800b16e:	f7f6 fee7 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800b172:	f643 4323 	movw	r3, #15395	; 0x3c23
 800b176:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b178:	2302      	movs	r3, #2
 800b17a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b17c:	2300      	movs	r3, #0
 800b17e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b180:	2303      	movs	r3, #3
 800b182:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800b184:	230a      	movs	r3, #10
 800b186:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b188:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b18c:	4619      	mov	r1, r3
 800b18e:	4848      	ldr	r0, [pc, #288]	; (800b2b0 <MX_GPIO_Init+0x2dc>)
 800b190:	f7f6 fed6 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : RGB_GREEN_Pin */
  GPIO_InitStruct.Pin = RGB_GREEN_Pin;
 800b194:	2310      	movs	r3, #16
 800b196:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b198:	2301      	movs	r3, #1
 800b19a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b19c:	2300      	movs	r3, #0
 800b19e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(RGB_GREEN_GPIO_Port, &GPIO_InitStruct);
 800b1a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	4841      	ldr	r0, [pc, #260]	; (800b2b0 <MX_GPIO_Init+0x2dc>)
 800b1ac:	f7f6 fec8 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800b1b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b1be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	4842      	ldr	r0, [pc, #264]	; (800b2d0 <MX_GPIO_Init+0x2fc>)
 800b1c6:	f7f6 febb 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800b1ca:	2340      	movs	r3, #64	; 0x40
 800b1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800b1ce:	4b41      	ldr	r3, [pc, #260]	; (800b2d4 <MX_GPIO_Init+0x300>)
 800b1d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800b1d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b1da:	4619      	mov	r1, r3
 800b1dc:	4835      	ldr	r0, [pc, #212]	; (800b2b4 <MX_GPIO_Init+0x2e0>)
 800b1de:	f7f6 feaf 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800b1e2:	2320      	movs	r3, #32
 800b1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800b1f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	482e      	ldr	r0, [pc, #184]	; (800b2b4 <MX_GPIO_Init+0x2e0>)
 800b1fa:	f7f6 fea1 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800b1fe:	f241 030c 	movw	r3, #4108	; 0x100c
 800b202:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b204:	2301      	movs	r3, #1
 800b206:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b208:	2300      	movs	r3, #0
 800b20a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b20c:	2300      	movs	r3, #0
 800b20e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b210:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b214:	4619      	mov	r1, r3
 800b216:	4828      	ldr	r0, [pc, #160]	; (800b2b8 <MX_GPIO_Init+0x2e4>)
 800b218:	f7f6 fe92 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800b21c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b220:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b222:	2300      	movs	r3, #0
 800b224:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b226:	2300      	movs	r3, #0
 800b228:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800b22a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b22e:	4619      	mov	r1, r3
 800b230:	4824      	ldr	r0, [pc, #144]	; (800b2c4 <MX_GPIO_Init+0x2f0>)
 800b232:	f7f6 fe85 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800b236:	2308      	movs	r3, #8
 800b238:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b23a:	2301      	movs	r3, #1
 800b23c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b23e:	2300      	movs	r3, #0
 800b240:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b242:	2300      	movs	r3, #0
 800b244:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800b246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b24a:	4619      	mov	r1, r3
 800b24c:	481b      	ldr	r0, [pc, #108]	; (800b2bc <MX_GPIO_Init+0x2e8>)
 800b24e:	f7f6 fe77 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800b252:	2310      	movs	r3, #16
 800b254:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b256:	2300      	movs	r3, #0
 800b258:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b25a:	2300      	movs	r3, #0
 800b25c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800b25e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b262:	4619      	mov	r1, r3
 800b264:	4813      	ldr	r0, [pc, #76]	; (800b2b4 <MX_GPIO_Init+0x2e0>)
 800b266:	f7f6 fe6b 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800b26a:	f248 0304 	movw	r3, #32772	; 0x8004
 800b26e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b270:	2300      	movs	r3, #0
 800b272:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b274:	2300      	movs	r3, #0
 800b276:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b278:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b27c:	4619      	mov	r1, r3
 800b27e:	4810      	ldr	r0, [pc, #64]	; (800b2c0 <MX_GPIO_Init+0x2ec>)
 800b280:	f7f6 fe5e 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800b284:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b288:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b28a:	2301      	movs	r3, #1
 800b28c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b28e:	2300      	movs	r3, #0
 800b290:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b292:	2300      	movs	r3, #0
 800b294:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800b296:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b29a:	4619      	mov	r1, r3
 800b29c:	4808      	ldr	r0, [pc, #32]	; (800b2c0 <MX_GPIO_Init+0x2ec>)
 800b29e:	f7f6 fe4f 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800b2a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2a8:	e016      	b.n	800b2d8 <MX_GPIO_Init+0x304>
 800b2aa:	bf00      	nop
 800b2ac:	40023800 	.word	0x40023800
 800b2b0:	40020400 	.word	0x40020400
 800b2b4:	40020c00 	.word	0x40020c00
 800b2b8:	40022000 	.word	0x40022000
 800b2bc:	40022800 	.word	0x40022800
 800b2c0:	40021c00 	.word	0x40021c00
 800b2c4:	40020800 	.word	0x40020800
 800b2c8:	40021800 	.word	0x40021800
 800b2cc:	40021000 	.word	0x40021000
 800b2d0:	40022400 	.word	0x40022400
 800b2d4:	10120000 	.word	0x10120000
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800b2d8:	4b47      	ldr	r3, [pc, #284]	; (800b3f8 <MX_GPIO_Init+0x424>)
 800b2da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800b2e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	4845      	ldr	r0, [pc, #276]	; (800b3fc <MX_GPIO_Init+0x428>)
 800b2e8:	f7f6 fe2a 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : GAME_STATE_LED_Pin RGB_RED_Pin */
  GPIO_InitStruct.Pin = GAME_STATE_LED_Pin|RGB_RED_Pin;
 800b2ec:	23c0      	movs	r3, #192	; 0xc0
 800b2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b2fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b300:	4619      	mov	r1, r3
 800b302:	483f      	ldr	r0, [pc, #252]	; (800b400 <MX_GPIO_Init+0x42c>)
 800b304:	f7f6 fe1c 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800b308:	2310      	movs	r3, #16
 800b30a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b30c:	2302      	movs	r3, #2
 800b30e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b310:	2300      	movs	r3, #0
 800b312:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b314:	2303      	movs	r3, #3
 800b316:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800b318:	230a      	movs	r3, #10
 800b31a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800b31c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b320:	4619      	mov	r1, r3
 800b322:	4838      	ldr	r0, [pc, #224]	; (800b404 <MX_GPIO_Init+0x430>)
 800b324:	f7f6 fe0c 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin RGB_BLUE_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|RGB_BLUE_Pin|EXT_RST_Pin;
 800b328:	23c8      	movs	r3, #200	; 0xc8
 800b32a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b32c:	2301      	movs	r3, #1
 800b32e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b330:	2300      	movs	r3, #0
 800b332:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b334:	2300      	movs	r3, #0
 800b336:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b338:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b33c:	4619      	mov	r1, r3
 800b33e:	4832      	ldr	r0, [pc, #200]	; (800b408 <MX_GPIO_Init+0x434>)
 800b340:	f7f6 fdfe 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PLAYER_ONE_BTN_Pin */
  GPIO_InitStruct.Pin = PLAYER_ONE_BTN_Pin;
 800b344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b348:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b34a:	4b30      	ldr	r3, [pc, #192]	; (800b40c <MX_GPIO_Init+0x438>)
 800b34c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b34e:	2302      	movs	r3, #2
 800b350:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(PLAYER_ONE_BTN_GPIO_Port, &GPIO_InitStruct);
 800b352:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b356:	4619      	mov	r1, r3
 800b358:	482d      	ldr	r0, [pc, #180]	; (800b410 <MX_GPIO_Init+0x43c>)
 800b35a:	f7f6 fdf1 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800b35e:	2305      	movs	r3, #5
 800b360:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b362:	2302      	movs	r3, #2
 800b364:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b366:	2300      	movs	r3, #0
 800b368:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b36a:	2303      	movs	r3, #3
 800b36c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800b36e:	230a      	movs	r3, #10
 800b370:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b372:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b376:	4619      	mov	r1, r3
 800b378:	4821      	ldr	r0, [pc, #132]	; (800b400 <MX_GPIO_Init+0x42c>)
 800b37a:	f7f6 fde1 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800b37e:	2304      	movs	r3, #4
 800b380:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b382:	2300      	movs	r3, #0
 800b384:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b386:	2300      	movs	r3, #0
 800b388:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800b38a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b38e:	4619      	mov	r1, r3
 800b390:	481d      	ldr	r0, [pc, #116]	; (800b408 <MX_GPIO_Init+0x434>)
 800b392:	f7f6 fdd5 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_GAME_BTN_Pin */
  GPIO_InitStruct.Pin = START_GAME_BTN_Pin;
 800b396:	2301      	movs	r3, #1
 800b398:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b39a:	4b1c      	ldr	r3, [pc, #112]	; (800b40c <MX_GPIO_Init+0x438>)
 800b39c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b39e:	2302      	movs	r3, #2
 800b3a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(START_GAME_BTN_GPIO_Port, &GPIO_InitStruct);
 800b3a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	481a      	ldr	r0, [pc, #104]	; (800b414 <MX_GPIO_Init+0x440>)
 800b3aa:	f7f6 fdc9 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800b3ae:	2328      	movs	r3, #40	; 0x28
 800b3b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3b2:	2302      	movs	r3, #2
 800b3b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3ba:	2303      	movs	r3, #3
 800b3bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800b3be:	230a      	movs	r3, #10
 800b3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	4812      	ldr	r0, [pc, #72]	; (800b414 <MX_GPIO_Init+0x440>)
 800b3ca:	f7f6 fdb9 	bl	8001f40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	2101      	movs	r1, #1
 800b3d2:	2006      	movs	r0, #6
 800b3d4:	f7f6 f832 	bl	800143c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800b3d8:	2006      	movs	r0, #6
 800b3da:	f7f6 f84b 	bl	8001474 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800b3de:	2200      	movs	r2, #0
 800b3e0:	2101      	movs	r1, #1
 800b3e2:	2028      	movs	r0, #40	; 0x28
 800b3e4:	f7f6 f82a 	bl	800143c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800b3e8:	2028      	movs	r0, #40	; 0x28
 800b3ea:	f7f6 f843 	bl	8001474 <HAL_NVIC_EnableIRQ>

}
 800b3ee:	bf00      	nop
 800b3f0:	3740      	adds	r7, #64	; 0x40
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	10120000 	.word	0x10120000
 800b3fc:	40022000 	.word	0x40022000
 800b400:	40020800 	.word	0x40020800
 800b404:	40021c00 	.word	0x40021c00
 800b408:	40021800 	.word	0x40021800
 800b40c:	10110000 	.word	0x10110000
 800b410:	40021400 	.word	0x40021400
 800b414:	40020000 	.word	0x40020000

0800b418 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	4603      	mov	r3, r0
 800b420:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == START_GAME_BTN_Pin && game_state == WAITING) {
 800b422:	88fb      	ldrh	r3, [r7, #6]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d106      	bne.n	800b436 <HAL_GPIO_EXTI_Callback+0x1e>
 800b428:	4b1e      	ldr	r3, [pc, #120]	; (800b4a4 <HAL_GPIO_EXTI_Callback+0x8c>)
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d102      	bne.n	800b436 <HAL_GPIO_EXTI_Callback+0x1e>
		game_state = STARTED;
 800b430:	4b1c      	ldr	r3, [pc, #112]	; (800b4a4 <HAL_GPIO_EXTI_Callback+0x8c>)
 800b432:	2201      	movs	r2, #1
 800b434:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == PLAYER_ONE_BTN_Pin) {
 800b436:	88fb      	ldrh	r3, [r7, #6]
 800b438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b43c:	d12e      	bne.n	800b49c <HAL_GPIO_EXTI_Callback+0x84>
		if(game_state == STARTED) {
 800b43e:	4b19      	ldr	r3, [pc, #100]	; (800b4a4 <HAL_GPIO_EXTI_Callback+0x8c>)
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	2b01      	cmp	r3, #1
 800b444:	d10d      	bne.n	800b462 <HAL_GPIO_EXTI_Callback+0x4a>
			HAL_GPIO_WritePin(RGB_RED_GPIO_Port, RGB_RED_Pin, INVERTED_ON);
 800b446:	2200      	movs	r2, #0
 800b448:	2140      	movs	r1, #64	; 0x40
 800b44a:	4817      	ldr	r0, [pc, #92]	; (800b4a8 <HAL_GPIO_EXTI_Callback+0x90>)
 800b44c:	f7f6 ff22 	bl	8002294 <HAL_GPIO_WritePin>
			game_state = FINISHED;
 800b450:	4b14      	ldr	r3, [pc, #80]	; (800b4a4 <HAL_GPIO_EXTI_Callback+0x8c>)
 800b452:	2203      	movs	r2, #3
 800b454:	701a      	strb	r2, [r3, #0]
			round_counter++;
 800b456:	4b15      	ldr	r3, [pc, #84]	; (800b4ac <HAL_GPIO_EXTI_Callback+0x94>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	3301      	adds	r3, #1
 800b45c:	4a13      	ldr	r2, [pc, #76]	; (800b4ac <HAL_GPIO_EXTI_Callback+0x94>)
 800b45e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, INVERTED_ON);
			game_state = FINISHED;
			round_counter++;
		}
	}
}
 800b460:	e01c      	b.n	800b49c <HAL_GPIO_EXTI_Callback+0x84>
		} else if(game_state == REACTION) {
 800b462:	4b10      	ldr	r3, [pc, #64]	; (800b4a4 <HAL_GPIO_EXTI_Callback+0x8c>)
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	2b02      	cmp	r3, #2
 800b468:	d118      	bne.n	800b49c <HAL_GPIO_EXTI_Callback+0x84>
			player_one_timer_end = HAL_GetTick();
 800b46a:	f7f5 ff01 	bl	8001270 <HAL_GetTick>
 800b46e:	4602      	mov	r2, r0
 800b470:	4b0f      	ldr	r3, [pc, #60]	; (800b4b0 <HAL_GPIO_EXTI_Callback+0x98>)
 800b472:	601a      	str	r2, [r3, #0]
			player_one_reaction = player_one_timer_end - player_one_timer_start;
 800b474:	4b0e      	ldr	r3, [pc, #56]	; (800b4b0 <HAL_GPIO_EXTI_Callback+0x98>)
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	4b0e      	ldr	r3, [pc, #56]	; (800b4b4 <HAL_GPIO_EXTI_Callback+0x9c>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	1ad3      	subs	r3, r2, r3
 800b47e:	4a0e      	ldr	r2, [pc, #56]	; (800b4b8 <HAL_GPIO_EXTI_Callback+0xa0>)
 800b480:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, INVERTED_ON);
 800b482:	2200      	movs	r2, #0
 800b484:	2110      	movs	r1, #16
 800b486:	480d      	ldr	r0, [pc, #52]	; (800b4bc <HAL_GPIO_EXTI_Callback+0xa4>)
 800b488:	f7f6 ff04 	bl	8002294 <HAL_GPIO_WritePin>
			game_state = FINISHED;
 800b48c:	4b05      	ldr	r3, [pc, #20]	; (800b4a4 <HAL_GPIO_EXTI_Callback+0x8c>)
 800b48e:	2203      	movs	r2, #3
 800b490:	701a      	strb	r2, [r3, #0]
			round_counter++;
 800b492:	4b06      	ldr	r3, [pc, #24]	; (800b4ac <HAL_GPIO_EXTI_Callback+0x94>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	3301      	adds	r3, #1
 800b498:	4a04      	ldr	r2, [pc, #16]	; (800b4ac <HAL_GPIO_EXTI_Callback+0x94>)
 800b49a:	6013      	str	r3, [r2, #0]
}
 800b49c:	bf00      	nop
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	2000019c 	.word	0x2000019c
 800b4a8:	40020800 	.word	0x40020800
 800b4ac:	200001a0 	.word	0x200001a0
 800b4b0:	20000974 	.word	0x20000974
 800b4b4:	200008fc 	.word	0x200008fc
 800b4b8:	20000808 	.word	0x20000808
 800b4bc:	40020400 	.word	0x40020400

0800b4c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a04      	ldr	r2, [pc, #16]	; (800b4e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d101      	bne.n	800b4d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800b4d2:	f7f5 feb9 	bl	8001248 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800b4d6:	bf00      	nop
 800b4d8:	3708      	adds	r7, #8
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	40001000 	.word	0x40001000

0800b4e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800b4e8:	bf00      	nop
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
	...

0800b4f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800b4fa:	4b0f      	ldr	r3, [pc, #60]	; (800b538 <HAL_MspInit+0x44>)
 800b4fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4fe:	4a0e      	ldr	r2, [pc, #56]	; (800b538 <HAL_MspInit+0x44>)
 800b500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b504:	6413      	str	r3, [r2, #64]	; 0x40
 800b506:	4b0c      	ldr	r3, [pc, #48]	; (800b538 <HAL_MspInit+0x44>)
 800b508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b50a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b50e:	607b      	str	r3, [r7, #4]
 800b510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b512:	4b09      	ldr	r3, [pc, #36]	; (800b538 <HAL_MspInit+0x44>)
 800b514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b516:	4a08      	ldr	r2, [pc, #32]	; (800b538 <HAL_MspInit+0x44>)
 800b518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b51c:	6453      	str	r3, [r2, #68]	; 0x44
 800b51e:	4b06      	ldr	r3, [pc, #24]	; (800b538 <HAL_MspInit+0x44>)
 800b520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b526:	603b      	str	r3, [r7, #0]
 800b528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b52a:	bf00      	nop
 800b52c:	370c      	adds	r7, #12
 800b52e:	46bd      	mov	sp, r7
 800b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b534:	4770      	bx	lr
 800b536:	bf00      	nop
 800b538:	40023800 	.word	0x40023800

0800b53c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a0d      	ldr	r2, [pc, #52]	; (800b580 <HAL_DMA2D_MspInit+0x44>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d113      	bne.n	800b576 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800b54e:	4b0d      	ldr	r3, [pc, #52]	; (800b584 <HAL_DMA2D_MspInit+0x48>)
 800b550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b552:	4a0c      	ldr	r2, [pc, #48]	; (800b584 <HAL_DMA2D_MspInit+0x48>)
 800b554:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b558:	6313      	str	r3, [r2, #48]	; 0x30
 800b55a:	4b0a      	ldr	r3, [pc, #40]	; (800b584 <HAL_DMA2D_MspInit+0x48>)
 800b55c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b55e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b562:	60fb      	str	r3, [r7, #12]
 800b564:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800b566:	2200      	movs	r2, #0
 800b568:	2100      	movs	r1, #0
 800b56a:	205a      	movs	r0, #90	; 0x5a
 800b56c:	f7f5 ff66 	bl	800143c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800b570:	205a      	movs	r0, #90	; 0x5a
 800b572:	f7f5 ff7f 	bl	8001474 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800b576:	bf00      	nop
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	4002b000 	.word	0x4002b000
 800b584:	40023800 	.word	0x40023800

0800b588 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b08c      	sub	sp, #48	; 0x30
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b590:	f107 031c 	add.w	r3, r7, #28
 800b594:	2200      	movs	r2, #0
 800b596:	601a      	str	r2, [r3, #0]
 800b598:	605a      	str	r2, [r3, #4]
 800b59a:	609a      	str	r2, [r3, #8]
 800b59c:	60da      	str	r2, [r3, #12]
 800b59e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4a2f      	ldr	r2, [pc, #188]	; (800b664 <HAL_I2C_MspInit+0xdc>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d129      	bne.n	800b5fe <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b5aa:	4b2f      	ldr	r3, [pc, #188]	; (800b668 <HAL_I2C_MspInit+0xe0>)
 800b5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ae:	4a2e      	ldr	r2, [pc, #184]	; (800b668 <HAL_I2C_MspInit+0xe0>)
 800b5b0:	f043 0302 	orr.w	r3, r3, #2
 800b5b4:	6313      	str	r3, [r2, #48]	; 0x30
 800b5b6:	4b2c      	ldr	r3, [pc, #176]	; (800b668 <HAL_I2C_MspInit+0xe0>)
 800b5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ba:	f003 0302 	and.w	r3, r3, #2
 800b5be:	61bb      	str	r3, [r7, #24]
 800b5c0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800b5c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b5c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b5c8:	2312      	movs	r3, #18
 800b5ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b5d4:	2304      	movs	r3, #4
 800b5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b5d8:	f107 031c 	add.w	r3, r7, #28
 800b5dc:	4619      	mov	r1, r3
 800b5de:	4823      	ldr	r0, [pc, #140]	; (800b66c <HAL_I2C_MspInit+0xe4>)
 800b5e0:	f7f6 fcae 	bl	8001f40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b5e4:	4b20      	ldr	r3, [pc, #128]	; (800b668 <HAL_I2C_MspInit+0xe0>)
 800b5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e8:	4a1f      	ldr	r2, [pc, #124]	; (800b668 <HAL_I2C_MspInit+0xe0>)
 800b5ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b5ee:	6413      	str	r3, [r2, #64]	; 0x40
 800b5f0:	4b1d      	ldr	r3, [pc, #116]	; (800b668 <HAL_I2C_MspInit+0xe0>)
 800b5f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b5f8:	617b      	str	r3, [r7, #20]
 800b5fa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800b5fc:	e02d      	b.n	800b65a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	4a1b      	ldr	r2, [pc, #108]	; (800b670 <HAL_I2C_MspInit+0xe8>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d128      	bne.n	800b65a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800b608:	4b17      	ldr	r3, [pc, #92]	; (800b668 <HAL_I2C_MspInit+0xe0>)
 800b60a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b60c:	4a16      	ldr	r2, [pc, #88]	; (800b668 <HAL_I2C_MspInit+0xe0>)
 800b60e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b612:	6313      	str	r3, [r2, #48]	; 0x30
 800b614:	4b14      	ldr	r3, [pc, #80]	; (800b668 <HAL_I2C_MspInit+0xe0>)
 800b616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b61c:	613b      	str	r3, [r7, #16]
 800b61e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800b620:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800b624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b626:	2312      	movs	r3, #18
 800b628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b62a:	2301      	movs	r3, #1
 800b62c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b62e:	2303      	movs	r3, #3
 800b630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800b632:	2304      	movs	r3, #4
 800b634:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b636:	f107 031c 	add.w	r3, r7, #28
 800b63a:	4619      	mov	r1, r3
 800b63c:	480d      	ldr	r0, [pc, #52]	; (800b674 <HAL_I2C_MspInit+0xec>)
 800b63e:	f7f6 fc7f 	bl	8001f40 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800b642:	4b09      	ldr	r3, [pc, #36]	; (800b668 <HAL_I2C_MspInit+0xe0>)
 800b644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b646:	4a08      	ldr	r2, [pc, #32]	; (800b668 <HAL_I2C_MspInit+0xe0>)
 800b648:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b64c:	6413      	str	r3, [r2, #64]	; 0x40
 800b64e:	4b06      	ldr	r3, [pc, #24]	; (800b668 <HAL_I2C_MspInit+0xe0>)
 800b650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b656:	60fb      	str	r3, [r7, #12]
 800b658:	68fb      	ldr	r3, [r7, #12]
}
 800b65a:	bf00      	nop
 800b65c:	3730      	adds	r7, #48	; 0x30
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	40005400 	.word	0x40005400
 800b668:	40023800 	.word	0x40023800
 800b66c:	40020400 	.word	0x40020400
 800b670:	40005c00 	.word	0x40005c00
 800b674:	40021c00 	.word	0x40021c00

0800b678 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b08e      	sub	sp, #56	; 0x38
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b684:	2200      	movs	r2, #0
 800b686:	601a      	str	r2, [r3, #0]
 800b688:	605a      	str	r2, [r3, #4]
 800b68a:	609a      	str	r2, [r3, #8]
 800b68c:	60da      	str	r2, [r3, #12]
 800b68e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4a55      	ldr	r2, [pc, #340]	; (800b7ec <HAL_LTDC_MspInit+0x174>)
 800b696:	4293      	cmp	r3, r2
 800b698:	f040 80a3 	bne.w	800b7e2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800b69c:	4b54      	ldr	r3, [pc, #336]	; (800b7f0 <HAL_LTDC_MspInit+0x178>)
 800b69e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6a0:	4a53      	ldr	r2, [pc, #332]	; (800b7f0 <HAL_LTDC_MspInit+0x178>)
 800b6a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b6a6:	6453      	str	r3, [r2, #68]	; 0x44
 800b6a8:	4b51      	ldr	r3, [pc, #324]	; (800b7f0 <HAL_LTDC_MspInit+0x178>)
 800b6aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b6b0:	623b      	str	r3, [r7, #32]
 800b6b2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b6b4:	4b4e      	ldr	r3, [pc, #312]	; (800b7f0 <HAL_LTDC_MspInit+0x178>)
 800b6b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6b8:	4a4d      	ldr	r2, [pc, #308]	; (800b7f0 <HAL_LTDC_MspInit+0x178>)
 800b6ba:	f043 0310 	orr.w	r3, r3, #16
 800b6be:	6313      	str	r3, [r2, #48]	; 0x30
 800b6c0:	4b4b      	ldr	r3, [pc, #300]	; (800b7f0 <HAL_LTDC_MspInit+0x178>)
 800b6c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c4:	f003 0310 	and.w	r3, r3, #16
 800b6c8:	61fb      	str	r3, [r7, #28]
 800b6ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800b6cc:	4b48      	ldr	r3, [pc, #288]	; (800b7f0 <HAL_LTDC_MspInit+0x178>)
 800b6ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6d0:	4a47      	ldr	r2, [pc, #284]	; (800b7f0 <HAL_LTDC_MspInit+0x178>)
 800b6d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b6d6:	6313      	str	r3, [r2, #48]	; 0x30
 800b6d8:	4b45      	ldr	r3, [pc, #276]	; (800b7f0 <HAL_LTDC_MspInit+0x178>)
 800b6da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b6e0:	61bb      	str	r3, [r7, #24]
 800b6e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800b6e4:	4b42      	ldr	r3, [pc, #264]	; (800b7f0 <HAL_LTDC_MspInit+0x178>)
 800b6e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e8:	4a41      	ldr	r2, [pc, #260]	; (800b7f0 <HAL_LTDC_MspInit+0x178>)
 800b6ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b6ee:	6313      	str	r3, [r2, #48]	; 0x30
 800b6f0:	4b3f      	ldr	r3, [pc, #252]	; (800b7f0 <HAL_LTDC_MspInit+0x178>)
 800b6f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6f8:	617b      	str	r3, [r7, #20]
 800b6fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b6fc:	4b3c      	ldr	r3, [pc, #240]	; (800b7f0 <HAL_LTDC_MspInit+0x178>)
 800b6fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b700:	4a3b      	ldr	r2, [pc, #236]	; (800b7f0 <HAL_LTDC_MspInit+0x178>)
 800b702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b706:	6313      	str	r3, [r2, #48]	; 0x30
 800b708:	4b39      	ldr	r3, [pc, #228]	; (800b7f0 <HAL_LTDC_MspInit+0x178>)
 800b70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b70c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b710:	613b      	str	r3, [r7, #16]
 800b712:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800b714:	4b36      	ldr	r3, [pc, #216]	; (800b7f0 <HAL_LTDC_MspInit+0x178>)
 800b716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b718:	4a35      	ldr	r2, [pc, #212]	; (800b7f0 <HAL_LTDC_MspInit+0x178>)
 800b71a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b71e:	6313      	str	r3, [r2, #48]	; 0x30
 800b720:	4b33      	ldr	r3, [pc, #204]	; (800b7f0 <HAL_LTDC_MspInit+0x178>)
 800b722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b728:	60fb      	str	r3, [r7, #12]
 800b72a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800b72c:	2310      	movs	r3, #16
 800b72e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b730:	2302      	movs	r3, #2
 800b732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b734:	2300      	movs	r3, #0
 800b736:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b738:	2300      	movs	r3, #0
 800b73a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800b73c:	230e      	movs	r3, #14
 800b73e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800b740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b744:	4619      	mov	r1, r3
 800b746:	482b      	ldr	r0, [pc, #172]	; (800b7f4 <HAL_LTDC_MspInit+0x17c>)
 800b748:	f7f6 fbfa 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800b74c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800b750:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b752:	2302      	movs	r3, #2
 800b754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b756:	2300      	movs	r3, #0
 800b758:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b75a:	2300      	movs	r3, #0
 800b75c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800b75e:	230e      	movs	r3, #14
 800b760:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800b762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b766:	4619      	mov	r1, r3
 800b768:	4823      	ldr	r0, [pc, #140]	; (800b7f8 <HAL_LTDC_MspInit+0x180>)
 800b76a:	f7f6 fbe9 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800b76e:	23f7      	movs	r3, #247	; 0xf7
 800b770:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b772:	2302      	movs	r3, #2
 800b774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b776:	2300      	movs	r3, #0
 800b778:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b77a:	2300      	movs	r3, #0
 800b77c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800b77e:	230e      	movs	r3, #14
 800b780:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800b782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b786:	4619      	mov	r1, r3
 800b788:	481c      	ldr	r0, [pc, #112]	; (800b7fc <HAL_LTDC_MspInit+0x184>)
 800b78a:	f7f6 fbd9 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800b78e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b792:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b794:	2302      	movs	r3, #2
 800b796:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b798:	2300      	movs	r3, #0
 800b79a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b79c:	2300      	movs	r3, #0
 800b79e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800b7a0:	2309      	movs	r3, #9
 800b7a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800b7a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	4815      	ldr	r0, [pc, #84]	; (800b800 <HAL_LTDC_MspInit+0x188>)
 800b7ac:	f7f6 fbc8 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800b7b0:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800b7b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7b6:	2302      	movs	r3, #2
 800b7b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800b7c2:	230e      	movs	r3, #14
 800b7c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b7c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	480d      	ldr	r0, [pc, #52]	; (800b804 <HAL_LTDC_MspInit+0x18c>)
 800b7ce:	f7f6 fbb7 	bl	8001f40 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	2058      	movs	r0, #88	; 0x58
 800b7d8:	f7f5 fe30 	bl	800143c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800b7dc:	2058      	movs	r0, #88	; 0x58
 800b7de:	f7f5 fe49 	bl	8001474 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800b7e2:	bf00      	nop
 800b7e4:	3738      	adds	r7, #56	; 0x38
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	40016800 	.word	0x40016800
 800b7f0:	40023800 	.word	0x40023800
 800b7f4:	40021000 	.word	0x40021000
 800b7f8:	40022400 	.word	0x40022400
 800b7fc:	40022800 	.word	0x40022800
 800b800:	40021800 	.word	0x40021800
 800b804:	40022000 	.word	0x40022000

0800b808 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b08c      	sub	sp, #48	; 0x30
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b810:	f107 031c 	add.w	r3, r7, #28
 800b814:	2200      	movs	r2, #0
 800b816:	601a      	str	r2, [r3, #0]
 800b818:	605a      	str	r2, [r3, #4]
 800b81a:	609a      	str	r2, [r3, #8]
 800b81c:	60da      	str	r2, [r3, #12]
 800b81e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a3b      	ldr	r2, [pc, #236]	; (800b914 <HAL_QSPI_MspInit+0x10c>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d170      	bne.n	800b90c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800b82a:	4b3b      	ldr	r3, [pc, #236]	; (800b918 <HAL_QSPI_MspInit+0x110>)
 800b82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b82e:	4a3a      	ldr	r2, [pc, #232]	; (800b918 <HAL_QSPI_MspInit+0x110>)
 800b830:	f043 0302 	orr.w	r3, r3, #2
 800b834:	6393      	str	r3, [r2, #56]	; 0x38
 800b836:	4b38      	ldr	r3, [pc, #224]	; (800b918 <HAL_QSPI_MspInit+0x110>)
 800b838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b83a:	f003 0302 	and.w	r3, r3, #2
 800b83e:	61bb      	str	r3, [r7, #24]
 800b840:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b842:	4b35      	ldr	r3, [pc, #212]	; (800b918 <HAL_QSPI_MspInit+0x110>)
 800b844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b846:	4a34      	ldr	r2, [pc, #208]	; (800b918 <HAL_QSPI_MspInit+0x110>)
 800b848:	f043 0310 	orr.w	r3, r3, #16
 800b84c:	6313      	str	r3, [r2, #48]	; 0x30
 800b84e:	4b32      	ldr	r3, [pc, #200]	; (800b918 <HAL_QSPI_MspInit+0x110>)
 800b850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b852:	f003 0310 	and.w	r3, r3, #16
 800b856:	617b      	str	r3, [r7, #20]
 800b858:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b85a:	4b2f      	ldr	r3, [pc, #188]	; (800b918 <HAL_QSPI_MspInit+0x110>)
 800b85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b85e:	4a2e      	ldr	r2, [pc, #184]	; (800b918 <HAL_QSPI_MspInit+0x110>)
 800b860:	f043 0302 	orr.w	r3, r3, #2
 800b864:	6313      	str	r3, [r2, #48]	; 0x30
 800b866:	4b2c      	ldr	r3, [pc, #176]	; (800b918 <HAL_QSPI_MspInit+0x110>)
 800b868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b86a:	f003 0302 	and.w	r3, r3, #2
 800b86e:	613b      	str	r3, [r7, #16]
 800b870:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b872:	4b29      	ldr	r3, [pc, #164]	; (800b918 <HAL_QSPI_MspInit+0x110>)
 800b874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b876:	4a28      	ldr	r2, [pc, #160]	; (800b918 <HAL_QSPI_MspInit+0x110>)
 800b878:	f043 0308 	orr.w	r3, r3, #8
 800b87c:	6313      	str	r3, [r2, #48]	; 0x30
 800b87e:	4b26      	ldr	r3, [pc, #152]	; (800b918 <HAL_QSPI_MspInit+0x110>)
 800b880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b882:	f003 0308 	and.w	r3, r3, #8
 800b886:	60fb      	str	r3, [r7, #12]
 800b888:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800b88a:	2304      	movs	r3, #4
 800b88c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b88e:	2302      	movs	r3, #2
 800b890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b892:	2300      	movs	r3, #0
 800b894:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b896:	2303      	movs	r3, #3
 800b898:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800b89a:	2309      	movs	r3, #9
 800b89c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800b89e:	f107 031c 	add.w	r3, r7, #28
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	481d      	ldr	r0, [pc, #116]	; (800b91c <HAL_QSPI_MspInit+0x114>)
 800b8a6:	f7f6 fb4b 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800b8aa:	2340      	movs	r3, #64	; 0x40
 800b8ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8ae:	2302      	movs	r3, #2
 800b8b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8b6:	2303      	movs	r3, #3
 800b8b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800b8ba:	230a      	movs	r3, #10
 800b8bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800b8be:	f107 031c 	add.w	r3, r7, #28
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	4816      	ldr	r0, [pc, #88]	; (800b920 <HAL_QSPI_MspInit+0x118>)
 800b8c6:	f7f6 fb3b 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b8ca:	2304      	movs	r3, #4
 800b8cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8ce:	2302      	movs	r3, #2
 800b8d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8d6:	2303      	movs	r3, #3
 800b8d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800b8da:	2309      	movs	r3, #9
 800b8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b8de:	f107 031c 	add.w	r3, r7, #28
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	480e      	ldr	r0, [pc, #56]	; (800b920 <HAL_QSPI_MspInit+0x118>)
 800b8e6:	f7f6 fb2b 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800b8ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b8ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8f0:	2302      	movs	r3, #2
 800b8f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800b8fc:	2309      	movs	r3, #9
 800b8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b900:	f107 031c 	add.w	r3, r7, #28
 800b904:	4619      	mov	r1, r3
 800b906:	4807      	ldr	r0, [pc, #28]	; (800b924 <HAL_QSPI_MspInit+0x11c>)
 800b908:	f7f6 fb1a 	bl	8001f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800b90c:	bf00      	nop
 800b90e:	3730      	adds	r7, #48	; 0x30
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	a0001000 	.word	0xa0001000
 800b918:	40023800 	.word	0x40023800
 800b91c:	40021000 	.word	0x40021000
 800b920:	40020400 	.word	0x40020400
 800b924:	40020c00 	.word	0x40020c00

0800b928 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800b928:	b480      	push	{r7}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a0a      	ldr	r2, [pc, #40]	; (800b960 <HAL_RNG_MspInit+0x38>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d10b      	bne.n	800b952 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800b93a:	4b0a      	ldr	r3, [pc, #40]	; (800b964 <HAL_RNG_MspInit+0x3c>)
 800b93c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b93e:	4a09      	ldr	r2, [pc, #36]	; (800b964 <HAL_RNG_MspInit+0x3c>)
 800b940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b944:	6353      	str	r3, [r2, #52]	; 0x34
 800b946:	4b07      	ldr	r3, [pc, #28]	; (800b964 <HAL_RNG_MspInit+0x3c>)
 800b948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b94a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b94e:	60fb      	str	r3, [r7, #12]
 800b950:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800b952:	bf00      	nop
 800b954:	3714      	adds	r7, #20
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr
 800b95e:	bf00      	nop
 800b960:	50060800 	.word	0x50060800
 800b964:	40023800 	.word	0x40023800

0800b968 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a07      	ldr	r2, [pc, #28]	; (800b994 <HAL_RTC_MspInit+0x2c>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d105      	bne.n	800b986 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b97a:	4b07      	ldr	r3, [pc, #28]	; (800b998 <HAL_RTC_MspInit+0x30>)
 800b97c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b97e:	4a06      	ldr	r2, [pc, #24]	; (800b998 <HAL_RTC_MspInit+0x30>)
 800b980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b984:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800b986:	bf00      	nop
 800b988:	370c      	adds	r7, #12
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	40002800 	.word	0x40002800
 800b998:	40023800 	.word	0x40023800

0800b99c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b08a      	sub	sp, #40	; 0x28
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9a4:	f107 0314 	add.w	r3, r7, #20
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	601a      	str	r2, [r3, #0]
 800b9ac:	605a      	str	r2, [r3, #4]
 800b9ae:	609a      	str	r2, [r3, #8]
 800b9b0:	60da      	str	r2, [r3, #12]
 800b9b2:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800b9bc:	d127      	bne.n	800ba0e <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800b9be:	4b16      	ldr	r3, [pc, #88]	; (800ba18 <HAL_SPDIFRX_MspInit+0x7c>)
 800b9c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9c2:	4a15      	ldr	r2, [pc, #84]	; (800ba18 <HAL_SPDIFRX_MspInit+0x7c>)
 800b9c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9c8:	6413      	str	r3, [r2, #64]	; 0x40
 800b9ca:	4b13      	ldr	r3, [pc, #76]	; (800ba18 <HAL_SPDIFRX_MspInit+0x7c>)
 800b9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9d2:	613b      	str	r3, [r7, #16]
 800b9d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b9d6:	4b10      	ldr	r3, [pc, #64]	; (800ba18 <HAL_SPDIFRX_MspInit+0x7c>)
 800b9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9da:	4a0f      	ldr	r2, [pc, #60]	; (800ba18 <HAL_SPDIFRX_MspInit+0x7c>)
 800b9dc:	f043 0308 	orr.w	r3, r3, #8
 800b9e0:	6313      	str	r3, [r2, #48]	; 0x30
 800b9e2:	4b0d      	ldr	r3, [pc, #52]	; (800ba18 <HAL_SPDIFRX_MspInit+0x7c>)
 800b9e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9e6:	f003 0308 	and.w	r3, r3, #8
 800b9ea:	60fb      	str	r3, [r7, #12]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800b9ee:	2380      	movs	r3, #128	; 0x80
 800b9f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9f2:	2302      	movs	r3, #2
 800b9f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800b9fe:	2308      	movs	r3, #8
 800ba00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800ba02:	f107 0314 	add.w	r3, r7, #20
 800ba06:	4619      	mov	r1, r3
 800ba08:	4804      	ldr	r0, [pc, #16]	; (800ba1c <HAL_SPDIFRX_MspInit+0x80>)
 800ba0a:	f7f6 fa99 	bl	8001f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800ba0e:	bf00      	nop
 800ba10:	3728      	adds	r7, #40	; 0x28
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	40023800 	.word	0x40023800
 800ba1c:	40020c00 	.word	0x40020c00

0800ba20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b08a      	sub	sp, #40	; 0x28
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba28:	f107 0314 	add.w	r3, r7, #20
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	601a      	str	r2, [r3, #0]
 800ba30:	605a      	str	r2, [r3, #4]
 800ba32:	609a      	str	r2, [r3, #8]
 800ba34:	60da      	str	r2, [r3, #12]
 800ba36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a25      	ldr	r2, [pc, #148]	; (800bad4 <HAL_SPI_MspInit+0xb4>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d144      	bne.n	800bacc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800ba42:	4b25      	ldr	r3, [pc, #148]	; (800bad8 <HAL_SPI_MspInit+0xb8>)
 800ba44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba46:	4a24      	ldr	r2, [pc, #144]	; (800bad8 <HAL_SPI_MspInit+0xb8>)
 800ba48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba4c:	6413      	str	r3, [r2, #64]	; 0x40
 800ba4e:	4b22      	ldr	r3, [pc, #136]	; (800bad8 <HAL_SPI_MspInit+0xb8>)
 800ba50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba56:	613b      	str	r3, [r7, #16]
 800ba58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800ba5a:	4b1f      	ldr	r3, [pc, #124]	; (800bad8 <HAL_SPI_MspInit+0xb8>)
 800ba5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba5e:	4a1e      	ldr	r2, [pc, #120]	; (800bad8 <HAL_SPI_MspInit+0xb8>)
 800ba60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba64:	6313      	str	r3, [r2, #48]	; 0x30
 800ba66:	4b1c      	ldr	r3, [pc, #112]	; (800bad8 <HAL_SPI_MspInit+0xb8>)
 800ba68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba6e:	60fb      	str	r3, [r7, #12]
 800ba70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ba72:	4b19      	ldr	r3, [pc, #100]	; (800bad8 <HAL_SPI_MspInit+0xb8>)
 800ba74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba76:	4a18      	ldr	r2, [pc, #96]	; (800bad8 <HAL_SPI_MspInit+0xb8>)
 800ba78:	f043 0302 	orr.w	r3, r3, #2
 800ba7c:	6313      	str	r3, [r2, #48]	; 0x30
 800ba7e:	4b16      	ldr	r3, [pc, #88]	; (800bad8 <HAL_SPI_MspInit+0xb8>)
 800ba80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba82:	f003 0302 	and.w	r3, r3, #2
 800ba86:	60bb      	str	r3, [r7, #8]
 800ba88:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800ba8a:	2302      	movs	r3, #2
 800ba8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba8e:	2302      	movs	r3, #2
 800ba90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba92:	2300      	movs	r3, #0
 800ba94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ba96:	2300      	movs	r3, #0
 800ba98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800ba9a:	2305      	movs	r3, #5
 800ba9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800ba9e:	f107 0314 	add.w	r3, r7, #20
 800baa2:	4619      	mov	r1, r3
 800baa4:	480d      	ldr	r0, [pc, #52]	; (800badc <HAL_SPI_MspInit+0xbc>)
 800baa6:	f7f6 fa4b 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800baaa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800baae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bab0:	2302      	movs	r3, #2
 800bab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bab4:	2300      	movs	r3, #0
 800bab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bab8:	2300      	movs	r3, #0
 800baba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800babc:	2305      	movs	r3, #5
 800babe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bac0:	f107 0314 	add.w	r3, r7, #20
 800bac4:	4619      	mov	r1, r3
 800bac6:	4806      	ldr	r0, [pc, #24]	; (800bae0 <HAL_SPI_MspInit+0xc0>)
 800bac8:	f7f6 fa3a 	bl	8001f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800bacc:	bf00      	nop
 800bace:	3728      	adds	r7, #40	; 0x28
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	40003800 	.word	0x40003800
 800bad8:	40023800 	.word	0x40023800
 800badc:	40022000 	.word	0x40022000
 800bae0:	40020400 	.word	0x40020400

0800bae4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b089      	sub	sp, #36	; 0x24
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a2e      	ldr	r2, [pc, #184]	; (800bbac <HAL_TIM_Base_MspInit+0xc8>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d10c      	bne.n	800bb10 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800baf6:	4b2e      	ldr	r3, [pc, #184]	; (800bbb0 <HAL_TIM_Base_MspInit+0xcc>)
 800baf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bafa:	4a2d      	ldr	r2, [pc, #180]	; (800bbb0 <HAL_TIM_Base_MspInit+0xcc>)
 800bafc:	f043 0301 	orr.w	r3, r3, #1
 800bb00:	6453      	str	r3, [r2, #68]	; 0x44
 800bb02:	4b2b      	ldr	r3, [pc, #172]	; (800bbb0 <HAL_TIM_Base_MspInit+0xcc>)
 800bb04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb06:	f003 0301 	and.w	r3, r3, #1
 800bb0a:	61fb      	str	r3, [r7, #28]
 800bb0c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800bb0e:	e046      	b.n	800bb9e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb18:	d10c      	bne.n	800bb34 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800bb1a:	4b25      	ldr	r3, [pc, #148]	; (800bbb0 <HAL_TIM_Base_MspInit+0xcc>)
 800bb1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb1e:	4a24      	ldr	r2, [pc, #144]	; (800bbb0 <HAL_TIM_Base_MspInit+0xcc>)
 800bb20:	f043 0301 	orr.w	r3, r3, #1
 800bb24:	6413      	str	r3, [r2, #64]	; 0x40
 800bb26:	4b22      	ldr	r3, [pc, #136]	; (800bbb0 <HAL_TIM_Base_MspInit+0xcc>)
 800bb28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb2a:	f003 0301 	and.w	r3, r3, #1
 800bb2e:	61bb      	str	r3, [r7, #24]
 800bb30:	69bb      	ldr	r3, [r7, #24]
}
 800bb32:	e034      	b.n	800bb9e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4a1e      	ldr	r2, [pc, #120]	; (800bbb4 <HAL_TIM_Base_MspInit+0xd0>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d10c      	bne.n	800bb58 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800bb3e:	4b1c      	ldr	r3, [pc, #112]	; (800bbb0 <HAL_TIM_Base_MspInit+0xcc>)
 800bb40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb42:	4a1b      	ldr	r2, [pc, #108]	; (800bbb0 <HAL_TIM_Base_MspInit+0xcc>)
 800bb44:	f043 0302 	orr.w	r3, r3, #2
 800bb48:	6413      	str	r3, [r2, #64]	; 0x40
 800bb4a:	4b19      	ldr	r3, [pc, #100]	; (800bbb0 <HAL_TIM_Base_MspInit+0xcc>)
 800bb4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb4e:	f003 0302 	and.w	r3, r3, #2
 800bb52:	617b      	str	r3, [r7, #20]
 800bb54:	697b      	ldr	r3, [r7, #20]
}
 800bb56:	e022      	b.n	800bb9e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a16      	ldr	r2, [pc, #88]	; (800bbb8 <HAL_TIM_Base_MspInit+0xd4>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d10c      	bne.n	800bb7c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800bb62:	4b13      	ldr	r3, [pc, #76]	; (800bbb0 <HAL_TIM_Base_MspInit+0xcc>)
 800bb64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb66:	4a12      	ldr	r2, [pc, #72]	; (800bbb0 <HAL_TIM_Base_MspInit+0xcc>)
 800bb68:	f043 0308 	orr.w	r3, r3, #8
 800bb6c:	6413      	str	r3, [r2, #64]	; 0x40
 800bb6e:	4b10      	ldr	r3, [pc, #64]	; (800bbb0 <HAL_TIM_Base_MspInit+0xcc>)
 800bb70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb72:	f003 0308 	and.w	r3, r3, #8
 800bb76:	613b      	str	r3, [r7, #16]
 800bb78:	693b      	ldr	r3, [r7, #16]
}
 800bb7a:	e010      	b.n	800bb9e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a0e      	ldr	r2, [pc, #56]	; (800bbbc <HAL_TIM_Base_MspInit+0xd8>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d10b      	bne.n	800bb9e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800bb86:	4b0a      	ldr	r3, [pc, #40]	; (800bbb0 <HAL_TIM_Base_MspInit+0xcc>)
 800bb88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb8a:	4a09      	ldr	r2, [pc, #36]	; (800bbb0 <HAL_TIM_Base_MspInit+0xcc>)
 800bb8c:	f043 0302 	orr.w	r3, r3, #2
 800bb90:	6453      	str	r3, [r2, #68]	; 0x44
 800bb92:	4b07      	ldr	r3, [pc, #28]	; (800bbb0 <HAL_TIM_Base_MspInit+0xcc>)
 800bb94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb96:	f003 0302 	and.w	r3, r3, #2
 800bb9a:	60fb      	str	r3, [r7, #12]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
}
 800bb9e:	bf00      	nop
 800bba0:	3724      	adds	r7, #36	; 0x24
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	40010000 	.word	0x40010000
 800bbb0:	40023800 	.word	0x40023800
 800bbb4:	40000400 	.word	0x40000400
 800bbb8:	40000c00 	.word	0x40000c00
 800bbbc:	40010400 	.word	0x40010400

0800bbc0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a0a      	ldr	r2, [pc, #40]	; (800bbf8 <HAL_TIM_PWM_MspInit+0x38>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d10b      	bne.n	800bbea <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800bbd2:	4b0a      	ldr	r3, [pc, #40]	; (800bbfc <HAL_TIM_PWM_MspInit+0x3c>)
 800bbd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd6:	4a09      	ldr	r2, [pc, #36]	; (800bbfc <HAL_TIM_PWM_MspInit+0x3c>)
 800bbd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbdc:	6413      	str	r3, [r2, #64]	; 0x40
 800bbde:	4b07      	ldr	r3, [pc, #28]	; (800bbfc <HAL_TIM_PWM_MspInit+0x3c>)
 800bbe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbe6:	60fb      	str	r3, [r7, #12]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800bbea:	bf00      	nop
 800bbec:	3714      	adds	r7, #20
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr
 800bbf6:	bf00      	nop
 800bbf8:	40001800 	.word	0x40001800
 800bbfc:	40023800 	.word	0x40023800

0800bc00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b08c      	sub	sp, #48	; 0x30
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc08:	f107 031c 	add.w	r3, r7, #28
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	601a      	str	r2, [r3, #0]
 800bc10:	605a      	str	r2, [r3, #4]
 800bc12:	609a      	str	r2, [r3, #8]
 800bc14:	60da      	str	r2, [r3, #12]
 800bc16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a45      	ldr	r2, [pc, #276]	; (800bd34 <HAL_TIM_MspPostInit+0x134>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d11d      	bne.n	800bc5e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc22:	4b45      	ldr	r3, [pc, #276]	; (800bd38 <HAL_TIM_MspPostInit+0x138>)
 800bc24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc26:	4a44      	ldr	r2, [pc, #272]	; (800bd38 <HAL_TIM_MspPostInit+0x138>)
 800bc28:	f043 0301 	orr.w	r3, r3, #1
 800bc2c:	6313      	str	r3, [r2, #48]	; 0x30
 800bc2e:	4b42      	ldr	r3, [pc, #264]	; (800bd38 <HAL_TIM_MspPostInit+0x138>)
 800bc30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc32:	f003 0301 	and.w	r3, r3, #1
 800bc36:	61bb      	str	r3, [r7, #24]
 800bc38:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800bc3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc40:	2302      	movs	r3, #2
 800bc42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc44:	2300      	movs	r3, #0
 800bc46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800bc50:	f107 031c 	add.w	r3, r7, #28
 800bc54:	4619      	mov	r1, r3
 800bc56:	4839      	ldr	r0, [pc, #228]	; (800bd3c <HAL_TIM_MspPostInit+0x13c>)
 800bc58:	f7f6 f972 	bl	8001f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800bc5c:	e065      	b.n	800bd2a <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM2)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc66:	d11d      	bne.n	800bca4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc68:	4b33      	ldr	r3, [pc, #204]	; (800bd38 <HAL_TIM_MspPostInit+0x138>)
 800bc6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc6c:	4a32      	ldr	r2, [pc, #200]	; (800bd38 <HAL_TIM_MspPostInit+0x138>)
 800bc6e:	f043 0301 	orr.w	r3, r3, #1
 800bc72:	6313      	str	r3, [r2, #48]	; 0x30
 800bc74:	4b30      	ldr	r3, [pc, #192]	; (800bd38 <HAL_TIM_MspPostInit+0x138>)
 800bc76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc78:	f003 0301 	and.w	r3, r3, #1
 800bc7c:	617b      	str	r3, [r7, #20]
 800bc7e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800bc80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc86:	2302      	movs	r3, #2
 800bc88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800bc92:	2301      	movs	r3, #1
 800bc94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800bc96:	f107 031c 	add.w	r3, r7, #28
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	4827      	ldr	r0, [pc, #156]	; (800bd3c <HAL_TIM_MspPostInit+0x13c>)
 800bc9e:	f7f6 f94f 	bl	8001f40 <HAL_GPIO_Init>
}
 800bca2:	e042      	b.n	800bd2a <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4a25      	ldr	r2, [pc, #148]	; (800bd40 <HAL_TIM_MspPostInit+0x140>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d11c      	bne.n	800bce8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800bcae:	4b22      	ldr	r3, [pc, #136]	; (800bd38 <HAL_TIM_MspPostInit+0x138>)
 800bcb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb2:	4a21      	ldr	r2, [pc, #132]	; (800bd38 <HAL_TIM_MspPostInit+0x138>)
 800bcb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bcb8:	6313      	str	r3, [r2, #48]	; 0x30
 800bcba:	4b1f      	ldr	r3, [pc, #124]	; (800bd38 <HAL_TIM_MspPostInit+0x138>)
 800bcbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcc2:	613b      	str	r3, [r7, #16]
 800bcc4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcca:	2302      	movs	r3, #2
 800bccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800bcd6:	2302      	movs	r3, #2
 800bcd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800bcda:	f107 031c 	add.w	r3, r7, #28
 800bcde:	4619      	mov	r1, r3
 800bce0:	4818      	ldr	r0, [pc, #96]	; (800bd44 <HAL_TIM_MspPostInit+0x144>)
 800bce2:	f7f6 f92d 	bl	8001f40 <HAL_GPIO_Init>
}
 800bce6:	e020      	b.n	800bd2a <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM12)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a16      	ldr	r2, [pc, #88]	; (800bd48 <HAL_TIM_MspPostInit+0x148>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d11b      	bne.n	800bd2a <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800bcf2:	4b11      	ldr	r3, [pc, #68]	; (800bd38 <HAL_TIM_MspPostInit+0x138>)
 800bcf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcf6:	4a10      	ldr	r2, [pc, #64]	; (800bd38 <HAL_TIM_MspPostInit+0x138>)
 800bcf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcfc:	6313      	str	r3, [r2, #48]	; 0x30
 800bcfe:	4b0e      	ldr	r3, [pc, #56]	; (800bd38 <HAL_TIM_MspPostInit+0x138>)
 800bd00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd06:	60fb      	str	r3, [r7, #12]
 800bd08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800bd0a:	2340      	movs	r3, #64	; 0x40
 800bd0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd0e:	2302      	movs	r3, #2
 800bd10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd12:	2300      	movs	r3, #0
 800bd14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd16:	2300      	movs	r3, #0
 800bd18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800bd1a:	2309      	movs	r3, #9
 800bd1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800bd1e:	f107 031c 	add.w	r3, r7, #28
 800bd22:	4619      	mov	r1, r3
 800bd24:	4809      	ldr	r0, [pc, #36]	; (800bd4c <HAL_TIM_MspPostInit+0x14c>)
 800bd26:	f7f6 f90b 	bl	8001f40 <HAL_GPIO_Init>
}
 800bd2a:	bf00      	nop
 800bd2c:	3730      	adds	r7, #48	; 0x30
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	40010000 	.word	0x40010000
 800bd38:	40023800 	.word	0x40023800
 800bd3c:	40020000 	.word	0x40020000
 800bd40:	40000c00 	.word	0x40000c00
 800bd44:	40022000 	.word	0x40022000
 800bd48:	40001800 	.word	0x40001800
 800bd4c:	40021c00 	.word	0x40021c00

0800bd50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b08a      	sub	sp, #40	; 0x28
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd58:	f107 0314 	add.w	r3, r7, #20
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	601a      	str	r2, [r3, #0]
 800bd60:	605a      	str	r2, [r3, #4]
 800bd62:	609a      	str	r2, [r3, #8]
 800bd64:	60da      	str	r2, [r3, #12]
 800bd66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4a25      	ldr	r2, [pc, #148]	; (800be04 <HAL_UART_MspInit+0xb4>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d144      	bne.n	800bdfc <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800bd72:	4b25      	ldr	r3, [pc, #148]	; (800be08 <HAL_UART_MspInit+0xb8>)
 800bd74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd76:	4a24      	ldr	r2, [pc, #144]	; (800be08 <HAL_UART_MspInit+0xb8>)
 800bd78:	f043 0310 	orr.w	r3, r3, #16
 800bd7c:	6453      	str	r3, [r2, #68]	; 0x44
 800bd7e:	4b22      	ldr	r3, [pc, #136]	; (800be08 <HAL_UART_MspInit+0xb8>)
 800bd80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd82:	f003 0310 	and.w	r3, r3, #16
 800bd86:	613b      	str	r3, [r7, #16]
 800bd88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bd8a:	4b1f      	ldr	r3, [pc, #124]	; (800be08 <HAL_UART_MspInit+0xb8>)
 800bd8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd8e:	4a1e      	ldr	r2, [pc, #120]	; (800be08 <HAL_UART_MspInit+0xb8>)
 800bd90:	f043 0302 	orr.w	r3, r3, #2
 800bd94:	6313      	str	r3, [r2, #48]	; 0x30
 800bd96:	4b1c      	ldr	r3, [pc, #112]	; (800be08 <HAL_UART_MspInit+0xb8>)
 800bd98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd9a:	f003 0302 	and.w	r3, r3, #2
 800bd9e:	60fb      	str	r3, [r7, #12]
 800bda0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bda2:	4b19      	ldr	r3, [pc, #100]	; (800be08 <HAL_UART_MspInit+0xb8>)
 800bda4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda6:	4a18      	ldr	r2, [pc, #96]	; (800be08 <HAL_UART_MspInit+0xb8>)
 800bda8:	f043 0301 	orr.w	r3, r3, #1
 800bdac:	6313      	str	r3, [r2, #48]	; 0x30
 800bdae:	4b16      	ldr	r3, [pc, #88]	; (800be08 <HAL_UART_MspInit+0xb8>)
 800bdb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdb2:	f003 0301 	and.w	r3, r3, #1
 800bdb6:	60bb      	str	r3, [r7, #8]
 800bdb8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800bdba:	2380      	movs	r3, #128	; 0x80
 800bdbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdbe:	2302      	movs	r3, #2
 800bdc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800bdca:	2307      	movs	r3, #7
 800bdcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800bdce:	f107 0314 	add.w	r3, r7, #20
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	480d      	ldr	r0, [pc, #52]	; (800be0c <HAL_UART_MspInit+0xbc>)
 800bdd6:	f7f6 f8b3 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800bdda:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bde0:	2302      	movs	r3, #2
 800bde2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bde4:	2300      	movs	r3, #0
 800bde6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bde8:	2300      	movs	r3, #0
 800bdea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800bdec:	2307      	movs	r3, #7
 800bdee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800bdf0:	f107 0314 	add.w	r3, r7, #20
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	4806      	ldr	r0, [pc, #24]	; (800be10 <HAL_UART_MspInit+0xc0>)
 800bdf8:	f7f6 f8a2 	bl	8001f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800bdfc:	bf00      	nop
 800bdfe:	3728      	adds	r7, #40	; 0x28
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}
 800be04:	40011000 	.word	0x40011000
 800be08:	40023800 	.word	0x40023800
 800be0c:	40020400 	.word	0x40020400
 800be10:	40020000 	.word	0x40020000

0800be14 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800be14:	b580      	push	{r7, lr}
 800be16:	b086      	sub	sp, #24
 800be18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800be1a:	1d3b      	adds	r3, r7, #4
 800be1c:	2200      	movs	r2, #0
 800be1e:	601a      	str	r2, [r3, #0]
 800be20:	605a      	str	r2, [r3, #4]
 800be22:	609a      	str	r2, [r3, #8]
 800be24:	60da      	str	r2, [r3, #12]
 800be26:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800be28:	4b3a      	ldr	r3, [pc, #232]	; (800bf14 <HAL_FMC_MspInit+0x100>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d16d      	bne.n	800bf0c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800be30:	4b38      	ldr	r3, [pc, #224]	; (800bf14 <HAL_FMC_MspInit+0x100>)
 800be32:	2201      	movs	r2, #1
 800be34:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800be36:	4b38      	ldr	r3, [pc, #224]	; (800bf18 <HAL_FMC_MspInit+0x104>)
 800be38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be3a:	4a37      	ldr	r2, [pc, #220]	; (800bf18 <HAL_FMC_MspInit+0x104>)
 800be3c:	f043 0301 	orr.w	r3, r3, #1
 800be40:	6393      	str	r3, [r2, #56]	; 0x38
 800be42:	4b35      	ldr	r3, [pc, #212]	; (800bf18 <HAL_FMC_MspInit+0x104>)
 800be44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be46:	f003 0301 	and.w	r3, r3, #1
 800be4a:	603b      	str	r3, [r7, #0]
 800be4c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800be4e:	f64f 7383 	movw	r3, #65411	; 0xff83
 800be52:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be54:	2302      	movs	r3, #2
 800be56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be58:	2300      	movs	r3, #0
 800be5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be5c:	2303      	movs	r3, #3
 800be5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800be60:	230c      	movs	r3, #12
 800be62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800be64:	1d3b      	adds	r3, r7, #4
 800be66:	4619      	mov	r1, r3
 800be68:	482c      	ldr	r0, [pc, #176]	; (800bf1c <HAL_FMC_MspInit+0x108>)
 800be6a:	f7f6 f869 	bl	8001f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800be6e:	f248 1333 	movw	r3, #33075	; 0x8133
 800be72:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be74:	2302      	movs	r3, #2
 800be76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be78:	2300      	movs	r3, #0
 800be7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be7c:	2303      	movs	r3, #3
 800be7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800be80:	230c      	movs	r3, #12
 800be82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800be84:	1d3b      	adds	r3, r7, #4
 800be86:	4619      	mov	r1, r3
 800be88:	4825      	ldr	r0, [pc, #148]	; (800bf20 <HAL_FMC_MspInit+0x10c>)
 800be8a:	f7f6 f859 	bl	8001f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800be8e:	f24c 7303 	movw	r3, #50947	; 0xc703
 800be92:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be94:	2302      	movs	r3, #2
 800be96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be98:	2300      	movs	r3, #0
 800be9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be9c:	2303      	movs	r3, #3
 800be9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bea0:	230c      	movs	r3, #12
 800bea2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bea4:	1d3b      	adds	r3, r7, #4
 800bea6:	4619      	mov	r1, r3
 800bea8:	481e      	ldr	r0, [pc, #120]	; (800bf24 <HAL_FMC_MspInit+0x110>)
 800beaa:	f7f6 f849 	bl	8001f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800beae:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800beb2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800beb4:	2302      	movs	r3, #2
 800beb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800beb8:	2300      	movs	r3, #0
 800beba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bebc:	2303      	movs	r3, #3
 800bebe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bec0:	230c      	movs	r3, #12
 800bec2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800bec4:	1d3b      	adds	r3, r7, #4
 800bec6:	4619      	mov	r1, r3
 800bec8:	4817      	ldr	r0, [pc, #92]	; (800bf28 <HAL_FMC_MspInit+0x114>)
 800beca:	f7f6 f839 	bl	8001f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800bece:	2328      	movs	r3, #40	; 0x28
 800bed0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bed2:	2302      	movs	r3, #2
 800bed4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bed6:	2300      	movs	r3, #0
 800bed8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800beda:	2303      	movs	r3, #3
 800bedc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bede:	230c      	movs	r3, #12
 800bee0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800bee2:	1d3b      	adds	r3, r7, #4
 800bee4:	4619      	mov	r1, r3
 800bee6:	4811      	ldr	r0, [pc, #68]	; (800bf2c <HAL_FMC_MspInit+0x118>)
 800bee8:	f7f6 f82a 	bl	8001f40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800beec:	2308      	movs	r3, #8
 800beee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bef0:	2302      	movs	r3, #2
 800bef2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bef4:	2300      	movs	r3, #0
 800bef6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bef8:	2303      	movs	r3, #3
 800befa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800befc:	230c      	movs	r3, #12
 800befe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800bf00:	1d3b      	adds	r3, r7, #4
 800bf02:	4619      	mov	r1, r3
 800bf04:	480a      	ldr	r0, [pc, #40]	; (800bf30 <HAL_FMC_MspInit+0x11c>)
 800bf06:	f7f6 f81b 	bl	8001f40 <HAL_GPIO_Init>
 800bf0a:	e000      	b.n	800bf0e <HAL_FMC_MspInit+0xfa>
    return;
 800bf0c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800bf0e:	3718      	adds	r7, #24
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	200001a4 	.word	0x200001a4
 800bf18:	40023800 	.word	0x40023800
 800bf1c:	40021000 	.word	0x40021000
 800bf20:	40021800 	.word	0x40021800
 800bf24:	40020c00 	.word	0x40020c00
 800bf28:	40021400 	.word	0x40021400
 800bf2c:	40021c00 	.word	0x40021c00
 800bf30:	40020800 	.word	0x40020800

0800bf34 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800bf3c:	f7ff ff6a 	bl	800be14 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800bf40:	bf00      	nop
 800bf42:	3708      	adds	r7, #8
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b08a      	sub	sp, #40	; 0x28
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a2b      	ldr	r2, [pc, #172]	; (800c004 <HAL_SAI_MspInit+0xbc>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d124      	bne.n	800bfa4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800bf5a:	4b2b      	ldr	r3, [pc, #172]	; (800c008 <HAL_SAI_MspInit+0xc0>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d10b      	bne.n	800bf7a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800bf62:	4b2a      	ldr	r3, [pc, #168]	; (800c00c <HAL_SAI_MspInit+0xc4>)
 800bf64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf66:	4a29      	ldr	r2, [pc, #164]	; (800c00c <HAL_SAI_MspInit+0xc4>)
 800bf68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bf6c:	6453      	str	r3, [r2, #68]	; 0x44
 800bf6e:	4b27      	ldr	r3, [pc, #156]	; (800c00c <HAL_SAI_MspInit+0xc4>)
 800bf70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf76:	613b      	str	r3, [r7, #16]
 800bf78:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800bf7a:	4b23      	ldr	r3, [pc, #140]	; (800c008 <HAL_SAI_MspInit+0xc0>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	4a21      	ldr	r2, [pc, #132]	; (800c008 <HAL_SAI_MspInit+0xc0>)
 800bf82:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800bf84:	23f0      	movs	r3, #240	; 0xf0
 800bf86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf88:	2302      	movs	r3, #2
 800bf8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf90:	2300      	movs	r3, #0
 800bf92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800bf94:	230a      	movs	r3, #10
 800bf96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800bf98:	f107 0314 	add.w	r3, r7, #20
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	481c      	ldr	r0, [pc, #112]	; (800c010 <HAL_SAI_MspInit+0xc8>)
 800bfa0:	f7f5 ffce 	bl	8001f40 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a1a      	ldr	r2, [pc, #104]	; (800c014 <HAL_SAI_MspInit+0xcc>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d125      	bne.n	800bffa <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800bfae:	4b16      	ldr	r3, [pc, #88]	; (800c008 <HAL_SAI_MspInit+0xc0>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d10b      	bne.n	800bfce <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800bfb6:	4b15      	ldr	r3, [pc, #84]	; (800c00c <HAL_SAI_MspInit+0xc4>)
 800bfb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfba:	4a14      	ldr	r2, [pc, #80]	; (800c00c <HAL_SAI_MspInit+0xc4>)
 800bfbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bfc0:	6453      	str	r3, [r2, #68]	; 0x44
 800bfc2:	4b12      	ldr	r3, [pc, #72]	; (800c00c <HAL_SAI_MspInit+0xc4>)
 800bfc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfca:	60fb      	str	r3, [r7, #12]
 800bfcc:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800bfce:	4b0e      	ldr	r3, [pc, #56]	; (800c008 <HAL_SAI_MspInit+0xc0>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	4a0c      	ldr	r2, [pc, #48]	; (800c008 <HAL_SAI_MspInit+0xc0>)
 800bfd6:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800bfd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfde:	2302      	movs	r3, #2
 800bfe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800bfea:	230a      	movs	r3, #10
 800bfec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800bfee:	f107 0314 	add.w	r3, r7, #20
 800bff2:	4619      	mov	r1, r3
 800bff4:	4808      	ldr	r0, [pc, #32]	; (800c018 <HAL_SAI_MspInit+0xd0>)
 800bff6:	f7f5 ffa3 	bl	8001f40 <HAL_GPIO_Init>

    }
}
 800bffa:	bf00      	nop
 800bffc:	3728      	adds	r7, #40	; 0x28
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	40015c04 	.word	0x40015c04
 800c008:	200001a8 	.word	0x200001a8
 800c00c:	40023800 	.word	0x40023800
 800c010:	40022000 	.word	0x40022000
 800c014:	40015c24 	.word	0x40015c24
 800c018:	40021800 	.word	0x40021800

0800c01c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b08c      	sub	sp, #48	; 0x30
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800c024:	2300      	movs	r3, #0
 800c026:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800c028:	2300      	movs	r3, #0
 800c02a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800c02c:	2200      	movs	r2, #0
 800c02e:	6879      	ldr	r1, [r7, #4]
 800c030:	2036      	movs	r0, #54	; 0x36
 800c032:	f7f5 fa03 	bl	800143c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800c036:	2036      	movs	r0, #54	; 0x36
 800c038:	f7f5 fa1c 	bl	8001474 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800c03c:	4b1f      	ldr	r3, [pc, #124]	; (800c0bc <HAL_InitTick+0xa0>)
 800c03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c040:	4a1e      	ldr	r2, [pc, #120]	; (800c0bc <HAL_InitTick+0xa0>)
 800c042:	f043 0310 	orr.w	r3, r3, #16
 800c046:	6413      	str	r3, [r2, #64]	; 0x40
 800c048:	4b1c      	ldr	r3, [pc, #112]	; (800c0bc <HAL_InitTick+0xa0>)
 800c04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c04c:	f003 0310 	and.w	r3, r3, #16
 800c050:	60fb      	str	r3, [r7, #12]
 800c052:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c054:	f107 0210 	add.w	r2, r7, #16
 800c058:	f107 0314 	add.w	r3, r7, #20
 800c05c:	4611      	mov	r1, r2
 800c05e:	4618      	mov	r0, r3
 800c060:	f7f8 ff18 	bl	8004e94 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800c064:	f7f8 feee 	bl	8004e44 <HAL_RCC_GetPCLK1Freq>
 800c068:	4603      	mov	r3, r0
 800c06a:	005b      	lsls	r3, r3, #1
 800c06c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800c06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c070:	4a13      	ldr	r2, [pc, #76]	; (800c0c0 <HAL_InitTick+0xa4>)
 800c072:	fba2 2303 	umull	r2, r3, r2, r3
 800c076:	0c9b      	lsrs	r3, r3, #18
 800c078:	3b01      	subs	r3, #1
 800c07a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800c07c:	4b11      	ldr	r3, [pc, #68]	; (800c0c4 <HAL_InitTick+0xa8>)
 800c07e:	4a12      	ldr	r2, [pc, #72]	; (800c0c8 <HAL_InitTick+0xac>)
 800c080:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800c082:	4b10      	ldr	r3, [pc, #64]	; (800c0c4 <HAL_InitTick+0xa8>)
 800c084:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c088:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800c08a:	4a0e      	ldr	r2, [pc, #56]	; (800c0c4 <HAL_InitTick+0xa8>)
 800c08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800c090:	4b0c      	ldr	r3, [pc, #48]	; (800c0c4 <HAL_InitTick+0xa8>)
 800c092:	2200      	movs	r2, #0
 800c094:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c096:	4b0b      	ldr	r3, [pc, #44]	; (800c0c4 <HAL_InitTick+0xa8>)
 800c098:	2200      	movs	r2, #0
 800c09a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800c09c:	4809      	ldr	r0, [pc, #36]	; (800c0c4 <HAL_InitTick+0xa8>)
 800c09e:	f7fa fbb3 	bl	8006808 <HAL_TIM_Base_Init>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d104      	bne.n	800c0b2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800c0a8:	4806      	ldr	r0, [pc, #24]	; (800c0c4 <HAL_InitTick+0xa8>)
 800c0aa:	f7fa fbd9 	bl	8006860 <HAL_TIM_Base_Start_IT>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	e000      	b.n	800c0b4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800c0b2:	2301      	movs	r3, #1
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3730      	adds	r7, #48	; 0x30
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	40023800 	.word	0x40023800
 800c0c0:	431bde83 	.word	0x431bde83
 800c0c4:	20000a0c 	.word	0x20000a0c
 800c0c8:	40001000 	.word	0x40001000

0800c0cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c0d0:	bf00      	nop
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr

0800c0da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c0da:	b480      	push	{r7}
 800c0dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c0de:	e7fe      	b.n	800c0de <HardFault_Handler+0x4>

0800c0e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c0e4:	e7fe      	b.n	800c0e4 <MemManage_Handler+0x4>

0800c0e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c0e6:	b480      	push	{r7}
 800c0e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c0ea:	e7fe      	b.n	800c0ea <BusFault_Handler+0x4>

0800c0ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c0f0:	e7fe      	b.n	800c0f0 <UsageFault_Handler+0x4>

0800c0f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c0f2:	b480      	push	{r7}
 800c0f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c0f6:	bf00      	nop
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c100:	b480      	push	{r7}
 800c102:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c104:	bf00      	nop
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr

0800c10e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c10e:	b480      	push	{r7}
 800c110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c112:	bf00      	nop
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800c120:	2001      	movs	r0, #1
 800c122:	f7f6 f8d1 	bl	80022c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800c126:	bf00      	nop
 800c128:	bd80      	pop	{r7, pc}

0800c12a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800c12a:	b580      	push	{r7, lr}
 800c12c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800c12e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c132:	f7f6 f8c9 	bl	80022c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800c136:	bf00      	nop
 800c138:	bd80      	pop	{r7, pc}
	...

0800c13c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800c140:	4802      	ldr	r0, [pc, #8]	; (800c14c <TIM6_DAC_IRQHandler+0x10>)
 800c142:	f7fa fbe2 	bl	800690a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800c146:	bf00      	nop
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	20000a0c 	.word	0x20000a0c

0800c150 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800c154:	4802      	ldr	r0, [pc, #8]	; (800c160 <OTG_FS_IRQHandler+0x10>)
 800c156:	f7f6 facf 	bl	80026f8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800c15a:	bf00      	nop
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	20000e18 	.word	0x20000e18

0800c164 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800c168:	4802      	ldr	r0, [pc, #8]	; (800c174 <LTDC_IRQHandler+0x10>)
 800c16a:	f7f7 fe7d 	bl	8003e68 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800c16e:	bf00      	nop
 800c170:	bd80      	pop	{r7, pc}
 800c172:	bf00      	nop
 800c174:	20000648 	.word	0x20000648

0800c178 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800c17c:	4802      	ldr	r0, [pc, #8]	; (800c188 <DMA2D_IRQHandler+0x10>)
 800c17e:	f7f5 fca1 	bl	8001ac4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800c182:	bf00      	nop
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	2000087c 	.word	0x2000087c

0800c18c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c18c:	b480      	push	{r7}
 800c18e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c190:	4b15      	ldr	r3, [pc, #84]	; (800c1e8 <SystemInit+0x5c>)
 800c192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c196:	4a14      	ldr	r2, [pc, #80]	; (800c1e8 <SystemInit+0x5c>)
 800c198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c19c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c1a0:	4b12      	ldr	r3, [pc, #72]	; (800c1ec <SystemInit+0x60>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4a11      	ldr	r2, [pc, #68]	; (800c1ec <SystemInit+0x60>)
 800c1a6:	f043 0301 	orr.w	r3, r3, #1
 800c1aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c1ac:	4b0f      	ldr	r3, [pc, #60]	; (800c1ec <SystemInit+0x60>)
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c1b2:	4b0e      	ldr	r3, [pc, #56]	; (800c1ec <SystemInit+0x60>)
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	490d      	ldr	r1, [pc, #52]	; (800c1ec <SystemInit+0x60>)
 800c1b8:	4b0d      	ldr	r3, [pc, #52]	; (800c1f0 <SystemInit+0x64>)
 800c1ba:	4013      	ands	r3, r2
 800c1bc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800c1be:	4b0b      	ldr	r3, [pc, #44]	; (800c1ec <SystemInit+0x60>)
 800c1c0:	4a0c      	ldr	r2, [pc, #48]	; (800c1f4 <SystemInit+0x68>)
 800c1c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c1c4:	4b09      	ldr	r3, [pc, #36]	; (800c1ec <SystemInit+0x60>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a08      	ldr	r2, [pc, #32]	; (800c1ec <SystemInit+0x60>)
 800c1ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c1ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800c1d0:	4b06      	ldr	r3, [pc, #24]	; (800c1ec <SystemInit+0x60>)
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c1d6:	4b04      	ldr	r3, [pc, #16]	; (800c1e8 <SystemInit+0x5c>)
 800c1d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c1dc:	609a      	str	r2, [r3, #8]
#endif
}
 800c1de:	bf00      	nop
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr
 800c1e8:	e000ed00 	.word	0xe000ed00
 800c1ec:	40023800 	.word	0x40023800
 800c1f0:	fef6ffff 	.word	0xfef6ffff
 800c1f4:	24003010 	.word	0x24003010

0800c1f8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c1fc:	4802      	ldr	r0, [pc, #8]	; (800c208 <MX_USB_HOST_Process+0x10>)
 800c1fe:	f7fc fe67 	bl	8008ed0 <USBH_Process>
}
 800c202:	bf00      	nop
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	20000a4c 	.word	0x20000a4c

0800c20c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7fd f8fa 	bl	8009414 <USBH_LL_IncTimer>
}
 800c220:	bf00      	nop
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b082      	sub	sp, #8
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c236:	4618      	mov	r0, r3
 800c238:	f7fd f93f 	bl	80094ba <USBH_LL_Connect>
}
 800c23c:	bf00      	nop
 800c23e:	3708      	adds	r7, #8
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c252:	4618      	mov	r0, r3
 800c254:	f7fd f957 	bl	8009506 <USBH_LL_Disconnect>
}
 800c258:	bf00      	nop
 800c25a:	3708      	adds	r7, #8
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c260:	b480      	push	{r7}
 800c262:	b083      	sub	sp, #12
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	460b      	mov	r3, r1
 800c26a:	70fb      	strb	r3, [r7, #3]
 800c26c:	4613      	mov	r3, r2
 800c26e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c270:	bf00      	nop
 800c272:	370c      	adds	r7, #12
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b082      	sub	sp, #8
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7fd f8ec 	bl	8009468 <USBH_LL_PortEnabled>
} 
 800c290:	bf00      	nop
 800c292:	3708      	adds	r7, #8
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7fd f8ec 	bl	8009484 <USBH_LL_PortDisabled>
} 
 800c2ac:	bf00      	nop
 800c2ae:	3708      	adds	r7, #8
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7f6 fb1a 	bl	8002904 <HAL_HCD_Start>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c2d4:	7bfb      	ldrb	r3, [r7, #15]
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f000 f8e0 	bl	800c49c <USBH_Get_USB_Status>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c2e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3710      	adds	r7, #16
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b084      	sub	sp, #16
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c300:	4618      	mov	r0, r3
 800c302:	f7f6 fb22 	bl	800294a <HAL_HCD_Stop>
 800c306:	4603      	mov	r3, r0
 800c308:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c30a:	7bfb      	ldrb	r3, [r7, #15]
 800c30c:	4618      	mov	r0, r3
 800c30e:	f000 f8c5 	bl	800c49c <USBH_Get_USB_Status>
 800c312:	4603      	mov	r3, r0
 800c314:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800c316:	7bbb      	ldrb	r3, [r7, #14]
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3710      	adds	r7, #16
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b084      	sub	sp, #16
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c328:	2301      	movs	r3, #1
 800c32a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c332:	4618      	mov	r0, r3
 800c334:	f7f6 fb49 	bl	80029ca <HAL_HCD_GetCurrentSpeed>
 800c338:	4603      	mov	r3, r0
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	d007      	beq.n	800c34e <USBH_LL_GetSpeed+0x2e>
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d302      	bcc.n	800c348 <USBH_LL_GetSpeed+0x28>
 800c342:	2b02      	cmp	r3, #2
 800c344:	d006      	beq.n	800c354 <USBH_LL_GetSpeed+0x34>
 800c346:	e008      	b.n	800c35a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c348:	2300      	movs	r3, #0
 800c34a:	73fb      	strb	r3, [r7, #15]
    break;
 800c34c:	e008      	b.n	800c360 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c34e:	2301      	movs	r3, #1
 800c350:	73fb      	strb	r3, [r7, #15]
    break;
 800c352:	e005      	b.n	800c360 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c354:	2302      	movs	r3, #2
 800c356:	73fb      	strb	r3, [r7, #15]
    break;
 800c358:	e002      	b.n	800c360 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800c35a:	2301      	movs	r3, #1
 800c35c:	73fb      	strb	r3, [r7, #15]
    break;
 800c35e:	bf00      	nop
  }
  return  speed;
 800c360:	7bfb      	ldrb	r3, [r7, #15]
}
 800c362:	4618      	mov	r0, r3
 800c364:	3710      	adds	r7, #16
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}

0800c36a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b084      	sub	sp, #16
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c372:	2300      	movs	r3, #0
 800c374:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c376:	2300      	movs	r3, #0
 800c378:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c380:	4618      	mov	r0, r3
 800c382:	f7f6 faff 	bl	8002984 <HAL_HCD_ResetPort>
 800c386:	4603      	mov	r3, r0
 800c388:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800c38a:	7bfb      	ldrb	r3, [r7, #15]
 800c38c:	4618      	mov	r0, r3
 800c38e:	f000 f885 	bl	800c49c <USBH_Get_USB_Status>
 800c392:	4603      	mov	r3, r0
 800c394:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c396:	7bbb      	ldrb	r3, [r7, #14]
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3710      	adds	r7, #16
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c3a0:	b590      	push	{r4, r7, lr}
 800c3a2:	b089      	sub	sp, #36	; 0x24
 800c3a4:	af04      	add	r7, sp, #16
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	4608      	mov	r0, r1
 800c3aa:	4611      	mov	r1, r2
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	70fb      	strb	r3, [r7, #3]
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	70bb      	strb	r3, [r7, #2]
 800c3b6:	4613      	mov	r3, r2
 800c3b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800c3c8:	787c      	ldrb	r4, [r7, #1]
 800c3ca:	78ba      	ldrb	r2, [r7, #2]
 800c3cc:	78f9      	ldrb	r1, [r7, #3]
 800c3ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c3d0:	9302      	str	r3, [sp, #8]
 800c3d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c3d6:	9301      	str	r3, [sp, #4]
 800c3d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3dc:	9300      	str	r3, [sp, #0]
 800c3de:	4623      	mov	r3, r4
 800c3e0:	f7f5 ff8a 	bl	80022f8 <HAL_HCD_HC_Init>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c3e8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f000 f856 	bl	800c49c <USBH_Get_USB_Status>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c3f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3714      	adds	r7, #20
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd90      	pop	{r4, r7, pc}

0800c3fe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c3fe:	b590      	push	{r4, r7, lr}
 800c400:	b089      	sub	sp, #36	; 0x24
 800c402:	af04      	add	r7, sp, #16
 800c404:	6078      	str	r0, [r7, #4]
 800c406:	4608      	mov	r0, r1
 800c408:	4611      	mov	r1, r2
 800c40a:	461a      	mov	r2, r3
 800c40c:	4603      	mov	r3, r0
 800c40e:	70fb      	strb	r3, [r7, #3]
 800c410:	460b      	mov	r3, r1
 800c412:	70bb      	strb	r3, [r7, #2]
 800c414:	4613      	mov	r3, r2
 800c416:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c418:	2300      	movs	r3, #0
 800c41a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c41c:	2300      	movs	r3, #0
 800c41e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800c426:	787c      	ldrb	r4, [r7, #1]
 800c428:	78ba      	ldrb	r2, [r7, #2]
 800c42a:	78f9      	ldrb	r1, [r7, #3]
 800c42c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c430:	9303      	str	r3, [sp, #12]
 800c432:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c434:	9302      	str	r3, [sp, #8]
 800c436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c438:	9301      	str	r3, [sp, #4]
 800c43a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c43e:	9300      	str	r3, [sp, #0]
 800c440:	4623      	mov	r3, r4
 800c442:	f7f5 fff1 	bl	8002428 <HAL_HCD_HC_SubmitRequest>
 800c446:	4603      	mov	r3, r0
 800c448:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c44a:	7bfb      	ldrb	r3, [r7, #15]
 800c44c:	4618      	mov	r0, r3
 800c44e:	f000 f825 	bl	800c49c <USBH_Get_USB_Status>
 800c452:	4603      	mov	r3, r0
 800c454:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c456:	7bbb      	ldrb	r3, [r7, #14]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3714      	adds	r7, #20
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd90      	pop	{r4, r7, pc}

0800c460 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b082      	sub	sp, #8
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	460b      	mov	r3, r1
 800c46a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c472:	78fa      	ldrb	r2, [r7, #3]
 800c474:	4611      	mov	r1, r2
 800c476:	4618      	mov	r0, r3
 800c478:	f7f6 fa92 	bl	80029a0 <HAL_HCD_HC_GetURBState>
 800c47c:	4603      	mov	r3, r0
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3708      	adds	r7, #8
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}

0800c486 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c486:	b580      	push	{r7, lr}
 800c488:	b082      	sub	sp, #8
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f7f4 fefa 	bl	8001288 <HAL_Delay>
}
 800c494:	bf00      	nop
 800c496:	3708      	adds	r7, #8
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b085      	sub	sp, #20
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c4aa:	79fb      	ldrb	r3, [r7, #7]
 800c4ac:	2b03      	cmp	r3, #3
 800c4ae:	d817      	bhi.n	800c4e0 <USBH_Get_USB_Status+0x44>
 800c4b0:	a201      	add	r2, pc, #4	; (adr r2, 800c4b8 <USBH_Get_USB_Status+0x1c>)
 800c4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b6:	bf00      	nop
 800c4b8:	0800c4c9 	.word	0x0800c4c9
 800c4bc:	0800c4cf 	.word	0x0800c4cf
 800c4c0:	0800c4d5 	.word	0x0800c4d5
 800c4c4:	0800c4db 	.word	0x0800c4db
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c4cc:	e00b      	b.n	800c4e6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c4ce:	2302      	movs	r3, #2
 800c4d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c4d2:	e008      	b.n	800c4e6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c4d8:	e005      	b.n	800c4e6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c4da:	2302      	movs	r3, #2
 800c4dc:	73fb      	strb	r3, [r7, #15]
    break;
 800c4de:	e002      	b.n	800c4e6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c4e0:	2302      	movs	r3, #2
 800c4e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c4e4:	bf00      	nop
  }
  return usb_status;
 800c4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3714      	adds	r7, #20
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800c4f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c52c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c4f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c4fa:	e003      	b.n	800c504 <LoopCopyDataInit>

0800c4fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c4fc:	4b0c      	ldr	r3, [pc, #48]	; (800c530 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c4fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c500:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c502:	3104      	adds	r1, #4

0800c504 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c504:	480b      	ldr	r0, [pc, #44]	; (800c534 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c506:	4b0c      	ldr	r3, [pc, #48]	; (800c538 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c508:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c50a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c50c:	d3f6      	bcc.n	800c4fc <CopyDataInit>
  ldr  r2, =_sbss
 800c50e:	4a0b      	ldr	r2, [pc, #44]	; (800c53c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c510:	e002      	b.n	800c518 <LoopFillZerobss>

0800c512 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c512:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c514:	f842 3b04 	str.w	r3, [r2], #4

0800c518 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c518:	4b09      	ldr	r3, [pc, #36]	; (800c540 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c51a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c51c:	d3f9      	bcc.n	800c512 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800c51e:	f7ff fe35 	bl	800c18c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c522:	f000 f811 	bl	800c548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c526:	f7fd fde5 	bl	800a0f4 <main>
  bx  lr    
 800c52a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800c52c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800c530:	0800e0b8 	.word	0x0800e0b8
  ldr  r0, =_sdata
 800c534:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c538:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800c53c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800c540:	200010dc 	.word	0x200010dc

0800c544 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c544:	e7fe      	b.n	800c544 <ADC_IRQHandler>
	...

0800c548 <__libc_init_array>:
 800c548:	b570      	push	{r4, r5, r6, lr}
 800c54a:	4e0d      	ldr	r6, [pc, #52]	; (800c580 <__libc_init_array+0x38>)
 800c54c:	4c0d      	ldr	r4, [pc, #52]	; (800c584 <__libc_init_array+0x3c>)
 800c54e:	1ba4      	subs	r4, r4, r6
 800c550:	10a4      	asrs	r4, r4, #2
 800c552:	2500      	movs	r5, #0
 800c554:	42a5      	cmp	r5, r4
 800c556:	d109      	bne.n	800c56c <__libc_init_array+0x24>
 800c558:	4e0b      	ldr	r6, [pc, #44]	; (800c588 <__libc_init_array+0x40>)
 800c55a:	4c0c      	ldr	r4, [pc, #48]	; (800c58c <__libc_init_array+0x44>)
 800c55c:	f000 f820 	bl	800c5a0 <_init>
 800c560:	1ba4      	subs	r4, r4, r6
 800c562:	10a4      	asrs	r4, r4, #2
 800c564:	2500      	movs	r5, #0
 800c566:	42a5      	cmp	r5, r4
 800c568:	d105      	bne.n	800c576 <__libc_init_array+0x2e>
 800c56a:	bd70      	pop	{r4, r5, r6, pc}
 800c56c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c570:	4798      	blx	r3
 800c572:	3501      	adds	r5, #1
 800c574:	e7ee      	b.n	800c554 <__libc_init_array+0xc>
 800c576:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c57a:	4798      	blx	r3
 800c57c:	3501      	adds	r5, #1
 800c57e:	e7f2      	b.n	800c566 <__libc_init_array+0x1e>
 800c580:	0800e0b0 	.word	0x0800e0b0
 800c584:	0800e0b0 	.word	0x0800e0b0
 800c588:	0800e0b0 	.word	0x0800e0b0
 800c58c:	0800e0b4 	.word	0x0800e0b4

0800c590 <memset>:
 800c590:	4402      	add	r2, r0
 800c592:	4603      	mov	r3, r0
 800c594:	4293      	cmp	r3, r2
 800c596:	d100      	bne.n	800c59a <memset+0xa>
 800c598:	4770      	bx	lr
 800c59a:	f803 1b01 	strb.w	r1, [r3], #1
 800c59e:	e7f9      	b.n	800c594 <memset+0x4>

0800c5a0 <_init>:
 800c5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5a2:	bf00      	nop
 800c5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5a6:	bc08      	pop	{r3}
 800c5a8:	469e      	mov	lr, r3
 800c5aa:	4770      	bx	lr

0800c5ac <_fini>:
 800c5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ae:	bf00      	nop
 800c5b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5b2:	bc08      	pop	{r3}
 800c5b4:	469e      	mov	lr, r3
 800c5b6:	4770      	bx	lr
