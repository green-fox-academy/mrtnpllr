
reaction_game_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd6c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b1c  0800cf3c  0800cf3c  0001cf3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea58  0800ea58  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea58  0800ea58  0001ea58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea60  0800ea60  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea60  0800ea60  0001ea60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea64  0800ea64  0001ea64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800ea68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010dc  20000074  0800eadc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001150  0800eadc  00021150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003032e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000055cb  00000000  00000000  000503d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002668  00000000  00000000  000559a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000023f8  00000000  00000000  00058008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00009826  00000000  00000000  0005a400  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002578a  00000000  00000000  00063c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011fe60  00000000  00000000  000893b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a9210  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a7dc  00000000  00000000  001a928c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cf24 	.word	0x0800cf24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800cf24 	.word	0x0800cf24

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80005b4:	4b31      	ldr	r3, [pc, #196]	; (800067c <BSP_LCD_Init+0xcc>)
 80005b6:	2228      	movs	r2, #40	; 0x28
 80005b8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80005ba:	4b30      	ldr	r3, [pc, #192]	; (800067c <BSP_LCD_Init+0xcc>)
 80005bc:	2209      	movs	r2, #9
 80005be:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80005c0:	4b2e      	ldr	r3, [pc, #184]	; (800067c <BSP_LCD_Init+0xcc>)
 80005c2:	2235      	movs	r2, #53	; 0x35
 80005c4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80005c6:	4b2d      	ldr	r3, [pc, #180]	; (800067c <BSP_LCD_Init+0xcc>)
 80005c8:	220b      	movs	r2, #11
 80005ca:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80005cc:	4b2b      	ldr	r3, [pc, #172]	; (800067c <BSP_LCD_Init+0xcc>)
 80005ce:	f240 121b 	movw	r2, #283	; 0x11b
 80005d2:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80005d4:	4b29      	ldr	r3, [pc, #164]	; (800067c <BSP_LCD_Init+0xcc>)
 80005d6:	f240 2215 	movw	r2, #533	; 0x215
 80005da:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80005dc:	4b27      	ldr	r3, [pc, #156]	; (800067c <BSP_LCD_Init+0xcc>)
 80005de:	f240 121d 	movw	r2, #285	; 0x11d
 80005e2:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80005e4:	4b25      	ldr	r3, [pc, #148]	; (800067c <BSP_LCD_Init+0xcc>)
 80005e6:	f240 2235 	movw	r2, #565	; 0x235
 80005ea:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80005ec:	2100      	movs	r1, #0
 80005ee:	4823      	ldr	r0, [pc, #140]	; (800067c <BSP_LCD_Init+0xcc>)
 80005f0:	f000 fb9a 	bl	8000d28 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <BSP_LCD_Init+0xcc>)
 80005f6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80005fa:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <BSP_LCD_Init+0xcc>)
 80005fe:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000602:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <BSP_LCD_Init+0xcc>)
 8000606:	2200      	movs	r2, #0
 8000608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <BSP_LCD_Init+0xcc>)
 800060e:	2200      	movs	r2, #0
 8000610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <BSP_LCD_Init+0xcc>)
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <BSP_LCD_Init+0xcc>)
 800061e:	2200      	movs	r2, #0
 8000620:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <BSP_LCD_Init+0xcc>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <BSP_LCD_Init+0xcc>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <BSP_LCD_Init+0xcc>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <BSP_LCD_Init+0xcc>)
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <BSP_LCD_Init+0xd0>)
 8000638:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800063a:	4810      	ldr	r0, [pc, #64]	; (800067c <BSP_LCD_Init+0xcc>)
 800063c:	f003 fd68 	bl	8004110 <HAL_LTDC_GetState>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d103      	bne.n	800064e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8000646:	2100      	movs	r1, #0
 8000648:	480c      	ldr	r0, [pc, #48]	; (800067c <BSP_LCD_Init+0xcc>)
 800064a:	f000 fa93 	bl	8000b74 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800064e:	480b      	ldr	r0, [pc, #44]	; (800067c <BSP_LCD_Init+0xcc>)
 8000650:	f003 fb8e 	bl	8003d70 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800065a:	480a      	ldr	r0, [pc, #40]	; (8000684 <BSP_LCD_Init+0xd4>)
 800065c:	f001 fe6e 	bl	800233c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2108      	movs	r1, #8
 8000664:	4808      	ldr	r0, [pc, #32]	; (8000688 <BSP_LCD_Init+0xd8>)
 8000666:	f001 fe69 	bl	800233c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800066a:	f000 fc7d 	bl	8000f68 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800066e:	4807      	ldr	r0, [pc, #28]	; (800068c <BSP_LCD_Init+0xdc>)
 8000670:	f000 f8c0 	bl	80007f4 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2000021c 	.word	0x2000021c
 8000680:	40016800 	.word	0x40016800
 8000684:	40022000 	.word	0x40022000
 8000688:	40022800 	.word	0x40022800
 800068c:	20000000 	.word	0x20000000

08000690 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <BSP_LCD_GetXSize+0x20>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <BSP_LCD_GetXSize+0x24>)
 800069a:	2134      	movs	r1, #52	; 0x34
 800069c:	fb01 f303 	mul.w	r3, r1, r3
 80006a0:	4413      	add	r3, r2
 80006a2:	3360      	adds	r3, #96	; 0x60
 80006a4:	681b      	ldr	r3, [r3, #0]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	200000d0 	.word	0x200000d0
 80006b4:	2000021c 	.word	0x2000021c

080006b8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <BSP_LCD_GetYSize+0x20>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <BSP_LCD_GetYSize+0x24>)
 80006c2:	2134      	movs	r1, #52	; 0x34
 80006c4:	fb01 f303 	mul.w	r3, r1, r3
 80006c8:	4413      	add	r3, r2
 80006ca:	3364      	adds	r3, #100	; 0x64
 80006cc:	681b      	ldr	r3, [r3, #0]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	200000d0 	.word	0x200000d0
 80006dc:	2000021c 	.word	0x2000021c

080006e0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b090      	sub	sp, #64	; 0x40
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80006f0:	f7ff ffce 	bl	8000690 <BSP_LCD_GetXSize>
 80006f4:	4603      	mov	r3, r0
 80006f6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80006fc:	f7ff ffdc 	bl	80006b8 <BSP_LCD_GetYSize>
 8000700:	4603      	mov	r3, r0
 8000702:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 800070c:	23ff      	movs	r3, #255	; 0xff
 800070e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000726:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800072c:	2307      	movs	r3, #7
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8000730:	f7ff ffae 	bl	8000690 <BSP_LCD_GetXSize>
 8000734:	4603      	mov	r3, r0
 8000736:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8000738:	f7ff ffbe 	bl	80006b8 <BSP_LCD_GetYSize>
 800073c:	4603      	mov	r3, r0
 800073e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000740:	88fa      	ldrh	r2, [r7, #6]
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	4619      	mov	r1, r3
 8000748:	4812      	ldr	r0, [pc, #72]	; (8000794 <BSP_LCD_LayerDefaultInit+0xb4>)
 800074a:	f003 fca3 	bl	8004094 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800074e:	88fa      	ldrh	r2, [r7, #6]
 8000750:	4911      	ldr	r1, [pc, #68]	; (8000798 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000752:	4613      	mov	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	4413      	add	r3, r2
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	440b      	add	r3, r1
 800075c:	3304      	adds	r3, #4
 800075e:	f04f 32ff 	mov.w	r2, #4294967295
 8000762:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000764:	88fa      	ldrh	r2, [r7, #6]
 8000766:	490c      	ldr	r1, [pc, #48]	; (8000798 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000768:	4613      	mov	r3, r2
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	4413      	add	r3, r2
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	440b      	add	r3, r1
 8000772:	3308      	adds	r3, #8
 8000774:	4a09      	ldr	r2, [pc, #36]	; (800079c <BSP_LCD_LayerDefaultInit+0xbc>)
 8000776:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8000778:	88fa      	ldrh	r2, [r7, #6]
 800077a:	4907      	ldr	r1, [pc, #28]	; (8000798 <BSP_LCD_LayerDefaultInit+0xb8>)
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	440b      	add	r3, r1
 8000786:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800078a:	601a      	str	r2, [r3, #0]
}
 800078c:	bf00      	nop
 800078e:	3740      	adds	r7, #64	; 0x40
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000021c 	.word	0x2000021c
 8000798:	200000d4 	.word	0x200000d4
 800079c:	20000000 	.word	0x20000000

080007a0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80007a8:	4a04      	ldr	r2, [pc, #16]	; (80007bc <BSP_LCD_SelectLayer+0x1c>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6013      	str	r3, [r2, #0]
} 
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	200000d0 	.word	0x200000d0

080007c0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <BSP_LCD_SetBackColor+0x2c>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4908      	ldr	r1, [pc, #32]	; (80007f0 <BSP_LCD_SetBackColor+0x30>)
 80007ce:	4613      	mov	r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4413      	add	r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	440b      	add	r3, r1
 80007d8:	3304      	adds	r3, #4
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	601a      	str	r2, [r3, #0]
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	200000d0 	.word	0x200000d0
 80007f0:	200000d4 	.word	0x200000d4

080007f4 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <BSP_LCD_SetFont+0x2c>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4908      	ldr	r1, [pc, #32]	; (8000824 <BSP_LCD_SetFont+0x30>)
 8000802:	4613      	mov	r3, r2
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	4413      	add	r3, r2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	440b      	add	r3, r1
 800080c:	3308      	adds	r3, #8
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	601a      	str	r2, [r3, #0]
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	200000d0 	.word	0x200000d0
 8000824:	200000d4 	.word	0x200000d4

08000828 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <BSP_LCD_GetFont+0x24>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	4907      	ldr	r1, [pc, #28]	; (8000850 <BSP_LCD_GetFont+0x28>)
 8000832:	4613      	mov	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	440b      	add	r3, r1
 800083c:	3308      	adds	r3, #8
 800083e:	681b      	ldr	r3, [r3, #0]
}
 8000840:	4618      	mov	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	200000d0 	.word	0x200000d0
 8000850:	200000d4 	.word	0x200000d4

08000854 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8000854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000856:	b085      	sub	sp, #20
 8000858:	af02      	add	r7, sp, #8
 800085a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <BSP_LCD_Clear+0x48>)
 800085e:	681c      	ldr	r4, [r3, #0]
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <BSP_LCD_Clear+0x48>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <BSP_LCD_Clear+0x4c>)
 8000866:	2134      	movs	r1, #52	; 0x34
 8000868:	fb01 f303 	mul.w	r3, r1, r3
 800086c:	4413      	add	r3, r2
 800086e:	335c      	adds	r3, #92	; 0x5c
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	461d      	mov	r5, r3
 8000874:	f7ff ff0c 	bl	8000690 <BSP_LCD_GetXSize>
 8000878:	4606      	mov	r6, r0
 800087a:	f7ff ff1d 	bl	80006b8 <BSP_LCD_GetYSize>
 800087e:	4602      	mov	r2, r0
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	2300      	movs	r3, #0
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	4613      	mov	r3, r2
 800088a:	4632      	mov	r2, r6
 800088c:	4629      	mov	r1, r5
 800088e:	4620      	mov	r0, r4
 8000890:	f000 fb1e 	bl	8000ed0 <LL_FillBuffer>
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800089c:	200000d0 	.word	0x200000d0
 80008a0:	2000021c 	.word	0x2000021c

080008a4 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	80fb      	strh	r3, [r7, #6]
 80008ae:	460b      	mov	r3, r1
 80008b0:	80bb      	strh	r3, [r7, #4]
 80008b2:	4613      	mov	r3, r2
 80008b4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80008b6:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <BSP_LCD_DisplayChar+0x80>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	491b      	ldr	r1, [pc, #108]	; (8000928 <BSP_LCD_DisplayChar+0x84>)
 80008bc:	4613      	mov	r3, r2
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	4413      	add	r3, r2
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	440b      	add	r3, r1
 80008c6:	3308      	adds	r3, #8
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	6819      	ldr	r1, [r3, #0]
 80008cc:	78fb      	ldrb	r3, [r7, #3]
 80008ce:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <BSP_LCD_DisplayChar+0x80>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	4c14      	ldr	r4, [pc, #80]	; (8000928 <BSP_LCD_DisplayChar+0x84>)
 80008d8:	4613      	mov	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	4413      	add	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4423      	add	r3, r4
 80008e2:	3308      	adds	r3, #8
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80008e8:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <BSP_LCD_DisplayChar+0x80>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4c0d      	ldr	r4, [pc, #52]	; (8000928 <BSP_LCD_DisplayChar+0x84>)
 80008f2:	4613      	mov	r3, r2
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	4413      	add	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4423      	add	r3, r4
 80008fc:	3308      	adds	r3, #8
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	889b      	ldrh	r3, [r3, #4]
 8000902:	3307      	adds	r3, #7
 8000904:	2b00      	cmp	r3, #0
 8000906:	da00      	bge.n	800090a <BSP_LCD_DisplayChar+0x66>
 8000908:	3307      	adds	r3, #7
 800090a:	10db      	asrs	r3, r3, #3
 800090c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000910:	18ca      	adds	r2, r1, r3
 8000912:	88b9      	ldrh	r1, [r7, #4]
 8000914:	88fb      	ldrh	r3, [r7, #6]
 8000916:	4618      	mov	r0, r3
 8000918:	f000 fa22 	bl	8000d60 <DrawChar>
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	bd90      	pop	{r4, r7, pc}
 8000924:	200000d0 	.word	0x200000d0
 8000928:	200000d4 	.word	0x200000d4

0800092c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800092c:	b5b0      	push	{r4, r5, r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
 8000932:	60ba      	str	r2, [r7, #8]
 8000934:	461a      	mov	r2, r3
 8000936:	4603      	mov	r3, r0
 8000938:	81fb      	strh	r3, [r7, #14]
 800093a:	460b      	mov	r3, r1
 800093c:	81bb      	strh	r3, [r7, #12]
 800093e:	4613      	mov	r3, r2
 8000940:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8000942:	2301      	movs	r3, #1
 8000944:	83fb      	strh	r3, [r7, #30]
 8000946:	2300      	movs	r3, #0
 8000948:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8000956:	e002      	b.n	800095e <BSP_LCD_DisplayStringAt+0x32>
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	3301      	adds	r3, #1
 800095c:	61bb      	str	r3, [r7, #24]
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	1c5a      	adds	r2, r3, #1
 8000962:	617a      	str	r2, [r7, #20]
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d1f6      	bne.n	8000958 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800096a:	f7ff fe91 	bl	8000690 <BSP_LCD_GetXSize>
 800096e:	4b4f      	ldr	r3, [pc, #316]	; (8000aac <BSP_LCD_DisplayStringAt+0x180>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	494f      	ldr	r1, [pc, #316]	; (8000ab0 <BSP_LCD_DisplayStringAt+0x184>)
 8000974:	4613      	mov	r3, r2
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	4413      	add	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	440b      	add	r3, r1
 800097e:	3308      	adds	r3, #8
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	889b      	ldrh	r3, [r3, #4]
 8000984:	fbb0 f3f3 	udiv	r3, r0, r3
 8000988:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	2b02      	cmp	r3, #2
 800098e:	d01c      	beq.n	80009ca <BSP_LCD_DisplayStringAt+0x9e>
 8000990:	2b03      	cmp	r3, #3
 8000992:	d017      	beq.n	80009c4 <BSP_LCD_DisplayStringAt+0x98>
 8000994:	2b01      	cmp	r3, #1
 8000996:	d12e      	bne.n	80009f6 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	1ad1      	subs	r1, r2, r3
 800099e:	4b43      	ldr	r3, [pc, #268]	; (8000aac <BSP_LCD_DisplayStringAt+0x180>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	4843      	ldr	r0, [pc, #268]	; (8000ab0 <BSP_LCD_DisplayStringAt+0x184>)
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	4403      	add	r3, r0
 80009ae:	3308      	adds	r3, #8
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	889b      	ldrh	r3, [r3, #4]
 80009b4:	fb03 f301 	mul.w	r3, r3, r1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	89fb      	ldrh	r3, [r7, #14]
 80009be:	4413      	add	r3, r2
 80009c0:	83fb      	strh	r3, [r7, #30]
      break;
 80009c2:	e01b      	b.n	80009fc <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80009c4:	89fb      	ldrh	r3, [r7, #14]
 80009c6:	83fb      	strh	r3, [r7, #30]
      break;
 80009c8:	e018      	b.n	80009fc <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	b299      	uxth	r1, r3
 80009d2:	4b36      	ldr	r3, [pc, #216]	; (8000aac <BSP_LCD_DisplayStringAt+0x180>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	4836      	ldr	r0, [pc, #216]	; (8000ab0 <BSP_LCD_DisplayStringAt+0x184>)
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	4403      	add	r3, r0
 80009e2:	3308      	adds	r3, #8
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	889b      	ldrh	r3, [r3, #4]
 80009e8:	fb11 f303 	smulbb	r3, r1, r3
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	89fb      	ldrh	r3, [r7, #14]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	83fb      	strh	r3, [r7, #30]
      break;
 80009f4:	e002      	b.n	80009fc <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 80009f6:	89fb      	ldrh	r3, [r7, #14]
 80009f8:	83fb      	strh	r3, [r7, #30]
      break;
 80009fa:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80009fc:	8bfb      	ldrh	r3, [r7, #30]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d003      	beq.n	8000a0a <BSP_LCD_DisplayStringAt+0xde>
 8000a02:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	da1d      	bge.n	8000a46 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000a0e:	e01a      	b.n	8000a46 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	781a      	ldrb	r2, [r3, #0]
 8000a14:	89b9      	ldrh	r1, [r7, #12]
 8000a16:	8bfb      	ldrh	r3, [r7, #30]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff43 	bl	80008a4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8000a1e:	4b23      	ldr	r3, [pc, #140]	; (8000aac <BSP_LCD_DisplayStringAt+0x180>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4923      	ldr	r1, [pc, #140]	; (8000ab0 <BSP_LCD_DisplayStringAt+0x184>)
 8000a24:	4613      	mov	r3, r2
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	4413      	add	r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	3308      	adds	r3, #8
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	889a      	ldrh	r2, [r3, #4]
 8000a34:	8bfb      	ldrh	r3, [r7, #30]
 8000a36:	4413      	add	r3, r2
 8000a38:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	60bb      	str	r3, [r7, #8]
    i++;
 8000a40:	8bbb      	ldrh	r3, [r7, #28]
 8000a42:	3301      	adds	r3, #1
 8000a44:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	bf14      	ite	ne
 8000a4e:	2301      	movne	r3, #1
 8000a50:	2300      	moveq	r3, #0
 8000a52:	b2dc      	uxtb	r4, r3
 8000a54:	f7ff fe1c 	bl	8000690 <BSP_LCD_GetXSize>
 8000a58:	4605      	mov	r5, r0
 8000a5a:	8bb9      	ldrh	r1, [r7, #28]
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <BSP_LCD_DisplayStringAt+0x180>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4813      	ldr	r0, [pc, #76]	; (8000ab0 <BSP_LCD_DisplayStringAt+0x184>)
 8000a62:	4613      	mov	r3, r2
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	4413      	add	r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	4403      	add	r3, r0
 8000a6c:	3308      	adds	r3, #8
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	889b      	ldrh	r3, [r3, #4]
 8000a72:	fb03 f301 	mul.w	r3, r3, r1
 8000a76:	1aeb      	subs	r3, r5, r3
 8000a78:	b299      	uxth	r1, r3
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <BSP_LCD_DisplayStringAt+0x180>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <BSP_LCD_DisplayStringAt+0x184>)
 8000a80:	4613      	mov	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4403      	add	r3, r0
 8000a8a:	3308      	adds	r3, #8
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	889b      	ldrh	r3, [r3, #4]
 8000a90:	4299      	cmp	r1, r3
 8000a92:	bf2c      	ite	cs
 8000a94:	2301      	movcs	r3, #1
 8000a96:	2300      	movcc	r3, #0
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	4023      	ands	r3, r4
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1b6      	bne.n	8000a10 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8000aa2:	bf00      	nop
 8000aa4:	3720      	adds	r7, #32
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200000d0 	.word	0x200000d0
 8000ab0:	200000d4 	.word	0x200000d4

08000ab4 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	6039      	str	r1, [r7, #0]
 8000abe:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8000ac0:	f7ff feb2 	bl	8000828 <BSP_LCD_GetFont>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	88db      	ldrh	r3, [r3, #6]
 8000ac8:	88fa      	ldrh	r2, [r7, #6]
 8000aca:	fb12 f303 	smulbb	r3, r2, r3
 8000ace:	b299      	uxth	r1, r3
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	683a      	ldr	r2, [r7, #0]
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f7ff ff29 	bl	800092c <BSP_LCD_DisplayStringAt>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8000ae4:	b5b0      	push	{r4, r5, r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	603a      	str	r2, [r7, #0]
 8000aee:	80fb      	strh	r3, [r7, #6]
 8000af0:	460b      	mov	r3, r1
 8000af2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000af4:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <BSP_LCD_DrawPixel+0x88>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a1d      	ldr	r2, [pc, #116]	; (8000b70 <BSP_LCD_DrawPixel+0x8c>)
 8000afa:	2134      	movs	r1, #52	; 0x34
 8000afc:	fb01 f303 	mul.w	r3, r1, r3
 8000b00:	4413      	add	r3, r2
 8000b02:	3348      	adds	r3, #72	; 0x48
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d116      	bne.n	8000b38 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <BSP_LCD_DrawPixel+0x88>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a18      	ldr	r2, [pc, #96]	; (8000b70 <BSP_LCD_DrawPixel+0x8c>)
 8000b10:	2134      	movs	r1, #52	; 0x34
 8000b12:	fb01 f303 	mul.w	r3, r1, r3
 8000b16:	4413      	add	r3, r2
 8000b18:	335c      	adds	r3, #92	; 0x5c
 8000b1a:	681c      	ldr	r4, [r3, #0]
 8000b1c:	88bd      	ldrh	r5, [r7, #4]
 8000b1e:	f7ff fdb7 	bl	8000690 <BSP_LCD_GetXSize>
 8000b22:	4603      	mov	r3, r0
 8000b24:	fb03 f205 	mul.w	r2, r3, r5
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	4423      	add	r3, r4
 8000b30:	683a      	ldr	r2, [r7, #0]
 8000b32:	b292      	uxth	r2, r2
 8000b34:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8000b36:	e015      	b.n	8000b64 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <BSP_LCD_DrawPixel+0x88>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a0c      	ldr	r2, [pc, #48]	; (8000b70 <BSP_LCD_DrawPixel+0x8c>)
 8000b3e:	2134      	movs	r1, #52	; 0x34
 8000b40:	fb01 f303 	mul.w	r3, r1, r3
 8000b44:	4413      	add	r3, r2
 8000b46:	335c      	adds	r3, #92	; 0x5c
 8000b48:	681c      	ldr	r4, [r3, #0]
 8000b4a:	88bd      	ldrh	r5, [r7, #4]
 8000b4c:	f7ff fda0 	bl	8000690 <BSP_LCD_GetXSize>
 8000b50:	4603      	mov	r3, r0
 8000b52:	fb03 f205 	mul.w	r2, r3, r5
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	4413      	add	r3, r2
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	4423      	add	r3, r4
 8000b5e:	461a      	mov	r2, r3
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b6c:	200000d0 	.word	0x200000d0
 8000b70:	2000021c 	.word	0x2000021c

08000b74 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b090      	sub	sp, #64	; 0x40
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000b7e:	4b64      	ldr	r3, [pc, #400]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a63      	ldr	r2, [pc, #396]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000b84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b61      	ldr	r3, [pc, #388]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b96:	4b5e      	ldr	r3, [pc, #376]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a5d      	ldr	r2, [pc, #372]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000b9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b5b      	ldr	r3, [pc, #364]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
 8000bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bae:	4b58      	ldr	r3, [pc, #352]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a57      	ldr	r2, [pc, #348]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000bb4:	f043 0310 	orr.w	r3, r3, #16
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b55      	ldr	r3, [pc, #340]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0310 	and.w	r3, r3, #16
 8000bc2:	623b      	str	r3, [r7, #32]
 8000bc4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc6:	4b52      	ldr	r3, [pc, #328]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a51      	ldr	r2, [pc, #324]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b4f      	ldr	r3, [pc, #316]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bda:	61fb      	str	r3, [r7, #28]
 8000bdc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000bde:	4b4c      	ldr	r3, [pc, #304]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a4b      	ldr	r2, [pc, #300]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b49      	ldr	r3, [pc, #292]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bf2:	61bb      	str	r3, [r7, #24]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000bf6:	4b46      	ldr	r3, [pc, #280]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a45      	ldr	r2, [pc, #276]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b43      	ldr	r3, [pc, #268]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c0e:	4b40      	ldr	r3, [pc, #256]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a3f      	ldr	r2, [pc, #252]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000c14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b3d      	ldr	r3, [pc, #244]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8000c26:	4b3a      	ldr	r3, [pc, #232]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a39      	ldr	r2, [pc, #228]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b37      	ldr	r3, [pc, #220]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8000c3e:	4b34      	ldr	r3, [pc, #208]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a33      	ldr	r2, [pc, #204]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000c44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <BSP_LCD_MspInit+0x19c>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8000c56:	2310      	movs	r3, #16
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8000c62:	2302      	movs	r3, #2
 8000c64:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8000c66:	230e      	movs	r3, #14
 8000c68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4828      	ldr	r0, [pc, #160]	; (8000d14 <BSP_LCD_MspInit+0x1a0>)
 8000c72:	f001 f9b9 	bl	8001fe8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8000c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8000c80:	2309      	movs	r3, #9
 8000c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000c84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4823      	ldr	r0, [pc, #140]	; (8000d18 <BSP_LCD_MspInit+0x1a4>)
 8000c8c:	f001 f9ac 	bl	8001fe8 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8000c90:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000c9a:	230e      	movs	r3, #14
 8000c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000c9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	481d      	ldr	r0, [pc, #116]	; (8000d1c <BSP_LCD_MspInit+0x1a8>)
 8000ca6:	f001 f99f 	bl	8001fe8 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8000caa:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000cb4:	230e      	movs	r3, #14
 8000cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8000cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4818      	ldr	r0, [pc, #96]	; (8000d20 <BSP_LCD_MspInit+0x1ac>)
 8000cc0:	f001 f992 	bl	8001fe8 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8000cc4:	23f7      	movs	r3, #247	; 0xf7
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000ccc:	230e      	movs	r3, #14
 8000cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8000cd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4813      	ldr	r0, [pc, #76]	; (8000d24 <BSP_LCD_MspInit+0x1b0>)
 8000cd8:	f001 f986 	bl	8001fe8 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8000cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8000ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cea:	4619      	mov	r1, r3
 8000cec:	480b      	ldr	r0, [pc, #44]	; (8000d1c <BSP_LCD_MspInit+0x1a8>)
 8000cee:	f001 f97b 	bl	8001fe8 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8000cf2:	2308      	movs	r3, #8
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8000cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4808      	ldr	r0, [pc, #32]	; (8000d24 <BSP_LCD_MspInit+0x1b0>)
 8000d02:	f001 f971 	bl	8001fe8 <HAL_GPIO_Init>
}
 8000d06:	bf00      	nop
 8000d08:	3740      	adds	r7, #64	; 0x40
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40021800 	.word	0x40021800
 8000d1c:	40022000 	.word	0x40022000
 8000d20:	40022400 	.word	0x40022400
 8000d24:	40022800 	.word	0x40022800

08000d28 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <BSP_LCD_ClockConfig+0x34>)
 8000d34:	2208      	movs	r2, #8
 8000d36:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <BSP_LCD_ClockConfig+0x34>)
 8000d3a:	22c0      	movs	r2, #192	; 0xc0
 8000d3c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <BSP_LCD_ClockConfig+0x34>)
 8000d40:	2205      	movs	r2, #5
 8000d42:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <BSP_LCD_ClockConfig+0x34>)
 8000d46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8000d4c:	4803      	ldr	r0, [pc, #12]	; (8000d5c <BSP_LCD_ClockConfig+0x34>)
 8000d4e:	f004 f927 	bl	8004fa0 <HAL_RCCEx_PeriphCLKConfig>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200000ec 	.word	0x200000ec

08000d60 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	603a      	str	r2, [r7, #0]
 8000d6a:	80fb      	strh	r3, [r7, #6]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
 8000d74:	2300      	movs	r3, #0
 8000d76:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8000d78:	4b53      	ldr	r3, [pc, #332]	; (8000ec8 <DrawChar+0x168>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4953      	ldr	r1, [pc, #332]	; (8000ecc <DrawChar+0x16c>)
 8000d7e:	4613      	mov	r3, r2
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	4413      	add	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	440b      	add	r3, r1
 8000d88:	3308      	adds	r3, #8
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	88db      	ldrh	r3, [r3, #6]
 8000d8e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8000d90:	4b4d      	ldr	r3, [pc, #308]	; (8000ec8 <DrawChar+0x168>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	494d      	ldr	r1, [pc, #308]	; (8000ecc <DrawChar+0x16c>)
 8000d96:	4613      	mov	r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	4413      	add	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	440b      	add	r3, r1
 8000da0:	3308      	adds	r3, #8
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	889b      	ldrh	r3, [r3, #4]
 8000da6:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8000da8:	8a3b      	ldrh	r3, [r7, #16]
 8000daa:	3307      	adds	r3, #7
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	da00      	bge.n	8000db2 <DrawChar+0x52>
 8000db0:	3307      	adds	r3, #7
 8000db2:	10db      	asrs	r3, r3, #3
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	00db      	lsls	r3, r3, #3
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	8a3b      	ldrh	r3, [r7, #16]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
 8000dc6:	e076      	b.n	8000eb6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8000dc8:	8a3b      	ldrh	r3, [r7, #16]
 8000dca:	3307      	adds	r3, #7
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	da00      	bge.n	8000dd2 <DrawChar+0x72>
 8000dd0:	3307      	adds	r3, #7
 8000dd2:	10db      	asrs	r3, r3, #3
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	fb03 f302 	mul.w	r3, r3, r2
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8000de2:	8a3b      	ldrh	r3, [r7, #16]
 8000de4:	3307      	adds	r3, #7
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	da00      	bge.n	8000dec <DrawChar+0x8c>
 8000dea:	3307      	adds	r3, #7
 8000dec:	10db      	asrs	r3, r3, #3
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d002      	beq.n	8000df8 <DrawChar+0x98>
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d004      	beq.n	8000e00 <DrawChar+0xa0>
 8000df6:	e00c      	b.n	8000e12 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	617b      	str	r3, [r7, #20]
      break;
 8000dfe:	e016      	b.n	8000e2e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	3201      	adds	r2, #1
 8000e0a:	7812      	ldrb	r2, [r2, #0]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	617b      	str	r3, [r7, #20]
      break;
 8000e10:	e00d      	b.n	8000e2e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	041a      	lsls	r2, r3, #16
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	021b      	lsls	r3, r3, #8
 8000e20:	4313      	orrs	r3, r2
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	3202      	adds	r2, #2
 8000e26:	7812      	ldrb	r2, [r2, #0]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	617b      	str	r3, [r7, #20]
      break;
 8000e2c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
 8000e32:	e036      	b.n	8000ea2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8000e34:	8a3a      	ldrh	r2, [r7, #16]
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	1ad2      	subs	r2, r2, r3
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	2201      	movs	r2, #1
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	461a      	mov	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d012      	beq.n	8000e76 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	4413      	add	r3, r2
 8000e58:	b298      	uxth	r0, r3
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <DrawChar+0x168>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	491b      	ldr	r1, [pc, #108]	; (8000ecc <DrawChar+0x16c>)
 8000e60:	4613      	mov	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	440b      	add	r3, r1
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	88bb      	ldrh	r3, [r7, #4]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f7ff fe38 	bl	8000ae4 <BSP_LCD_DrawPixel>
 8000e74:	e012      	b.n	8000e9c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	b298      	uxth	r0, r3
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <DrawChar+0x168>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4911      	ldr	r1, [pc, #68]	; (8000ecc <DrawChar+0x16c>)
 8000e86:	4613      	mov	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4413      	add	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	440b      	add	r3, r1
 8000e90:	3304      	adds	r3, #4
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	88bb      	ldrh	r3, [r7, #4]
 8000e96:	4619      	mov	r1, r3
 8000e98:	f7ff fe24 	bl	8000ae4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	61bb      	str	r3, [r7, #24]
 8000ea2:	8a3b      	ldrh	r3, [r7, #16]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d3c4      	bcc.n	8000e34 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8000eaa:	88bb      	ldrh	r3, [r7, #4]
 8000eac:	3301      	adds	r3, #1
 8000eae:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	8a7b      	ldrh	r3, [r7, #18]
 8000eb8:	69fa      	ldr	r2, [r7, #28]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d384      	bcc.n	8000dc8 <DrawChar+0x68>
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	3720      	adds	r7, #32
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200000d0 	.word	0x200000d0
 8000ecc:	200000d4 	.word	0x200000d4

08000ed0 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8000ede:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <LL_FillBuffer+0x88>)
 8000ee0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ee4:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <LL_FillBuffer+0x8c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a1d      	ldr	r2, [pc, #116]	; (8000f60 <LL_FillBuffer+0x90>)
 8000eec:	2134      	movs	r1, #52	; 0x34
 8000eee:	fb01 f303 	mul.w	r3, r1, r3
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3348      	adds	r3, #72	; 0x48
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d103      	bne.n	8000f04 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <LL_FillBuffer+0x88>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	e002      	b.n	8000f0a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <LL_FillBuffer+0x88>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8000f0a:	4a13      	ldr	r2, [pc, #76]	; (8000f58 <LL_FillBuffer+0x88>)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <LL_FillBuffer+0x88>)
 8000f12:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <LL_FillBuffer+0x94>)
 8000f14:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8000f16:	4810      	ldr	r0, [pc, #64]	; (8000f58 <LL_FillBuffer+0x88>)
 8000f18:	f000 fcca 	bl	80018b0 <HAL_DMA2D_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d115      	bne.n	8000f4e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8000f22:	68f9      	ldr	r1, [r7, #12]
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <LL_FillBuffer+0x88>)
 8000f26:	f000 ff31 	bl	8001d8c <HAL_DMA2D_ConfigLayer>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d10e      	bne.n	8000f4e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69f9      	ldr	r1, [r7, #28]
 8000f3a:	4807      	ldr	r0, [pc, #28]	; (8000f58 <LL_FillBuffer+0x88>)
 8000f3c:	f000 fd02 	bl	8001944 <HAL_DMA2D_Start>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d103      	bne.n	8000f4e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8000f46:	210a      	movs	r1, #10
 8000f48:	4803      	ldr	r0, [pc, #12]	; (8000f58 <LL_FillBuffer+0x88>)
 8000f4a:	f000 fd26 	bl	800199a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000090 	.word	0x20000090
 8000f5c:	200000d0 	.word	0x200000d0
 8000f60:	2000021c 	.word	0x2000021c
 8000f64:	4002b000 	.word	0x4002b000

08000f68 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8000f6c:	4b29      	ldr	r3, [pc, #164]	; (8001014 <BSP_SDRAM_Init+0xac>)
 8000f6e:	4a2a      	ldr	r2, [pc, #168]	; (8001018 <BSP_SDRAM_Init+0xb0>)
 8000f70:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8000f72:	4b2a      	ldr	r3, [pc, #168]	; (800101c <BSP_SDRAM_Init+0xb4>)
 8000f74:	2202      	movs	r2, #2
 8000f76:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8000f78:	4b28      	ldr	r3, [pc, #160]	; (800101c <BSP_SDRAM_Init+0xb4>)
 8000f7a:	2207      	movs	r2, #7
 8000f7c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8000f7e:	4b27      	ldr	r3, [pc, #156]	; (800101c <BSP_SDRAM_Init+0xb4>)
 8000f80:	2204      	movs	r2, #4
 8000f82:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8000f84:	4b25      	ldr	r3, [pc, #148]	; (800101c <BSP_SDRAM_Init+0xb4>)
 8000f86:	2207      	movs	r2, #7
 8000f88:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8000f8a:	4b24      	ldr	r3, [pc, #144]	; (800101c <BSP_SDRAM_Init+0xb4>)
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <BSP_SDRAM_Init+0xb4>)
 8000f92:	2202      	movs	r2, #2
 8000f94:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8000f96:	4b21      	ldr	r3, [pc, #132]	; (800101c <BSP_SDRAM_Init+0xb4>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <BSP_SDRAM_Init+0xac>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <BSP_SDRAM_Init+0xac>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <BSP_SDRAM_Init+0xac>)
 8000faa:	2204      	movs	r2, #4
 8000fac:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <BSP_SDRAM_Init+0xac>)
 8000fb0:	2210      	movs	r2, #16
 8000fb2:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <BSP_SDRAM_Init+0xac>)
 8000fb6:	2240      	movs	r2, #64	; 0x40
 8000fb8:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <BSP_SDRAM_Init+0xac>)
 8000fbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc0:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <BSP_SDRAM_Init+0xac>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <BSP_SDRAM_Init+0xac>)
 8000fca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fce:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <BSP_SDRAM_Init+0xac>)
 8000fd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fd6:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <BSP_SDRAM_Init+0xac>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8000fde:	2100      	movs	r1, #0
 8000fe0:	480c      	ldr	r0, [pc, #48]	; (8001014 <BSP_SDRAM_Init+0xac>)
 8000fe2:	f000 f87f 	bl	80010e4 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8000fe6:	490d      	ldr	r1, [pc, #52]	; (800101c <BSP_SDRAM_Init+0xb4>)
 8000fe8:	480a      	ldr	r0, [pc, #40]	; (8001014 <BSP_SDRAM_Init+0xac>)
 8000fea:	f005 faf3 	bl	80065d4 <HAL_SDRAM_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <BSP_SDRAM_Init+0xb8>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	701a      	strb	r2, [r3, #0]
 8000ffa:	e002      	b.n	8001002 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <BSP_SDRAM_Init+0xb8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001002:	f240 6003 	movw	r0, #1539	; 0x603
 8001006:	f000 f80d 	bl	8001024 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800100a:	4b05      	ldr	r3, [pc, #20]	; (8001020 <BSP_SDRAM_Init+0xb8>)
 800100c:	781b      	ldrb	r3, [r3, #0]
}
 800100e:	4618      	mov	r0, r3
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200002c4 	.word	0x200002c4
 8001018:	a0000140 	.word	0xa0000140
 800101c:	20000170 	.word	0x20000170
 8001020:	20000008 	.word	0x20000008

08001024 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001030:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001036:	4b29      	ldr	r3, [pc, #164]	; (80010dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001038:	2210      	movs	r2, #16
 800103a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800103c:	4b27      	ldr	r3, [pc, #156]	; (80010dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800103e:	2201      	movs	r2, #1
 8001040:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001042:	4b26      	ldr	r3, [pc, #152]	; (80010dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001048:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800104c:	4923      	ldr	r1, [pc, #140]	; (80010dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800104e:	4824      	ldr	r0, [pc, #144]	; (80010e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001050:	f005 faf4 	bl	800663c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001054:	2001      	movs	r0, #1
 8001056:	f000 f96b 	bl	8001330 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800105c:	2202      	movs	r2, #2
 800105e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001062:	2210      	movs	r2, #16
 8001064:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001068:	2201      	movs	r2, #1
 800106a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800106c:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001076:	4919      	ldr	r1, [pc, #100]	; (80010dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001078:	4819      	ldr	r0, [pc, #100]	; (80010e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800107a:	f005 fadf 	bl	800663c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001080:	2203      	movs	r2, #3
 8001082:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001084:	4b15      	ldr	r3, [pc, #84]	; (80010dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001086:	2210      	movs	r2, #16
 8001088:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800108c:	2208      	movs	r2, #8
 800108e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800109a:	4910      	ldr	r1, [pc, #64]	; (80010dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800109c:	4810      	ldr	r0, [pc, #64]	; (80010e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800109e:	f005 facd 	bl	800663c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80010a2:	f44f 7308 	mov.w	r3, #544	; 0x220
 80010a6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010aa:	2204      	movs	r2, #4
 80010ac:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010b0:	2210      	movs	r2, #16
 80010b2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010be:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80010c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010c4:	4905      	ldr	r1, [pc, #20]	; (80010dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010c6:	4806      	ldr	r0, [pc, #24]	; (80010e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80010c8:	f005 fab8 	bl	800663c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4804      	ldr	r0, [pc, #16]	; (80010e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80010d0:	f005 fadf 	bl	8006692 <HAL_SDRAM_ProgramRefreshRate>
}
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2000018c 	.word	0x2000018c
 80010e0:	200002c4 	.word	0x200002c4

080010e4 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b090      	sub	sp, #64	; 0x40
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80010ee:	4b70      	ldr	r3, [pc, #448]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 80010f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f2:	4a6f      	ldr	r2, [pc, #444]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6393      	str	r3, [r2, #56]	; 0x38
 80010fa:	4b6d      	ldr	r3, [pc, #436]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 80010fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
 8001104:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001106:	4b6a      	ldr	r3, [pc, #424]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a69      	ldr	r2, [pc, #420]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 800110c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b67      	ldr	r3, [pc, #412]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
 800111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111e:	4b64      	ldr	r3, [pc, #400]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a63      	ldr	r2, [pc, #396]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b61      	ldr	r3, [pc, #388]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	623b      	str	r3, [r7, #32]
 8001134:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001136:	4b5e      	ldr	r3, [pc, #376]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a5d      	ldr	r2, [pc, #372]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b5b      	ldr	r3, [pc, #364]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	61fb      	str	r3, [r7, #28]
 800114c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800114e:	4b58      	ldr	r3, [pc, #352]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a57      	ldr	r2, [pc, #348]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 8001154:	f043 0310 	orr.w	r3, r3, #16
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b55      	ldr	r3, [pc, #340]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	61bb      	str	r3, [r7, #24]
 8001164:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001166:	4b52      	ldr	r3, [pc, #328]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a51      	ldr	r2, [pc, #324]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 800116c:	f043 0320 	orr.w	r3, r3, #32
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b4f      	ldr	r3, [pc, #316]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0320 	and.w	r3, r3, #32
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800117e:	4b4c      	ldr	r3, [pc, #304]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a4b      	ldr	r2, [pc, #300]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 8001184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b49      	ldr	r3, [pc, #292]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001196:	4b46      	ldr	r3, [pc, #280]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a45      	ldr	r2, [pc, #276]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 800119c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b43      	ldr	r3, [pc, #268]	; (80012b0 <BSP_SDRAM_MspInit+0x1cc>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80011b6:	2302      	movs	r3, #2
 80011b8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80011ba:	230c      	movs	r3, #12
 80011bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80011be:	2308      	movs	r3, #8
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80011c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c6:	4619      	mov	r1, r3
 80011c8:	483a      	ldr	r0, [pc, #232]	; (80012b4 <BSP_SDRAM_MspInit+0x1d0>)
 80011ca:	f000 ff0d 	bl	8001fe8 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80011ce:	f24c 7303 	movw	r3, #50947	; 0xc703
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80011d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d8:	4619      	mov	r1, r3
 80011da:	4837      	ldr	r0, [pc, #220]	; (80012b8 <BSP_SDRAM_MspInit+0x1d4>)
 80011dc:	f000 ff04 	bl	8001fe8 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80011e0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80011e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ea:	4619      	mov	r1, r3
 80011ec:	4833      	ldr	r0, [pc, #204]	; (80012bc <BSP_SDRAM_MspInit+0x1d8>)
 80011ee:	f000 fefb 	bl	8001fe8 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80011f2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80011f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011fc:	4619      	mov	r1, r3
 80011fe:	4830      	ldr	r0, [pc, #192]	; (80012c0 <BSP_SDRAM_MspInit+0x1dc>)
 8001200:	f000 fef2 	bl	8001fe8 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001204:	f248 1333 	movw	r3, #33075	; 0x8133
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800120a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800120e:	4619      	mov	r1, r3
 8001210:	482c      	ldr	r0, [pc, #176]	; (80012c4 <BSP_SDRAM_MspInit+0x1e0>)
 8001212:	f000 fee9 	bl	8001fe8 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8001216:	2328      	movs	r3, #40	; 0x28
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800121a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121e:	4619      	mov	r1, r3
 8001220:	4829      	ldr	r0, [pc, #164]	; (80012c8 <BSP_SDRAM_MspInit+0x1e4>)
 8001222:	f000 fee1 	bl	8001fe8 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001226:	4b29      	ldr	r3, [pc, #164]	; (80012cc <BSP_SDRAM_MspInit+0x1e8>)
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800122c:	4b27      	ldr	r3, [pc, #156]	; (80012cc <BSP_SDRAM_MspInit+0x1e8>)
 800122e:	2280      	movs	r2, #128	; 0x80
 8001230:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <BSP_SDRAM_MspInit+0x1e8>)
 8001234:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001238:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800123a:	4b24      	ldr	r3, [pc, #144]	; (80012cc <BSP_SDRAM_MspInit+0x1e8>)
 800123c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001240:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <BSP_SDRAM_MspInit+0x1e8>)
 8001244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001248:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <BSP_SDRAM_MspInit+0x1e8>)
 800124c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001250:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8001252:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <BSP_SDRAM_MspInit+0x1e8>)
 8001254:	2200      	movs	r2, #0
 8001256:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <BSP_SDRAM_MspInit+0x1e8>)
 800125a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800125e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <BSP_SDRAM_MspInit+0x1e8>)
 8001262:	2200      	movs	r2, #0
 8001264:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <BSP_SDRAM_MspInit+0x1e8>)
 8001268:	2203      	movs	r2, #3
 800126a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <BSP_SDRAM_MspInit+0x1e8>)
 800126e:	2200      	movs	r2, #0
 8001270:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <BSP_SDRAM_MspInit+0x1e8>)
 8001274:	2200      	movs	r2, #0
 8001276:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <BSP_SDRAM_MspInit+0x1e8>)
 800127a:	4a15      	ldr	r2, [pc, #84]	; (80012d0 <BSP_SDRAM_MspInit+0x1ec>)
 800127c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a12      	ldr	r2, [pc, #72]	; (80012cc <BSP_SDRAM_MspInit+0x1e8>)
 8001282:	631a      	str	r2, [r3, #48]	; 0x30
 8001284:	4a11      	ldr	r2, [pc, #68]	; (80012cc <BSP_SDRAM_MspInit+0x1e8>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800128a:	4810      	ldr	r0, [pc, #64]	; (80012cc <BSP_SDRAM_MspInit+0x1e8>)
 800128c:	f000 fa02 	bl	8001694 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001290:	480e      	ldr	r0, [pc, #56]	; (80012cc <BSP_SDRAM_MspInit+0x1e8>)
 8001292:	f000 f951 	bl	8001538 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	210f      	movs	r1, #15
 800129a:	2038      	movs	r0, #56	; 0x38
 800129c:	f000 f922 	bl	80014e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80012a0:	2038      	movs	r0, #56	; 0x38
 80012a2:	f000 f93b 	bl	800151c <HAL_NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3740      	adds	r7, #64	; 0x40
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40021400 	.word	0x40021400
 80012c4:	40021800 	.word	0x40021800
 80012c8:	40021c00 	.word	0x40021c00
 80012cc:	2000019c 	.word	0x2000019c
 80012d0:	40026410 	.word	0x40026410

080012d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d8:	2003      	movs	r0, #3
 80012da:	f000 f8f8 	bl	80014ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012de:	2000      	movs	r0, #0
 80012e0:	f00a ff26 	bl	800c130 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80012e4:	f00a f990 	bl	800b608 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_IncTick+0x20>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_IncTick+0x24>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <HAL_IncTick+0x24>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000009 	.word	0x20000009
 8001314:	200002f8 	.word	0x200002f8

08001318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <HAL_GetTick+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	200002f8 	.word	0x200002f8

08001330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001338:	f7ff ffee 	bl	8001318 <HAL_GetTick>
 800133c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001348:	d005      	beq.n	8001356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_Delay+0x40>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001356:	bf00      	nop
 8001358:	f7ff ffde 	bl	8001318 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	429a      	cmp	r2, r3
 8001366:	d8f7      	bhi.n	8001358 <HAL_Delay+0x28>
  {
  }
}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000009 	.word	0x20000009

08001374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a2:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <__NVIC_SetPriorityGrouping+0x40>)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	60d3      	str	r3, [r2, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00
 80013b8:	05fa0000 	.word	0x05fa0000

080013bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <__NVIC_GetPriorityGrouping+0x18>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	f003 0307 	and.w	r3, r3, #7
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db0b      	blt.n	8001402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	f003 021f 	and.w	r2, r3, #31
 80013f0:	4907      	ldr	r1, [pc, #28]	; (8001410 <__NVIC_EnableIRQ+0x38>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	095b      	lsrs	r3, r3, #5
 80013f8:	2001      	movs	r0, #1
 80013fa:	fa00 f202 	lsl.w	r2, r0, r2
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000e100 	.word	0xe000e100

08001414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	2b00      	cmp	r3, #0
 8001426:	db0a      	blt.n	800143e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	490c      	ldr	r1, [pc, #48]	; (8001460 <__NVIC_SetPriority+0x4c>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	440b      	add	r3, r1
 8001438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800143c:	e00a      	b.n	8001454 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4908      	ldr	r1, [pc, #32]	; (8001464 <__NVIC_SetPriority+0x50>)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	3b04      	subs	r3, #4
 800144c:	0112      	lsls	r2, r2, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	440b      	add	r3, r1
 8001452:	761a      	strb	r2, [r3, #24]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000e100 	.word	0xe000e100
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f1c3 0307 	rsb	r3, r3, #7
 8001482:	2b04      	cmp	r3, #4
 8001484:	bf28      	it	cs
 8001486:	2304      	movcs	r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3304      	adds	r3, #4
 800148e:	2b06      	cmp	r3, #6
 8001490:	d902      	bls.n	8001498 <NVIC_EncodePriority+0x30>
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3b03      	subs	r3, #3
 8001496:	e000      	b.n	800149a <NVIC_EncodePriority+0x32>
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43da      	mvns	r2, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	401a      	ands	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	43d9      	mvns	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	4313      	orrs	r3, r2
         );
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3724      	adds	r7, #36	; 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ff4c 	bl	8001374 <__NVIC_SetPriorityGrouping>
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
 80014f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f6:	f7ff ff61 	bl	80013bc <__NVIC_GetPriorityGrouping>
 80014fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	68b9      	ldr	r1, [r7, #8]
 8001500:	6978      	ldr	r0, [r7, #20]
 8001502:	f7ff ffb1 	bl	8001468 <NVIC_EncodePriority>
 8001506:	4602      	mov	r2, r0
 8001508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150c:	4611      	mov	r1, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff ff80 	bl	8001414 <__NVIC_SetPriority>
}
 8001514:	bf00      	nop
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff54 	bl	80013d8 <__NVIC_EnableIRQ>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff fee8 	bl	8001318 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e099      	b.n	8001688 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2202      	movs	r2, #2
 8001560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0201 	bic.w	r2, r2, #1
 8001572:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001574:	e00f      	b.n	8001596 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001576:	f7ff fecf 	bl	8001318 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b05      	cmp	r3, #5
 8001582:	d908      	bls.n	8001596 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2220      	movs	r2, #32
 8001588:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2203      	movs	r2, #3
 800158e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e078      	b.n	8001688 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1e8      	bne.n	8001576 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	4b38      	ldr	r3, [pc, #224]	; (8001690 <HAL_DMA_Init+0x158>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d107      	bne.n	8001600 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	4313      	orrs	r3, r2
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f023 0307 	bic.w	r3, r3, #7
 8001616:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	4313      	orrs	r3, r2
 8001620:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	2b04      	cmp	r3, #4
 8001628:	d117      	bne.n	800165a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	4313      	orrs	r3, r2
 8001632:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00e      	beq.n	800165a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f8bd 	bl	80017bc <DMA_CheckFifoParam>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d008      	beq.n	800165a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2240      	movs	r2, #64	; 0x40
 800164c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001656:	2301      	movs	r3, #1
 8001658:	e016      	b.n	8001688 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f874 	bl	8001750 <DMA_CalcBaseAndBitshift>
 8001668:	4603      	mov	r3, r0
 800166a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001670:	223f      	movs	r2, #63	; 0x3f
 8001672:	409a      	lsls	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	f010803f 	.word	0xf010803f

08001694 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e050      	b.n	8001748 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d101      	bne.n	80016b6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80016b2:	2302      	movs	r3, #2
 80016b4:	e048      	b.n	8001748 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0201 	bic.w	r2, r2, #1
 80016c4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2221      	movs	r2, #33	; 0x21
 80016f4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f82a 	bl	8001750 <DMA_CalcBaseAndBitshift>
 80016fc:	4603      	mov	r3, r0
 80016fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001704:	223f      	movs	r2, #63	; 0x3f
 8001706:	409a      	lsls	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	3b10      	subs	r3, #16
 8001760:	4a13      	ldr	r2, [pc, #76]	; (80017b0 <DMA_CalcBaseAndBitshift+0x60>)
 8001762:	fba2 2303 	umull	r2, r3, r2, r3
 8001766:	091b      	lsrs	r3, r3, #4
 8001768:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <DMA_CalcBaseAndBitshift+0x64>)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4413      	add	r3, r2
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d908      	bls.n	8001790 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <DMA_CalcBaseAndBitshift+0x68>)
 8001786:	4013      	ands	r3, r2
 8001788:	1d1a      	adds	r2, r3, #4
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	659a      	str	r2, [r3, #88]	; 0x58
 800178e:	e006      	b.n	800179e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <DMA_CalcBaseAndBitshift+0x68>)
 8001798:	4013      	ands	r3, r2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	aaaaaaab 	.word	0xaaaaaaab
 80017b4:	0800ea04 	.word	0x0800ea04
 80017b8:	fffffc00 	.word	0xfffffc00

080017bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d11f      	bne.n	8001816 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d855      	bhi.n	8001888 <DMA_CheckFifoParam+0xcc>
 80017dc:	a201      	add	r2, pc, #4	; (adr r2, 80017e4 <DMA_CheckFifoParam+0x28>)
 80017de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e2:	bf00      	nop
 80017e4:	080017f5 	.word	0x080017f5
 80017e8:	08001807 	.word	0x08001807
 80017ec:	080017f5 	.word	0x080017f5
 80017f0:	08001889 	.word	0x08001889
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d045      	beq.n	800188c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001804:	e042      	b.n	800188c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800180e:	d13f      	bne.n	8001890 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001814:	e03c      	b.n	8001890 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800181e:	d121      	bne.n	8001864 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b03      	cmp	r3, #3
 8001824:	d836      	bhi.n	8001894 <DMA_CheckFifoParam+0xd8>
 8001826:	a201      	add	r2, pc, #4	; (adr r2, 800182c <DMA_CheckFifoParam+0x70>)
 8001828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182c:	0800183d 	.word	0x0800183d
 8001830:	08001843 	.word	0x08001843
 8001834:	0800183d 	.word	0x0800183d
 8001838:	08001855 	.word	0x08001855
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
      break;
 8001840:	e02f      	b.n	80018a2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001846:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d024      	beq.n	8001898 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001852:	e021      	b.n	8001898 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001858:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800185c:	d11e      	bne.n	800189c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001862:	e01b      	b.n	800189c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d902      	bls.n	8001870 <DMA_CheckFifoParam+0xb4>
 800186a:	2b03      	cmp	r3, #3
 800186c:	d003      	beq.n	8001876 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800186e:	e018      	b.n	80018a2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
      break;
 8001874:	e015      	b.n	80018a2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00e      	beq.n	80018a0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
      break;
 8001886:	e00b      	b.n	80018a0 <DMA_CheckFifoParam+0xe4>
      break;
 8001888:	bf00      	nop
 800188a:	e00a      	b.n	80018a2 <DMA_CheckFifoParam+0xe6>
      break;
 800188c:	bf00      	nop
 800188e:	e008      	b.n	80018a2 <DMA_CheckFifoParam+0xe6>
      break;
 8001890:	bf00      	nop
 8001892:	e006      	b.n	80018a2 <DMA_CheckFifoParam+0xe6>
      break;
 8001894:	bf00      	nop
 8001896:	e004      	b.n	80018a2 <DMA_CheckFifoParam+0xe6>
      break;
 8001898:	bf00      	nop
 800189a:	e002      	b.n	80018a2 <DMA_CheckFifoParam+0xe6>
      break;   
 800189c:	bf00      	nop
 800189e:	e000      	b.n	80018a2 <DMA_CheckFifoParam+0xe6>
      break;
 80018a0:	bf00      	nop
    }
  } 
  
  return status; 
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e039      	b.n	8001936 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d106      	bne.n	80018dc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f009 feba 	bl	800b650 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2202      	movs	r2, #2
 80018e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001900:	f023 0107 	bic.w	r1, r3, #7
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_DMA2D_Init+0x90>)
 8001918:	4013      	ands	r3, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68d1      	ldr	r1, [r2, #12]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	430b      	orrs	r3, r1
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	ffffc000 	.word	0xffffc000

08001944 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af02      	add	r7, sp, #8
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_DMA2D_Start+0x1c>
 800195c:	2302      	movs	r3, #2
 800195e:	e018      	b.n	8001992 <HAL_DMA2D_Start+0x4e>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2202      	movs	r2, #2
 800196c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 fa98 	bl	8001eb0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0201 	orr.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d056      	beq.n	8001a64 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80019b6:	f7ff fcaf 	bl	8001318 <HAL_GetTick>
 80019ba:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80019bc:	e04b      	b.n	8001a56 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d023      	beq.n	8001a18 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 0320 	and.w	r3, r3, #32
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019de:	f043 0202 	orr.w	r2, r3, #2
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f4:	f043 0201 	orr.w	r2, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2221      	movs	r2, #33	; 0x21
 8001a02:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2204      	movs	r2, #4
 8001a08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0a5      	b.n	8001b64 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1e:	d01a      	beq.n	8001a56 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001a20:	f7ff fc7a 	bl	8001318 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d302      	bcc.n	8001a36 <HAL_DMA2D_PollForTransfer+0x9c>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10f      	bne.n	8001a56 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3a:	f043 0220 	orr.w	r2, r3, #32
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2203      	movs	r2, #3
 8001a46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e086      	b.n	8001b64 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0ac      	beq.n	80019be <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f003 0320 	and.w	r3, r3, #32
 8001a6e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	f003 0320 	and.w	r3, r3, #32
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d061      	beq.n	8001b4a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001a86:	f7ff fc47 	bl	8001318 <HAL_GetTick>
 8001a8a:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001a8c:	e056      	b.n	8001b3c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d02e      	beq.n	8001afe <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d005      	beq.n	8001ab6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aae:	f043 0204 	orr.w	r2, r3, #4
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f003 0320 	and.w	r3, r3, #32
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac4:	f043 0202 	orr.w	r2, r3, #2
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d005      	beq.n	8001ae2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ada:	f043 0201 	orr.w	r2, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2229      	movs	r2, #41	; 0x29
 8001ae8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2204      	movs	r2, #4
 8001aee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e032      	b.n	8001b64 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b04:	d01a      	beq.n	8001b3c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001b06:	f7ff fc07 	bl	8001318 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d302      	bcc.n	8001b1c <HAL_DMA2D_PollForTransfer+0x182>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10f      	bne.n	8001b3c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b20:	f043 0220 	orr.w	r2, r3, #32
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e013      	b.n	8001b64 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0a1      	beq.n	8001a8e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2212      	movs	r2, #18
 8001b50:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d026      	beq.n	8001bdc <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d021      	beq.n	8001bdc <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ba6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bac:	f043 0201 	orr.w	r2, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0320 	and.w	r3, r3, #32
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d026      	beq.n	8001c34 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d021      	beq.n	8001c34 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2220      	movs	r2, #32
 8001c06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0c:	f043 0202 	orr.w	r2, r3, #2
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2204      	movs	r2, #4
 8001c18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d026      	beq.n	8001c8c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d021      	beq.n	8001c8c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c56:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2208      	movs	r2, #8
 8001c5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c64:	f043 0204 	orr.w	r2, r3, #4
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2204      	movs	r2, #4
 8001c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d013      	beq.n	8001cbe <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00e      	beq.n	8001cbe <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cae:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f853 	bl	8001d64 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d024      	beq.n	8001d12 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d01f      	beq.n	8001d12 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ce0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d01f      	beq.n	8001d5c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d01a      	beq.n	8001d5c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d34:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2210      	movs	r2, #16
 8001d3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f80e 	bl	8001d78 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_DMA2D_ConfigLayer+0x20>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e079      	b.n	8001ea0 <HAL_DMA2D_ConfigLayer+0x114>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	011b      	lsls	r3, r3, #4
 8001dc0:	3318      	adds	r3, #24
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	041b      	lsls	r3, r3, #16
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001dd6:	4b35      	ldr	r3, [pc, #212]	; (8001eac <HAL_DMA2D_ConfigLayer+0x120>)
 8001dd8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b0a      	cmp	r3, #10
 8001de0:	d003      	beq.n	8001dea <HAL_DMA2D_ConfigLayer+0x5e>
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b09      	cmp	r3, #9
 8001de8:	d107      	bne.n	8001dfa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	e005      	b.n	8001e06 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	061b      	lsls	r3, r3, #24
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d120      	bne.n	8001e4e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	ea02 0103 	and.w	r1, r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b0a      	cmp	r3, #10
 8001e34:	d003      	beq.n	8001e3e <HAL_DMA2D_ConfigLayer+0xb2>
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b09      	cmp	r3, #9
 8001e3c:	d127      	bne.n	8001e8e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001e4a:	629a      	str	r2, [r3, #40]	; 0x28
 8001e4c:	e01f      	b.n	8001e8e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	69da      	ldr	r2, [r3, #28]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	ea02 0103 	and.w	r1, r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b0a      	cmp	r3, #10
 8001e76:	d003      	beq.n	8001e80 <HAL_DMA2D_ConfigLayer+0xf4>
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b09      	cmp	r3, #9
 8001e7e:	d106      	bne.n	8001e8e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001e8c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	371c      	adds	r7, #28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	ff03000f 	.word	0xff03000f

08001eb0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b08b      	sub	sp, #44	; 0x2c
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	041a      	lsls	r2, r3, #16
 8001ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001ee8:	d174      	bne.n	8001fd4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001ef0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001ef8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001f00:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d108      	bne.n	8001f22 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	431a      	orrs	r2, r3
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f20:	e053      	b.n	8001fca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d106      	bne.n	8001f38 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
 8001f36:	e048      	b.n	8001fca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d111      	bne.n	8001f64 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	0cdb      	lsrs	r3, r3, #19
 8001f44:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	0a9b      	lsrs	r3, r3, #10
 8001f4a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	08db      	lsrs	r3, r3, #3
 8001f50:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	02db      	lsls	r3, r3, #11
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
 8001f62:	e032      	b.n	8001fca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d117      	bne.n	8001f9c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	0fdb      	lsrs	r3, r3, #31
 8001f70:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	0cdb      	lsrs	r3, r3, #19
 8001f76:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	0adb      	lsrs	r3, r3, #11
 8001f7c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	08db      	lsrs	r3, r3, #3
 8001f82:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	015a      	lsls	r2, r3, #5
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	029b      	lsls	r3, r3, #10
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	03db      	lsls	r3, r3, #15
 8001f92:	4313      	orrs	r3, r2
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9a:	e016      	b.n	8001fca <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	0f1b      	lsrs	r3, r3, #28
 8001fa0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	0d1b      	lsrs	r3, r3, #20
 8001fa6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	0b1b      	lsrs	r3, r3, #12
 8001fac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	011a      	lsls	r2, r3, #4
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	021b      	lsls	r3, r3, #8
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	031b      	lsls	r3, r3, #12
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001fd2:	e003      	b.n	8001fdc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	60da      	str	r2, [r3, #12]
}
 8001fdc:	bf00      	nop
 8001fde:	372c      	adds	r7, #44	; 0x2c
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	; 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	e175      	b.n	80022f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002008:	2201      	movs	r2, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	429a      	cmp	r2, r3
 8002022:	f040 8164 	bne.w	80022ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x4e>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b12      	cmp	r3, #18
 8002034:	d123      	bne.n	800207e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	08da      	lsrs	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3208      	adds	r2, #8
 800203e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	220f      	movs	r2, #15
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	08da      	lsrs	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3208      	adds	r2, #8
 8002078:	69b9      	ldr	r1, [r7, #24]
 800207a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2203      	movs	r2, #3
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0203 	and.w	r2, r3, #3
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d00b      	beq.n	80020d2 <HAL_GPIO_Init+0xea>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d007      	beq.n	80020d2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020c6:	2b11      	cmp	r3, #17
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b12      	cmp	r3, #18
 80020d0:	d130      	bne.n	8002134 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	2203      	movs	r2, #3
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002108:	2201      	movs	r2, #1
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	f003 0201 	and.w	r2, r3, #1
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2203      	movs	r2, #3
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80be 	beq.w	80022ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002172:	4b65      	ldr	r3, [pc, #404]	; (8002308 <HAL_GPIO_Init+0x320>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	4a64      	ldr	r2, [pc, #400]	; (8002308 <HAL_GPIO_Init+0x320>)
 8002178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800217c:	6453      	str	r3, [r2, #68]	; 0x44
 800217e:	4b62      	ldr	r3, [pc, #392]	; (8002308 <HAL_GPIO_Init+0x320>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800218a:	4a60      	ldr	r2, [pc, #384]	; (800230c <HAL_GPIO_Init+0x324>)
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	089b      	lsrs	r3, r3, #2
 8002190:	3302      	adds	r3, #2
 8002192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	220f      	movs	r2, #15
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a57      	ldr	r2, [pc, #348]	; (8002310 <HAL_GPIO_Init+0x328>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d037      	beq.n	8002226 <HAL_GPIO_Init+0x23e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a56      	ldr	r2, [pc, #344]	; (8002314 <HAL_GPIO_Init+0x32c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d031      	beq.n	8002222 <HAL_GPIO_Init+0x23a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a55      	ldr	r2, [pc, #340]	; (8002318 <HAL_GPIO_Init+0x330>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d02b      	beq.n	800221e <HAL_GPIO_Init+0x236>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a54      	ldr	r2, [pc, #336]	; (800231c <HAL_GPIO_Init+0x334>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d025      	beq.n	800221a <HAL_GPIO_Init+0x232>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a53      	ldr	r2, [pc, #332]	; (8002320 <HAL_GPIO_Init+0x338>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01f      	beq.n	8002216 <HAL_GPIO_Init+0x22e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a52      	ldr	r2, [pc, #328]	; (8002324 <HAL_GPIO_Init+0x33c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d019      	beq.n	8002212 <HAL_GPIO_Init+0x22a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a51      	ldr	r2, [pc, #324]	; (8002328 <HAL_GPIO_Init+0x340>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d013      	beq.n	800220e <HAL_GPIO_Init+0x226>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a50      	ldr	r2, [pc, #320]	; (800232c <HAL_GPIO_Init+0x344>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00d      	beq.n	800220a <HAL_GPIO_Init+0x222>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a4f      	ldr	r2, [pc, #316]	; (8002330 <HAL_GPIO_Init+0x348>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d007      	beq.n	8002206 <HAL_GPIO_Init+0x21e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4e      	ldr	r2, [pc, #312]	; (8002334 <HAL_GPIO_Init+0x34c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d101      	bne.n	8002202 <HAL_GPIO_Init+0x21a>
 80021fe:	2309      	movs	r3, #9
 8002200:	e012      	b.n	8002228 <HAL_GPIO_Init+0x240>
 8002202:	230a      	movs	r3, #10
 8002204:	e010      	b.n	8002228 <HAL_GPIO_Init+0x240>
 8002206:	2308      	movs	r3, #8
 8002208:	e00e      	b.n	8002228 <HAL_GPIO_Init+0x240>
 800220a:	2307      	movs	r3, #7
 800220c:	e00c      	b.n	8002228 <HAL_GPIO_Init+0x240>
 800220e:	2306      	movs	r3, #6
 8002210:	e00a      	b.n	8002228 <HAL_GPIO_Init+0x240>
 8002212:	2305      	movs	r3, #5
 8002214:	e008      	b.n	8002228 <HAL_GPIO_Init+0x240>
 8002216:	2304      	movs	r3, #4
 8002218:	e006      	b.n	8002228 <HAL_GPIO_Init+0x240>
 800221a:	2303      	movs	r3, #3
 800221c:	e004      	b.n	8002228 <HAL_GPIO_Init+0x240>
 800221e:	2302      	movs	r3, #2
 8002220:	e002      	b.n	8002228 <HAL_GPIO_Init+0x240>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_GPIO_Init+0x240>
 8002226:	2300      	movs	r3, #0
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	f002 0203 	and.w	r2, r2, #3
 800222e:	0092      	lsls	r2, r2, #2
 8002230:	4093      	lsls	r3, r2
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002238:	4934      	ldr	r1, [pc, #208]	; (800230c <HAL_GPIO_Init+0x324>)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	089b      	lsrs	r3, r3, #2
 800223e:	3302      	adds	r3, #2
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002246:	4b3c      	ldr	r3, [pc, #240]	; (8002338 <HAL_GPIO_Init+0x350>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800226a:	4a33      	ldr	r2, [pc, #204]	; (8002338 <HAL_GPIO_Init+0x350>)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002270:	4b31      	ldr	r3, [pc, #196]	; (8002338 <HAL_GPIO_Init+0x350>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002294:	4a28      	ldr	r2, [pc, #160]	; (8002338 <HAL_GPIO_Init+0x350>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800229a:	4b27      	ldr	r3, [pc, #156]	; (8002338 <HAL_GPIO_Init+0x350>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022be:	4a1e      	ldr	r2, [pc, #120]	; (8002338 <HAL_GPIO_Init+0x350>)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c4:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <HAL_GPIO_Init+0x350>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e8:	4a13      	ldr	r2, [pc, #76]	; (8002338 <HAL_GPIO_Init+0x350>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3301      	adds	r3, #1
 80022f2:	61fb      	str	r3, [r7, #28]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	2b0f      	cmp	r3, #15
 80022f8:	f67f ae86 	bls.w	8002008 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022fc:	bf00      	nop
 80022fe:	3724      	adds	r7, #36	; 0x24
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	40023800 	.word	0x40023800
 800230c:	40013800 	.word	0x40013800
 8002310:	40020000 	.word	0x40020000
 8002314:	40020400 	.word	0x40020400
 8002318:	40020800 	.word	0x40020800
 800231c:	40020c00 	.word	0x40020c00
 8002320:	40021000 	.word	0x40021000
 8002324:	40021400 	.word	0x40021400
 8002328:	40021800 	.word	0x40021800
 800232c:	40021c00 	.word	0x40021c00
 8002330:	40022000 	.word	0x40022000
 8002334:	40022400 	.word	0x40022400
 8002338:	40013c00 	.word	0x40013c00

0800233c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
 8002348:	4613      	mov	r3, r2
 800234a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800234c:	787b      	ldrb	r3, [r7, #1]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002352:	887a      	ldrh	r2, [r7, #2]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002358:	e003      	b.n	8002362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800235a:	887b      	ldrh	r3, [r7, #2]
 800235c:	041a      	lsls	r2, r3, #16
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	619a      	str	r2, [r3, #24]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800237c:	695a      	ldr	r2, [r3, #20]
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	4013      	ands	r3, r2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d006      	beq.n	8002394 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002386:	4a05      	ldr	r2, [pc, #20]	; (800239c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	4618      	mov	r0, r3
 8002390:	f009 f8c8 	bl	800b524 <HAL_GPIO_EXTI_Callback>
  }
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40013c00 	.word	0x40013c00

080023a0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b089      	sub	sp, #36	; 0x24
 80023a4:	af04      	add	r7, sp, #16
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	4608      	mov	r0, r1
 80023aa:	4611      	mov	r1, r2
 80023ac:	461a      	mov	r2, r3
 80023ae:	4603      	mov	r3, r0
 80023b0:	70fb      	strb	r3, [r7, #3]
 80023b2:	460b      	mov	r3, r1
 80023b4:	70bb      	strb	r3, [r7, #2]
 80023b6:	4613      	mov	r3, r2
 80023b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_HCD_HC_Init+0x28>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e07f      	b.n	80024c8 <HAL_HCD_HC_Init+0x128>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80023d0:	78fa      	ldrb	r2, [r7, #3]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	440b      	add	r3, r1
 80023de:	333d      	adds	r3, #61	; 0x3d
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80023e4:	78fa      	ldrb	r2, [r7, #3]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	440b      	add	r3, r1
 80023f2:	3338      	adds	r3, #56	; 0x38
 80023f4:	787a      	ldrb	r2, [r7, #1]
 80023f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	440b      	add	r3, r1
 8002406:	3340      	adds	r3, #64	; 0x40
 8002408:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800240a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	440b      	add	r3, r1
 800241a:	3339      	adds	r3, #57	; 0x39
 800241c:	78fa      	ldrb	r2, [r7, #3]
 800241e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	440b      	add	r3, r1
 800242e:	333f      	adds	r3, #63	; 0x3f
 8002430:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002434:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002436:	78fa      	ldrb	r2, [r7, #3]
 8002438:	78bb      	ldrb	r3, [r7, #2]
 800243a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800243e:	b2d8      	uxtb	r0, r3
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	440b      	add	r3, r1
 800244c:	333a      	adds	r3, #58	; 0x3a
 800244e:	4602      	mov	r2, r0
 8002450:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002452:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002456:	2b00      	cmp	r3, #0
 8002458:	da0a      	bge.n	8002470 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	440b      	add	r3, r1
 8002468:	333b      	adds	r3, #59	; 0x3b
 800246a:	2201      	movs	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]
 800246e:	e009      	b.n	8002484 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	440b      	add	r3, r1
 800247e:	333b      	adds	r3, #59	; 0x3b
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	440b      	add	r3, r1
 8002492:	333c      	adds	r3, #60	; 0x3c
 8002494:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002498:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	787c      	ldrb	r4, [r7, #1]
 80024a0:	78ba      	ldrb	r2, [r7, #2]
 80024a2:	78f9      	ldrb	r1, [r7, #3]
 80024a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80024a6:	9302      	str	r3, [sp, #8]
 80024a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	4623      	mov	r3, r4
 80024b6:	f006 f8f5 	bl	80086a4 <USB_HC_Init>
 80024ba:	4603      	mov	r3, r0
 80024bc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd90      	pop	{r4, r7, pc}

080024d0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	4608      	mov	r0, r1
 80024da:	4611      	mov	r1, r2
 80024dc:	461a      	mov	r2, r3
 80024de:	4603      	mov	r3, r0
 80024e0:	70fb      	strb	r3, [r7, #3]
 80024e2:	460b      	mov	r3, r1
 80024e4:	70bb      	strb	r3, [r7, #2]
 80024e6:	4613      	mov	r3, r2
 80024e8:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80024ea:	78fa      	ldrb	r2, [r7, #3]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	440b      	add	r3, r1
 80024f8:	333b      	adds	r3, #59	; 0x3b
 80024fa:	78ba      	ldrb	r2, [r7, #2]
 80024fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80024fe:	78fa      	ldrb	r2, [r7, #3]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	440b      	add	r3, r1
 800250c:	333f      	adds	r3, #63	; 0x3f
 800250e:	787a      	ldrb	r2, [r7, #1]
 8002510:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002512:	7c3b      	ldrb	r3, [r7, #16]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	440b      	add	r3, r1
 8002526:	3342      	adds	r3, #66	; 0x42
 8002528:	2203      	movs	r2, #3
 800252a:	701a      	strb	r2, [r3, #0]
 800252c:	e009      	b.n	8002542 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800252e:	78fa      	ldrb	r2, [r7, #3]
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	440b      	add	r3, r1
 800253c:	3342      	adds	r3, #66	; 0x42
 800253e:	2202      	movs	r2, #2
 8002540:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002542:	787b      	ldrb	r3, [r7, #1]
 8002544:	2b03      	cmp	r3, #3
 8002546:	f200 80d6 	bhi.w	80026f6 <HAL_HCD_HC_SubmitRequest+0x226>
 800254a:	a201      	add	r2, pc, #4	; (adr r2, 8002550 <HAL_HCD_HC_SubmitRequest+0x80>)
 800254c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002550:	08002561 	.word	0x08002561
 8002554:	080026e1 	.word	0x080026e1
 8002558:	080025cd 	.word	0x080025cd
 800255c:	08002657 	.word	0x08002657
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002560:	7c3b      	ldrb	r3, [r7, #16]
 8002562:	2b01      	cmp	r3, #1
 8002564:	f040 80c9 	bne.w	80026fa <HAL_HCD_HC_SubmitRequest+0x22a>
 8002568:	78bb      	ldrb	r3, [r7, #2]
 800256a:	2b00      	cmp	r3, #0
 800256c:	f040 80c5 	bne.w	80026fa <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8002570:	8b3b      	ldrh	r3, [r7, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002576:	78fa      	ldrb	r2, [r7, #3]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	440b      	add	r3, r1
 8002584:	3351      	adds	r3, #81	; 0x51
 8002586:	2201      	movs	r2, #1
 8002588:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800258a:	78fa      	ldrb	r2, [r7, #3]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	440b      	add	r3, r1
 8002598:	3351      	adds	r3, #81	; 0x51
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10a      	bne.n	80025b6 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	440b      	add	r3, r1
 80025ae:	3342      	adds	r3, #66	; 0x42
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80025b4:	e0a1      	b.n	80026fa <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025b6:	78fa      	ldrb	r2, [r7, #3]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	440b      	add	r3, r1
 80025c4:	3342      	adds	r3, #66	; 0x42
 80025c6:	2202      	movs	r2, #2
 80025c8:	701a      	strb	r2, [r3, #0]
      break;
 80025ca:	e096      	b.n	80026fa <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80025cc:	78bb      	ldrb	r3, [r7, #2]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d120      	bne.n	8002614 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	440b      	add	r3, r1
 80025e0:	3351      	adds	r3, #81	; 0x51
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10a      	bne.n	80025fe <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	440b      	add	r3, r1
 80025f6:	3342      	adds	r3, #66	; 0x42
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80025fc:	e07e      	b.n	80026fc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025fe:	78fa      	ldrb	r2, [r7, #3]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	440b      	add	r3, r1
 800260c:	3342      	adds	r3, #66	; 0x42
 800260e:	2202      	movs	r2, #2
 8002610:	701a      	strb	r2, [r3, #0]
      break;
 8002612:	e073      	b.n	80026fc <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	440b      	add	r3, r1
 8002622:	3350      	adds	r3, #80	; 0x50
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10a      	bne.n	8002640 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800262a:	78fa      	ldrb	r2, [r7, #3]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	440b      	add	r3, r1
 8002638:	3342      	adds	r3, #66	; 0x42
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
      break;
 800263e:	e05d      	b.n	80026fc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	440b      	add	r3, r1
 800264e:	3342      	adds	r3, #66	; 0x42
 8002650:	2202      	movs	r2, #2
 8002652:	701a      	strb	r2, [r3, #0]
      break;
 8002654:	e052      	b.n	80026fc <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002656:	78bb      	ldrb	r3, [r7, #2]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d120      	bne.n	800269e <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	440b      	add	r3, r1
 800266a:	3351      	adds	r3, #81	; 0x51
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10a      	bne.n	8002688 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002672:	78fa      	ldrb	r2, [r7, #3]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	440b      	add	r3, r1
 8002680:	3342      	adds	r3, #66	; 0x42
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002686:	e039      	b.n	80026fc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	440b      	add	r3, r1
 8002696:	3342      	adds	r3, #66	; 0x42
 8002698:	2202      	movs	r2, #2
 800269a:	701a      	strb	r2, [r3, #0]
      break;
 800269c:	e02e      	b.n	80026fc <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800269e:	78fa      	ldrb	r2, [r7, #3]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	440b      	add	r3, r1
 80026ac:	3350      	adds	r3, #80	; 0x50
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10a      	bne.n	80026ca <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	440b      	add	r3, r1
 80026c2:	3342      	adds	r3, #66	; 0x42
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
      break;
 80026c8:	e018      	b.n	80026fc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026ca:	78fa      	ldrb	r2, [r7, #3]
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	440b      	add	r3, r1
 80026d8:	3342      	adds	r3, #66	; 0x42
 80026da:	2202      	movs	r2, #2
 80026dc:	701a      	strb	r2, [r3, #0]
      break;
 80026de:	e00d      	b.n	80026fc <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	440b      	add	r3, r1
 80026ee:	3342      	adds	r3, #66	; 0x42
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
      break;
 80026f4:	e002      	b.n	80026fc <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80026f6:	bf00      	nop
 80026f8:	e000      	b.n	80026fc <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80026fa:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	440b      	add	r3, r1
 800270a:	3344      	adds	r3, #68	; 0x44
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	8b39      	ldrh	r1, [r7, #24]
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4403      	add	r3, r0
 8002720:	3348      	adds	r3, #72	; 0x48
 8002722:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	440b      	add	r3, r1
 8002732:	335c      	adds	r3, #92	; 0x5c
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	440b      	add	r3, r1
 8002746:	334c      	adds	r3, #76	; 0x4c
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800274c:	78fa      	ldrb	r2, [r7, #3]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	440b      	add	r3, r1
 800275a:	3339      	adds	r3, #57	; 0x39
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	440b      	add	r3, r1
 800276e:	335d      	adds	r3, #93	; 0x5d
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	3338      	adds	r3, #56	; 0x38
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	18d1      	adds	r1, r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	461a      	mov	r2, r3
 8002790:	f006 f892 	bl	80088b8 <USB_HC_StartXfer>
 8002794:	4603      	mov	r3, r0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop

080027a0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f005 feb1 	bl	800851e <USB_GetMode>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b01      	cmp	r3, #1
 80027c0:	f040 80f1 	bne.w	80029a6 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f005 fe95 	bl	80084f8 <USB_ReadInterrupts>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80e7 	beq.w	80029a4 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f005 fe8c 	bl	80084f8 <USB_ReadInterrupts>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027ea:	d104      	bne.n	80027f6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80027f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f005 fe7c 	bl	80084f8 <USB_ReadInterrupts>
 8002800:	4603      	mov	r3, r0
 8002802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800280a:	d104      	bne.n	8002816 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002814:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f005 fe6c 	bl	80084f8 <USB_ReadInterrupts>
 8002820:	4603      	mov	r3, r0
 8002822:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002826:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800282a:	d104      	bne.n	8002836 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002834:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f005 fe5c 	bl	80084f8 <USB_ReadInterrupts>
 8002840:	4603      	mov	r3, r0
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b02      	cmp	r3, #2
 8002848:	d103      	bne.n	8002852 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2202      	movs	r2, #2
 8002850:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f005 fe4e 	bl	80084f8 <USB_ReadInterrupts>
 800285c:	4603      	mov	r3, r0
 800285e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002862:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002866:	d117      	bne.n	8002898 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002876:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800287a:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f009 fd97 	bl	800c3b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2101      	movs	r1, #1
 8002888:	4618      	mov	r0, r3
 800288a:	f005 fe56 	bl	800853a <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002896:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f005 fe2b 	bl	80084f8 <USB_ReadInterrupts>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028ac:	d102      	bne.n	80028b4 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f001 f8a6 	bl	8003a00 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f005 fe1d 	bl	80084f8 <USB_ReadInterrupts>
 80028be:	4603      	mov	r3, r0
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d106      	bne.n	80028d6 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f009 fd55 	bl	800c378 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2208      	movs	r2, #8
 80028d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f005 fe0c 	bl	80084f8 <USB_ReadInterrupts>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028ea:	d138      	bne.n	800295e <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f006 f925 	bl	8008b40 <USB_HC_ReadInterrupt>
 80028f6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	e025      	b.n	800294a <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	fa22 f303 	lsr.w	r3, r2, r3
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d018      	beq.n	8002944 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4413      	add	r3, r2
 800291a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002928:	d106      	bne.n	8002938 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	4619      	mov	r1, r3
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f8ac 	bl	8002a8e <HCD_HC_IN_IRQHandler>
 8002936:	e005      	b.n	8002944 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	4619      	mov	r1, r3
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fc3c 	bl	80031bc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	3301      	adds	r3, #1
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	429a      	cmp	r2, r3
 8002952:	d3d4      	bcc.n	80028fe <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800295c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f005 fdc8 	bl	80084f8 <USB_ReadInterrupts>
 8002968:	4603      	mov	r3, r0
 800296a:	f003 0310 	and.w	r3, r3, #16
 800296e:	2b10      	cmp	r3, #16
 8002970:	d101      	bne.n	8002976 <HAL_HCD_IRQHandler+0x1d6>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_HCD_IRQHandler+0x1d8>
 8002976:	2300      	movs	r3, #0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d014      	beq.n	80029a6 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0210 	bic.w	r2, r2, #16
 800298a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 ff8b 	bl	80038a8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	699a      	ldr	r2, [r3, #24]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 0210 	orr.w	r2, r2, #16
 80029a0:	619a      	str	r2, [r3, #24]
 80029a2:	e000      	b.n	80029a6 <HAL_HCD_IRQHandler+0x206>
      return;
 80029a4:	bf00      	nop
    }
  }
}
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_HCD_Start+0x16>
 80029be:	2302      	movs	r3, #2
 80029c0:	e013      	b.n	80029ea <HAL_HCD_Start+0x3e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f005 fcca 	bl	8008368 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2101      	movs	r1, #1
 80029da:	4618      	mov	r0, r3
 80029dc:	f005 fe11 	bl	8008602 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_HCD_Stop+0x16>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e00d      	b.n	8002a24 <HAL_HCD_Stop+0x32>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f006 f9df 	bl	8008dd8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f005 fdb8 	bl	80085ae <USB_ResetPort>
 8002a3e:	4603      	mov	r3, r0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	440b      	add	r3, r1
 8002a62:	335c      	adds	r3, #92	; 0x5c
 8002a64:	781b      	ldrb	r3, [r3, #0]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f005 fdf8 	bl	8008674 <USB_GetHostSpeed>
 8002a84:	4603      	mov	r3, r0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b086      	sub	sp, #24
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	460b      	mov	r3, r1
 8002a98:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002aa4:	78fb      	ldrb	r3, [r7, #3]
 8002aa6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d119      	bne.n	8002af2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aca:	461a      	mov	r2, r3
 8002acc:	2304      	movs	r3, #4
 8002ace:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	0151      	lsls	r1, r2, #5
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	440a      	add	r2, r1
 8002ae6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aea:	f043 0302 	orr.w	r3, r3, #2
 8002aee:	60d3      	str	r3, [r2, #12]
 8002af0:	e095      	b.n	8002c1e <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	2b20      	cmp	r3, #32
 8002b06:	d109      	bne.n	8002b1c <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	461a      	mov	r2, r3
 8002b16:	2320      	movs	r3, #32
 8002b18:	6093      	str	r3, [r2, #8]
 8002b1a:	e080      	b.n	8002c1e <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d134      	bne.n	8002b9c <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	015a      	lsls	r2, r3, #5
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	0151      	lsls	r1, r2, #5
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	440a      	add	r2, r1
 8002b48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b4c:	f043 0302 	orr.w	r3, r3, #2
 8002b50:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	440b      	add	r3, r1
 8002b60:	335d      	adds	r3, #93	; 0x5d
 8002b62:	2205      	movs	r2, #5
 8002b64:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b72:	461a      	mov	r2, r3
 8002b74:	2310      	movs	r3, #16
 8002b76:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b84:	461a      	mov	r2, r3
 8002b86:	2308      	movs	r3, #8
 8002b88:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f005 ffe4 	bl	8008b62 <USB_HC_Halt>
 8002b9a:	e040      	b.n	8002c1e <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb2:	d134      	bne.n	8002c1e <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	0151      	lsls	r1, r2, #5
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	440a      	add	r2, r1
 8002bca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bce:	f043 0302 	orr.w	r3, r3, #2
 8002bd2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	4611      	mov	r1, r2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f005 ffbf 	bl	8008b62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	2310      	movs	r3, #16
 8002bf4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	440b      	add	r3, r1
 8002c04:	335d      	adds	r3, #93	; 0x5d
 8002c06:	2208      	movs	r2, #8
 8002c08:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c16:	461a      	mov	r2, r3
 8002c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c1c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c34:	d122      	bne.n	8002c7c <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	0151      	lsls	r1, r2, #5
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	440a      	add	r2, r1
 8002c4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c50:	f043 0302 	orr.w	r3, r3, #2
 8002c54:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f005 ff7e 	bl	8008b62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c72:	461a      	mov	r2, r3
 8002c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c78:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002c7a:	e29b      	b.n	80031b4 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	f040 80c1 	bne.w	8002e16 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01b      	beq.n	8002cd4 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	440b      	add	r3, r1
 8002caa:	3348      	adds	r3, #72	; 0x48
 8002cac:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	0159      	lsls	r1, r3, #5
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	440b      	add	r3, r1
 8002cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002cc0:	1ad1      	subs	r1, r2, r3
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4403      	add	r3, r0
 8002cd0:	334c      	adds	r3, #76	; 0x4c
 8002cd2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	440b      	add	r3, r1
 8002ce2:	335d      	adds	r3, #93	; 0x5d
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3358      	adds	r3, #88	; 0x58
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d08:	461a      	mov	r2, r3
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	440b      	add	r3, r1
 8002d1c:	333f      	adds	r3, #63	; 0x3f
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00a      	beq.n	8002d3a <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	333f      	adds	r3, #63	; 0x3f
 8002d34:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d121      	bne.n	8002d7e <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	0151      	lsls	r1, r2, #5
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	440a      	add	r2, r1
 8002d50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d54:	f043 0302 	orr.w	r3, r3, #2
 8002d58:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f005 fefc 	bl	8008b62 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d76:	461a      	mov	r2, r3
 8002d78:	2310      	movs	r3, #16
 8002d7a:	6093      	str	r3, [r2, #8]
 8002d7c:	e034      	b.n	8002de8 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	440b      	add	r3, r1
 8002d8c:	333f      	adds	r3, #63	; 0x3f
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d129      	bne.n	8002de8 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	0151      	lsls	r1, r2, #5
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	440a      	add	r2, r1
 8002daa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002db2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	440b      	add	r3, r1
 8002dc2:	335c      	adds	r3, #92	; 0x5c
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	b2d8      	uxtb	r0, r3
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	440b      	add	r3, r1
 8002dda:	335c      	adds	r3, #92	; 0x5c
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	4601      	mov	r1, r0
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f009 faf2 	bl	800c3cc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	440b      	add	r3, r1
 8002df6:	3350      	adds	r3, #80	; 0x50
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	f083 0301 	eor.w	r3, r3, #1
 8002dfe:	b2d8      	uxtb	r0, r3
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	440b      	add	r3, r1
 8002e0e:	3350      	adds	r3, #80	; 0x50
 8002e10:	4602      	mov	r2, r0
 8002e12:	701a      	strb	r2, [r3, #0]
}
 8002e14:	e1ce      	b.n	80031b4 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	f040 80f1 	bne.w	8003010 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	0151      	lsls	r1, r2, #5
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	440a      	add	r2, r1
 8002e44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e48:	f023 0302 	bic.w	r3, r3, #2
 8002e4c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	440b      	add	r3, r1
 8002e5c:	335d      	adds	r3, #93	; 0x5d
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d10a      	bne.n	8002e7a <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	440b      	add	r3, r1
 8002e72:	335c      	adds	r3, #92	; 0x5c
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
 8002e78:	e0b0      	b.n	8002fdc <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	440b      	add	r3, r1
 8002e88:	335d      	adds	r3, #93	; 0x5d
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b05      	cmp	r3, #5
 8002e8e:	d10a      	bne.n	8002ea6 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	440b      	add	r3, r1
 8002e9e:	335c      	adds	r3, #92	; 0x5c
 8002ea0:	2205      	movs	r2, #5
 8002ea2:	701a      	strb	r2, [r3, #0]
 8002ea4:	e09a      	b.n	8002fdc <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	440b      	add	r3, r1
 8002eb4:	335d      	adds	r3, #93	; 0x5d
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b06      	cmp	r3, #6
 8002eba:	d00a      	beq.n	8002ed2 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	440b      	add	r3, r1
 8002eca:	335d      	adds	r3, #93	; 0x5d
 8002ecc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d156      	bne.n	8002f80 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	440b      	add	r3, r1
 8002ee0:	3358      	adds	r3, #88	; 0x58
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	1c59      	adds	r1, r3, #1
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4403      	add	r3, r0
 8002ef4:	3358      	adds	r3, #88	; 0x58
 8002ef6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	440b      	add	r3, r1
 8002f06:	3358      	adds	r3, #88	; 0x58
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d914      	bls.n	8002f38 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	440b      	add	r3, r1
 8002f1c:	3358      	adds	r3, #88	; 0x58
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	440b      	add	r3, r1
 8002f30:	335c      	adds	r3, #92	; 0x5c
 8002f32:	2204      	movs	r2, #4
 8002f34:	701a      	strb	r2, [r3, #0]
 8002f36:	e009      	b.n	8002f4c <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	440b      	add	r3, r1
 8002f46:	335c      	adds	r3, #92	; 0x5c
 8002f48:	2202      	movs	r2, #2
 8002f4a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f62:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f6a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	e02d      	b.n	8002fdc <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	440b      	add	r3, r1
 8002f8e:	335d      	adds	r3, #93	; 0x5d
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d122      	bne.n	8002fdc <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	440b      	add	r3, r1
 8002fa4:	335c      	adds	r3, #92	; 0x5c
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fc0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fc8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2302      	movs	r3, #2
 8002fec:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	b2d8      	uxtb	r0, r3
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	440b      	add	r3, r1
 8003000:	335c      	adds	r3, #92	; 0x5c
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	4601      	mov	r1, r0
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f009 f9df 	bl	800c3cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800300e:	e0d1      	b.n	80031b4 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	4413      	add	r3, r2
 8003018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003022:	2b80      	cmp	r3, #128	; 0x80
 8003024:	d13e      	bne.n	80030a4 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	4413      	add	r3, r2
 800302e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	0151      	lsls	r1, r2, #5
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	440a      	add	r2, r1
 800303c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003040:	f043 0302 	orr.w	r3, r3, #2
 8003044:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	440b      	add	r3, r1
 8003054:	3358      	adds	r3, #88	; 0x58
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	1c59      	adds	r1, r3, #1
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4403      	add	r3, r0
 8003068:	3358      	adds	r3, #88	; 0x58
 800306a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	440b      	add	r3, r1
 800307a:	335d      	adds	r3, #93	; 0x5d
 800307c:	2206      	movs	r2, #6
 800307e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	4611      	mov	r1, r2
 800308a:	4618      	mov	r0, r3
 800308c:	f005 fd69 	bl	8008b62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4413      	add	r3, r2
 8003098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309c:	461a      	mov	r2, r3
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	6093      	str	r3, [r2, #8]
}
 80030a2:	e087      	b.n	80031b4 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b10      	cmp	r3, #16
 80030b8:	d17c      	bne.n	80031b4 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	440b      	add	r3, r1
 80030c8:	333f      	adds	r3, #63	; 0x3f
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d122      	bne.n	8003116 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	440b      	add	r3, r1
 80030de:	3358      	adds	r3, #88	; 0x58
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	015a      	lsls	r2, r3, #5
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	4413      	add	r3, r2
 80030ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	0151      	lsls	r1, r2, #5
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	440a      	add	r2, r1
 80030fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030fe:	f043 0302 	orr.w	r3, r3, #2
 8003102:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	4611      	mov	r1, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f005 fd27 	bl	8008b62 <USB_HC_Halt>
 8003114:	e045      	b.n	80031a2 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	440b      	add	r3, r1
 8003124:	333f      	adds	r3, #63	; 0x3f
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	440b      	add	r3, r1
 800313a:	333f      	adds	r3, #63	; 0x3f
 800313c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800313e:	2b02      	cmp	r3, #2
 8003140:	d12f      	bne.n	80031a2 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	440b      	add	r3, r1
 8003150:	3358      	adds	r3, #88	; 0x58
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d121      	bne.n	80031a2 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	440b      	add	r3, r1
 800316c:	335d      	adds	r3, #93	; 0x5d
 800316e:	2203      	movs	r2, #3
 8003170:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4413      	add	r3, r2
 800317a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	0151      	lsls	r1, r2, #5
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	440a      	add	r2, r1
 8003188:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800318c:	f043 0302 	orr.w	r3, r3, #2
 8003190:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	4611      	mov	r1, r2
 800319c:	4618      	mov	r0, r3
 800319e:	f005 fce0 	bl	8008b62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ae:	461a      	mov	r2, r3
 80031b0:	2310      	movs	r3, #16
 80031b2:	6093      	str	r3, [r2, #8]
}
 80031b4:	bf00      	nop
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d119      	bne.n	8003220 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f8:	461a      	mov	r2, r3
 80031fa:	2304      	movs	r3, #4
 80031fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4413      	add	r3, r2
 8003206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	0151      	lsls	r1, r2, #5
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	440a      	add	r2, r1
 8003214:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003218:	f043 0302 	orr.w	r3, r3, #2
 800321c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800321e:	e33e      	b.n	800389e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4413      	add	r3, r2
 8003228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0320 	and.w	r3, r3, #32
 8003232:	2b20      	cmp	r3, #32
 8003234:	d141      	bne.n	80032ba <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4413      	add	r3, r2
 800323e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003242:	461a      	mov	r2, r3
 8003244:	2320      	movs	r3, #32
 8003246:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	440b      	add	r3, r1
 8003256:	333d      	adds	r3, #61	; 0x3d
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b01      	cmp	r3, #1
 800325c:	f040 831f 	bne.w	800389e <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	440b      	add	r3, r1
 800326e:	333d      	adds	r3, #61	; 0x3d
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	440b      	add	r3, r1
 8003282:	335c      	adds	r3, #92	; 0x5c
 8003284:	2202      	movs	r2, #2
 8003286:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4413      	add	r3, r2
 8003290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	0151      	lsls	r1, r2, #5
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	440a      	add	r2, r1
 800329e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032a2:	f043 0302 	orr.w	r3, r3, #2
 80032a6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	4611      	mov	r1, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f005 fc55 	bl	8008b62 <USB_HC_Halt>
}
 80032b8:	e2f1      	b.n	800389e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	015a      	lsls	r2, r3, #5
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4413      	add	r3, r2
 80032c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032cc:	2b40      	cmp	r3, #64	; 0x40
 80032ce:	d13f      	bne.n	8003350 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	440b      	add	r3, r1
 80032de:	335d      	adds	r3, #93	; 0x5d
 80032e0:	2204      	movs	r2, #4
 80032e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	440b      	add	r3, r1
 80032f2:	333d      	adds	r3, #61	; 0x3d
 80032f4:	2201      	movs	r2, #1
 80032f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	440b      	add	r3, r1
 8003306:	3358      	adds	r3, #88	; 0x58
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4413      	add	r3, r2
 8003314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	0151      	lsls	r1, r2, #5
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	440a      	add	r2, r1
 8003322:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003326:	f043 0302 	orr.w	r3, r3, #2
 800332a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	4611      	mov	r1, r2
 8003336:	4618      	mov	r0, r3
 8003338:	f005 fc13 	bl	8008b62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	4413      	add	r3, r2
 8003344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003348:	461a      	mov	r2, r3
 800334a:	2340      	movs	r3, #64	; 0x40
 800334c:	6093      	str	r3, [r2, #8]
}
 800334e:	e2a6      	b.n	800389e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003366:	d122      	bne.n	80033ae <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4413      	add	r3, r2
 8003370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	0151      	lsls	r1, r2, #5
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	440a      	add	r2, r1
 800337e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003382:	f043 0302 	orr.w	r3, r3, #2
 8003386:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	4611      	mov	r1, r2
 8003392:	4618      	mov	r0, r3
 8003394:	f005 fbe5 	bl	8008b62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a4:	461a      	mov	r2, r3
 80033a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033aa:	6093      	str	r3, [r2, #8]
}
 80033ac:	e277      	b.n	800389e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d135      	bne.n	8003430 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	440b      	add	r3, r1
 80033d2:	3358      	adds	r3, #88	; 0x58
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	0151      	lsls	r1, r2, #5
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	440a      	add	r2, r1
 80033ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033f2:	f043 0302 	orr.w	r3, r3, #2
 80033f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	4611      	mov	r1, r2
 8003402:	4618      	mov	r0, r3
 8003404:	f005 fbad 	bl	8008b62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4413      	add	r3, r2
 8003410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003414:	461a      	mov	r2, r3
 8003416:	2301      	movs	r3, #1
 8003418:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	440b      	add	r3, r1
 8003428:	335d      	adds	r3, #93	; 0x5d
 800342a:	2201      	movs	r2, #1
 800342c:	701a      	strb	r2, [r3, #0]
}
 800342e:	e236      	b.n	800389e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4413      	add	r3, r2
 8003438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b08      	cmp	r3, #8
 8003444:	d12b      	bne.n	800349e <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4413      	add	r3, r2
 800344e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003452:	461a      	mov	r2, r3
 8003454:	2308      	movs	r3, #8
 8003456:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4413      	add	r3, r2
 8003460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	0151      	lsls	r1, r2, #5
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	440a      	add	r2, r1
 800346e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003472:	f043 0302 	orr.w	r3, r3, #2
 8003476:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f005 fb6d 	bl	8008b62 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	440b      	add	r3, r1
 8003496:	335d      	adds	r3, #93	; 0x5d
 8003498:	2205      	movs	r2, #5
 800349a:	701a      	strb	r2, [r3, #0]
}
 800349c:	e1ff      	b.n	800389e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	2b10      	cmp	r3, #16
 80034b2:	d155      	bne.n	8003560 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	440b      	add	r3, r1
 80034c2:	3358      	adds	r3, #88	; 0x58
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	440b      	add	r3, r1
 80034d6:	335d      	adds	r3, #93	; 0x5d
 80034d8:	2203      	movs	r2, #3
 80034da:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	440b      	add	r3, r1
 80034ea:	333d      	adds	r3, #61	; 0x3d
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d114      	bne.n	800351c <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	440b      	add	r3, r1
 8003500:	333c      	adds	r3, #60	; 0x3c
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d109      	bne.n	800351c <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	440b      	add	r3, r1
 8003516:	333d      	adds	r3, #61	; 0x3d
 8003518:	2201      	movs	r2, #1
 800351a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4413      	add	r3, r2
 8003524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	0151      	lsls	r1, r2, #5
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	440a      	add	r2, r1
 8003532:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003536:	f043 0302 	orr.w	r3, r3, #2
 800353a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	4611      	mov	r1, r2
 8003546:	4618      	mov	r0, r3
 8003548:	f005 fb0b 	bl	8008b62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4413      	add	r3, r2
 8003554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003558:	461a      	mov	r2, r3
 800355a:	2310      	movs	r3, #16
 800355c:	6093      	str	r3, [r2, #8]
}
 800355e:	e19e      	b.n	800389e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4413      	add	r3, r2
 8003568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003572:	2b80      	cmp	r3, #128	; 0x80
 8003574:	d12b      	bne.n	80035ce <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4413      	add	r3, r2
 800357e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	0151      	lsls	r1, r2, #5
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	440a      	add	r2, r1
 800358c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003590:	f043 0302 	orr.w	r3, r3, #2
 8003594:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f005 fade 	bl	8008b62 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	440b      	add	r3, r1
 80035b4:	335d      	adds	r3, #93	; 0x5d
 80035b6:	2206      	movs	r2, #6
 80035b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c6:	461a      	mov	r2, r3
 80035c8:	2380      	movs	r3, #128	; 0x80
 80035ca:	6093      	str	r3, [r2, #8]
}
 80035cc:	e167      	b.n	800389e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e4:	d135      	bne.n	8003652 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	0151      	lsls	r1, r2, #5
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	440a      	add	r2, r1
 80035fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003600:	f043 0302 	orr.w	r3, r3, #2
 8003604:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	4611      	mov	r1, r2
 8003610:	4618      	mov	r0, r3
 8003612:	f005 faa6 	bl	8008b62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4413      	add	r3, r2
 800361e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003622:	461a      	mov	r2, r3
 8003624:	2310      	movs	r3, #16
 8003626:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4413      	add	r3, r2
 8003630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003634:	461a      	mov	r2, r3
 8003636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800363a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	440b      	add	r3, r1
 800364a:	335d      	adds	r3, #93	; 0x5d
 800364c:	2208      	movs	r2, #8
 800364e:	701a      	strb	r2, [r3, #0]
}
 8003650:	e125      	b.n	800389e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4413      	add	r3, r2
 800365a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b02      	cmp	r3, #2
 8003666:	f040 811a 	bne.w	800389e <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4413      	add	r3, r2
 8003672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	0151      	lsls	r1, r2, #5
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	440a      	add	r2, r1
 8003680:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003684:	f023 0302 	bic.w	r3, r3, #2
 8003688:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	440b      	add	r3, r1
 8003698:	335d      	adds	r3, #93	; 0x5d
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d137      	bne.n	8003710 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	440b      	add	r3, r1
 80036ae:	335c      	adds	r3, #92	; 0x5c
 80036b0:	2201      	movs	r2, #1
 80036b2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	440b      	add	r3, r1
 80036c2:	333f      	adds	r3, #63	; 0x3f
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d00b      	beq.n	80036e2 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	440b      	add	r3, r1
 80036d8:	333f      	adds	r3, #63	; 0x3f
 80036da:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80036dc:	2b03      	cmp	r3, #3
 80036de:	f040 80c5 	bne.w	800386c <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4613      	mov	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	440b      	add	r3, r1
 80036f0:	3351      	adds	r3, #81	; 0x51
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	f083 0301 	eor.w	r3, r3, #1
 80036f8:	b2d8      	uxtb	r0, r3
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	440b      	add	r3, r1
 8003708:	3351      	adds	r3, #81	; 0x51
 800370a:	4602      	mov	r2, r0
 800370c:	701a      	strb	r2, [r3, #0]
 800370e:	e0ad      	b.n	800386c <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	440b      	add	r3, r1
 800371e:	335d      	adds	r3, #93	; 0x5d
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b03      	cmp	r3, #3
 8003724:	d10a      	bne.n	800373c <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	440b      	add	r3, r1
 8003734:	335c      	adds	r3, #92	; 0x5c
 8003736:	2202      	movs	r2, #2
 8003738:	701a      	strb	r2, [r3, #0]
 800373a:	e097      	b.n	800386c <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	440b      	add	r3, r1
 800374a:	335d      	adds	r3, #93	; 0x5d
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b04      	cmp	r3, #4
 8003750:	d10a      	bne.n	8003768 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	440b      	add	r3, r1
 8003760:	335c      	adds	r3, #92	; 0x5c
 8003762:	2202      	movs	r2, #2
 8003764:	701a      	strb	r2, [r3, #0]
 8003766:	e081      	b.n	800386c <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	440b      	add	r3, r1
 8003776:	335d      	adds	r3, #93	; 0x5d
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b05      	cmp	r3, #5
 800377c:	d10a      	bne.n	8003794 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	440b      	add	r3, r1
 800378c:	335c      	adds	r3, #92	; 0x5c
 800378e:	2205      	movs	r2, #5
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	e06b      	b.n	800386c <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	440b      	add	r3, r1
 80037a2:	335d      	adds	r3, #93	; 0x5d
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d00a      	beq.n	80037c0 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	440b      	add	r3, r1
 80037b8:	335d      	adds	r3, #93	; 0x5d
 80037ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d155      	bne.n	800386c <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	440b      	add	r3, r1
 80037ce:	3358      	adds	r3, #88	; 0x58
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	1c59      	adds	r1, r3, #1
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4403      	add	r3, r0
 80037e2:	3358      	adds	r3, #88	; 0x58
 80037e4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	440b      	add	r3, r1
 80037f4:	3358      	adds	r3, #88	; 0x58
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d914      	bls.n	8003826 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	440b      	add	r3, r1
 800380a:	3358      	adds	r3, #88	; 0x58
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	440b      	add	r3, r1
 800381e:	335c      	adds	r3, #92	; 0x5c
 8003820:	2204      	movs	r2, #4
 8003822:	701a      	strb	r2, [r3, #0]
 8003824:	e009      	b.n	800383a <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	440b      	add	r3, r1
 8003834:	335c      	adds	r3, #92	; 0x5c
 8003836:	2202      	movs	r2, #2
 8003838:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4413      	add	r3, r2
 8003842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003850:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003858:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4413      	add	r3, r2
 8003862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003866:	461a      	mov	r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	4413      	add	r3, r2
 8003874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003878:	461a      	mov	r2, r3
 800387a:	2302      	movs	r3, #2
 800387c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	b2d8      	uxtb	r0, r3
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4613      	mov	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	440b      	add	r3, r1
 8003890:	335c      	adds	r3, #92	; 0x5c
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	4601      	mov	r1, r0
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f008 fd97 	bl	800c3cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800389e:	bf00      	nop
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08a      	sub	sp, #40	; 0x28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	0c5b      	lsrs	r3, r3, #17
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	091b      	lsrs	r3, r3, #4
 80038d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038dc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d003      	beq.n	80038ec <HCD_RXQLVL_IRQHandler+0x44>
 80038e4:	2b05      	cmp	r3, #5
 80038e6:	f000 8082 	beq.w	80039ee <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80038ea:	e083      	b.n	80039f4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d07f      	beq.n	80039f2 <HCD_RXQLVL_IRQHandler+0x14a>
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	440b      	add	r3, r1
 8003900:	3344      	adds	r3, #68	; 0x44
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d074      	beq.n	80039f2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	440b      	add	r3, r1
 800391a:	3344      	adds	r3, #68	; 0x44
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	b292      	uxth	r2, r2
 8003922:	4619      	mov	r1, r3
 8003924:	f004 fdbf 	bl	80084a6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	440b      	add	r3, r1
 8003936:	3344      	adds	r3, #68	; 0x44
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	18d1      	adds	r1, r2, r3
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4403      	add	r3, r0
 800394c:	3344      	adds	r3, #68	; 0x44
 800394e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	440b      	add	r3, r1
 800395e:	334c      	adds	r3, #76	; 0x4c
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	18d1      	adds	r1, r2, r3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4403      	add	r3, r0
 8003974:	334c      	adds	r3, #76	; 0x4c
 8003976:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	4413      	add	r3, r2
 8003980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003984:	691a      	ldr	r2, [r3, #16]
 8003986:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <HCD_RXQLVL_IRQHandler+0x154>)
 8003988:	4013      	ands	r3, r2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d031      	beq.n	80039f2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	4413      	add	r3, r2
 8003996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039a4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039ac:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ba:	461a      	mov	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	440b      	add	r3, r1
 80039ce:	3350      	adds	r3, #80	; 0x50
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	f083 0301 	eor.w	r3, r3, #1
 80039d6:	b2d8      	uxtb	r0, r3
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4613      	mov	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	440b      	add	r3, r1
 80039e6:	3350      	adds	r3, #80	; 0x50
 80039e8:	4602      	mov	r2, r0
 80039ea:	701a      	strb	r2, [r3, #0]
      break;
 80039ec:	e001      	b.n	80039f2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80039ee:	bf00      	nop
 80039f0:	e000      	b.n	80039f4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80039f2:	bf00      	nop
  }
}
 80039f4:	bf00      	nop
 80039f6:	3728      	adds	r7, #40	; 0x28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	1ff80000 	.word	0x1ff80000

08003a00 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a2c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d113      	bne.n	8003a60 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d10a      	bne.n	8003a58 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699a      	ldr	r2, [r3, #24]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003a50:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f008 fc9e 	bl	800c394 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f043 0302 	orr.w	r3, r3, #2
 8003a5e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d147      	bne.n	8003afa <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f043 0308 	orr.w	r3, r3, #8
 8003a70:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d129      	bne.n	8003ad0 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d113      	bne.n	8003aac <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003a8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a8e:	d106      	bne.n	8003a9e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2102      	movs	r1, #2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f004 fd4f 	bl	800853a <USB_InitFSLSPClkSel>
 8003a9c:	e011      	b.n	8003ac2 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f004 fd48 	bl	800853a <USB_InitFSLSPClkSel>
 8003aaa:	e00a      	b.n	8003ac2 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d106      	bne.n	8003ac2 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003aba:	461a      	mov	r2, r3
 8003abc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003ac0:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f008 fc90 	bl	800c3e8 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f008 fc63 	bl	800c394 <HAL_HCD_Connect_Callback>
 8003ace:	e014      	b.n	8003afa <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f008 fc97 	bl	800c404 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003ae4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ae8:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	699a      	ldr	r2, [r3, #24]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003af8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d103      	bne.n	8003b0c <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f043 0320 	orr.w	r3, r3, #32
 8003b0a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b12:	461a      	mov	r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	6013      	str	r3, [r2, #0]
}
 8003b18:	bf00      	nop
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e07f      	b.n	8003c32 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f007 fda8 	bl	800b69c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2224      	movs	r2, #36	; 0x24
 8003b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0201 	bic.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d107      	bne.n	8003b9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b96:	609a      	str	r2, [r3, #8]
 8003b98:	e006      	b.n	8003ba8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ba6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d104      	bne.n	8003bba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6859      	ldr	r1, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	4b1d      	ldr	r3, [pc, #116]	; (8003c3c <HAL_I2C_Init+0x11c>)
 8003bc6:	430b      	orrs	r3, r1
 8003bc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bd8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	ea42 0103 	orr.w	r1, r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	021a      	lsls	r2, r3, #8
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69d9      	ldr	r1, [r3, #28]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1a      	ldr	r2, [r3, #32]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	02008000 	.word	0x02008000

08003c40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b20      	cmp	r3, #32
 8003c54:	d138      	bne.n	8003cc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e032      	b.n	8003cca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2224      	movs	r2, #36	; 0x24
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0201 	bic.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6819      	ldr	r1, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e000      	b.n	8003cca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cc8:	2302      	movs	r3, #2
  }
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b085      	sub	sp, #20
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d139      	bne.n	8003d60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d101      	bne.n	8003cfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e033      	b.n	8003d62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2224      	movs	r2, #36	; 0x24
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0201 	bic.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	021b      	lsls	r3, r3, #8
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	e000      	b.n	8003d62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d60:	2302      	movs	r3, #2
  }
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e0bf      	b.n	8003f02 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f007 fcf8 	bl	800b78c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699a      	ldr	r2, [r3, #24]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003db2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6999      	ldr	r1, [r3, #24]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003dc8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6899      	ldr	r1, [r3, #8]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	4b4a      	ldr	r3, [pc, #296]	; (8003f0c <HAL_LTDC_Init+0x19c>)
 8003de4:	400b      	ands	r3, r1
 8003de6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	041b      	lsls	r3, r3, #16
 8003dee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6899      	ldr	r1, [r3, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699a      	ldr	r2, [r3, #24]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68d9      	ldr	r1, [r3, #12]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4b3e      	ldr	r3, [pc, #248]	; (8003f0c <HAL_LTDC_Init+0x19c>)
 8003e12:	400b      	ands	r3, r1
 8003e14:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	041b      	lsls	r3, r3, #16
 8003e1c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68d9      	ldr	r1, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1a      	ldr	r2, [r3, #32]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6919      	ldr	r1, [r3, #16]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	4b33      	ldr	r3, [pc, #204]	; (8003f0c <HAL_LTDC_Init+0x19c>)
 8003e40:	400b      	ands	r3, r1
 8003e42:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	041b      	lsls	r3, r3, #16
 8003e4a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6919      	ldr	r1, [r3, #16]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6959      	ldr	r1, [r3, #20]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	4b27      	ldr	r3, [pc, #156]	; (8003f0c <HAL_LTDC_Init+0x19c>)
 8003e6e:	400b      	ands	r3, r1
 8003e70:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	041b      	lsls	r3, r3, #16
 8003e78:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6959      	ldr	r1, [r3, #20]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e96:	021b      	lsls	r3, r3, #8
 8003e98:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003ea0:	041b      	lsls	r3, r3, #16
 8003ea2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0206 	orr.w	r2, r2, #6
 8003ede:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	f000f800 	.word	0xf000f800

08003f10 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f26:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f003 0304 	and.w	r3, r3, #4
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d023      	beq.n	8003f7a <HAL_LTDC_IRQHandler+0x6a>
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01e      	beq.n	8003f7a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0204 	bic.w	r2, r2, #4
 8003f4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2204      	movs	r2, #4
 8003f52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f5a:	f043 0201 	orr.w	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2204      	movs	r2, #4
 8003f68:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f86f 	bl	8004058 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d023      	beq.n	8003fcc <HAL_LTDC_IRQHandler+0xbc>
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d01e      	beq.n	8003fcc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0202 	bic.w	r2, r2, #2
 8003f9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fac:	f043 0202 	orr.w	r2, r3, #2
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2204      	movs	r2, #4
 8003fba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f846 	bl	8004058 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01b      	beq.n	800400e <HAL_LTDC_IRQHandler+0xfe>
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d016      	beq.n	800400e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0201 	bic.w	r2, r2, #1
 8003fee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f82f 	bl	800406c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d01b      	beq.n	8004050 <HAL_LTDC_IRQHandler+0x140>
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d016      	beq.n	8004050 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0208 	bic.w	r2, r2, #8
 8004030:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2208      	movs	r2, #8
 8004038:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f818 	bl	8004080 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004050:	bf00      	nop
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004094:	b5b0      	push	{r4, r5, r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_LTDC_ConfigLayer+0x1a>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e02c      	b.n	8004108 <HAL_LTDC_ConfigLayer+0x74>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2202      	movs	r2, #2
 80040ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2134      	movs	r1, #52	; 0x34
 80040c4:	fb01 f303 	mul.w	r3, r1, r3
 80040c8:	4413      	add	r3, r2
 80040ca:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	4614      	mov	r4, r2
 80040d2:	461d      	mov	r5, r3
 80040d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040e0:	682b      	ldr	r3, [r5, #0]
 80040e2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	68b9      	ldr	r1, [r7, #8]
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 f81f 	bl	800412c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2201      	movs	r2, #1
 80040f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bdb0      	pop	{r4, r5, r7, pc}

08004110 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800411e:	b2db      	uxtb	r3, r3
}
 8004120:	4618      	mov	r0, r3
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800412c:	b480      	push	{r7}
 800412e:	b089      	sub	sp, #36	; 0x24
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	0c1b      	lsrs	r3, r3, #16
 8004144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004148:	4413      	add	r3, r2
 800414a:	041b      	lsls	r3, r3, #16
 800414c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	01db      	lsls	r3, r3, #7
 8004158:	4413      	add	r3, r2
 800415a:	3384      	adds	r3, #132	; 0x84
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	6812      	ldr	r2, [r2, #0]
 8004162:	4611      	mov	r1, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	01d2      	lsls	r2, r2, #7
 8004168:	440a      	add	r2, r1
 800416a:	3284      	adds	r2, #132	; 0x84
 800416c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004170:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	0c1b      	lsrs	r3, r3, #16
 800417e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004182:	4413      	add	r3, r2
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4619      	mov	r1, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	01db      	lsls	r3, r3, #7
 8004190:	440b      	add	r3, r1
 8004192:	3384      	adds	r3, #132	; 0x84
 8004194:	4619      	mov	r1, r3
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	4313      	orrs	r3, r2
 800419a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041aa:	4413      	add	r3, r2
 80041ac:	041b      	lsls	r3, r3, #16
 80041ae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	461a      	mov	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	01db      	lsls	r3, r3, #7
 80041ba:	4413      	add	r3, r2
 80041bc:	3384      	adds	r3, #132	; 0x84
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	4611      	mov	r1, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	01d2      	lsls	r2, r2, #7
 80041ca:	440a      	add	r2, r1
 80041cc:	3284      	adds	r2, #132	; 0x84
 80041ce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80041d2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041e2:	4413      	add	r3, r2
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4619      	mov	r1, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	01db      	lsls	r3, r3, #7
 80041f0:	440b      	add	r3, r1
 80041f2:	3384      	adds	r3, #132	; 0x84
 80041f4:	4619      	mov	r1, r3
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	461a      	mov	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	01db      	lsls	r3, r3, #7
 8004206:	4413      	add	r3, r2
 8004208:	3384      	adds	r3, #132	; 0x84
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	4611      	mov	r1, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	01d2      	lsls	r2, r2, #7
 8004216:	440a      	add	r2, r1
 8004218:	3284      	adds	r2, #132	; 0x84
 800421a:	f023 0307 	bic.w	r3, r3, #7
 800421e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	01db      	lsls	r3, r3, #7
 800422a:	4413      	add	r3, r2
 800422c:	3384      	adds	r3, #132	; 0x84
 800422e:	461a      	mov	r2, r3
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800423c:	021b      	lsls	r3, r3, #8
 800423e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004246:	041b      	lsls	r3, r3, #16
 8004248:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	061b      	lsls	r3, r3, #24
 8004250:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	461a      	mov	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	01db      	lsls	r3, r3, #7
 800425c:	4413      	add	r3, r2
 800425e:	3384      	adds	r3, #132	; 0x84
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	01db      	lsls	r3, r3, #7
 800426c:	4413      	add	r3, r2
 800426e:	3384      	adds	r3, #132	; 0x84
 8004270:	461a      	mov	r2, r3
 8004272:	2300      	movs	r3, #0
 8004274:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800427c:	461a      	mov	r2, r3
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	431a      	orrs	r2, r3
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	431a      	orrs	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4619      	mov	r1, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	01db      	lsls	r3, r3, #7
 8004290:	440b      	add	r3, r1
 8004292:	3384      	adds	r3, #132	; 0x84
 8004294:	4619      	mov	r1, r3
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	4313      	orrs	r3, r2
 800429a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	01db      	lsls	r3, r3, #7
 80042a6:	4413      	add	r3, r2
 80042a8:	3384      	adds	r3, #132	; 0x84
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	4611      	mov	r1, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	01d2      	lsls	r2, r2, #7
 80042b6:	440a      	add	r2, r1
 80042b8:	3284      	adds	r2, #132	; 0x84
 80042ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042be:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	01db      	lsls	r3, r3, #7
 80042ca:	4413      	add	r3, r2
 80042cc:	3384      	adds	r3, #132	; 0x84
 80042ce:	461a      	mov	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	01db      	lsls	r3, r3, #7
 80042e0:	4413      	add	r3, r2
 80042e2:	3384      	adds	r3, #132	; 0x84
 80042e4:	69da      	ldr	r2, [r3, #28]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4619      	mov	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	01db      	lsls	r3, r3, #7
 80042f0:	440b      	add	r3, r1
 80042f2:	3384      	adds	r3, #132	; 0x84
 80042f4:	4619      	mov	r1, r3
 80042f6:	4b58      	ldr	r3, [pc, #352]	; (8004458 <LTDC_SetConfig+0x32c>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	69da      	ldr	r2, [r3, #28]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	68f9      	ldr	r1, [r7, #12]
 8004306:	6809      	ldr	r1, [r1, #0]
 8004308:	4608      	mov	r0, r1
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	01c9      	lsls	r1, r1, #7
 800430e:	4401      	add	r1, r0
 8004310:	3184      	adds	r1, #132	; 0x84
 8004312:	4313      	orrs	r3, r2
 8004314:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	01db      	lsls	r3, r3, #7
 8004320:	4413      	add	r3, r2
 8004322:	3384      	adds	r3, #132	; 0x84
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	01db      	lsls	r3, r3, #7
 8004330:	4413      	add	r3, r2
 8004332:	3384      	adds	r3, #132	; 0x84
 8004334:	461a      	mov	r2, r3
 8004336:	2300      	movs	r3, #0
 8004338:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	01db      	lsls	r3, r3, #7
 8004344:	4413      	add	r3, r2
 8004346:	3384      	adds	r3, #132	; 0x84
 8004348:	461a      	mov	r2, r3
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d102      	bne.n	800435e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004358:	2304      	movs	r3, #4
 800435a:	61fb      	str	r3, [r7, #28]
 800435c:	e01b      	b.n	8004396 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d102      	bne.n	800436c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004366:	2303      	movs	r3, #3
 8004368:	61fb      	str	r3, [r7, #28]
 800436a:	e014      	b.n	8004396 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b04      	cmp	r3, #4
 8004372:	d00b      	beq.n	800438c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004378:	2b02      	cmp	r3, #2
 800437a:	d007      	beq.n	800438c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004380:	2b03      	cmp	r3, #3
 8004382:	d003      	beq.n	800438c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004388:	2b07      	cmp	r3, #7
 800438a:	d102      	bne.n	8004392 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800438c:	2302      	movs	r3, #2
 800438e:	61fb      	str	r3, [r7, #28]
 8004390:	e001      	b.n	8004396 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004392:	2301      	movs	r3, #1
 8004394:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	01db      	lsls	r3, r3, #7
 80043a0:	4413      	add	r3, r2
 80043a2:	3384      	adds	r3, #132	; 0x84
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	4611      	mov	r1, r2
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	01d2      	lsls	r2, r2, #7
 80043b0:	440a      	add	r2, r1
 80043b2:	3284      	adds	r2, #132	; 0x84
 80043b4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80043b8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	fb02 f303 	mul.w	r3, r2, r3
 80043c4:	041a      	lsls	r2, r3, #16
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	6859      	ldr	r1, [r3, #4]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	1acb      	subs	r3, r1, r3
 80043d0:	69f9      	ldr	r1, [r7, #28]
 80043d2:	fb01 f303 	mul.w	r3, r1, r3
 80043d6:	3303      	adds	r3, #3
 80043d8:	68f9      	ldr	r1, [r7, #12]
 80043da:	6809      	ldr	r1, [r1, #0]
 80043dc:	4608      	mov	r0, r1
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	01c9      	lsls	r1, r1, #7
 80043e2:	4401      	add	r1, r0
 80043e4:	3184      	adds	r1, #132	; 0x84
 80043e6:	4313      	orrs	r3, r2
 80043e8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	01db      	lsls	r3, r3, #7
 80043f4:	4413      	add	r3, r2
 80043f6:	3384      	adds	r3, #132	; 0x84
 80043f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4619      	mov	r1, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	01db      	lsls	r3, r3, #7
 8004404:	440b      	add	r3, r1
 8004406:	3384      	adds	r3, #132	; 0x84
 8004408:	4619      	mov	r1, r3
 800440a:	4b14      	ldr	r3, [pc, #80]	; (800445c <LTDC_SetConfig+0x330>)
 800440c:	4013      	ands	r3, r2
 800440e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	01db      	lsls	r3, r3, #7
 800441a:	4413      	add	r3, r2
 800441c:	3384      	adds	r3, #132	; 0x84
 800441e:	461a      	mov	r2, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	01db      	lsls	r3, r3, #7
 8004430:	4413      	add	r3, r2
 8004432:	3384      	adds	r3, #132	; 0x84
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	6812      	ldr	r2, [r2, #0]
 800443a:	4611      	mov	r1, r2
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	01d2      	lsls	r2, r2, #7
 8004440:	440a      	add	r2, r1
 8004442:	3284      	adds	r2, #132	; 0x84
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	6013      	str	r3, [r2, #0]
}
 800444a:	bf00      	nop
 800444c:	3724      	adds	r7, #36	; 0x24
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	fffff8f8 	.word	0xfffff8f8
 800445c:	fffff800 	.word	0xfffff800

08004460 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a04      	ldr	r2, [pc, #16]	; (800447c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800446a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800446e:	6013      	str	r3, [r2, #0]
}
 8004470:	bf00      	nop
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40007000 	.word	0x40007000

08004480 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004486:	2300      	movs	r3, #0
 8004488:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800448a:	4b23      	ldr	r3, [pc, #140]	; (8004518 <HAL_PWREx_EnableOverDrive+0x98>)
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	4a22      	ldr	r2, [pc, #136]	; (8004518 <HAL_PWREx_EnableOverDrive+0x98>)
 8004490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004494:	6413      	str	r3, [r2, #64]	; 0x40
 8004496:	4b20      	ldr	r3, [pc, #128]	; (8004518 <HAL_PWREx_EnableOverDrive+0x98>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80044a2:	4b1e      	ldr	r3, [pc, #120]	; (800451c <HAL_PWREx_EnableOverDrive+0x9c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1d      	ldr	r2, [pc, #116]	; (800451c <HAL_PWREx_EnableOverDrive+0x9c>)
 80044a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044ae:	f7fc ff33 	bl	8001318 <HAL_GetTick>
 80044b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044b4:	e009      	b.n	80044ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044b6:	f7fc ff2f 	bl	8001318 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044c4:	d901      	bls.n	80044ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e022      	b.n	8004510 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044ca:	4b14      	ldr	r3, [pc, #80]	; (800451c <HAL_PWREx_EnableOverDrive+0x9c>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d6:	d1ee      	bne.n	80044b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80044d8:	4b10      	ldr	r3, [pc, #64]	; (800451c <HAL_PWREx_EnableOverDrive+0x9c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a0f      	ldr	r2, [pc, #60]	; (800451c <HAL_PWREx_EnableOverDrive+0x9c>)
 80044de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044e4:	f7fc ff18 	bl	8001318 <HAL_GetTick>
 80044e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044ea:	e009      	b.n	8004500 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044ec:	f7fc ff14 	bl	8001318 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044fa:	d901      	bls.n	8004500 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e007      	b.n	8004510 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004500:	4b06      	ldr	r3, [pc, #24]	; (800451c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004508:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800450c:	d1ee      	bne.n	80044ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40023800 	.word	0x40023800
 800451c:	40007000 	.word	0x40007000

08004520 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af02      	add	r7, sp, #8
 8004526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800452c:	f7fc fef4 	bl	8001318 <HAL_GetTick>
 8004530:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e073      	b.n	8004624 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_QSPI_Init+0x2c>
 8004548:	2302      	movs	r3, #2
 800454a:	e06b      	b.n	8004624 <HAL_QSPI_Init+0x104>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10b      	bne.n	8004578 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f007 f9d7 	bl	800b91c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 800456e:	f241 3188 	movw	r1, #5000	; 0x1388
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f85e 	bl	8004634 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	3b01      	subs	r3, #1
 8004588:	021a      	lsls	r2, r3, #8
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2200      	movs	r2, #0
 800459c:	2120      	movs	r1, #32
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f856 	bl	8004650 <QSPI_WaitFlagStateUntilTimeout>
 80045a4:	4603      	mov	r3, r0
 80045a6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d135      	bne.n	800461a <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	4b1d      	ldr	r3, [pc, #116]	; (800462c <HAL_QSPI_Init+0x10c>)
 80045b6:	4013      	ands	r3, r2
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6852      	ldr	r2, [r2, #4]
 80045bc:	0611      	lsls	r1, r2, #24
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	68d2      	ldr	r2, [r2, #12]
 80045c2:	4311      	orrs	r1, r2
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	69d2      	ldr	r2, [r2, #28]
 80045c8:	4311      	orrs	r1, r2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6a12      	ldr	r2, [r2, #32]
 80045ce:	4311      	orrs	r1, r2
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	430b      	orrs	r3, r1
 80045d6:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	4b14      	ldr	r3, [pc, #80]	; (8004630 <HAL_QSPI_Init+0x110>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6912      	ldr	r2, [r2, #16]
 80045e6:	0411      	lsls	r1, r2, #16
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6952      	ldr	r2, [r2, #20]
 80045ec:	4311      	orrs	r1, r2
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6992      	ldr	r2, [r2, #24]
 80045f2:	4311      	orrs	r1, r2
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6812      	ldr	r2, [r2, #0]
 80045f8:	430b      	orrs	r3, r1
 80045fa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004622:	7bfb      	ldrb	r3, [r7, #15]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	00ffff2f 	.word	0x00ffff2f
 8004630:	ffe0f8fe 	.word	0xffe0f8fe

08004634 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	603b      	str	r3, [r7, #0]
 800465c:	4613      	mov	r3, r2
 800465e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004660:	e01a      	b.n	8004698 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004668:	d016      	beq.n	8004698 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004670:	f7fc fe52 	bl	8001318 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	429a      	cmp	r2, r3
 800467e:	d20b      	bcs.n	8004698 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2204      	movs	r2, #4
 8004684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468c:	f043 0201 	orr.w	r2, r3, #1
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e00e      	b.n	80046b6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689a      	ldr	r2, [r3, #8]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4013      	ands	r3, r2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	bf14      	ite	ne
 80046a6:	2301      	movne	r3, #1
 80046a8:	2300      	moveq	r3, #0
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	461a      	mov	r2, r3
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d1d6      	bne.n	8004662 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80046c8:	2300      	movs	r3, #0
 80046ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e25c      	b.n	8004b90 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 8087 	beq.w	80047f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046e4:	4b96      	ldr	r3, [pc, #600]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 030c 	and.w	r3, r3, #12
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d00c      	beq.n	800470a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046f0:	4b93      	ldr	r3, [pc, #588]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 030c 	and.w	r3, r3, #12
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d112      	bne.n	8004722 <HAL_RCC_OscConfig+0x62>
 80046fc:	4b90      	ldr	r3, [pc, #576]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004704:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004708:	d10b      	bne.n	8004722 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800470a:	4b8d      	ldr	r3, [pc, #564]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d06c      	beq.n	80047f0 <HAL_RCC_OscConfig+0x130>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d168      	bne.n	80047f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e236      	b.n	8004b90 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472a:	d106      	bne.n	800473a <HAL_RCC_OscConfig+0x7a>
 800472c:	4b84      	ldr	r3, [pc, #528]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a83      	ldr	r2, [pc, #524]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	e02e      	b.n	8004798 <HAL_RCC_OscConfig+0xd8>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10c      	bne.n	800475c <HAL_RCC_OscConfig+0x9c>
 8004742:	4b7f      	ldr	r3, [pc, #508]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a7e      	ldr	r2, [pc, #504]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	4b7c      	ldr	r3, [pc, #496]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a7b      	ldr	r2, [pc, #492]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004754:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	e01d      	b.n	8004798 <HAL_RCC_OscConfig+0xd8>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004764:	d10c      	bne.n	8004780 <HAL_RCC_OscConfig+0xc0>
 8004766:	4b76      	ldr	r3, [pc, #472]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a75      	ldr	r2, [pc, #468]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 800476c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	4b73      	ldr	r3, [pc, #460]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a72      	ldr	r2, [pc, #456]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	e00b      	b.n	8004798 <HAL_RCC_OscConfig+0xd8>
 8004780:	4b6f      	ldr	r3, [pc, #444]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a6e      	ldr	r2, [pc, #440]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	4b6c      	ldr	r3, [pc, #432]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a6b      	ldr	r2, [pc, #428]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d013      	beq.n	80047c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fc fdba 	bl	8001318 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047a8:	f7fc fdb6 	bl	8001318 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b64      	cmp	r3, #100	; 0x64
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e1ea      	b.n	8004b90 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ba:	4b61      	ldr	r3, [pc, #388]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0f0      	beq.n	80047a8 <HAL_RCC_OscConfig+0xe8>
 80047c6:	e014      	b.n	80047f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c8:	f7fc fda6 	bl	8001318 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047d0:	f7fc fda2 	bl	8001318 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b64      	cmp	r3, #100	; 0x64
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e1d6      	b.n	8004b90 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047e2:	4b57      	ldr	r3, [pc, #348]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x110>
 80047ee:	e000      	b.n	80047f2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d069      	beq.n	80048d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047fe:	4b50      	ldr	r3, [pc, #320]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00b      	beq.n	8004822 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800480a:	4b4d      	ldr	r3, [pc, #308]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b08      	cmp	r3, #8
 8004814:	d11c      	bne.n	8004850 <HAL_RCC_OscConfig+0x190>
 8004816:	4b4a      	ldr	r3, [pc, #296]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d116      	bne.n	8004850 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004822:	4b47      	ldr	r3, [pc, #284]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d005      	beq.n	800483a <HAL_RCC_OscConfig+0x17a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d001      	beq.n	800483a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e1aa      	b.n	8004b90 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483a:	4b41      	ldr	r3, [pc, #260]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	493d      	ldr	r1, [pc, #244]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 800484a:	4313      	orrs	r3, r2
 800484c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800484e:	e040      	b.n	80048d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d023      	beq.n	80048a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004858:	4b39      	ldr	r3, [pc, #228]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a38      	ldr	r2, [pc, #224]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004864:	f7fc fd58 	bl	8001318 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800486c:	f7fc fd54 	bl	8001318 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e188      	b.n	8004b90 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487e:	4b30      	ldr	r3, [pc, #192]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800488a:	4b2d      	ldr	r3, [pc, #180]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	4929      	ldr	r1, [pc, #164]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 800489a:	4313      	orrs	r3, r2
 800489c:	600b      	str	r3, [r1, #0]
 800489e:	e018      	b.n	80048d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a0:	4b27      	ldr	r3, [pc, #156]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a26      	ldr	r2, [pc, #152]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 80048a6:	f023 0301 	bic.w	r3, r3, #1
 80048aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ac:	f7fc fd34 	bl	8001318 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048b4:	f7fc fd30 	bl	8001318 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e164      	b.n	8004b90 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c6:	4b1e      	ldr	r3, [pc, #120]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f0      	bne.n	80048b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d038      	beq.n	8004950 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d019      	beq.n	800491a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e6:	4b16      	ldr	r3, [pc, #88]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 80048e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ea:	4a15      	ldr	r2, [pc, #84]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f2:	f7fc fd11 	bl	8001318 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048fa:	f7fc fd0d 	bl	8001318 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e141      	b.n	8004b90 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800490c:	4b0c      	ldr	r3, [pc, #48]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 800490e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f0      	beq.n	80048fa <HAL_RCC_OscConfig+0x23a>
 8004918:	e01a      	b.n	8004950 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800491a:	4b09      	ldr	r3, [pc, #36]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 800491c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800491e:	4a08      	ldr	r2, [pc, #32]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004920:	f023 0301 	bic.w	r3, r3, #1
 8004924:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004926:	f7fc fcf7 	bl	8001318 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800492c:	e00a      	b.n	8004944 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800492e:	f7fc fcf3 	bl	8001318 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d903      	bls.n	8004944 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e127      	b.n	8004b90 <HAL_RCC_OscConfig+0x4d0>
 8004940:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004944:	4b94      	ldr	r3, [pc, #592]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1ee      	bne.n	800492e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80a4 	beq.w	8004aa6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800495e:	4b8e      	ldr	r3, [pc, #568]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10d      	bne.n	8004986 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800496a:	4b8b      	ldr	r3, [pc, #556]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	4a8a      	ldr	r2, [pc, #552]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004974:	6413      	str	r3, [r2, #64]	; 0x40
 8004976:	4b88      	ldr	r3, [pc, #544]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004982:	2301      	movs	r3, #1
 8004984:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004986:	4b85      	ldr	r3, [pc, #532]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498e:	2b00      	cmp	r3, #0
 8004990:	d118      	bne.n	80049c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004992:	4b82      	ldr	r3, [pc, #520]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a81      	ldr	r2, [pc, #516]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 8004998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800499c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800499e:	f7fc fcbb 	bl	8001318 <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80049a6:	f7fc fcb7 	bl	8001318 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b64      	cmp	r3, #100	; 0x64
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e0eb      	b.n	8004b90 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b8:	4b78      	ldr	r3, [pc, #480]	; (8004b9c <HAL_RCC_OscConfig+0x4dc>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0f0      	beq.n	80049a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d106      	bne.n	80049da <HAL_RCC_OscConfig+0x31a>
 80049cc:	4b72      	ldr	r3, [pc, #456]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	4a71      	ldr	r2, [pc, #452]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 80049d2:	f043 0301 	orr.w	r3, r3, #1
 80049d6:	6713      	str	r3, [r2, #112]	; 0x70
 80049d8:	e02d      	b.n	8004a36 <HAL_RCC_OscConfig+0x376>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10c      	bne.n	80049fc <HAL_RCC_OscConfig+0x33c>
 80049e2:	4b6d      	ldr	r3, [pc, #436]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	4a6c      	ldr	r2, [pc, #432]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 80049e8:	f023 0301 	bic.w	r3, r3, #1
 80049ec:	6713      	str	r3, [r2, #112]	; 0x70
 80049ee:	4b6a      	ldr	r3, [pc, #424]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	4a69      	ldr	r2, [pc, #420]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 80049f4:	f023 0304 	bic.w	r3, r3, #4
 80049f8:	6713      	str	r3, [r2, #112]	; 0x70
 80049fa:	e01c      	b.n	8004a36 <HAL_RCC_OscConfig+0x376>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	2b05      	cmp	r3, #5
 8004a02:	d10c      	bne.n	8004a1e <HAL_RCC_OscConfig+0x35e>
 8004a04:	4b64      	ldr	r3, [pc, #400]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a08:	4a63      	ldr	r2, [pc, #396]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004a0a:	f043 0304 	orr.w	r3, r3, #4
 8004a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a10:	4b61      	ldr	r3, [pc, #388]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a14:	4a60      	ldr	r2, [pc, #384]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004a16:	f043 0301 	orr.w	r3, r3, #1
 8004a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a1c:	e00b      	b.n	8004a36 <HAL_RCC_OscConfig+0x376>
 8004a1e:	4b5e      	ldr	r3, [pc, #376]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a22:	4a5d      	ldr	r2, [pc, #372]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004a24:	f023 0301 	bic.w	r3, r3, #1
 8004a28:	6713      	str	r3, [r2, #112]	; 0x70
 8004a2a:	4b5b      	ldr	r3, [pc, #364]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2e:	4a5a      	ldr	r2, [pc, #360]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004a30:	f023 0304 	bic.w	r3, r3, #4
 8004a34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d015      	beq.n	8004a6a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3e:	f7fc fc6b 	bl	8001318 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a44:	e00a      	b.n	8004a5c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a46:	f7fc fc67 	bl	8001318 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e099      	b.n	8004b90 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5c:	4b4e      	ldr	r3, [pc, #312]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0ee      	beq.n	8004a46 <HAL_RCC_OscConfig+0x386>
 8004a68:	e014      	b.n	8004a94 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a6a:	f7fc fc55 	bl	8001318 <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a70:	e00a      	b.n	8004a88 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a72:	f7fc fc51 	bl	8001318 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e083      	b.n	8004b90 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a88:	4b43      	ldr	r3, [pc, #268]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1ee      	bne.n	8004a72 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a94:	7dfb      	ldrb	r3, [r7, #23]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d105      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a9a:	4b3f      	ldr	r3, [pc, #252]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	4a3e      	ldr	r2, [pc, #248]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d06f      	beq.n	8004b8e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aae:	4b3a      	ldr	r3, [pc, #232]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 030c 	and.w	r3, r3, #12
 8004ab6:	2b08      	cmp	r3, #8
 8004ab8:	d067      	beq.n	8004b8a <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d149      	bne.n	8004b56 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac2:	4b35      	ldr	r3, [pc, #212]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a34      	ldr	r2, [pc, #208]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004ac8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ace:	f7fc fc23 	bl	8001318 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad6:	f7fc fc1f 	bl	8001318 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e053      	b.n	8004b90 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae8:	4b2b      	ldr	r3, [pc, #172]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1f0      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	019b      	lsls	r3, r3, #6
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0a:	085b      	lsrs	r3, r3, #1
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	041b      	lsls	r3, r3, #16
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b16:	061b      	lsls	r3, r3, #24
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	4a1f      	ldr	r2, [pc, #124]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004b1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b20:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b22:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a1c      	ldr	r2, [pc, #112]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004b28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2e:	f7fc fbf3 	bl	8001318 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b36:	f7fc fbef 	bl	8001318 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e023      	b.n	8004b90 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b48:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0f0      	beq.n	8004b36 <HAL_RCC_OscConfig+0x476>
 8004b54:	e01b      	b.n	8004b8e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b56:	4b10      	ldr	r3, [pc, #64]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a0f      	ldr	r2, [pc, #60]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004b5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b62:	f7fc fbd9 	bl	8001318 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b6a:	f7fc fbd5 	bl	8001318 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e009      	b.n	8004b90 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <HAL_RCC_OscConfig+0x4d8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1f0      	bne.n	8004b6a <HAL_RCC_OscConfig+0x4aa>
 8004b88:	e001      	b.n	8004b8e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	40007000 	.word	0x40007000

08004ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0ce      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bb8:	4b69      	ldr	r3, [pc, #420]	; (8004d60 <HAL_RCC_ClockConfig+0x1c0>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 030f 	and.w	r3, r3, #15
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d910      	bls.n	8004be8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc6:	4b66      	ldr	r3, [pc, #408]	; (8004d60 <HAL_RCC_ClockConfig+0x1c0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f023 020f 	bic.w	r2, r3, #15
 8004bce:	4964      	ldr	r1, [pc, #400]	; (8004d60 <HAL_RCC_ClockConfig+0x1c0>)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd6:	4b62      	ldr	r3, [pc, #392]	; (8004d60 <HAL_RCC_ClockConfig+0x1c0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d001      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0b6      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d020      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c00:	4b58      	ldr	r3, [pc, #352]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	4a57      	ldr	r2, [pc, #348]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0308 	and.w	r3, r3, #8
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d005      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c18:	4b52      	ldr	r3, [pc, #328]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	4a51      	ldr	r2, [pc, #324]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c24:	4b4f      	ldr	r3, [pc, #316]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	494c      	ldr	r1, [pc, #304]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d040      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d107      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4a:	4b46      	ldr	r3, [pc, #280]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d115      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e07d      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d107      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c62:	4b40      	ldr	r3, [pc, #256]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d109      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e071      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c72:	4b3c      	ldr	r3, [pc, #240]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e069      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c82:	4b38      	ldr	r3, [pc, #224]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f023 0203 	bic.w	r2, r3, #3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	4935      	ldr	r1, [pc, #212]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c94:	f7fc fb40 	bl	8001318 <HAL_GetTick>
 8004c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9a:	e00a      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c9c:	f7fc fb3c 	bl	8001318 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e051      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb2:	4b2c      	ldr	r3, [pc, #176]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 020c 	and.w	r2, r3, #12
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d1eb      	bne.n	8004c9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc4:	4b26      	ldr	r3, [pc, #152]	; (8004d60 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d210      	bcs.n	8004cf4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd2:	4b23      	ldr	r3, [pc, #140]	; (8004d60 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f023 020f 	bic.w	r2, r3, #15
 8004cda:	4921      	ldr	r1, [pc, #132]	; (8004d60 <HAL_RCC_ClockConfig+0x1c0>)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce2:	4b1f      	ldr	r3, [pc, #124]	; (8004d60 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d001      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e030      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d008      	beq.n	8004d12 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d00:	4b18      	ldr	r3, [pc, #96]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	4915      	ldr	r1, [pc, #84]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d1e:	4b11      	ldr	r3, [pc, #68]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	490d      	ldr	r1, [pc, #52]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d32:	f000 f81d 	bl	8004d70 <HAL_RCC_GetSysClockFreq>
 8004d36:	4601      	mov	r1, r0
 8004d38:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	091b      	lsrs	r3, r3, #4
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	4a09      	ldr	r2, [pc, #36]	; (8004d68 <HAL_RCC_ClockConfig+0x1c8>)
 8004d44:	5cd3      	ldrb	r3, [r2, r3]
 8004d46:	fa21 f303 	lsr.w	r3, r1, r3
 8004d4a:	4a08      	ldr	r2, [pc, #32]	; (8004d6c <HAL_RCC_ClockConfig+0x1cc>)
 8004d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004d4e:	2000      	movs	r0, #0
 8004d50:	f007 f9ee 	bl	800c130 <HAL_InitTick>

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	40023c00 	.word	0x40023c00
 8004d64:	40023800 	.word	0x40023800
 8004d68:	0800ea0c 	.word	0x0800ea0c
 8004d6c:	2000000c 	.word	0x2000000c

08004d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	607b      	str	r3, [r7, #4]
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d86:	4b50      	ldr	r3, [pc, #320]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d007      	beq.n	8004da2 <HAL_RCC_GetSysClockFreq+0x32>
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d008      	beq.n	8004da8 <HAL_RCC_GetSysClockFreq+0x38>
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f040 808d 	bne.w	8004eb6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d9c:	4b4b      	ldr	r3, [pc, #300]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x15c>)
 8004d9e:	60bb      	str	r3, [r7, #8]
       break;
 8004da0:	e08c      	b.n	8004ebc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004da2:	4b4b      	ldr	r3, [pc, #300]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004da4:	60bb      	str	r3, [r7, #8]
      break;
 8004da6:	e089      	b.n	8004ebc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004da8:	4b47      	ldr	r3, [pc, #284]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004db0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004db2:	4b45      	ldr	r3, [pc, #276]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d023      	beq.n	8004e06 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dbe:	4b42      	ldr	r3, [pc, #264]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	099b      	lsrs	r3, r3, #6
 8004dc4:	f04f 0400 	mov.w	r4, #0
 8004dc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	ea03 0501 	and.w	r5, r3, r1
 8004dd4:	ea04 0602 	and.w	r6, r4, r2
 8004dd8:	4a3d      	ldr	r2, [pc, #244]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004dda:	fb02 f106 	mul.w	r1, r2, r6
 8004dde:	2200      	movs	r2, #0
 8004de0:	fb02 f205 	mul.w	r2, r2, r5
 8004de4:	440a      	add	r2, r1
 8004de6:	493a      	ldr	r1, [pc, #232]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004de8:	fba5 0101 	umull	r0, r1, r5, r1
 8004dec:	1853      	adds	r3, r2, r1
 8004dee:	4619      	mov	r1, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f04f 0400 	mov.w	r4, #0
 8004df6:	461a      	mov	r2, r3
 8004df8:	4623      	mov	r3, r4
 8004dfa:	f7fb fa59 	bl	80002b0 <__aeabi_uldivmod>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	460c      	mov	r4, r1
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	e049      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e06:	4b30      	ldr	r3, [pc, #192]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	099b      	lsrs	r3, r3, #6
 8004e0c:	f04f 0400 	mov.w	r4, #0
 8004e10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	ea03 0501 	and.w	r5, r3, r1
 8004e1c:	ea04 0602 	and.w	r6, r4, r2
 8004e20:	4629      	mov	r1, r5
 8004e22:	4632      	mov	r2, r6
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	f04f 0400 	mov.w	r4, #0
 8004e2c:	0154      	lsls	r4, r2, #5
 8004e2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e32:	014b      	lsls	r3, r1, #5
 8004e34:	4619      	mov	r1, r3
 8004e36:	4622      	mov	r2, r4
 8004e38:	1b49      	subs	r1, r1, r5
 8004e3a:	eb62 0206 	sbc.w	r2, r2, r6
 8004e3e:	f04f 0300 	mov.w	r3, #0
 8004e42:	f04f 0400 	mov.w	r4, #0
 8004e46:	0194      	lsls	r4, r2, #6
 8004e48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e4c:	018b      	lsls	r3, r1, #6
 8004e4e:	1a5b      	subs	r3, r3, r1
 8004e50:	eb64 0402 	sbc.w	r4, r4, r2
 8004e54:	f04f 0100 	mov.w	r1, #0
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	00e2      	lsls	r2, r4, #3
 8004e5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e62:	00d9      	lsls	r1, r3, #3
 8004e64:	460b      	mov	r3, r1
 8004e66:	4614      	mov	r4, r2
 8004e68:	195b      	adds	r3, r3, r5
 8004e6a:	eb44 0406 	adc.w	r4, r4, r6
 8004e6e:	f04f 0100 	mov.w	r1, #0
 8004e72:	f04f 0200 	mov.w	r2, #0
 8004e76:	02a2      	lsls	r2, r4, #10
 8004e78:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004e7c:	0299      	lsls	r1, r3, #10
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4614      	mov	r4, r2
 8004e82:	4618      	mov	r0, r3
 8004e84:	4621      	mov	r1, r4
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f04f 0400 	mov.w	r4, #0
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4623      	mov	r3, r4
 8004e90:	f7fb fa0e 	bl	80002b0 <__aeabi_uldivmod>
 8004e94:	4603      	mov	r3, r0
 8004e96:	460c      	mov	r4, r1
 8004e98:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	0c1b      	lsrs	r3, r3, #16
 8004ea0:	f003 0303 	and.w	r3, r3, #3
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb2:	60bb      	str	r3, [r7, #8]
      break;
 8004eb4:	e002      	b.n	8004ebc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eb6:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x15c>)
 8004eb8:	60bb      	str	r3, [r7, #8]
      break;
 8004eba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	00f42400 	.word	0x00f42400
 8004ed0:	017d7840 	.word	0x017d7840

08004ed4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ed8:	4b03      	ldr	r3, [pc, #12]	; (8004ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eda:	681b      	ldr	r3, [r3, #0]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	2000000c 	.word	0x2000000c

08004eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ef0:	f7ff fff0 	bl	8004ed4 <HAL_RCC_GetHCLKFreq>
 8004ef4:	4601      	mov	r1, r0
 8004ef6:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	0a9b      	lsrs	r3, r3, #10
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	4a03      	ldr	r2, [pc, #12]	; (8004f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f02:	5cd3      	ldrb	r3, [r2, r3]
 8004f04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	0800ea1c 	.word	0x0800ea1c

08004f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f18:	f7ff ffdc 	bl	8004ed4 <HAL_RCC_GetHCLKFreq>
 8004f1c:	4601      	mov	r1, r0
 8004f1e:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	0b5b      	lsrs	r3, r3, #13
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	4a03      	ldr	r2, [pc, #12]	; (8004f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f2a:	5cd3      	ldrb	r3, [r2, r3]
 8004f2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40023800 	.word	0x40023800
 8004f38:	0800ea1c 	.word	0x0800ea1c

08004f3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	220f      	movs	r2, #15
 8004f4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f4c:	4b12      	ldr	r3, [pc, #72]	; (8004f98 <HAL_RCC_GetClockConfig+0x5c>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f003 0203 	and.w	r2, r3, #3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f58:	4b0f      	ldr	r3, [pc, #60]	; (8004f98 <HAL_RCC_GetClockConfig+0x5c>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f64:	4b0c      	ldr	r3, [pc, #48]	; (8004f98 <HAL_RCC_GetClockConfig+0x5c>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004f70:	4b09      	ldr	r3, [pc, #36]	; (8004f98 <HAL_RCC_GetClockConfig+0x5c>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	08db      	lsrs	r3, r3, #3
 8004f76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f7e:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <HAL_RCC_GetClockConfig+0x60>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 020f 	and.w	r2, r3, #15
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	601a      	str	r2, [r3, #0]
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	40023c00 	.word	0x40023c00

08004fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b088      	sub	sp, #32
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004fac:	2300      	movs	r3, #0
 8004fae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d012      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004fc8:	4b69      	ldr	r3, [pc, #420]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	4a68      	ldr	r2, [pc, #416]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004fd2:	6093      	str	r3, [r2, #8]
 8004fd4:	4b66      	ldr	r3, [pc, #408]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fdc:	4964      	ldr	r1, [pc, #400]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004fea:	2301      	movs	r3, #1
 8004fec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d017      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ffa:	4b5d      	ldr	r3, [pc, #372]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005000:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005008:	4959      	ldr	r1, [pc, #356]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005014:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005018:	d101      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800501a:	2301      	movs	r3, #1
 800501c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005026:	2301      	movs	r3, #1
 8005028:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d017      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005036:	4b4e      	ldr	r3, [pc, #312]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800503c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	494a      	ldr	r1, [pc, #296]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005054:	d101      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005056:	2301      	movs	r3, #1
 8005058:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005062:	2301      	movs	r3, #1
 8005064:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005072:	2301      	movs	r3, #1
 8005074:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 808b 	beq.w	800519a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005084:	4b3a      	ldr	r3, [pc, #232]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005088:	4a39      	ldr	r2, [pc, #228]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800508a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800508e:	6413      	str	r3, [r2, #64]	; 0x40
 8005090:	4b37      	ldr	r3, [pc, #220]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005098:	60bb      	str	r3, [r7, #8]
 800509a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800509c:	4b35      	ldr	r3, [pc, #212]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a34      	ldr	r2, [pc, #208]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80050a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a8:	f7fc f936 	bl	8001318 <HAL_GetTick>
 80050ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80050ae:	e008      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050b0:	f7fc f932 	bl	8001318 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b64      	cmp	r3, #100	; 0x64
 80050bc:	d901      	bls.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e355      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80050c2:	4b2c      	ldr	r3, [pc, #176]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f0      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050ce:	4b28      	ldr	r3, [pc, #160]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d035      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d02e      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050ec:	4b20      	ldr	r3, [pc, #128]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050f6:	4b1e      	ldr	r3, [pc, #120]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	4a1d      	ldr	r2, [pc, #116]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005100:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005102:	4b1b      	ldr	r3, [pc, #108]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005106:	4a1a      	ldr	r2, [pc, #104]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800510c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800510e:	4a18      	ldr	r2, [pc, #96]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005114:	4b16      	ldr	r3, [pc, #88]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b01      	cmp	r3, #1
 800511e:	d114      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005120:	f7fc f8fa 	bl	8001318 <HAL_GetTick>
 8005124:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005126:	e00a      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005128:	f7fc f8f6 	bl	8001318 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	f241 3288 	movw	r2, #5000	; 0x1388
 8005136:	4293      	cmp	r3, r2
 8005138:	d901      	bls.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e317      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800513e:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0ee      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005152:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005156:	d111      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005158:	4b05      	ldr	r3, [pc, #20]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005164:	4b04      	ldr	r3, [pc, #16]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005166:	400b      	ands	r3, r1
 8005168:	4901      	ldr	r1, [pc, #4]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800516a:	4313      	orrs	r3, r2
 800516c:	608b      	str	r3, [r1, #8]
 800516e:	e00b      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005170:	40023800 	.word	0x40023800
 8005174:	40007000 	.word	0x40007000
 8005178:	0ffffcff 	.word	0x0ffffcff
 800517c:	4bb0      	ldr	r3, [pc, #704]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	4aaf      	ldr	r2, [pc, #700]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005182:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005186:	6093      	str	r3, [r2, #8]
 8005188:	4bad      	ldr	r3, [pc, #692]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800518a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005194:	49aa      	ldr	r1, [pc, #680]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005196:	4313      	orrs	r3, r2
 8005198:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d010      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051a6:	4ba6      	ldr	r3, [pc, #664]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80051a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ac:	4aa4      	ldr	r2, [pc, #656]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80051ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80051b6:	4ba2      	ldr	r3, [pc, #648]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80051b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	499f      	ldr	r1, [pc, #636]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051d4:	4b9a      	ldr	r3, [pc, #616]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80051d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051e2:	4997      	ldr	r1, [pc, #604]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051f6:	4b92      	ldr	r3, [pc, #584]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80051f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005204:	498e      	ldr	r1, [pc, #568]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00a      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005218:	4b89      	ldr	r3, [pc, #548]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800521a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005226:	4986      	ldr	r1, [pc, #536]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800523a:	4b81      	ldr	r3, [pc, #516]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800523c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005240:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005248:	497d      	ldr	r1, [pc, #500]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00a      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800525c:	4b78      	ldr	r3, [pc, #480]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800525e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005262:	f023 0203 	bic.w	r2, r3, #3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526a:	4975      	ldr	r1, [pc, #468]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800527e:	4b70      	ldr	r3, [pc, #448]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005284:	f023 020c 	bic.w	r2, r3, #12
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800528c:	496c      	ldr	r1, [pc, #432]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00a      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052a0:	4b67      	ldr	r3, [pc, #412]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80052a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ae:	4964      	ldr	r1, [pc, #400]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052c2:	4b5f      	ldr	r3, [pc, #380]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80052c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d0:	495b      	ldr	r1, [pc, #364]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00a      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052e4:	4b56      	ldr	r3, [pc, #344]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80052e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f2:	4953      	ldr	r1, [pc, #332]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005306:	4b4e      	ldr	r3, [pc, #312]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005314:	494a      	ldr	r1, [pc, #296]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005328:	4b45      	ldr	r3, [pc, #276]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005336:	4942      	ldr	r1, [pc, #264]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800534a:	4b3d      	ldr	r3, [pc, #244]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800534c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005350:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005358:	4939      	ldr	r1, [pc, #228]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800536c:	4b34      	ldr	r3, [pc, #208]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800536e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005372:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800537a:	4931      	ldr	r1, [pc, #196]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d011      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800538e:	4b2c      	ldr	r3, [pc, #176]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005394:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800539c:	4928      	ldr	r1, [pc, #160]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053ac:	d101      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80053ae:	2301      	movs	r3, #1
 80053b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80053be:	2301      	movs	r3, #1
 80053c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053ce:	4b1c      	ldr	r3, [pc, #112]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80053d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053dc:	4918      	ldr	r1, [pc, #96]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00b      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053f0:	4b13      	ldr	r3, [pc, #76]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80053f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005400:	490f      	ldr	r1, [pc, #60]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d005      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005416:	f040 80d8 	bne.w	80055ca <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800541a:	4b09      	ldr	r3, [pc, #36]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a08      	ldr	r2, [pc, #32]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005420:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005426:	f7fb ff77 	bl	8001318 <HAL_GetTick>
 800542a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800542c:	e00a      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800542e:	f7fb ff73 	bl	8001318 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b64      	cmp	r3, #100	; 0x64
 800543a:	d903      	bls.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e196      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005440:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005444:	4b6c      	ldr	r3, [pc, #432]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1ee      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d021      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005460:	2b00      	cmp	r3, #0
 8005462:	d11d      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005464:	4b64      	ldr	r3, [pc, #400]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800546a:	0c1b      	lsrs	r3, r3, #16
 800546c:	f003 0303 	and.w	r3, r3, #3
 8005470:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005472:	4b61      	ldr	r3, [pc, #388]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005478:	0e1b      	lsrs	r3, r3, #24
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	019a      	lsls	r2, r3, #6
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	041b      	lsls	r3, r3, #16
 800548a:	431a      	orrs	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	061b      	lsls	r3, r3, #24
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	071b      	lsls	r3, r3, #28
 8005498:	4957      	ldr	r1, [pc, #348]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800549a:	4313      	orrs	r3, r2
 800549c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d004      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054b4:	d00a      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d02e      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054ca:	d129      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80054cc:	4b4a      	ldr	r3, [pc, #296]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80054ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054d2:	0c1b      	lsrs	r3, r3, #16
 80054d4:	f003 0303 	and.w	r3, r3, #3
 80054d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054da:	4b47      	ldr	r3, [pc, #284]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80054dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054e0:	0f1b      	lsrs	r3, r3, #28
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	019a      	lsls	r2, r3, #6
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	041b      	lsls	r3, r3, #16
 80054f2:	431a      	orrs	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	061b      	lsls	r3, r3, #24
 80054fa:	431a      	orrs	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	071b      	lsls	r3, r3, #28
 8005500:	493d      	ldr	r1, [pc, #244]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005502:	4313      	orrs	r3, r2
 8005504:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005508:	4b3b      	ldr	r3, [pc, #236]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800550a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800550e:	f023 021f 	bic.w	r2, r3, #31
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	3b01      	subs	r3, #1
 8005518:	4937      	ldr	r1, [pc, #220]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800551a:	4313      	orrs	r3, r2
 800551c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01d      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800552c:	4b32      	ldr	r3, [pc, #200]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800552e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005532:	0e1b      	lsrs	r3, r3, #24
 8005534:	f003 030f 	and.w	r3, r3, #15
 8005538:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800553a:	4b2f      	ldr	r3, [pc, #188]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800553c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005540:	0f1b      	lsrs	r3, r3, #28
 8005542:	f003 0307 	and.w	r3, r3, #7
 8005546:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	019a      	lsls	r2, r3, #6
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	041b      	lsls	r3, r3, #16
 8005554:	431a      	orrs	r2, r3
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	061b      	lsls	r3, r3, #24
 800555a:	431a      	orrs	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	071b      	lsls	r3, r3, #28
 8005560:	4925      	ldr	r1, [pc, #148]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005562:	4313      	orrs	r3, r2
 8005564:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d011      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	019a      	lsls	r2, r3, #6
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	041b      	lsls	r3, r3, #16
 8005580:	431a      	orrs	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	061b      	lsls	r3, r3, #24
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	071b      	lsls	r3, r3, #28
 8005590:	4919      	ldr	r1, [pc, #100]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005598:	4b17      	ldr	r3, [pc, #92]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a16      	ldr	r2, [pc, #88]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800559e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a4:	f7fb feb8 	bl	8001318 <HAL_GetTick>
 80055a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055aa:	e008      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055ac:	f7fb feb4 	bl	8001318 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b64      	cmp	r3, #100	; 0x64
 80055b8:	d901      	bls.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e0d7      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055be:	4b0e      	ldr	r3, [pc, #56]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0f0      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	f040 80cd 	bne.w	800576c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80055d2:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a08      	ldr	r2, [pc, #32]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80055d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055de:	f7fb fe9b 	bl	8001318 <HAL_GetTick>
 80055e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055e4:	e00a      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055e6:	f7fb fe97 	bl	8001318 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b64      	cmp	r3, #100	; 0x64
 80055f2:	d903      	bls.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e0ba      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80055f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055fc:	4b5e      	ldr	r3, [pc, #376]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005608:	d0ed      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561a:	2b00      	cmp	r3, #0
 800561c:	d009      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005626:	2b00      	cmp	r3, #0
 8005628:	d02e      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	d12a      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005632:	4b51      	ldr	r3, [pc, #324]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005638:	0c1b      	lsrs	r3, r3, #16
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005640:	4b4d      	ldr	r3, [pc, #308]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005646:	0f1b      	lsrs	r3, r3, #28
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	019a      	lsls	r2, r3, #6
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	041b      	lsls	r3, r3, #16
 8005658:	431a      	orrs	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	061b      	lsls	r3, r3, #24
 8005660:	431a      	orrs	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	071b      	lsls	r3, r3, #28
 8005666:	4944      	ldr	r1, [pc, #272]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800566e:	4b42      	ldr	r3, [pc, #264]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005674:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567c:	3b01      	subs	r3, #1
 800567e:	021b      	lsls	r3, r3, #8
 8005680:	493d      	ldr	r1, [pc, #244]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005682:	4313      	orrs	r3, r2
 8005684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d022      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005698:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800569c:	d11d      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800569e:	4b36      	ldr	r3, [pc, #216]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80056a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a4:	0e1b      	lsrs	r3, r3, #24
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056ac:	4b32      	ldr	r3, [pc, #200]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80056ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b2:	0f1b      	lsrs	r3, r3, #28
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	019a      	lsls	r2, r3, #6
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	041b      	lsls	r3, r3, #16
 80056c6:	431a      	orrs	r2, r3
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	061b      	lsls	r3, r3, #24
 80056cc:	431a      	orrs	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	071b      	lsls	r3, r3, #28
 80056d2:	4929      	ldr	r1, [pc, #164]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0308 	and.w	r3, r3, #8
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d028      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056e6:	4b24      	ldr	r3, [pc, #144]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80056e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ec:	0e1b      	lsrs	r3, r3, #24
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80056f4:	4b20      	ldr	r3, [pc, #128]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80056f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fa:	0c1b      	lsrs	r3, r3, #16
 80056fc:	f003 0303 	and.w	r3, r3, #3
 8005700:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	019a      	lsls	r2, r3, #6
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	041b      	lsls	r3, r3, #16
 800570c:	431a      	orrs	r2, r3
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	061b      	lsls	r3, r3, #24
 8005712:	431a      	orrs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	071b      	lsls	r3, r3, #28
 800571a:	4917      	ldr	r1, [pc, #92]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800571c:	4313      	orrs	r3, r2
 800571e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005722:	4b15      	ldr	r3, [pc, #84]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005728:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005730:	4911      	ldr	r1, [pc, #68]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005738:	4b0f      	ldr	r3, [pc, #60]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a0e      	ldr	r2, [pc, #56]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800573e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005742:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005744:	f7fb fde8 	bl	8001318 <HAL_GetTick>
 8005748:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800574a:	e008      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800574c:	f7fb fde4 	bl	8001318 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b64      	cmp	r3, #100	; 0x64
 8005758:	d901      	bls.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e007      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800575e:	4b06      	ldr	r3, [pc, #24]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800576a:	d1ef      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3720      	adds	r7, #32
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	40023800 	.word	0x40023800

0800577c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005784:	2300      	movs	r3, #0
 8005786:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800578c:	2300      	movs	r3, #0
 800578e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800579a:	f040 8086 	bne.w	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 800579e:	4b8d      	ldr	r3, [pc, #564]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80057a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057a4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80057ac:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057b4:	d03e      	beq.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 80057b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057ba:	d073      	beq.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d000      	beq.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80057c0:	e074      	b.n	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80057c2:	4b84      	ldr	r3, [pc, #528]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d108      	bne.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80057ce:	4b81      	ldr	r3, [pc, #516]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057d6:	4a80      	ldr	r2, [pc, #512]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80057d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057dc:	613b      	str	r3, [r7, #16]
 80057de:	e007      	b.n	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80057e0:	4b7c      	ldr	r3, [pc, #496]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057e8:	4a7c      	ldr	r2, [pc, #496]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80057ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ee:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80057f0:	4b78      	ldr	r3, [pc, #480]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80057f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f6:	0e1b      	lsrs	r3, r3, #24
 80057f8:	f003 030f 	and.w	r3, r3, #15
 80057fc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80057fe:	4b75      	ldr	r3, [pc, #468]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005804:	099b      	lsrs	r3, r3, #6
 8005806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	fb02 f203 	mul.w	r2, r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	fbb2 f3f3 	udiv	r3, r2, r3
 8005816:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005818:	4b6e      	ldr	r3, [pc, #440]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800581a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800581e:	0a1b      	lsrs	r3, r3, #8
 8005820:	f003 031f 	and.w	r3, r3, #31
 8005824:	3301      	adds	r3, #1
 8005826:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005830:	617b      	str	r3, [r7, #20]
        break;
 8005832:	e03b      	b.n	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005834:	4b67      	ldr	r3, [pc, #412]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d108      	bne.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005840:	4b64      	ldr	r3, [pc, #400]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005848:	4a63      	ldr	r2, [pc, #396]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800584a:	fbb2 f3f3 	udiv	r3, r2, r3
 800584e:	613b      	str	r3, [r7, #16]
 8005850:	e007      	b.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005852:	4b60      	ldr	r3, [pc, #384]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800585a:	4a60      	ldr	r2, [pc, #384]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800585c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005860:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005862:	4b5c      	ldr	r3, [pc, #368]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005868:	0e1b      	lsrs	r3, r3, #24
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005870:	4b58      	ldr	r3, [pc, #352]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005876:	099b      	lsrs	r3, r3, #6
 8005878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	fb02 f203 	mul.w	r2, r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	fbb2 f3f3 	udiv	r3, r2, r3
 8005888:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800588a:	4b52      	ldr	r3, [pc, #328]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800588c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	3301      	adds	r3, #1
 8005896:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a0:	617b      	str	r3, [r7, #20]
        break;
 80058a2:	e003      	b.n	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 80058a4:	4b4e      	ldr	r3, [pc, #312]	; (80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80058a6:	617b      	str	r3, [r7, #20]
        break;
 80058a8:	e000      	b.n	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 80058aa:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058b2:	f040 8086 	bne.w	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 80058b6:	4b47      	ldr	r3, [pc, #284]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80058b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058bc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80058c4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058cc:	d03e      	beq.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80058ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058d2:	d073      	beq.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d000      	beq.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80058d8:	e074      	b.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80058da:	4b3e      	ldr	r3, [pc, #248]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d108      	bne.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80058e6:	4b3b      	ldr	r3, [pc, #236]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058ee:	4a3a      	ldr	r2, [pc, #232]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80058f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f4:	613b      	str	r3, [r7, #16]
 80058f6:	e007      	b.n	8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80058f8:	4b36      	ldr	r3, [pc, #216]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005900:	4a36      	ldr	r2, [pc, #216]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005902:	fbb2 f3f3 	udiv	r3, r2, r3
 8005906:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005908:	4b32      	ldr	r3, [pc, #200]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800590a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590e:	0e1b      	lsrs	r3, r3, #24
 8005910:	f003 030f 	and.w	r3, r3, #15
 8005914:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005916:	4b2f      	ldr	r3, [pc, #188]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591c:	099b      	lsrs	r3, r3, #6
 800591e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	fb02 f203 	mul.w	r2, r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	fbb2 f3f3 	udiv	r3, r2, r3
 800592e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005930:	4b28      	ldr	r3, [pc, #160]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005932:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005936:	0a1b      	lsrs	r3, r3, #8
 8005938:	f003 031f 	and.w	r3, r3, #31
 800593c:	3301      	adds	r3, #1
 800593e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	fbb2 f3f3 	udiv	r3, r2, r3
 8005948:	617b      	str	r3, [r7, #20]
        break;
 800594a:	e03b      	b.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800594c:	4b21      	ldr	r3, [pc, #132]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d108      	bne.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005958:	4b1e      	ldr	r3, [pc, #120]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005960:	4a1d      	ldr	r2, [pc, #116]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005962:	fbb2 f3f3 	udiv	r3, r2, r3
 8005966:	613b      	str	r3, [r7, #16]
 8005968:	e007      	b.n	800597a <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800596a:	4b1a      	ldr	r3, [pc, #104]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005972:	4a1a      	ldr	r2, [pc, #104]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005974:	fbb2 f3f3 	udiv	r3, r2, r3
 8005978:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800597a:	4b16      	ldr	r3, [pc, #88]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800597c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005980:	0e1b      	lsrs	r3, r3, #24
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005988:	4b12      	ldr	r3, [pc, #72]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800598a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800598e:	099b      	lsrs	r3, r3, #6
 8005990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	fb02 f203 	mul.w	r2, r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80059a2:	4b0c      	ldr	r3, [pc, #48]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80059a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059a8:	f003 031f 	and.w	r3, r3, #31
 80059ac:	3301      	adds	r3, #1
 80059ae:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b8:	617b      	str	r3, [r7, #20]
        break;
 80059ba:	e003      	b.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 80059bc:	4b08      	ldr	r3, [pc, #32]	; (80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80059be:	617b      	str	r3, [r7, #20]
        break;
 80059c0:	e000      	b.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 80059c2:	bf00      	nop

  return frequency;
 80059c4:	697b      	ldr	r3, [r7, #20]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	371c      	adds	r7, #28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	40023800 	.word	0x40023800
 80059d8:	00f42400 	.word	0x00f42400
 80059dc:	017d7840 	.word	0x017d7840
 80059e0:	00bb8000 	.word	0x00bb8000

080059e4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e01c      	b.n	8005a30 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	795b      	ldrb	r3, [r3, #5]
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d105      	bne.n	8005a0c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f006 f818 	bl	800ba3c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f042 0204 	orr.w	r2, r2, #4
 8005a20:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	791b      	ldrb	r3, [r3, #4]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d101      	bne.n	8005a52 <HAL_RNG_GenerateRandomNumber+0x1a>
 8005a4e:	2302      	movs	r3, #2
 8005a50:	e03d      	b.n	8005ace <HAL_RNG_GenerateRandomNumber+0x96>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	795b      	ldrb	r3, [r3, #5]
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d12c      	bne.n	8005abc <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2202      	movs	r2, #2
 8005a66:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a68:	f7fb fc56 	bl	8001318 <HAL_GetTick>
 8005a6c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005a6e:	e011      	b.n	8005a94 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005a70:	f7fb fc52 	bl	8001318 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d90a      	bls.n	8005a94 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e01c      	b.n	8005ace <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d1e6      	bne.n	8005a70 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	715a      	strb	r2, [r3, #5]
 8005aba:	e004      	b.n	8005ac6 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2204      	movs	r2, #4
 8005ac0:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	711a      	strb	r2, [r3, #4]

  return status;
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b082      	sub	sp, #8
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	330c      	adds	r3, #12
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff ffa7 	bl	8005a38 <HAL_RNG_GenerateRandomNumber>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d102      	bne.n	8005af6 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	e000      	b.n	8005af8 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8005af6:	2300      	movs	r3, #0
  }
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e06b      	b.n	8005bea <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	7f5b      	ldrb	r3, [r3, #29]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d105      	bne.n	8005b28 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f005 ffaa 	bl	800ba7c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	22ca      	movs	r2, #202	; 0xca
 8005b34:	625a      	str	r2, [r3, #36]	; 0x24
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2253      	movs	r2, #83	; 0x53
 8005b3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fb00 	bl	8006144 <RTC_EnterInitMode>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d008      	beq.n	8005b5c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	22ff      	movs	r2, #255	; 0xff
 8005b50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2204      	movs	r2, #4
 8005b56:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e046      	b.n	8005bea <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6899      	ldr	r1, [r3, #8]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	4b23      	ldr	r3, [pc, #140]	; (8005bf4 <HAL_RTC_Init+0xf4>)
 8005b68:	400b      	ands	r3, r1
 8005b6a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6899      	ldr	r1, [r3, #8]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	431a      	orrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	68d2      	ldr	r2, [r2, #12]
 8005b92:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6919      	ldr	r1, [r3, #16]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	041a      	lsls	r2, r3, #16
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68da      	ldr	r2, [r3, #12]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bb6:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0208 	bic.w	r2, r2, #8
 8005bc6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	22ff      	movs	r2, #255	; 0xff
 8005be0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005be8:	2300      	movs	r3, #0
  }
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	ff8fffbf 	.word	0xff8fffbf

08005bf8 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005bf8:	b590      	push	{r4, r7, lr}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005c04:	2300      	movs	r3, #0
 8005c06:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	7f1b      	ldrb	r3, [r3, #28]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d101      	bne.n	8005c14 <HAL_RTC_SetTime+0x1c>
 8005c10:	2302      	movs	r3, #2
 8005c12:	e0a8      	b.n	8005d66 <HAL_RTC_SetTime+0x16e>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2201      	movs	r2, #1
 8005c18:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d126      	bne.n	8005c74 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d102      	bne.n	8005c3a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2200      	movs	r2, #0
 8005c38:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 faac 	bl	800619c <RTC_ByteToBcd2>
 8005c44:	4603      	mov	r3, r0
 8005c46:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	785b      	ldrb	r3, [r3, #1]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 faa5 	bl	800619c <RTC_ByteToBcd2>
 8005c52:	4603      	mov	r3, r0
 8005c54:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005c56:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	789b      	ldrb	r3, [r3, #2]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 fa9d 	bl	800619c <RTC_ByteToBcd2>
 8005c62:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005c64:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	7b1b      	ldrb	r3, [r3, #12]
 8005c6c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	e018      	b.n	8005ca6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d102      	bne.n	8005c88 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2200      	movs	r2, #0
 8005c86:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	785b      	ldrb	r3, [r3, #1]
 8005c92:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005c94:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005c9a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	7b1b      	ldrb	r3, [r3, #12]
 8005ca0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	22ca      	movs	r2, #202	; 0xca
 8005cac:	625a      	str	r2, [r3, #36]	; 0x24
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2253      	movs	r2, #83	; 0x53
 8005cb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 fa44 	bl	8006144 <RTC_EnterInitMode>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	22ff      	movs	r2, #255	; 0xff
 8005cc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2204      	movs	r2, #4
 8005cce:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e045      	b.n	8005d66 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	6979      	ldr	r1, [r7, #20]
 8005ce0:	4b23      	ldr	r3, [pc, #140]	; (8005d70 <HAL_RTC_SetTime+0x178>)
 8005ce2:	400b      	ands	r3, r1
 8005ce4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cf4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6899      	ldr	r1, [r3, #8]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	431a      	orrs	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d1c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f003 0320 	and.w	r3, r3, #32
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d111      	bne.n	8005d50 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 f9e1 	bl	80060f4 <HAL_RTC_WaitForSynchro>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00b      	beq.n	8005d50 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	22ff      	movs	r2, #255	; 0xff
 8005d3e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2204      	movs	r2, #4
 8005d44:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e00a      	b.n	8005d66 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	22ff      	movs	r2, #255	; 0xff
 8005d56:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005d64:	2300      	movs	r3, #0
  }
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd90      	pop	{r4, r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	007f7f7f 	.word	0x007f7f7f

08005d74 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d74:	b590      	push	{r4, r7, lr}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8005d80:	2300      	movs	r3, #0
 8005d82:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	7f1b      	ldrb	r3, [r3, #28]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d101      	bne.n	8005d90 <HAL_RTC_SetDate+0x1c>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e092      	b.n	8005eb6 <HAL_RTC_SetDate+0x142>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2201      	movs	r2, #1
 8005d94:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2202      	movs	r2, #2
 8005d9a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10e      	bne.n	8005dc0 <HAL_RTC_SetDate+0x4c>
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	785b      	ldrb	r3, [r3, #1]
 8005da6:	f003 0310 	and.w	r3, r3, #16
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d008      	beq.n	8005dc0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	785b      	ldrb	r3, [r3, #1]
 8005db2:	f023 0310 	bic.w	r3, r3, #16
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	330a      	adds	r3, #10
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d11c      	bne.n	8005e00 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	78db      	ldrb	r3, [r3, #3]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 f9e6 	bl	800619c <RTC_ByteToBcd2>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	785b      	ldrb	r3, [r3, #1]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 f9df 	bl	800619c <RTC_ByteToBcd2>
 8005dde:	4603      	mov	r3, r0
 8005de0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005de2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	789b      	ldrb	r3, [r3, #2]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 f9d7 	bl	800619c <RTC_ByteToBcd2>
 8005dee:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005df0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	e00e      	b.n	8005e1e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	78db      	ldrb	r3, [r3, #3]
 8005e04:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	785b      	ldrb	r3, [r3, #1]
 8005e0a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005e0c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8005e12:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	22ca      	movs	r2, #202	; 0xca
 8005e24:	625a      	str	r2, [r3, #36]	; 0x24
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2253      	movs	r2, #83	; 0x53
 8005e2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 f988 	bl	8006144 <RTC_EnterInitMode>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00b      	beq.n	8005e52 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	22ff      	movs	r2, #255	; 0xff
 8005e40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2204      	movs	r2, #4
 8005e46:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e031      	b.n	8005eb6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	6979      	ldr	r1, [r7, #20]
 8005e58:	4b19      	ldr	r3, [pc, #100]	; (8005ec0 <HAL_RTC_SetDate+0x14c>)
 8005e5a:	400b      	ands	r3, r1
 8005e5c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e6c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f003 0320 	and.w	r3, r3, #32
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d111      	bne.n	8005ea0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 f939 	bl	80060f4 <HAL_RTC_WaitForSynchro>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00b      	beq.n	8005ea0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	22ff      	movs	r2, #255	; 0xff
 8005e8e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2204      	movs	r2, #4
 8005e94:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e00a      	b.n	8005eb6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	22ff      	movs	r2, #255	; 0xff
 8005ea6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
  }
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd90      	pop	{r4, r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	00ffff3f 	.word	0x00ffff3f

08005ec4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005ec4:	b590      	push	{r4, r7, lr}
 8005ec6:	b089      	sub	sp, #36	; 0x24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	61fb      	str	r3, [r7, #28]
 8005ed8:	2300      	movs	r3, #0
 8005eda:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	7f1b      	ldrb	r3, [r3, #28]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_RTC_SetAlarm+0x24>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e101      	b.n	80060ec <HAL_RTC_SetAlarm+0x228>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2201      	movs	r2, #1
 8005eec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d137      	bne.n	8005f6a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d102      	bne.n	8005f0e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 f942 	bl	800619c <RTC_ByteToBcd2>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	785b      	ldrb	r3, [r3, #1]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 f93b 	bl	800619c <RTC_ByteToBcd2>
 8005f26:	4603      	mov	r3, r0
 8005f28:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005f2a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	789b      	ldrb	r3, [r3, #2]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 f933 	bl	800619c <RTC_ByteToBcd2>
 8005f36:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005f38:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	7b1b      	ldrb	r3, [r3, #12]
 8005f40:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005f42:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 f925 	bl	800619c <RTC_ByteToBcd2>
 8005f52:	4603      	mov	r3, r0
 8005f54:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005f56:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8005f5e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005f64:	4313      	orrs	r3, r2
 8005f66:	61fb      	str	r3, [r7, #28]
 8005f68:	e023      	b.n	8005fb2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d102      	bne.n	8005f7e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	785b      	ldrb	r3, [r3, #1]
 8005f88:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005f8a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005f90:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	7b1b      	ldrb	r3, [r3, #12]
 8005f96:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005f98:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fa0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005fa2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005fa8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	22ca      	movs	r2, #202	; 0xca
 8005fc4:	625a      	str	r2, [r3, #36]	; 0x24
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2253      	movs	r2, #83	; 0x53
 8005fcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fd6:	d13f      	bne.n	8006058 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689a      	ldr	r2, [r3, #8]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fe6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ff6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ff8:	f7fb f98e 	bl	8001318 <HAL_GetTick>
 8005ffc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005ffe:	e013      	b.n	8006028 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006000:	f7fb f98a 	bl	8001318 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800600e:	d90b      	bls.n	8006028 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	22ff      	movs	r2, #255	; 0xff
 8006016:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2203      	movs	r2, #3
 800601c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e061      	b.n	80060ec <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d0e4      	beq.n	8006000 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	69fa      	ldr	r2, [r7, #28]
 800603c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006054:	609a      	str	r2, [r3, #8]
 8006056:	e03e      	b.n	80060d6 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006066:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006076:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006078:	f7fb f94e 	bl	8001318 <HAL_GetTick>
 800607c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800607e:	e013      	b.n	80060a8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006080:	f7fb f94a 	bl	8001318 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800608e:	d90b      	bls.n	80060a8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	22ff      	movs	r2, #255	; 0xff
 8006096:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2203      	movs	r2, #3
 800609c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e021      	b.n	80060ec <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0e4      	beq.n	8006080 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69fa      	ldr	r2, [r7, #28]
 80060bc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	22ff      	movs	r2, #255	; 0xff
 80060dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2201      	movs	r2, #1
 80060e2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3724      	adds	r7, #36	; 0x24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd90      	pop	{r4, r7, pc}

080060f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800610e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006110:	f7fb f902 	bl	8001318 <HAL_GetTick>
 8006114:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006116:	e009      	b.n	800612c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006118:	f7fb f8fe 	bl	8001318 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006126:	d901      	bls.n	800612c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e007      	b.n	800613c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f003 0320 	and.w	r3, r3, #32
 8006136:	2b00      	cmp	r3, #0
 8006138:	d0ee      	beq.n	8006118 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800614c:	2300      	movs	r3, #0
 800614e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615a:	2b00      	cmp	r3, #0
 800615c:	d119      	bne.n	8006192 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f04f 32ff 	mov.w	r2, #4294967295
 8006166:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006168:	f7fb f8d6 	bl	8001318 <HAL_GetTick>
 800616c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800616e:	e009      	b.n	8006184 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006170:	f7fb f8d2 	bl	8001318 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800617e:	d901      	bls.n	8006184 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e007      	b.n	8006194 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618e:	2b00      	cmp	r3, #0
 8006190:	d0ee      	beq.n	8006170 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	4603      	mov	r3, r0
 80061a4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80061aa:	e005      	b.n	80061b8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	3301      	adds	r3, #1
 80061b0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80061b2:	79fb      	ldrb	r3, [r7, #7]
 80061b4:	3b0a      	subs	r3, #10
 80061b6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80061b8:	79fb      	ldrb	r3, [r7, #7]
 80061ba:	2b09      	cmp	r3, #9
 80061bc:	d8f6      	bhi.n	80061ac <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	79fb      	ldrb	r3, [r7, #7]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	b2db      	uxtb	r3, r3
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80061e4:	2300      	movs	r3, #0
 80061e6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	7f1b      	ldrb	r3, [r3, #28]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_RTCEx_SetTimeStamp+0x1c>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e03e      	b.n	8006272 <HAL_RTCEx_SetTimeStamp+0x9a>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2202      	movs	r2, #2
 80061fe:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	4b1e      	ldr	r3, [pc, #120]	; (8006280 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8006208:	4013      	ands	r3, r2
 800620a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	4313      	orrs	r3, r2
 8006212:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	22ca      	movs	r2, #202	; 0xca
 800621a:	625a      	str	r2, [r3, #36]	; 0x24
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2253      	movs	r2, #83	; 0x53
 8006222:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0206 	bic.w	r2, r2, #6
 8006232:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	430a      	orrs	r2, r1
 8006242:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800625a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	22ff      	movs	r2, #255	; 0xff
 8006262:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	371c      	adds	r7, #28
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	fffff7f7 	.word	0xfffff7f7

08006284 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800628c:	2300      	movs	r3, #0
 800628e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8006290:	2300      	movs	r3, #0
 8006292:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8006294:	2300      	movs	r3, #0
 8006296:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e149      	b.n	8006536 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d106      	bne.n	80062bc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f005 fed0 	bl	800c05c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f94f 	bl	8006568 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d007      	beq.n	80062e2 <HAL_SAI_Init+0x5e>
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d302      	bcc.n	80062dc <HAL_SAI_Init+0x58>
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d006      	beq.n	80062e8 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80062da:	e008      	b.n	80062ee <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 80062dc:	2300      	movs	r3, #0
 80062de:	61fb      	str	r3, [r7, #28]
      break;
 80062e0:	e005      	b.n	80062ee <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80062e2:	2310      	movs	r3, #16
 80062e4:	61fb      	str	r3, [r7, #28]
      break;
 80062e6:	e002      	b.n	80062ee <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80062e8:	2320      	movs	r3, #32
 80062ea:	61fb      	str	r3, [r7, #28]
      break;
 80062ec:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d81d      	bhi.n	8006332 <HAL_SAI_Init+0xae>
 80062f6:	a201      	add	r2, pc, #4	; (adr r2, 80062fc <HAL_SAI_Init+0x78>)
 80062f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fc:	0800630d 	.word	0x0800630d
 8006300:	08006313 	.word	0x08006313
 8006304:	0800631b 	.word	0x0800631b
 8006308:	08006323 	.word	0x08006323
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 800630c:	2300      	movs	r3, #0
 800630e:	617b      	str	r3, [r7, #20]
      }
      break;
 8006310:	e010      	b.n	8006334 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8006312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006316:	617b      	str	r3, [r7, #20]
      }
      break;
 8006318:	e00c      	b.n	8006334 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800631a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800631e:	617b      	str	r3, [r7, #20]
      }
      break;
 8006320:	e008      	b.n	8006334 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8006322:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006326:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	f043 0301 	orr.w	r3, r3, #1
 800632e:	61fb      	str	r3, [r7, #28]
      }
      break;
 8006330:	e000      	b.n	8006334 <HAL_SAI_Init+0xb0>
  default:
    break;
 8006332:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a81      	ldr	r2, [pc, #516]	; (8006540 <HAL_SAI_Init+0x2bc>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d004      	beq.n	8006348 <HAL_SAI_Init+0xc4>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a80      	ldr	r2, [pc, #512]	; (8006544 <HAL_SAI_Init+0x2c0>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d103      	bne.n	8006350 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8006348:	4a7f      	ldr	r2, [pc, #508]	; (8006548 <HAL_SAI_Init+0x2c4>)
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	e002      	b.n	8006356 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006350:	4a7e      	ldr	r2, [pc, #504]	; (800654c <HAL_SAI_Init+0x2c8>)
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d043      	beq.n	80063e6 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800635e:	2300      	movs	r3, #0
 8006360:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a76      	ldr	r2, [pc, #472]	; (8006540 <HAL_SAI_Init+0x2bc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d004      	beq.n	8006376 <HAL_SAI_Init+0xf2>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a74      	ldr	r2, [pc, #464]	; (8006544 <HAL_SAI_Init+0x2c0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d104      	bne.n	8006380 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006376:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800637a:	f7ff f9ff 	bl	800577c <HAL_RCCEx_GetPeriphCLKFreq>
 800637e:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a72      	ldr	r2, [pc, #456]	; (8006550 <HAL_SAI_Init+0x2cc>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d004      	beq.n	8006394 <HAL_SAI_Init+0x110>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a71      	ldr	r2, [pc, #452]	; (8006554 <HAL_SAI_Init+0x2d0>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d104      	bne.n	800639e <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006394:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006398:	f7ff f9f0 	bl	800577c <HAL_RCCEx_GetPeriphCLKFreq>
 800639c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	4613      	mov	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	461a      	mov	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	025b      	lsls	r3, r3, #9
 80063b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4a67      	ldr	r2, [pc, #412]	; (8006558 <HAL_SAI_Init+0x2d4>)
 80063ba:	fba2 2303 	umull	r2, r3, r2, r3
 80063be:	08da      	lsrs	r2, r3, #3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80063c4:	68f9      	ldr	r1, [r7, #12]
 80063c6:	4b64      	ldr	r3, [pc, #400]	; (8006558 <HAL_SAI_Init+0x2d4>)
 80063c8:	fba3 2301 	umull	r2, r3, r3, r1
 80063cc:	08da      	lsrs	r2, r3, #3
 80063ce:	4613      	mov	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	1aca      	subs	r2, r1, r3
 80063d8:	2a08      	cmp	r2, #8
 80063da:	d904      	bls.n	80063e6 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_SAI_Init+0x172>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d109      	bne.n	800640a <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <HAL_SAI_Init+0x17e>
 80063fe:	2300      	movs	r3, #0
 8006400:	e001      	b.n	8006406 <HAL_SAI_Init+0x182>
 8006402:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006406:	61bb      	str	r3, [r7, #24]
 8006408:	e008      	b.n	800641c <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640e:	2b01      	cmp	r3, #1
 8006410:	d102      	bne.n	8006418 <HAL_SAI_Init+0x194>
 8006412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006416:	e000      	b.n	800641a <HAL_SAI_Init+0x196>
 8006418:	2300      	movs	r3, #0
 800641a:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6819      	ldr	r1, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	4b4d      	ldr	r3, [pc, #308]	; (800655c <HAL_SAI_Init+0x2d8>)
 8006428:	400b      	ands	r3, r1
 800642a:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6819      	ldr	r1, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643a:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006440:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	431a      	orrs	r2, r3
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8006454:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006460:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	051b      	lsls	r3, r3, #20
 8006468:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6859      	ldr	r1, [r3, #4]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	4b38      	ldr	r3, [pc, #224]	; (8006560 <HAL_SAI_Init+0x2dc>)
 800647e:	400b      	ands	r3, r1
 8006480:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6859      	ldr	r1, [r3, #4]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	699a      	ldr	r2, [r3, #24]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006490:	431a      	orrs	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006496:	431a      	orrs	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6899      	ldr	r1, [r3, #8]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	4b2e      	ldr	r3, [pc, #184]	; (8006564 <HAL_SAI_Init+0x2e0>)
 80064ac:	400b      	ands	r3, r1
 80064ae:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6899      	ldr	r1, [r3, #8]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80064c0:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80064c6:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80064cc:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d2:	3b01      	subs	r3, #1
 80064d4:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80064d6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	430a      	orrs	r2, r1
 80064de:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68d9      	ldr	r1, [r3, #12]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	f24f 0320 	movw	r3, #61472	; 0xf020
 80064ee:	400b      	ands	r3, r1
 80064f0:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68d9      	ldr	r1, [r3, #12]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006500:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006506:	041b      	lsls	r3, r3, #16
 8006508:	431a      	orrs	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650e:	3b01      	subs	r3, #1
 8006510:	021b      	lsls	r3, r3, #8
 8006512:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	430a      	orrs	r2, r1
 800651a:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3720      	adds	r7, #32
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	40015804 	.word	0x40015804
 8006544:	40015824 	.word	0x40015824
 8006548:	40015800 	.word	0x40015800
 800654c:	40015c00 	.word	0x40015c00
 8006550:	40015c04 	.word	0x40015c04
 8006554:	40015c24 	.word	0x40015c24
 8006558:	cccccccd 	.word	0xcccccccd
 800655c:	ff05c010 	.word	0xff05c010
 8006560:	ffff1ff0 	.word	0xffff1ff0
 8006564:	fff88000 	.word	0xfff88000

08006568 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006568:	b490      	push	{r4, r7}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8006570:	4b16      	ldr	r3, [pc, #88]	; (80065cc <SAI_Disable+0x64>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a16      	ldr	r2, [pc, #88]	; (80065d0 <SAI_Disable+0x68>)
 8006576:	fba2 2303 	umull	r2, r3, r2, r3
 800657a:	0b1b      	lsrs	r3, r3, #12
 800657c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006590:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006592:	4623      	mov	r3, r4
 8006594:	1e5c      	subs	r4, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10a      	bne.n	80065b0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	73fb      	strb	r3, [r7, #15]
      break;
 80065ae:	e006      	b.n	80065be <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1e9      	bne.n	8006592 <SAI_Disable+0x2a>

  return status;
 80065be:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bc90      	pop	{r4, r7}
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	2000000c 	.word	0x2000000c
 80065d0:	95cbec1b 	.word	0x95cbec1b

080065d4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d101      	bne.n	80065e8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e025      	b.n	8006634 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d106      	bne.n	8006602 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f005 fd23 	bl	800c048 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2202      	movs	r2, #2
 8006606:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	3304      	adds	r3, #4
 8006612:	4619      	mov	r1, r3
 8006614:	4610      	mov	r0, r2
 8006616:	f001 fd81 	bl	800811c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6818      	ldr	r0, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	461a      	mov	r2, r3
 8006624:	6839      	ldr	r1, [r7, #0]
 8006626:	f001 fdeb 	bl	8008200 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d101      	bne.n	8006658 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006654:	2302      	movs	r3, #2
 8006656:	e018      	b.n	800668a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	68b9      	ldr	r1, [r7, #8]
 8006668:	4618      	mov	r0, r3
 800666a:	f001 fe49 	bl	8008300 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b02      	cmp	r3, #2
 8006674:	d104      	bne.n	8006680 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2205      	movs	r2, #5
 800667a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800667e:	e003      	b.n	8006688 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b082      	sub	sp, #8
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d101      	bne.n	80066ac <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80066a8:	2302      	movs	r3, #2
 80066aa:	e00e      	b.n	80066ca <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2202      	movs	r2, #2
 80066b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f001 fe41 	bl	8008342 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e04c      	b.n	8006780 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d106      	bne.n	8006700 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f005 f9d8 	bl	800bab0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0203 	bic.w	r2, r2, #3
 8006716:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4b19      	ldr	r3, [pc, #100]	; (8006788 <HAL_SPDIFRX_Init+0xb4>)
 8006724:	4013      	ands	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8006730:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8006736:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800673c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8006742:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8006748:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800674e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8006754:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800675a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8006760:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	fff88407 	.word	0xfff88407

0800678c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e084      	b.n	80068a8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d106      	bne.n	80067be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f005 f9bb 	bl	800bb34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2202      	movs	r2, #2
 80067c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067d4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067de:	d902      	bls.n	80067e6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]
 80067e4:	e002      	b.n	80067ec <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80067e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067ea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80067f4:	d007      	beq.n	8006806 <HAL_SPI_Init+0x7a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067fe:	d002      	beq.n	8006806 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10b      	bne.n	8006826 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006816:	d903      	bls.n	8006820 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	631a      	str	r2, [r3, #48]	; 0x30
 800681e:	e002      	b.n	8006826 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	431a      	orrs	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	431a      	orrs	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	431a      	orrs	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006844:	431a      	orrs	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	431a      	orrs	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	ea42 0103 	orr.w	r1, r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	0c1b      	lsrs	r3, r3, #16
 8006866:	f003 0204 	and.w	r2, r3, #4
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	431a      	orrs	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006874:	431a      	orrs	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	ea42 0103 	orr.w	r1, r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	430a      	orrs	r2, r1
 8006886:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	69da      	ldr	r2, [r3, #28]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006896:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e01d      	b.n	80068fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d106      	bne.n	80068dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f005 f98e 	bl	800bbf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	3304      	adds	r3, #4
 80068ec:	4619      	mov	r1, r3
 80068ee:	4610      	mov	r0, r2
 80068f0:	f000 fb78 	bl	8006fe4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
	...

08006908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f042 0201 	orr.w	r2, r2, #1
 800691e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689a      	ldr	r2, [r3, #8]
 8006926:	4b0c      	ldr	r3, [pc, #48]	; (8006958 <HAL_TIM_Base_Start_IT+0x50>)
 8006928:	4013      	ands	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2b06      	cmp	r3, #6
 8006930:	d00b      	beq.n	800694a <HAL_TIM_Base_Start_IT+0x42>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006938:	d007      	beq.n	800694a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f042 0201 	orr.w	r2, r2, #1
 8006948:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	00010007 	.word	0x00010007

0800695c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e01d      	b.n	80069aa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d106      	bne.n	8006988 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f005 f9a6 	bl	800bcd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	3304      	adds	r3, #4
 8006998:	4619      	mov	r1, r3
 800699a:	4610      	mov	r0, r2
 800699c:	f000 fb22 	bl	8006fe4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b082      	sub	sp, #8
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d122      	bne.n	8006a0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d11b      	bne.n	8006a0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f06f 0202 	mvn.w	r2, #2
 80069de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	f003 0303 	and.w	r3, r3, #3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d003      	beq.n	80069fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fad7 	bl	8006fa8 <HAL_TIM_IC_CaptureCallback>
 80069fa:	e005      	b.n	8006a08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fac9 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fada 	bl	8006fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	2b04      	cmp	r3, #4
 8006a1a:	d122      	bne.n	8006a62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f003 0304 	and.w	r3, r3, #4
 8006a26:	2b04      	cmp	r3, #4
 8006a28:	d11b      	bne.n	8006a62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f06f 0204 	mvn.w	r2, #4
 8006a32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 faad 	bl	8006fa8 <HAL_TIM_IC_CaptureCallback>
 8006a4e:	e005      	b.n	8006a5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fa9f 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fab0 	bl	8006fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	f003 0308 	and.w	r3, r3, #8
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	d122      	bne.n	8006ab6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f003 0308 	and.w	r3, r3, #8
 8006a7a:	2b08      	cmp	r3, #8
 8006a7c:	d11b      	bne.n	8006ab6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f06f 0208 	mvn.w	r2, #8
 8006a86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2204      	movs	r2, #4
 8006a8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	f003 0303 	and.w	r3, r3, #3
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fa83 	bl	8006fa8 <HAL_TIM_IC_CaptureCallback>
 8006aa2:	e005      	b.n	8006ab0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fa75 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fa86 	bl	8006fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	f003 0310 	and.w	r3, r3, #16
 8006ac0:	2b10      	cmp	r3, #16
 8006ac2:	d122      	bne.n	8006b0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f003 0310 	and.w	r3, r3, #16
 8006ace:	2b10      	cmp	r3, #16
 8006ad0:	d11b      	bne.n	8006b0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f06f 0210 	mvn.w	r2, #16
 8006ada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2208      	movs	r2, #8
 8006ae0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69db      	ldr	r3, [r3, #28]
 8006ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fa59 	bl	8006fa8 <HAL_TIM_IC_CaptureCallback>
 8006af6:	e005      	b.n	8006b04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fa4b 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fa5c 	bl	8006fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d10e      	bne.n	8006b36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d107      	bne.n	8006b36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f06f 0201 	mvn.w	r2, #1
 8006b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f004 fd4f 	bl	800b5d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b40:	2b80      	cmp	r3, #128	; 0x80
 8006b42:	d10e      	bne.n	8006b62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b4e:	2b80      	cmp	r3, #128	; 0x80
 8006b50:	d107      	bne.n	8006b62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 febd 	bl	80078dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b70:	d10e      	bne.n	8006b90 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b7c:	2b80      	cmp	r3, #128	; 0x80
 8006b7e:	d107      	bne.n	8006b90 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 feb0 	bl	80078f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9a:	2b40      	cmp	r3, #64	; 0x40
 8006b9c:	d10e      	bne.n	8006bbc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba8:	2b40      	cmp	r3, #64	; 0x40
 8006baa:	d107      	bne.n	8006bbc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fa0a 	bl	8006fd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	f003 0320 	and.w	r3, r3, #32
 8006bc6:	2b20      	cmp	r3, #32
 8006bc8:	d10e      	bne.n	8006be8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f003 0320 	and.w	r3, r3, #32
 8006bd4:	2b20      	cmp	r3, #32
 8006bd6:	d107      	bne.n	8006be8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f06f 0220 	mvn.w	r2, #32
 8006be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fe70 	bl	80078c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006be8:	bf00      	nop
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d101      	bne.n	8006c0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006c06:	2302      	movs	r3, #2
 8006c08:	e105      	b.n	8006e16 <HAL_TIM_PWM_ConfigChannel+0x226>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2202      	movs	r2, #2
 8006c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b14      	cmp	r3, #20
 8006c1e:	f200 80f0 	bhi.w	8006e02 <HAL_TIM_PWM_ConfigChannel+0x212>
 8006c22:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c28:	08006c7d 	.word	0x08006c7d
 8006c2c:	08006e03 	.word	0x08006e03
 8006c30:	08006e03 	.word	0x08006e03
 8006c34:	08006e03 	.word	0x08006e03
 8006c38:	08006cbd 	.word	0x08006cbd
 8006c3c:	08006e03 	.word	0x08006e03
 8006c40:	08006e03 	.word	0x08006e03
 8006c44:	08006e03 	.word	0x08006e03
 8006c48:	08006cff 	.word	0x08006cff
 8006c4c:	08006e03 	.word	0x08006e03
 8006c50:	08006e03 	.word	0x08006e03
 8006c54:	08006e03 	.word	0x08006e03
 8006c58:	08006d3f 	.word	0x08006d3f
 8006c5c:	08006e03 	.word	0x08006e03
 8006c60:	08006e03 	.word	0x08006e03
 8006c64:	08006e03 	.word	0x08006e03
 8006c68:	08006d81 	.word	0x08006d81
 8006c6c:	08006e03 	.word	0x08006e03
 8006c70:	08006e03 	.word	0x08006e03
 8006c74:	08006e03 	.word	0x08006e03
 8006c78:	08006dc1 	.word	0x08006dc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68b9      	ldr	r1, [r7, #8]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fa4e 	bl	8007124 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	699a      	ldr	r2, [r3, #24]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f042 0208 	orr.w	r2, r2, #8
 8006c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	699a      	ldr	r2, [r3, #24]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0204 	bic.w	r2, r2, #4
 8006ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6999      	ldr	r1, [r3, #24]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	691a      	ldr	r2, [r3, #16]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	619a      	str	r2, [r3, #24]
      break;
 8006cba:	e0a3      	b.n	8006e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68b9      	ldr	r1, [r7, #8]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 faa0 	bl	8007208 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	699a      	ldr	r2, [r3, #24]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	699a      	ldr	r2, [r3, #24]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6999      	ldr	r1, [r3, #24]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	021a      	lsls	r2, r3, #8
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	619a      	str	r2, [r3, #24]
      break;
 8006cfc:	e082      	b.n	8006e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68b9      	ldr	r1, [r7, #8]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 faf7 	bl	80072f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	69da      	ldr	r2, [r3, #28]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f042 0208 	orr.w	r2, r2, #8
 8006d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	69da      	ldr	r2, [r3, #28]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f022 0204 	bic.w	r2, r2, #4
 8006d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	69d9      	ldr	r1, [r3, #28]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	691a      	ldr	r2, [r3, #16]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	61da      	str	r2, [r3, #28]
      break;
 8006d3c:	e062      	b.n	8006e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68b9      	ldr	r1, [r7, #8]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 fb4d 	bl	80073e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	69da      	ldr	r2, [r3, #28]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	69da      	ldr	r2, [r3, #28]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	69d9      	ldr	r1, [r3, #28]
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	021a      	lsls	r2, r3, #8
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	61da      	str	r2, [r3, #28]
      break;
 8006d7e:	e041      	b.n	8006e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68b9      	ldr	r1, [r7, #8]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fb84 	bl	8007494 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0208 	orr.w	r2, r2, #8
 8006d9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0204 	bic.w	r2, r2, #4
 8006daa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	691a      	ldr	r2, [r3, #16]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006dbe:	e021      	b.n	8006e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68b9      	ldr	r1, [r7, #8]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 fbb6 	bl	8007538 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	021a      	lsls	r2, r3, #8
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e00:	e000      	b.n	8006e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006e02:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop

08006e20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d101      	bne.n	8006e38 <HAL_TIM_ConfigClockSource+0x18>
 8006e34:	2302      	movs	r3, #2
 8006e36:	e0a6      	b.n	8006f86 <HAL_TIM_ConfigClockSource+0x166>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	4b4f      	ldr	r3, [pc, #316]	; (8006f90 <HAL_TIM_ConfigClockSource+0x170>)
 8006e54:	4013      	ands	r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b40      	cmp	r3, #64	; 0x40
 8006e6e:	d067      	beq.n	8006f40 <HAL_TIM_ConfigClockSource+0x120>
 8006e70:	2b40      	cmp	r3, #64	; 0x40
 8006e72:	d80b      	bhi.n	8006e8c <HAL_TIM_ConfigClockSource+0x6c>
 8006e74:	2b10      	cmp	r3, #16
 8006e76:	d073      	beq.n	8006f60 <HAL_TIM_ConfigClockSource+0x140>
 8006e78:	2b10      	cmp	r3, #16
 8006e7a:	d802      	bhi.n	8006e82 <HAL_TIM_ConfigClockSource+0x62>
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d06f      	beq.n	8006f60 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006e80:	e078      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006e82:	2b20      	cmp	r3, #32
 8006e84:	d06c      	beq.n	8006f60 <HAL_TIM_ConfigClockSource+0x140>
 8006e86:	2b30      	cmp	r3, #48	; 0x30
 8006e88:	d06a      	beq.n	8006f60 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006e8a:	e073      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006e8c:	2b70      	cmp	r3, #112	; 0x70
 8006e8e:	d00d      	beq.n	8006eac <HAL_TIM_ConfigClockSource+0x8c>
 8006e90:	2b70      	cmp	r3, #112	; 0x70
 8006e92:	d804      	bhi.n	8006e9e <HAL_TIM_ConfigClockSource+0x7e>
 8006e94:	2b50      	cmp	r3, #80	; 0x50
 8006e96:	d033      	beq.n	8006f00 <HAL_TIM_ConfigClockSource+0xe0>
 8006e98:	2b60      	cmp	r3, #96	; 0x60
 8006e9a:	d041      	beq.n	8006f20 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006e9c:	e06a      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ea2:	d066      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x152>
 8006ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ea8:	d017      	beq.n	8006eda <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006eaa:	e063      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	6899      	ldr	r1, [r3, #8]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f000 fc0a 	bl	80076d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ece:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	609a      	str	r2, [r3, #8]
      break;
 8006ed8:	e04c      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6818      	ldr	r0, [r3, #0]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	6899      	ldr	r1, [r3, #8]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	f000 fbf3 	bl	80076d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006efc:	609a      	str	r2, [r3, #8]
      break;
 8006efe:	e039      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6818      	ldr	r0, [r3, #0]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	6859      	ldr	r1, [r3, #4]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	f000 fb67 	bl	80075e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2150      	movs	r1, #80	; 0x50
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 fbc0 	bl	800769e <TIM_ITRx_SetConfig>
      break;
 8006f1e:	e029      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6818      	ldr	r0, [r3, #0]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	6859      	ldr	r1, [r3, #4]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	f000 fb86 	bl	800763e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2160      	movs	r1, #96	; 0x60
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 fbb0 	bl	800769e <TIM_ITRx_SetConfig>
      break;
 8006f3e:	e019      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6818      	ldr	r0, [r3, #0]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	6859      	ldr	r1, [r3, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	f000 fb47 	bl	80075e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2140      	movs	r1, #64	; 0x40
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 fba0 	bl	800769e <TIM_ITRx_SetConfig>
      break;
 8006f5e:	e009      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	f000 fb97 	bl	800769e <TIM_ITRx_SetConfig>
      break;
 8006f70:	e000      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006f72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	fffeff88 	.word	0xfffeff88

08006f94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a40      	ldr	r2, [pc, #256]	; (80070f8 <TIM_Base_SetConfig+0x114>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d013      	beq.n	8007024 <TIM_Base_SetConfig+0x40>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007002:	d00f      	beq.n	8007024 <TIM_Base_SetConfig+0x40>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a3d      	ldr	r2, [pc, #244]	; (80070fc <TIM_Base_SetConfig+0x118>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d00b      	beq.n	8007024 <TIM_Base_SetConfig+0x40>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a3c      	ldr	r2, [pc, #240]	; (8007100 <TIM_Base_SetConfig+0x11c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d007      	beq.n	8007024 <TIM_Base_SetConfig+0x40>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a3b      	ldr	r2, [pc, #236]	; (8007104 <TIM_Base_SetConfig+0x120>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d003      	beq.n	8007024 <TIM_Base_SetConfig+0x40>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a3a      	ldr	r2, [pc, #232]	; (8007108 <TIM_Base_SetConfig+0x124>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d108      	bne.n	8007036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800702a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a2f      	ldr	r2, [pc, #188]	; (80070f8 <TIM_Base_SetConfig+0x114>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d02b      	beq.n	8007096 <TIM_Base_SetConfig+0xb2>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007044:	d027      	beq.n	8007096 <TIM_Base_SetConfig+0xb2>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a2c      	ldr	r2, [pc, #176]	; (80070fc <TIM_Base_SetConfig+0x118>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d023      	beq.n	8007096 <TIM_Base_SetConfig+0xb2>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a2b      	ldr	r2, [pc, #172]	; (8007100 <TIM_Base_SetConfig+0x11c>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d01f      	beq.n	8007096 <TIM_Base_SetConfig+0xb2>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a2a      	ldr	r2, [pc, #168]	; (8007104 <TIM_Base_SetConfig+0x120>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d01b      	beq.n	8007096 <TIM_Base_SetConfig+0xb2>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a29      	ldr	r2, [pc, #164]	; (8007108 <TIM_Base_SetConfig+0x124>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d017      	beq.n	8007096 <TIM_Base_SetConfig+0xb2>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a28      	ldr	r2, [pc, #160]	; (800710c <TIM_Base_SetConfig+0x128>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d013      	beq.n	8007096 <TIM_Base_SetConfig+0xb2>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a27      	ldr	r2, [pc, #156]	; (8007110 <TIM_Base_SetConfig+0x12c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00f      	beq.n	8007096 <TIM_Base_SetConfig+0xb2>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a26      	ldr	r2, [pc, #152]	; (8007114 <TIM_Base_SetConfig+0x130>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d00b      	beq.n	8007096 <TIM_Base_SetConfig+0xb2>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a25      	ldr	r2, [pc, #148]	; (8007118 <TIM_Base_SetConfig+0x134>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d007      	beq.n	8007096 <TIM_Base_SetConfig+0xb2>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a24      	ldr	r2, [pc, #144]	; (800711c <TIM_Base_SetConfig+0x138>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d003      	beq.n	8007096 <TIM_Base_SetConfig+0xb2>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a23      	ldr	r2, [pc, #140]	; (8007120 <TIM_Base_SetConfig+0x13c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d108      	bne.n	80070a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800709c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a0a      	ldr	r2, [pc, #40]	; (80070f8 <TIM_Base_SetConfig+0x114>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d003      	beq.n	80070dc <TIM_Base_SetConfig+0xf8>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a0c      	ldr	r2, [pc, #48]	; (8007108 <TIM_Base_SetConfig+0x124>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d103      	bne.n	80070e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	691a      	ldr	r2, [r3, #16]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	615a      	str	r2, [r3, #20]
}
 80070ea:	bf00      	nop
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	40010000 	.word	0x40010000
 80070fc:	40000400 	.word	0x40000400
 8007100:	40000800 	.word	0x40000800
 8007104:	40000c00 	.word	0x40000c00
 8007108:	40010400 	.word	0x40010400
 800710c:	40014000 	.word	0x40014000
 8007110:	40014400 	.word	0x40014400
 8007114:	40014800 	.word	0x40014800
 8007118:	40001800 	.word	0x40001800
 800711c:	40001c00 	.word	0x40001c00
 8007120:	40002000 	.word	0x40002000

08007124 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007124:	b480      	push	{r7}
 8007126:	b087      	sub	sp, #28
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	f023 0201 	bic.w	r2, r3, #1
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	4b2b      	ldr	r3, [pc, #172]	; (80071fc <TIM_OC1_SetConfig+0xd8>)
 8007150:	4013      	ands	r3, r2
 8007152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f023 0303 	bic.w	r3, r3, #3
 800715a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f023 0302 	bic.w	r3, r3, #2
 800716c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	4313      	orrs	r3, r2
 8007176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a21      	ldr	r2, [pc, #132]	; (8007200 <TIM_OC1_SetConfig+0xdc>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d003      	beq.n	8007188 <TIM_OC1_SetConfig+0x64>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a20      	ldr	r2, [pc, #128]	; (8007204 <TIM_OC1_SetConfig+0xe0>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d10c      	bne.n	80071a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f023 0308 	bic.w	r3, r3, #8
 800718e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	4313      	orrs	r3, r2
 8007198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f023 0304 	bic.w	r3, r3, #4
 80071a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a16      	ldr	r2, [pc, #88]	; (8007200 <TIM_OC1_SetConfig+0xdc>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d003      	beq.n	80071b2 <TIM_OC1_SetConfig+0x8e>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a15      	ldr	r2, [pc, #84]	; (8007204 <TIM_OC1_SetConfig+0xe0>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d111      	bne.n	80071d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	621a      	str	r2, [r3, #32]
}
 80071f0:	bf00      	nop
 80071f2:	371c      	adds	r7, #28
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	fffeff8f 	.word	0xfffeff8f
 8007200:	40010000 	.word	0x40010000
 8007204:	40010400 	.word	0x40010400

08007208 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007208:	b480      	push	{r7}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	f023 0210 	bic.w	r2, r3, #16
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4b2e      	ldr	r3, [pc, #184]	; (80072ec <TIM_OC2_SetConfig+0xe4>)
 8007234:	4013      	ands	r3, r2
 8007236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800723e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	021b      	lsls	r3, r3, #8
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	4313      	orrs	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f023 0320 	bic.w	r3, r3, #32
 8007252:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	011b      	lsls	r3, r3, #4
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	4313      	orrs	r3, r2
 800725e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a23      	ldr	r2, [pc, #140]	; (80072f0 <TIM_OC2_SetConfig+0xe8>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d003      	beq.n	8007270 <TIM_OC2_SetConfig+0x68>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a22      	ldr	r2, [pc, #136]	; (80072f4 <TIM_OC2_SetConfig+0xec>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d10d      	bne.n	800728c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	011b      	lsls	r3, r3, #4
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	4313      	orrs	r3, r2
 8007282:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800728a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a18      	ldr	r2, [pc, #96]	; (80072f0 <TIM_OC2_SetConfig+0xe8>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d003      	beq.n	800729c <TIM_OC2_SetConfig+0x94>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a17      	ldr	r2, [pc, #92]	; (80072f4 <TIM_OC2_SetConfig+0xec>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d113      	bne.n	80072c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	695b      	ldr	r3, [r3, #20]
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	621a      	str	r2, [r3, #32]
}
 80072de:	bf00      	nop
 80072e0:	371c      	adds	r7, #28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	feff8fff 	.word	0xfeff8fff
 80072f0:	40010000 	.word	0x40010000
 80072f4:	40010400 	.word	0x40010400

080072f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b087      	sub	sp, #28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	4b2d      	ldr	r3, [pc, #180]	; (80073d8 <TIM_OC3_SetConfig+0xe0>)
 8007324:	4013      	ands	r3, r2
 8007326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f023 0303 	bic.w	r3, r3, #3
 800732e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	4313      	orrs	r3, r2
 8007338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	021b      	lsls	r3, r3, #8
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	4313      	orrs	r3, r2
 800734c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a22      	ldr	r2, [pc, #136]	; (80073dc <TIM_OC3_SetConfig+0xe4>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d003      	beq.n	800735e <TIM_OC3_SetConfig+0x66>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a21      	ldr	r2, [pc, #132]	; (80073e0 <TIM_OC3_SetConfig+0xe8>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d10d      	bne.n	800737a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007364:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	021b      	lsls	r3, r3, #8
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	4313      	orrs	r3, r2
 8007370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a17      	ldr	r2, [pc, #92]	; (80073dc <TIM_OC3_SetConfig+0xe4>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d003      	beq.n	800738a <TIM_OC3_SetConfig+0x92>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a16      	ldr	r2, [pc, #88]	; (80073e0 <TIM_OC3_SetConfig+0xe8>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d113      	bne.n	80073b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	011b      	lsls	r3, r3, #4
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	685a      	ldr	r2, [r3, #4]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	621a      	str	r2, [r3, #32]
}
 80073cc:	bf00      	nop
 80073ce:	371c      	adds	r7, #28
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	fffeff8f 	.word	0xfffeff8f
 80073dc:	40010000 	.word	0x40010000
 80073e0:	40010400 	.word	0x40010400

080073e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	69db      	ldr	r3, [r3, #28]
 800740a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	4b1e      	ldr	r3, [pc, #120]	; (8007488 <TIM_OC4_SetConfig+0xa4>)
 8007410:	4013      	ands	r3, r2
 8007412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800741a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	021b      	lsls	r3, r3, #8
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	4313      	orrs	r3, r2
 8007426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800742e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	031b      	lsls	r3, r3, #12
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	4313      	orrs	r3, r2
 800743a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a13      	ldr	r2, [pc, #76]	; (800748c <TIM_OC4_SetConfig+0xa8>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d003      	beq.n	800744c <TIM_OC4_SetConfig+0x68>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a12      	ldr	r2, [pc, #72]	; (8007490 <TIM_OC4_SetConfig+0xac>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d109      	bne.n	8007460 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	019b      	lsls	r3, r3, #6
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	4313      	orrs	r3, r2
 800745e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	621a      	str	r2, [r3, #32]
}
 800747a:	bf00      	nop
 800747c:	371c      	adds	r7, #28
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	feff8fff 	.word	0xfeff8fff
 800748c:	40010000 	.word	0x40010000
 8007490:	40010400 	.word	0x40010400

08007494 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	4b1b      	ldr	r3, [pc, #108]	; (800752c <TIM_OC5_SetConfig+0x98>)
 80074c0:	4013      	ands	r3, r2
 80074c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80074d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	041b      	lsls	r3, r3, #16
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	4313      	orrs	r3, r2
 80074e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a12      	ldr	r2, [pc, #72]	; (8007530 <TIM_OC5_SetConfig+0x9c>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d003      	beq.n	80074f2 <TIM_OC5_SetConfig+0x5e>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a11      	ldr	r2, [pc, #68]	; (8007534 <TIM_OC5_SetConfig+0xa0>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d109      	bne.n	8007506 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	021b      	lsls	r3, r3, #8
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	4313      	orrs	r3, r2
 8007504:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	621a      	str	r2, [r3, #32]
}
 8007520:	bf00      	nop
 8007522:	371c      	adds	r7, #28
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	fffeff8f 	.word	0xfffeff8f
 8007530:	40010000 	.word	0x40010000
 8007534:	40010400 	.word	0x40010400

08007538 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	4b1c      	ldr	r3, [pc, #112]	; (80075d4 <TIM_OC6_SetConfig+0x9c>)
 8007564:	4013      	ands	r3, r2
 8007566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	021b      	lsls	r3, r3, #8
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	4313      	orrs	r3, r2
 8007572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800757a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	051b      	lsls	r3, r3, #20
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	4313      	orrs	r3, r2
 8007586:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a13      	ldr	r2, [pc, #76]	; (80075d8 <TIM_OC6_SetConfig+0xa0>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d003      	beq.n	8007598 <TIM_OC6_SetConfig+0x60>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a12      	ldr	r2, [pc, #72]	; (80075dc <TIM_OC6_SetConfig+0xa4>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d109      	bne.n	80075ac <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800759e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	029b      	lsls	r3, r3, #10
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	693a      	ldr	r2, [r7, #16]
 80075c4:	621a      	str	r2, [r3, #32]
}
 80075c6:	bf00      	nop
 80075c8:	371c      	adds	r7, #28
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	feff8fff 	.word	0xfeff8fff
 80075d8:	40010000 	.word	0x40010000
 80075dc:	40010400 	.word	0x40010400

080075e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	f023 0201 	bic.w	r2, r3, #1
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800760a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	011b      	lsls	r3, r3, #4
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	4313      	orrs	r3, r2
 8007614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f023 030a 	bic.w	r3, r3, #10
 800761c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	4313      	orrs	r3, r2
 8007624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	621a      	str	r2, [r3, #32]
}
 8007632:	bf00      	nop
 8007634:	371c      	adds	r7, #28
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800763e:	b480      	push	{r7}
 8007640:	b087      	sub	sp, #28
 8007642:	af00      	add	r7, sp, #0
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	f023 0210 	bic.w	r2, r3, #16
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6a1b      	ldr	r3, [r3, #32]
 8007660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007668:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	031b      	lsls	r3, r3, #12
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	4313      	orrs	r3, r2
 8007672:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800767a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	011b      	lsls	r3, r3, #4
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	4313      	orrs	r3, r2
 8007684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	621a      	str	r2, [r3, #32]
}
 8007692:	bf00      	nop
 8007694:	371c      	adds	r7, #28
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800769e:	b480      	push	{r7}
 80076a0:	b085      	sub	sp, #20
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	f043 0307 	orr.w	r3, r3, #7
 80076c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	609a      	str	r2, [r3, #8]
}
 80076c8:	bf00      	nop
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	021a      	lsls	r2, r3, #8
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	431a      	orrs	r2, r3
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	4313      	orrs	r3, r2
 8007700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	609a      	str	r2, [r3, #8]
}
 8007708:	bf00      	nop
 800770a:	371c      	adds	r7, #28
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007724:	2b01      	cmp	r3, #1
 8007726:	d101      	bne.n	800772c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007728:	2302      	movs	r3, #2
 800772a:	e045      	b.n	80077b8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2202      	movs	r2, #2
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a1c      	ldr	r2, [pc, #112]	; (80077c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d004      	beq.n	8007760 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a1b      	ldr	r2, [pc, #108]	; (80077c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d108      	bne.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007766:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	4313      	orrs	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007778:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	4313      	orrs	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800778a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	4313      	orrs	r3, r2
 8007794:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	40010000 	.word	0x40010000
 80077c8:	40010400 	.word	0x40010400

080077cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d101      	bne.n	80077e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80077e4:	2302      	movs	r3, #2
 80077e6:	e065      	b.n	80078b4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	4313      	orrs	r3, r2
 800780a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	4313      	orrs	r3, r2
 8007818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4313      	orrs	r3, r2
 8007826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	4313      	orrs	r3, r2
 8007834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	4313      	orrs	r3, r2
 8007842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784e:	4313      	orrs	r3, r2
 8007850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	041b      	lsls	r3, r3, #16
 800785e:	4313      	orrs	r3, r2
 8007860:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a16      	ldr	r2, [pc, #88]	; (80078c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d004      	beq.n	8007876 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a14      	ldr	r2, [pc, #80]	; (80078c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d115      	bne.n	80078a2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	051b      	lsls	r3, r3, #20
 8007882:	4313      	orrs	r3, r2
 8007884:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	4313      	orrs	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	4313      	orrs	r3, r2
 80078a0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	40010000 	.word	0x40010000
 80078c4:	40010400 	.word	0x40010400

080078c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078d0:	bf00      	nop
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e040      	b.n	8007998 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800791a:	2b00      	cmp	r3, #0
 800791c:	d106      	bne.n	800792c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f004 fa9c 	bl	800be64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2224      	movs	r2, #36	; 0x24
 8007930:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f022 0201 	bic.w	r2, r2, #1
 8007940:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f82c 	bl	80079a0 <UART_SetConfig>
 8007948:	4603      	mov	r3, r0
 800794a:	2b01      	cmp	r3, #1
 800794c:	d101      	bne.n	8007952 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e022      	b.n	8007998 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007956:	2b00      	cmp	r3, #0
 8007958:	d002      	beq.n	8007960 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fac4 	bl	8007ee8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685a      	ldr	r2, [r3, #4]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800796e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689a      	ldr	r2, [r3, #8]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800797e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f042 0201 	orr.w	r2, r2, #1
 800798e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fb4b 	bl	800802c <UART_CheckIdleState>
 8007996:	4603      	mov	r3, r0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b088      	sub	sp, #32
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80079a8:	2300      	movs	r3, #0
 80079aa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	431a      	orrs	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	431a      	orrs	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	69db      	ldr	r3, [r3, #28]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	4bb1      	ldr	r3, [pc, #708]	; (8007c94 <UART_SetConfig+0x2f4>)
 80079d0:	4013      	ands	r3, r2
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	6812      	ldr	r2, [r2, #0]
 80079d6:	6939      	ldr	r1, [r7, #16]
 80079d8:	430b      	orrs	r3, r1
 80079da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68da      	ldr	r2, [r3, #12]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a9f      	ldr	r2, [pc, #636]	; (8007c98 <UART_SetConfig+0x2f8>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d121      	bne.n	8007a64 <UART_SetConfig+0xc4>
 8007a20:	4b9e      	ldr	r3, [pc, #632]	; (8007c9c <UART_SetConfig+0x2fc>)
 8007a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d816      	bhi.n	8007a5c <UART_SetConfig+0xbc>
 8007a2e:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <UART_SetConfig+0x94>)
 8007a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a34:	08007a45 	.word	0x08007a45
 8007a38:	08007a51 	.word	0x08007a51
 8007a3c:	08007a4b 	.word	0x08007a4b
 8007a40:	08007a57 	.word	0x08007a57
 8007a44:	2301      	movs	r3, #1
 8007a46:	77fb      	strb	r3, [r7, #31]
 8007a48:	e151      	b.n	8007cee <UART_SetConfig+0x34e>
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	77fb      	strb	r3, [r7, #31]
 8007a4e:	e14e      	b.n	8007cee <UART_SetConfig+0x34e>
 8007a50:	2304      	movs	r3, #4
 8007a52:	77fb      	strb	r3, [r7, #31]
 8007a54:	e14b      	b.n	8007cee <UART_SetConfig+0x34e>
 8007a56:	2308      	movs	r3, #8
 8007a58:	77fb      	strb	r3, [r7, #31]
 8007a5a:	e148      	b.n	8007cee <UART_SetConfig+0x34e>
 8007a5c:	2310      	movs	r3, #16
 8007a5e:	77fb      	strb	r3, [r7, #31]
 8007a60:	bf00      	nop
 8007a62:	e144      	b.n	8007cee <UART_SetConfig+0x34e>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a8d      	ldr	r2, [pc, #564]	; (8007ca0 <UART_SetConfig+0x300>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d134      	bne.n	8007ad8 <UART_SetConfig+0x138>
 8007a6e:	4b8b      	ldr	r3, [pc, #556]	; (8007c9c <UART_SetConfig+0x2fc>)
 8007a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a74:	f003 030c 	and.w	r3, r3, #12
 8007a78:	2b0c      	cmp	r3, #12
 8007a7a:	d829      	bhi.n	8007ad0 <UART_SetConfig+0x130>
 8007a7c:	a201      	add	r2, pc, #4	; (adr r2, 8007a84 <UART_SetConfig+0xe4>)
 8007a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a82:	bf00      	nop
 8007a84:	08007ab9 	.word	0x08007ab9
 8007a88:	08007ad1 	.word	0x08007ad1
 8007a8c:	08007ad1 	.word	0x08007ad1
 8007a90:	08007ad1 	.word	0x08007ad1
 8007a94:	08007ac5 	.word	0x08007ac5
 8007a98:	08007ad1 	.word	0x08007ad1
 8007a9c:	08007ad1 	.word	0x08007ad1
 8007aa0:	08007ad1 	.word	0x08007ad1
 8007aa4:	08007abf 	.word	0x08007abf
 8007aa8:	08007ad1 	.word	0x08007ad1
 8007aac:	08007ad1 	.word	0x08007ad1
 8007ab0:	08007ad1 	.word	0x08007ad1
 8007ab4:	08007acb 	.word	0x08007acb
 8007ab8:	2300      	movs	r3, #0
 8007aba:	77fb      	strb	r3, [r7, #31]
 8007abc:	e117      	b.n	8007cee <UART_SetConfig+0x34e>
 8007abe:	2302      	movs	r3, #2
 8007ac0:	77fb      	strb	r3, [r7, #31]
 8007ac2:	e114      	b.n	8007cee <UART_SetConfig+0x34e>
 8007ac4:	2304      	movs	r3, #4
 8007ac6:	77fb      	strb	r3, [r7, #31]
 8007ac8:	e111      	b.n	8007cee <UART_SetConfig+0x34e>
 8007aca:	2308      	movs	r3, #8
 8007acc:	77fb      	strb	r3, [r7, #31]
 8007ace:	e10e      	b.n	8007cee <UART_SetConfig+0x34e>
 8007ad0:	2310      	movs	r3, #16
 8007ad2:	77fb      	strb	r3, [r7, #31]
 8007ad4:	bf00      	nop
 8007ad6:	e10a      	b.n	8007cee <UART_SetConfig+0x34e>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a71      	ldr	r2, [pc, #452]	; (8007ca4 <UART_SetConfig+0x304>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d120      	bne.n	8007b24 <UART_SetConfig+0x184>
 8007ae2:	4b6e      	ldr	r3, [pc, #440]	; (8007c9c <UART_SetConfig+0x2fc>)
 8007ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007aec:	2b10      	cmp	r3, #16
 8007aee:	d00f      	beq.n	8007b10 <UART_SetConfig+0x170>
 8007af0:	2b10      	cmp	r3, #16
 8007af2:	d802      	bhi.n	8007afa <UART_SetConfig+0x15a>
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d005      	beq.n	8007b04 <UART_SetConfig+0x164>
 8007af8:	e010      	b.n	8007b1c <UART_SetConfig+0x17c>
 8007afa:	2b20      	cmp	r3, #32
 8007afc:	d005      	beq.n	8007b0a <UART_SetConfig+0x16a>
 8007afe:	2b30      	cmp	r3, #48	; 0x30
 8007b00:	d009      	beq.n	8007b16 <UART_SetConfig+0x176>
 8007b02:	e00b      	b.n	8007b1c <UART_SetConfig+0x17c>
 8007b04:	2300      	movs	r3, #0
 8007b06:	77fb      	strb	r3, [r7, #31]
 8007b08:	e0f1      	b.n	8007cee <UART_SetConfig+0x34e>
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	77fb      	strb	r3, [r7, #31]
 8007b0e:	e0ee      	b.n	8007cee <UART_SetConfig+0x34e>
 8007b10:	2304      	movs	r3, #4
 8007b12:	77fb      	strb	r3, [r7, #31]
 8007b14:	e0eb      	b.n	8007cee <UART_SetConfig+0x34e>
 8007b16:	2308      	movs	r3, #8
 8007b18:	77fb      	strb	r3, [r7, #31]
 8007b1a:	e0e8      	b.n	8007cee <UART_SetConfig+0x34e>
 8007b1c:	2310      	movs	r3, #16
 8007b1e:	77fb      	strb	r3, [r7, #31]
 8007b20:	bf00      	nop
 8007b22:	e0e4      	b.n	8007cee <UART_SetConfig+0x34e>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a5f      	ldr	r2, [pc, #380]	; (8007ca8 <UART_SetConfig+0x308>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d120      	bne.n	8007b70 <UART_SetConfig+0x1d0>
 8007b2e:	4b5b      	ldr	r3, [pc, #364]	; (8007c9c <UART_SetConfig+0x2fc>)
 8007b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b34:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b38:	2b40      	cmp	r3, #64	; 0x40
 8007b3a:	d00f      	beq.n	8007b5c <UART_SetConfig+0x1bc>
 8007b3c:	2b40      	cmp	r3, #64	; 0x40
 8007b3e:	d802      	bhi.n	8007b46 <UART_SetConfig+0x1a6>
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d005      	beq.n	8007b50 <UART_SetConfig+0x1b0>
 8007b44:	e010      	b.n	8007b68 <UART_SetConfig+0x1c8>
 8007b46:	2b80      	cmp	r3, #128	; 0x80
 8007b48:	d005      	beq.n	8007b56 <UART_SetConfig+0x1b6>
 8007b4a:	2bc0      	cmp	r3, #192	; 0xc0
 8007b4c:	d009      	beq.n	8007b62 <UART_SetConfig+0x1c2>
 8007b4e:	e00b      	b.n	8007b68 <UART_SetConfig+0x1c8>
 8007b50:	2300      	movs	r3, #0
 8007b52:	77fb      	strb	r3, [r7, #31]
 8007b54:	e0cb      	b.n	8007cee <UART_SetConfig+0x34e>
 8007b56:	2302      	movs	r3, #2
 8007b58:	77fb      	strb	r3, [r7, #31]
 8007b5a:	e0c8      	b.n	8007cee <UART_SetConfig+0x34e>
 8007b5c:	2304      	movs	r3, #4
 8007b5e:	77fb      	strb	r3, [r7, #31]
 8007b60:	e0c5      	b.n	8007cee <UART_SetConfig+0x34e>
 8007b62:	2308      	movs	r3, #8
 8007b64:	77fb      	strb	r3, [r7, #31]
 8007b66:	e0c2      	b.n	8007cee <UART_SetConfig+0x34e>
 8007b68:	2310      	movs	r3, #16
 8007b6a:	77fb      	strb	r3, [r7, #31]
 8007b6c:	bf00      	nop
 8007b6e:	e0be      	b.n	8007cee <UART_SetConfig+0x34e>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a4d      	ldr	r2, [pc, #308]	; (8007cac <UART_SetConfig+0x30c>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d124      	bne.n	8007bc4 <UART_SetConfig+0x224>
 8007b7a:	4b48      	ldr	r3, [pc, #288]	; (8007c9c <UART_SetConfig+0x2fc>)
 8007b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b88:	d012      	beq.n	8007bb0 <UART_SetConfig+0x210>
 8007b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b8e:	d802      	bhi.n	8007b96 <UART_SetConfig+0x1f6>
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d007      	beq.n	8007ba4 <UART_SetConfig+0x204>
 8007b94:	e012      	b.n	8007bbc <UART_SetConfig+0x21c>
 8007b96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b9a:	d006      	beq.n	8007baa <UART_SetConfig+0x20a>
 8007b9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ba0:	d009      	beq.n	8007bb6 <UART_SetConfig+0x216>
 8007ba2:	e00b      	b.n	8007bbc <UART_SetConfig+0x21c>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	77fb      	strb	r3, [r7, #31]
 8007ba8:	e0a1      	b.n	8007cee <UART_SetConfig+0x34e>
 8007baa:	2302      	movs	r3, #2
 8007bac:	77fb      	strb	r3, [r7, #31]
 8007bae:	e09e      	b.n	8007cee <UART_SetConfig+0x34e>
 8007bb0:	2304      	movs	r3, #4
 8007bb2:	77fb      	strb	r3, [r7, #31]
 8007bb4:	e09b      	b.n	8007cee <UART_SetConfig+0x34e>
 8007bb6:	2308      	movs	r3, #8
 8007bb8:	77fb      	strb	r3, [r7, #31]
 8007bba:	e098      	b.n	8007cee <UART_SetConfig+0x34e>
 8007bbc:	2310      	movs	r3, #16
 8007bbe:	77fb      	strb	r3, [r7, #31]
 8007bc0:	bf00      	nop
 8007bc2:	e094      	b.n	8007cee <UART_SetConfig+0x34e>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a39      	ldr	r2, [pc, #228]	; (8007cb0 <UART_SetConfig+0x310>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d124      	bne.n	8007c18 <UART_SetConfig+0x278>
 8007bce:	4b33      	ldr	r3, [pc, #204]	; (8007c9c <UART_SetConfig+0x2fc>)
 8007bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bdc:	d012      	beq.n	8007c04 <UART_SetConfig+0x264>
 8007bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007be2:	d802      	bhi.n	8007bea <UART_SetConfig+0x24a>
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d007      	beq.n	8007bf8 <UART_SetConfig+0x258>
 8007be8:	e012      	b.n	8007c10 <UART_SetConfig+0x270>
 8007bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bee:	d006      	beq.n	8007bfe <UART_SetConfig+0x25e>
 8007bf0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bf4:	d009      	beq.n	8007c0a <UART_SetConfig+0x26a>
 8007bf6:	e00b      	b.n	8007c10 <UART_SetConfig+0x270>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	77fb      	strb	r3, [r7, #31]
 8007bfc:	e077      	b.n	8007cee <UART_SetConfig+0x34e>
 8007bfe:	2302      	movs	r3, #2
 8007c00:	77fb      	strb	r3, [r7, #31]
 8007c02:	e074      	b.n	8007cee <UART_SetConfig+0x34e>
 8007c04:	2304      	movs	r3, #4
 8007c06:	77fb      	strb	r3, [r7, #31]
 8007c08:	e071      	b.n	8007cee <UART_SetConfig+0x34e>
 8007c0a:	2308      	movs	r3, #8
 8007c0c:	77fb      	strb	r3, [r7, #31]
 8007c0e:	e06e      	b.n	8007cee <UART_SetConfig+0x34e>
 8007c10:	2310      	movs	r3, #16
 8007c12:	77fb      	strb	r3, [r7, #31]
 8007c14:	bf00      	nop
 8007c16:	e06a      	b.n	8007cee <UART_SetConfig+0x34e>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a25      	ldr	r2, [pc, #148]	; (8007cb4 <UART_SetConfig+0x314>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d124      	bne.n	8007c6c <UART_SetConfig+0x2cc>
 8007c22:	4b1e      	ldr	r3, [pc, #120]	; (8007c9c <UART_SetConfig+0x2fc>)
 8007c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c28:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c30:	d012      	beq.n	8007c58 <UART_SetConfig+0x2b8>
 8007c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c36:	d802      	bhi.n	8007c3e <UART_SetConfig+0x29e>
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d007      	beq.n	8007c4c <UART_SetConfig+0x2ac>
 8007c3c:	e012      	b.n	8007c64 <UART_SetConfig+0x2c4>
 8007c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c42:	d006      	beq.n	8007c52 <UART_SetConfig+0x2b2>
 8007c44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c48:	d009      	beq.n	8007c5e <UART_SetConfig+0x2be>
 8007c4a:	e00b      	b.n	8007c64 <UART_SetConfig+0x2c4>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	77fb      	strb	r3, [r7, #31]
 8007c50:	e04d      	b.n	8007cee <UART_SetConfig+0x34e>
 8007c52:	2302      	movs	r3, #2
 8007c54:	77fb      	strb	r3, [r7, #31]
 8007c56:	e04a      	b.n	8007cee <UART_SetConfig+0x34e>
 8007c58:	2304      	movs	r3, #4
 8007c5a:	77fb      	strb	r3, [r7, #31]
 8007c5c:	e047      	b.n	8007cee <UART_SetConfig+0x34e>
 8007c5e:	2308      	movs	r3, #8
 8007c60:	77fb      	strb	r3, [r7, #31]
 8007c62:	e044      	b.n	8007cee <UART_SetConfig+0x34e>
 8007c64:	2310      	movs	r3, #16
 8007c66:	77fb      	strb	r3, [r7, #31]
 8007c68:	bf00      	nop
 8007c6a:	e040      	b.n	8007cee <UART_SetConfig+0x34e>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a11      	ldr	r2, [pc, #68]	; (8007cb8 <UART_SetConfig+0x318>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d139      	bne.n	8007cea <UART_SetConfig+0x34a>
 8007c76:	4b09      	ldr	r3, [pc, #36]	; (8007c9c <UART_SetConfig+0x2fc>)
 8007c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007c80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c84:	d027      	beq.n	8007cd6 <UART_SetConfig+0x336>
 8007c86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c8a:	d817      	bhi.n	8007cbc <UART_SetConfig+0x31c>
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d01c      	beq.n	8007cca <UART_SetConfig+0x32a>
 8007c90:	e027      	b.n	8007ce2 <UART_SetConfig+0x342>
 8007c92:	bf00      	nop
 8007c94:	efff69f3 	.word	0xefff69f3
 8007c98:	40011000 	.word	0x40011000
 8007c9c:	40023800 	.word	0x40023800
 8007ca0:	40004400 	.word	0x40004400
 8007ca4:	40004800 	.word	0x40004800
 8007ca8:	40004c00 	.word	0x40004c00
 8007cac:	40005000 	.word	0x40005000
 8007cb0:	40011400 	.word	0x40011400
 8007cb4:	40007800 	.word	0x40007800
 8007cb8:	40007c00 	.word	0x40007c00
 8007cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cc0:	d006      	beq.n	8007cd0 <UART_SetConfig+0x330>
 8007cc2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007cc6:	d009      	beq.n	8007cdc <UART_SetConfig+0x33c>
 8007cc8:	e00b      	b.n	8007ce2 <UART_SetConfig+0x342>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	77fb      	strb	r3, [r7, #31]
 8007cce:	e00e      	b.n	8007cee <UART_SetConfig+0x34e>
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	77fb      	strb	r3, [r7, #31]
 8007cd4:	e00b      	b.n	8007cee <UART_SetConfig+0x34e>
 8007cd6:	2304      	movs	r3, #4
 8007cd8:	77fb      	strb	r3, [r7, #31]
 8007cda:	e008      	b.n	8007cee <UART_SetConfig+0x34e>
 8007cdc:	2308      	movs	r3, #8
 8007cde:	77fb      	strb	r3, [r7, #31]
 8007ce0:	e005      	b.n	8007cee <UART_SetConfig+0x34e>
 8007ce2:	2310      	movs	r3, #16
 8007ce4:	77fb      	strb	r3, [r7, #31]
 8007ce6:	bf00      	nop
 8007ce8:	e001      	b.n	8007cee <UART_SetConfig+0x34e>
 8007cea:	2310      	movs	r3, #16
 8007cec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	69db      	ldr	r3, [r3, #28]
 8007cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cf6:	d17c      	bne.n	8007df2 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8007cf8:	7ffb      	ldrb	r3, [r7, #31]
 8007cfa:	2b08      	cmp	r3, #8
 8007cfc:	d859      	bhi.n	8007db2 <UART_SetConfig+0x412>
 8007cfe:	a201      	add	r2, pc, #4	; (adr r2, 8007d04 <UART_SetConfig+0x364>)
 8007d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d04:	08007d29 	.word	0x08007d29
 8007d08:	08007d47 	.word	0x08007d47
 8007d0c:	08007d65 	.word	0x08007d65
 8007d10:	08007db3 	.word	0x08007db3
 8007d14:	08007d7d 	.word	0x08007d7d
 8007d18:	08007db3 	.word	0x08007db3
 8007d1c:	08007db3 	.word	0x08007db3
 8007d20:	08007db3 	.word	0x08007db3
 8007d24:	08007d9b 	.word	0x08007d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007d28:	f7fd f8e0 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	005a      	lsls	r2, r3, #1
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	085b      	lsrs	r3, r3, #1
 8007d36:	441a      	add	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	61bb      	str	r3, [r7, #24]
        break;
 8007d44:	e038      	b.n	8007db8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007d46:	f7fd f8e5 	bl	8004f14 <HAL_RCC_GetPCLK2Freq>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	005a      	lsls	r2, r3, #1
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	085b      	lsrs	r3, r3, #1
 8007d54:	441a      	add	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	61bb      	str	r3, [r7, #24]
        break;
 8007d62:	e029      	b.n	8007db8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	085a      	lsrs	r2, r3, #1
 8007d6a:	4b5d      	ldr	r3, [pc, #372]	; (8007ee0 <UART_SetConfig+0x540>)
 8007d6c:	4413      	add	r3, r2
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	6852      	ldr	r2, [r2, #4]
 8007d72:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	61bb      	str	r3, [r7, #24]
        break;
 8007d7a:	e01d      	b.n	8007db8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007d7c:	f7fc fff8 	bl	8004d70 <HAL_RCC_GetSysClockFreq>
 8007d80:	4603      	mov	r3, r0
 8007d82:	005a      	lsls	r2, r3, #1
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	085b      	lsrs	r3, r3, #1
 8007d8a:	441a      	add	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	61bb      	str	r3, [r7, #24]
        break;
 8007d98:	e00e      	b.n	8007db8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	085b      	lsrs	r3, r3, #1
 8007da0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	61bb      	str	r3, [r7, #24]
        break;
 8007db0:	e002      	b.n	8007db8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	75fb      	strb	r3, [r7, #23]
        break;
 8007db6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	2b0f      	cmp	r3, #15
 8007dbc:	d916      	bls.n	8007dec <UART_SetConfig+0x44c>
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dc4:	d212      	bcs.n	8007dec <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	f023 030f 	bic.w	r3, r3, #15
 8007dce:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	085b      	lsrs	r3, r3, #1
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	f003 0307 	and.w	r3, r3, #7
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	89fb      	ldrh	r3, [r7, #14]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	89fa      	ldrh	r2, [r7, #14]
 8007de8:	60da      	str	r2, [r3, #12]
 8007dea:	e06e      	b.n	8007eca <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	75fb      	strb	r3, [r7, #23]
 8007df0:	e06b      	b.n	8007eca <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8007df2:	7ffb      	ldrb	r3, [r7, #31]
 8007df4:	2b08      	cmp	r3, #8
 8007df6:	d857      	bhi.n	8007ea8 <UART_SetConfig+0x508>
 8007df8:	a201      	add	r2, pc, #4	; (adr r2, 8007e00 <UART_SetConfig+0x460>)
 8007dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfe:	bf00      	nop
 8007e00:	08007e25 	.word	0x08007e25
 8007e04:	08007e41 	.word	0x08007e41
 8007e08:	08007e5d 	.word	0x08007e5d
 8007e0c:	08007ea9 	.word	0x08007ea9
 8007e10:	08007e75 	.word	0x08007e75
 8007e14:	08007ea9 	.word	0x08007ea9
 8007e18:	08007ea9 	.word	0x08007ea9
 8007e1c:	08007ea9 	.word	0x08007ea9
 8007e20:	08007e91 	.word	0x08007e91
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007e24:	f7fd f862 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	085b      	lsrs	r3, r3, #1
 8007e30:	441a      	add	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	61bb      	str	r3, [r7, #24]
        break;
 8007e3e:	e036      	b.n	8007eae <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007e40:	f7fd f868 	bl	8004f14 <HAL_RCC_GetPCLK2Freq>
 8007e44:	4602      	mov	r2, r0
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	085b      	lsrs	r3, r3, #1
 8007e4c:	441a      	add	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	61bb      	str	r3, [r7, #24]
        break;
 8007e5a:	e028      	b.n	8007eae <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	085a      	lsrs	r2, r3, #1
 8007e62:	4b20      	ldr	r3, [pc, #128]	; (8007ee4 <UART_SetConfig+0x544>)
 8007e64:	4413      	add	r3, r2
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	6852      	ldr	r2, [r2, #4]
 8007e6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	61bb      	str	r3, [r7, #24]
        break;
 8007e72:	e01c      	b.n	8007eae <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007e74:	f7fc ff7c 	bl	8004d70 <HAL_RCC_GetSysClockFreq>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	085b      	lsrs	r3, r3, #1
 8007e80:	441a      	add	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	61bb      	str	r3, [r7, #24]
        break;
 8007e8e:	e00e      	b.n	8007eae <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	085b      	lsrs	r3, r3, #1
 8007e96:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	61bb      	str	r3, [r7, #24]
        break;
 8007ea6:	e002      	b.n	8007eae <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	75fb      	strb	r3, [r7, #23]
        break;
 8007eac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	2b0f      	cmp	r3, #15
 8007eb2:	d908      	bls.n	8007ec6 <UART_SetConfig+0x526>
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eba:	d204      	bcs.n	8007ec6 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	69ba      	ldr	r2, [r7, #24]
 8007ec2:	60da      	str	r2, [r3, #12]
 8007ec4:	e001      	b.n	8007eca <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3720      	adds	r7, #32
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	01e84800 	.word	0x01e84800
 8007ee4:	00f42400 	.word	0x00f42400

08007ee8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00a      	beq.n	8007f12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	430a      	orrs	r2, r1
 8007f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	f003 0302 	and.w	r3, r3, #2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00a      	beq.n	8007f34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	430a      	orrs	r2, r1
 8007f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f38:	f003 0304 	and.w	r3, r3, #4
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00a      	beq.n	8007f56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	430a      	orrs	r2, r1
 8007f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5a:	f003 0308 	and.w	r3, r3, #8
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00a      	beq.n	8007f78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	430a      	orrs	r2, r1
 8007f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7c:	f003 0310 	and.w	r3, r3, #16
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00a      	beq.n	8007f9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	430a      	orrs	r2, r1
 8007f98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9e:	f003 0320 	and.w	r3, r3, #32
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00a      	beq.n	8007fbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	430a      	orrs	r2, r1
 8007fba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d01a      	beq.n	8007ffe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fe6:	d10a      	bne.n	8007ffe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00a      	beq.n	8008020 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	430a      	orrs	r2, r1
 800801e:	605a      	str	r2, [r3, #4]
  }
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af02      	add	r7, sp, #8
 8008032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800803a:	f7f9 f96d 	bl	8001318 <HAL_GetTick>
 800803e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0308 	and.w	r3, r3, #8
 800804a:	2b08      	cmp	r3, #8
 800804c:	d10e      	bne.n	800806c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800804e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f814 	bl	800808a <UART_WaitOnFlagUntilTimeout>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e00a      	b.n	8008082 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2220      	movs	r2, #32
 8008070:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2220      	movs	r2, #32
 8008076:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b084      	sub	sp, #16
 800808e:	af00      	add	r7, sp, #0
 8008090:	60f8      	str	r0, [r7, #12]
 8008092:	60b9      	str	r1, [r7, #8]
 8008094:	603b      	str	r3, [r7, #0]
 8008096:	4613      	mov	r3, r2
 8008098:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800809a:	e02a      	b.n	80080f2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a2:	d026      	beq.n	80080f2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080a4:	f7f9 f938 	bl	8001318 <HAL_GetTick>
 80080a8:	4602      	mov	r2, r0
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	69ba      	ldr	r2, [r7, #24]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d302      	bcc.n	80080ba <UART_WaitOnFlagUntilTimeout+0x30>
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d11b      	bne.n	80080f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80080c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	689a      	ldr	r2, [r3, #8]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f022 0201 	bic.w	r2, r2, #1
 80080d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2220      	movs	r2, #32
 80080de:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2220      	movs	r2, #32
 80080e4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e00f      	b.n	8008112 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	69da      	ldr	r2, [r3, #28]
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	4013      	ands	r3, r2
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	429a      	cmp	r2, r3
 8008100:	bf0c      	ite	eq
 8008102:	2301      	moveq	r3, #1
 8008104:	2300      	movne	r3, #0
 8008106:	b2db      	uxtb	r3, r3
 8008108:	461a      	mov	r2, r3
 800810a:	79fb      	ldrb	r3, [r7, #7]
 800810c:	429a      	cmp	r2, r3
 800810e:	d0c5      	beq.n	800809c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008126:	2300      	movs	r3, #0
 8008128:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800812a:	2300      	movs	r3, #0
 800812c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d027      	beq.n	8008186 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	4b2f      	ldr	r3, [pc, #188]	; (80081fc <FMC_SDRAM_Init+0xe0>)
 8008140:	4013      	ands	r3, r2
 8008142:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800814c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008152:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008158:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800815e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008164:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800816a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008170:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008176:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	4313      	orrs	r3, r2
 800817c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	e032      	b.n	80081ec <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008192:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800819c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80081a2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	4b12      	ldr	r3, [pc, #72]	; (80081fc <FMC_SDRAM_Init+0xe0>)
 80081b4:	4013      	ands	r3, r2
 80081b6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80081c0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80081c6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80081cc:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80081d2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80081d8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	4313      	orrs	r3, r2
 80081de:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	ffff8000 	.word	0xffff8000

08008200 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008200:	b480      	push	{r7}
 8008202:	b087      	sub	sp, #28
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800820c:	2300      	movs	r3, #0
 800820e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8008210:	2300      	movs	r3, #0
 8008212:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d02e      	beq.n	8008278 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008226:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	3b01      	subs	r3, #1
 8008234:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008236:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	3b01      	subs	r3, #1
 800823e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008240:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	3b01      	subs	r3, #1
 8008248:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800824a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	3b01      	subs	r3, #1
 8008252:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008254:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	695b      	ldr	r3, [r3, #20]
 800825a:	3b01      	subs	r3, #1
 800825c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800825e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	3b01      	subs	r3, #1
 8008266:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008268:	4313      	orrs	r3, r2
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	4313      	orrs	r3, r2
 800826e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	609a      	str	r2, [r3, #8]
 8008276:	e039      	b.n	80082ec <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	4b1e      	ldr	r3, [pc, #120]	; (80082fc <FMC_SDRAM_Timing_Init+0xfc>)
 8008282:	4013      	ands	r3, r2
 8008284:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	3b01      	subs	r3, #1
 800828c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	3b01      	subs	r3, #1
 8008294:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008296:	4313      	orrs	r3, r2
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	4313      	orrs	r3, r2
 800829c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80082aa:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	3b01      	subs	r3, #1
 80082b8:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80082ba:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	3b01      	subs	r3, #1
 80082c2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80082c4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	3b01      	subs	r3, #1
 80082cc:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80082ce:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	3b01      	subs	r3, #1
 80082d6:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80082d8:	4313      	orrs	r3, r2
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	4313      	orrs	r3, r2
 80082de:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	371c      	adds	r7, #28
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	ff0f0fff 	.word	0xff0f0fff

08008300 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008300:	b480      	push	{r7}
 8008302:	b087      	sub	sp, #28
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800830c:	2300      	movs	r3, #0
 800830e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008318:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	3b01      	subs	r3, #1
 8008320:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008322:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800832a:	4313      	orrs	r3, r2
 800832c:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	371c      	adds	r7, #28
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008342:	b480      	push	{r7}
 8008344:	b083      	sub	sp, #12
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	695a      	ldr	r2, [r3, #20]
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	431a      	orrs	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	f043 0201 	orr.w	r2, r3, #1
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800838a:	b480      	push	{r7}
 800838c:	b083      	sub	sp, #12
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	f023 0201 	bic.w	r2, r3, #1
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	019b      	lsls	r3, r3, #6
 80083be:	f043 0220 	orr.w	r2, r3, #32
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	3301      	adds	r3, #1
 80083ca:	60fb      	str	r3, [r7, #12]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4a09      	ldr	r2, [pc, #36]	; (80083f4 <USB_FlushTxFifo+0x48>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d901      	bls.n	80083d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e006      	b.n	80083e6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	f003 0320 	and.w	r3, r3, #32
 80083e0:	2b20      	cmp	r3, #32
 80083e2:	d0f0      	beq.n	80083c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	00030d40 	.word	0x00030d40

080083f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008400:	2300      	movs	r3, #0
 8008402:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2210      	movs	r2, #16
 8008408:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	3301      	adds	r3, #1
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	4a09      	ldr	r2, [pc, #36]	; (8008438 <USB_FlushRxFifo+0x40>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d901      	bls.n	800841c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e006      	b.n	800842a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	f003 0310 	and.w	r3, r3, #16
 8008424:	2b10      	cmp	r3, #16
 8008426:	d0f0      	beq.n	800840a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3714      	adds	r7, #20
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	00030d40 	.word	0x00030d40

0800843c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800843c:	b480      	push	{r7}
 800843e:	b089      	sub	sp, #36	; 0x24
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	4611      	mov	r1, r2
 8008448:	461a      	mov	r2, r3
 800844a:	460b      	mov	r3, r1
 800844c:	71fb      	strb	r3, [r7, #7]
 800844e:	4613      	mov	r3, r2
 8008450:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800845a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800845e:	2b00      	cmp	r3, #0
 8008460:	d11a      	bne.n	8008498 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008462:	88bb      	ldrh	r3, [r7, #4]
 8008464:	3303      	adds	r3, #3
 8008466:	089b      	lsrs	r3, r3, #2
 8008468:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800846a:	2300      	movs	r3, #0
 800846c:	61bb      	str	r3, [r7, #24]
 800846e:	e00f      	b.n	8008490 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8008470:	79fb      	ldrb	r3, [r7, #7]
 8008472:	031a      	lsls	r2, r3, #12
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	4413      	add	r3, r2
 8008478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800847c:	461a      	mov	r2, r3
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	3304      	adds	r3, #4
 8008488:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	3301      	adds	r3, #1
 800848e:	61bb      	str	r3, [r7, #24]
 8008490:	69ba      	ldr	r2, [r7, #24]
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	429a      	cmp	r2, r3
 8008496:	d3eb      	bcc.n	8008470 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3724      	adds	r7, #36	; 0x24
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b089      	sub	sp, #36	; 0x24
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	60f8      	str	r0, [r7, #12]
 80084ae:	60b9      	str	r1, [r7, #8]
 80084b0:	4613      	mov	r3, r2
 80084b2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80084bc:	88fb      	ldrh	r3, [r7, #6]
 80084be:	3303      	adds	r3, #3
 80084c0:	089b      	lsrs	r3, r3, #2
 80084c2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80084c4:	2300      	movs	r3, #0
 80084c6:	61bb      	str	r3, [r7, #24]
 80084c8:	e00b      	b.n	80084e2 <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	601a      	str	r2, [r3, #0]
    pDest++;
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	3304      	adds	r3, #4
 80084da:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	3301      	adds	r3, #1
 80084e0:	61bb      	str	r3, [r7, #24]
 80084e2:	69ba      	ldr	r2, [r7, #24]
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d3ef      	bcc.n	80084ca <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80084ea:	69fb      	ldr	r3, [r7, #28]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3724      	adds	r7, #36	; 0x24
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	4013      	ands	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008510:	68fb      	ldr	r3, [r7, #12]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3714      	adds	r7, #20
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr

0800851e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800851e:	b480      	push	{r7}
 8008520:	b083      	sub	sp, #12
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	f003 0301 	and.w	r3, r3, #1
}
 800852e:	4618      	mov	r0, r3
 8008530:	370c      	adds	r7, #12
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr

0800853a <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800853a:	b480      	push	{r7}
 800853c:	b085      	sub	sp, #20
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	460b      	mov	r3, r1
 8008544:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008558:	f023 0303 	bic.w	r3, r3, #3
 800855c:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	78fb      	ldrb	r3, [r7, #3]
 8008568:	f003 0303 	and.w	r3, r3, #3
 800856c:	68f9      	ldr	r1, [r7, #12]
 800856e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008572:	4313      	orrs	r3, r2
 8008574:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008576:	78fb      	ldrb	r3, [r7, #3]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d107      	bne.n	800858c <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008582:	461a      	mov	r2, r3
 8008584:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008588:	6053      	str	r3, [r2, #4]
 800858a:	e009      	b.n	80085a0 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800858c:	78fb      	ldrb	r3, [r7, #3]
 800858e:	2b02      	cmp	r3, #2
 8008590:	d106      	bne.n	80085a0 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008598:	461a      	mov	r2, r3
 800859a:	f241 7370 	movw	r3, #6000	; 0x1770
 800859e:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b084      	sub	sp, #16
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80085ce:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80085d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085dc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80085de:	2064      	movs	r0, #100	; 0x64
 80085e0:	f7f8 fea6 	bl	8001330 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80085ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085f0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80085f2:	200a      	movs	r0, #10
 80085f4:	f7f8 fe9c 	bl	8001330 <HAL_Delay>

  return HAL_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008602:	b480      	push	{r7}
 8008604:	b085      	sub	sp, #20
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	460b      	mov	r3, r1
 800860c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008612:	2300      	movs	r3, #0
 8008614:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008626:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800862e:	2b00      	cmp	r3, #0
 8008630:	d109      	bne.n	8008646 <USB_DriveVbus+0x44>
 8008632:	78fb      	ldrb	r3, [r7, #3]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d106      	bne.n	8008646 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008640:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008644:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800864c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008650:	d109      	bne.n	8008666 <USB_DriveVbus+0x64>
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d106      	bne.n	8008666 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008660:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008664:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3714      	adds	r7, #20
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008680:	2300      	movs	r3, #0
 8008682:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	0c5b      	lsrs	r3, r3, #17
 8008692:	f003 0303 	and.w	r3, r3, #3
}
 8008696:	4618      	mov	r0, r3
 8008698:	3714      	adds	r7, #20
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
	...

080086a4 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	4608      	mov	r0, r1
 80086ae:	4611      	mov	r1, r2
 80086b0:	461a      	mov	r2, r3
 80086b2:	4603      	mov	r3, r0
 80086b4:	70fb      	strb	r3, [r7, #3]
 80086b6:	460b      	mov	r3, r1
 80086b8:	70bb      	strb	r3, [r7, #2]
 80086ba:	4613      	mov	r3, r2
 80086bc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80086c6:	78fb      	ldrb	r3, [r7, #3]
 80086c8:	015a      	lsls	r2, r3, #5
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	4413      	add	r3, r2
 80086ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086d2:	461a      	mov	r2, r3
 80086d4:	f04f 33ff 	mov.w	r3, #4294967295
 80086d8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80086da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80086de:	2b03      	cmp	r3, #3
 80086e0:	d87e      	bhi.n	80087e0 <USB_HC_Init+0x13c>
 80086e2:	a201      	add	r2, pc, #4	; (adr r2, 80086e8 <USB_HC_Init+0x44>)
 80086e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e8:	080086f9 	.word	0x080086f9
 80086ec:	080087a3 	.word	0x080087a3
 80086f0:	080086f9 	.word	0x080086f9
 80086f4:	08008765 	.word	0x08008765
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80086f8:	78fb      	ldrb	r3, [r7, #3]
 80086fa:	015a      	lsls	r2, r3, #5
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	4413      	add	r3, r2
 8008700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008704:	461a      	mov	r2, r3
 8008706:	f240 439d 	movw	r3, #1181	; 0x49d
 800870a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800870c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008710:	2b00      	cmp	r3, #0
 8008712:	da10      	bge.n	8008736 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008714:	78fb      	ldrb	r3, [r7, #3]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	4413      	add	r3, r2
 800871c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	78fa      	ldrb	r2, [r7, #3]
 8008724:	0151      	lsls	r1, r2, #5
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	440a      	add	r2, r1
 800872a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800872e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008732:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8008734:	e057      	b.n	80087e6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800873a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800873e:	2b00      	cmp	r3, #0
 8008740:	d051      	beq.n	80087e6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008742:	78fb      	ldrb	r3, [r7, #3]
 8008744:	015a      	lsls	r2, r3, #5
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	4413      	add	r3, r2
 800874a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	78fa      	ldrb	r2, [r7, #3]
 8008752:	0151      	lsls	r1, r2, #5
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	440a      	add	r2, r1
 8008758:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800875c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008760:	60d3      	str	r3, [r2, #12]
      break;
 8008762:	e040      	b.n	80087e6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008764:	78fb      	ldrb	r3, [r7, #3]
 8008766:	015a      	lsls	r2, r3, #5
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	4413      	add	r3, r2
 800876c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008770:	461a      	mov	r2, r3
 8008772:	f240 639d 	movw	r3, #1693	; 0x69d
 8008776:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008778:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800877c:	2b00      	cmp	r3, #0
 800877e:	da34      	bge.n	80087ea <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008780:	78fb      	ldrb	r3, [r7, #3]
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	4413      	add	r3, r2
 8008788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	78fa      	ldrb	r2, [r7, #3]
 8008790:	0151      	lsls	r1, r2, #5
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	440a      	add	r2, r1
 8008796:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800879a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800879e:	60d3      	str	r3, [r2, #12]
      }

      break;
 80087a0:	e023      	b.n	80087ea <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80087a2:	78fb      	ldrb	r3, [r7, #3]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ae:	461a      	mov	r2, r3
 80087b0:	f240 2325 	movw	r3, #549	; 0x225
 80087b4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80087b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	da17      	bge.n	80087ee <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80087be:	78fb      	ldrb	r3, [r7, #3]
 80087c0:	015a      	lsls	r2, r3, #5
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	4413      	add	r3, r2
 80087c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	78fa      	ldrb	r2, [r7, #3]
 80087ce:	0151      	lsls	r1, r2, #5
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	440a      	add	r2, r1
 80087d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087d8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80087dc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80087de:	e006      	b.n	80087ee <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	75fb      	strb	r3, [r7, #23]
      break;
 80087e4:	e004      	b.n	80087f0 <USB_HC_Init+0x14c>
      break;
 80087e6:	bf00      	nop
 80087e8:	e002      	b.n	80087f0 <USB_HC_Init+0x14c>
      break;
 80087ea:	bf00      	nop
 80087ec:	e000      	b.n	80087f0 <USB_HC_Init+0x14c>
      break;
 80087ee:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087f6:	699a      	ldr	r2, [r3, #24]
 80087f8:	78fb      	ldrb	r3, [r7, #3]
 80087fa:	f003 030f 	and.w	r3, r3, #15
 80087fe:	2101      	movs	r1, #1
 8008800:	fa01 f303 	lsl.w	r3, r1, r3
 8008804:	68b9      	ldr	r1, [r7, #8]
 8008806:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800880a:	4313      	orrs	r3, r2
 800880c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800881a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800881e:	2b00      	cmp	r3, #0
 8008820:	da03      	bge.n	800882a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008826:	613b      	str	r3, [r7, #16]
 8008828:	e001      	b.n	800882e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800882a:	2300      	movs	r3, #0
 800882c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800882e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008832:	2b02      	cmp	r3, #2
 8008834:	d103      	bne.n	800883e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008836:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800883a:	60fb      	str	r3, [r7, #12]
 800883c:	e001      	b.n	8008842 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800883e:	2300      	movs	r3, #0
 8008840:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008842:	787b      	ldrb	r3, [r7, #1]
 8008844:	059b      	lsls	r3, r3, #22
 8008846:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800884a:	78bb      	ldrb	r3, [r7, #2]
 800884c:	02db      	lsls	r3, r3, #11
 800884e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008852:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008854:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008858:	049b      	lsls	r3, r3, #18
 800885a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800885e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008860:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008862:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008866:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800886c:	78fb      	ldrb	r3, [r7, #3]
 800886e:	0159      	lsls	r1, r3, #5
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	440b      	add	r3, r1
 8008874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008878:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800887e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008880:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008884:	2b03      	cmp	r3, #3
 8008886:	d10f      	bne.n	80088a8 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008888:	78fb      	ldrb	r3, [r7, #3]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	4413      	add	r3, r2
 8008890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	78fa      	ldrb	r2, [r7, #3]
 8008898:	0151      	lsls	r1, r2, #5
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	440a      	add	r2, r1
 800889e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80088a6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80088a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	371c      	adds	r7, #28
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop

080088b8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b08c      	sub	sp, #48	; 0x30
 80088bc:	af02      	add	r7, sp, #8
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	4613      	mov	r3, r2
 80088c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	785b      	ldrb	r3, [r3, #1]
 80088ce:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80088d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088d4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d028      	beq.n	8008934 <USB_HC_StartXfer+0x7c>
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	791b      	ldrb	r3, [r3, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d124      	bne.n	8008934 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10b      	bne.n	8008908 <USB_HC_StartXfer+0x50>
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	795b      	ldrb	r3, [r3, #5]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d107      	bne.n	8008908 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	785b      	ldrb	r3, [r3, #1]
 80088fc:	4619      	mov	r1, r3
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f000 fa2e 	bl	8008d60 <USB_DoPing>
      return HAL_OK;
 8008904:	2300      	movs	r3, #0
 8008906:	e112      	b.n	8008b2e <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8008908:	79fb      	ldrb	r3, [r7, #7]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d112      	bne.n	8008934 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	015a      	lsls	r2, r3, #5
 8008912:	6a3b      	ldr	r3, [r7, #32]
 8008914:	4413      	add	r3, r2
 8008916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	69fa      	ldr	r2, [r7, #28]
 800891e:	0151      	lsls	r1, r2, #5
 8008920:	6a3a      	ldr	r2, [r7, #32]
 8008922:	440a      	add	r2, r1
 8008924:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008928:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800892c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	2200      	movs	r2, #0
 8008932:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d018      	beq.n	800896e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	8912      	ldrh	r2, [r2, #8]
 8008944:	4413      	add	r3, r2
 8008946:	3b01      	subs	r3, #1
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	8912      	ldrh	r2, [r2, #8]
 800894c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008950:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008952:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008954:	8b7b      	ldrh	r3, [r7, #26]
 8008956:	429a      	cmp	r2, r3
 8008958:	d90b      	bls.n	8008972 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800895a:	8b7b      	ldrh	r3, [r7, #26]
 800895c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800895e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	8912      	ldrh	r2, [r2, #8]
 8008964:	fb02 f203 	mul.w	r2, r2, r3
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	611a      	str	r2, [r3, #16]
 800896c:	e001      	b.n	8008972 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800896e:	2301      	movs	r3, #1
 8008970:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	78db      	ldrb	r3, [r3, #3]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d006      	beq.n	8008988 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800897a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	8912      	ldrh	r2, [r2, #8]
 8008980:	fb02 f203 	mul.w	r2, r2, r3
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008990:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008992:	04d9      	lsls	r1, r3, #19
 8008994:	4b68      	ldr	r3, [pc, #416]	; (8008b38 <USB_HC_StartXfer+0x280>)
 8008996:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008998:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	7a9b      	ldrb	r3, [r3, #10]
 800899e:	075b      	lsls	r3, r3, #29
 80089a0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80089a4:	69f9      	ldr	r1, [r7, #28]
 80089a6:	0148      	lsls	r0, r1, #5
 80089a8:	6a39      	ldr	r1, [r7, #32]
 80089aa:	4401      	add	r1, r0
 80089ac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80089b0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80089b2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80089b4:	79fb      	ldrb	r3, [r7, #7]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d009      	beq.n	80089ce <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	68d9      	ldr	r1, [r3, #12]
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	015a      	lsls	r2, r3, #5
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	4413      	add	r3, r2
 80089c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ca:	460a      	mov	r2, r1
 80089cc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80089ce:	6a3b      	ldr	r3, [r7, #32]
 80089d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b00      	cmp	r3, #0
 80089dc:	bf0c      	ite	eq
 80089de:	2301      	moveq	r3, #1
 80089e0:	2300      	movne	r3, #0
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	015a      	lsls	r2, r3, #5
 80089ea:	6a3b      	ldr	r3, [r7, #32]
 80089ec:	4413      	add	r3, r2
 80089ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	69fa      	ldr	r2, [r7, #28]
 80089f6:	0151      	lsls	r1, r2, #5
 80089f8:	6a3a      	ldr	r2, [r7, #32]
 80089fa:	440a      	add	r2, r1
 80089fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a00:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a04:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	7e7b      	ldrb	r3, [r7, #25]
 8008a16:	075b      	lsls	r3, r3, #29
 8008a18:	69f9      	ldr	r1, [r7, #28]
 8008a1a:	0148      	lsls	r0, r1, #5
 8008a1c:	6a39      	ldr	r1, [r7, #32]
 8008a1e:	4401      	add	r1, r0
 8008a20:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008a24:	4313      	orrs	r3, r2
 8008a26:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	015a      	lsls	r2, r3, #5
 8008a2c:	6a3b      	ldr	r3, [r7, #32]
 8008a2e:	4413      	add	r3, r2
 8008a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a41      	ldr	r2, [pc, #260]	; (8008b3c <USB_HC_StartXfer+0x284>)
 8008a38:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008a3a:	4b40      	ldr	r3, [pc, #256]	; (8008b3c <USB_HC_StartXfer+0x284>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a42:	4a3e      	ldr	r2, [pc, #248]	; (8008b3c <USB_HC_StartXfer+0x284>)
 8008a44:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	78db      	ldrb	r3, [r3, #3]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d006      	beq.n	8008a5c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008a4e:	4b3b      	ldr	r3, [pc, #236]	; (8008b3c <USB_HC_StartXfer+0x284>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a56:	4a39      	ldr	r2, [pc, #228]	; (8008b3c <USB_HC_StartXfer+0x284>)
 8008a58:	6013      	str	r3, [r2, #0]
 8008a5a:	e005      	b.n	8008a68 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008a5c:	4b37      	ldr	r3, [pc, #220]	; (8008b3c <USB_HC_StartXfer+0x284>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a64:	4a35      	ldr	r2, [pc, #212]	; (8008b3c <USB_HC_StartXfer+0x284>)
 8008a66:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008a68:	4b34      	ldr	r3, [pc, #208]	; (8008b3c <USB_HC_StartXfer+0x284>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a70:	4a32      	ldr	r2, [pc, #200]	; (8008b3c <USB_HC_StartXfer+0x284>)
 8008a72:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a80:	461a      	mov	r2, r3
 8008a82:	4b2e      	ldr	r3, [pc, #184]	; (8008b3c <USB_HC_StartXfer+0x284>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8008a88:	79fb      	ldrb	r3, [r7, #7]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d14e      	bne.n	8008b2c <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	78db      	ldrb	r3, [r3, #3]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d14a      	bne.n	8008b2c <USB_HC_StartXfer+0x274>
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d046      	beq.n	8008b2c <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	79db      	ldrb	r3, [r3, #7]
 8008aa2:	2b03      	cmp	r3, #3
 8008aa4:	d830      	bhi.n	8008b08 <USB_HC_StartXfer+0x250>
 8008aa6:	a201      	add	r2, pc, #4	; (adr r2, 8008aac <USB_HC_StartXfer+0x1f4>)
 8008aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aac:	08008abd 	.word	0x08008abd
 8008ab0:	08008ae1 	.word	0x08008ae1
 8008ab4:	08008abd 	.word	0x08008abd
 8008ab8:	08008ae1 	.word	0x08008ae1
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	3303      	adds	r3, #3
 8008ac2:	089b      	lsrs	r3, r3, #2
 8008ac4:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008ac6:	8afa      	ldrh	r2, [r7, #22]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d91c      	bls.n	8008b0c <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	f043 0220 	orr.w	r2, r3, #32
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	619a      	str	r2, [r3, #24]
          }
          break;
 8008ade:	e015      	b.n	8008b0c <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	3303      	adds	r3, #3
 8008ae6:	089b      	lsrs	r3, r3, #2
 8008ae8:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008aea:	8afa      	ldrh	r2, [r7, #22]
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d90a      	bls.n	8008b10 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	699b      	ldr	r3, [r3, #24]
 8008afe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	619a      	str	r2, [r3, #24]
          }
          break;
 8008b06:	e003      	b.n	8008b10 <USB_HC_StartXfer+0x258>

        default:
          break;
 8008b08:	bf00      	nop
 8008b0a:	e002      	b.n	8008b12 <USB_HC_StartXfer+0x25a>
          break;
 8008b0c:	bf00      	nop
 8008b0e:	e000      	b.n	8008b12 <USB_HC_StartXfer+0x25a>
          break;
 8008b10:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	68d9      	ldr	r1, [r3, #12]
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	785a      	ldrb	r2, [r3, #1]
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	b298      	uxth	r0, r3
 8008b20:	2300      	movs	r3, #0
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	4603      	mov	r3, r0
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f7ff fc88 	bl	800843c <USB_WritePacket>
    }
  }

  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3728      	adds	r7, #40	; 0x28
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	1ff80000 	.word	0x1ff80000
 8008b3c:	200001fc 	.word	0x200001fc

08008b40 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b52:	695b      	ldr	r3, [r3, #20]
 8008b54:	b29b      	uxth	r3, r3
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008b62:	b480      	push	{r7}
 8008b64:	b087      	sub	sp, #28
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8008b72:	78fb      	ldrb	r3, [r7, #3]
 8008b74:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	015a      	lsls	r2, r3, #5
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	4413      	add	r3, r2
 8008b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	0c9b      	lsrs	r3, r3, #18
 8008b8a:	f003 0303 	and.w	r3, r3, #3
 8008b8e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d002      	beq.n	8008b9c <USB_HC_Halt+0x3a>
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d16c      	bne.n	8008c76 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	015a      	lsls	r2, r3, #5
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	0151      	lsls	r1, r2, #5
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	440a      	add	r2, r1
 8008bb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bba:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d143      	bne.n	8008c50 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	0151      	lsls	r1, r2, #5
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	440a      	add	r2, r1
 8008bde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008be2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008be6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	015a      	lsls	r2, r3, #5
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	4413      	add	r3, r2
 8008bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	0151      	lsls	r1, r2, #5
 8008bfa:	693a      	ldr	r2, [r7, #16]
 8008bfc:	440a      	add	r2, r1
 8008bfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c06:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	015a      	lsls	r2, r3, #5
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	4413      	add	r3, r2
 8008c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	0151      	lsls	r1, r2, #5
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	440a      	add	r2, r1
 8008c1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c26:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	617b      	str	r3, [r7, #20]
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c34:	d81d      	bhi.n	8008c72 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	015a      	lsls	r2, r3, #5
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c4c:	d0ec      	beq.n	8008c28 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008c4e:	e080      	b.n	8008d52 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	015a      	lsls	r2, r3, #5
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	4413      	add	r3, r2
 8008c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	0151      	lsls	r1, r2, #5
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	440a      	add	r2, r1
 8008c66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c6e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008c70:	e06f      	b.n	8008d52 <USB_HC_Halt+0x1f0>
          break;
 8008c72:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008c74:	e06d      	b.n	8008d52 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	015a      	lsls	r2, r3, #5
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	0151      	lsls	r1, r2, #5
 8008c88:	693a      	ldr	r2, [r7, #16]
 8008c8a:	440a      	add	r2, r1
 8008c8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c94:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d143      	bne.n	8008d2e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	015a      	lsls	r2, r3, #5
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	0151      	lsls	r1, r2, #5
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	440a      	add	r2, r1
 8008cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008cc4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	015a      	lsls	r2, r3, #5
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	0151      	lsls	r1, r2, #5
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	440a      	add	r2, r1
 8008cdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ce0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ce4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	015a      	lsls	r2, r3, #5
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	4413      	add	r3, r2
 8008cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	0151      	lsls	r1, r2, #5
 8008cf8:	693a      	ldr	r2, [r7, #16]
 8008cfa:	440a      	add	r2, r1
 8008cfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d04:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	617b      	str	r3, [r7, #20]
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d12:	d81d      	bhi.n	8008d50 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	015a      	lsls	r2, r3, #5
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d2a:	d0ec      	beq.n	8008d06 <USB_HC_Halt+0x1a4>
 8008d2c:	e011      	b.n	8008d52 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	0151      	lsls	r1, r2, #5
 8008d40:	693a      	ldr	r2, [r7, #16]
 8008d42:	440a      	add	r2, r1
 8008d44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d4c:	6013      	str	r3, [r2, #0]
 8008d4e:	e000      	b.n	8008d52 <USB_HC_Halt+0x1f0>
          break;
 8008d50:	bf00      	nop
    }
  }

  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	371c      	adds	r7, #28
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b087      	sub	sp, #28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	460b      	mov	r3, r1
 8008d6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008d70:	78fb      	ldrb	r3, [r7, #3]
 8008d72:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008d74:	2301      	movs	r3, #1
 8008d76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	04da      	lsls	r2, r3, #19
 8008d7c:	4b15      	ldr	r3, [pc, #84]	; (8008dd4 <USB_DoPing+0x74>)
 8008d7e:	4013      	ands	r3, r2
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	0151      	lsls	r1, r2, #5
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	440a      	add	r2, r1
 8008d88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d90:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	015a      	lsls	r2, r3, #5
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	4413      	add	r3, r2
 8008d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008da8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008db0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	015a      	lsls	r2, r3, #5
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	4413      	add	r3, r2
 8008dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	371c      	adds	r7, #28
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	1ff80000 	.word	0x1ff80000

08008dd8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b086      	sub	sp, #24
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008de4:	2300      	movs	r3, #0
 8008de6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f7ff face 	bl	800838a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008dee:	2110      	movs	r1, #16
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f7ff fadb 	bl	80083ac <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7ff fafe 	bl	80083f8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	613b      	str	r3, [r7, #16]
 8008e00:	e01f      	b.n	8008e42 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e18:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e20:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e28:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	015a      	lsls	r2, r3, #5
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	4413      	add	r3, r2
 8008e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e36:	461a      	mov	r2, r3
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	613b      	str	r3, [r7, #16]
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	2b0f      	cmp	r3, #15
 8008e46:	d9dc      	bls.n	8008e02 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008e48:	2300      	movs	r3, #0
 8008e4a:	613b      	str	r3, [r7, #16]
 8008e4c:	e034      	b.n	8008eb8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	015a      	lsls	r2, r3, #5
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	4413      	add	r3, r2
 8008e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e64:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e6c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e74:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	015a      	lsls	r2, r3, #5
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e82:	461a      	mov	r2, r3
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	617b      	str	r3, [r7, #20]
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e94:	d80c      	bhi.n	8008eb0 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	015a      	lsls	r2, r3, #5
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008eac:	d0ec      	beq.n	8008e88 <USB_StopHost+0xb0>
 8008eae:	e000      	b.n	8008eb2 <USB_StopHost+0xda>
        break;
 8008eb0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	613b      	str	r3, [r7, #16]
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	2b0f      	cmp	r3, #15
 8008ebc:	d9c7      	bls.n	8008e4e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8008eca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed2:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f7ff fa47 	bl	8008368 <USB_EnableGlobalInt>

  return HAL_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3718      	adds	r7, #24
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008eec:	2300      	movs	r3, #0
 8008eee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8008ef0:	e008      	b.n	8008f04 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	32e0      	adds	r2, #224	; 0xe0
 8008ef8:	2100      	movs	r1, #0
 8008efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	3301      	adds	r3, #1
 8008f02:	60fb      	str	r3, [r7, #12]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2b0e      	cmp	r3, #14
 8008f08:	d9f3      	bls.n	8008ef2 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	60fb      	str	r3, [r7, #12]
 8008f0e:	e009      	b.n	8008f24 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	3301      	adds	r3, #1
 8008f22:	60fb      	str	r3, [r7, #12]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f2a:	d3f1      	bcc.n	8008f10 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2240      	movs	r2, #64	; 0x40
 8008f50:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3714      	adds	r7, #20
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
	...

08008f78 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b088      	sub	sp, #32
 8008f7c:	af04      	add	r7, sp, #16
 8008f7e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008f80:	2302      	movs	r3, #2
 8008f82:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008f84:	2300      	movs	r3, #0
 8008f86:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 fadd 	bl	8009548 <USBH_IsPortEnabled>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10c      	bne.n	8008fae <USBH_Process+0x36>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d007      	beq.n	8008fae <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	2b03      	cmp	r3, #3
 8008fa6:	d002      	beq.n	8008fae <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2203      	movs	r2, #3
 8008fac:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	2b0b      	cmp	r3, #11
 8008fb6:	f200 814c 	bhi.w	8009252 <USBH_Process+0x2da>
 8008fba:	a201      	add	r2, pc, #4	; (adr r2, 8008fc0 <USBH_Process+0x48>)
 8008fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc0:	08008ff1 	.word	0x08008ff1
 8008fc4:	08009013 	.word	0x08009013
 8008fc8:	08009027 	.word	0x08009027
 8008fcc:	0800922d 	.word	0x0800922d
 8008fd0:	08009253 	.word	0x08009253
 8008fd4:	080090b5 	.word	0x080090b5
 8008fd8:	080091e3 	.word	0x080091e3
 8008fdc:	080090e5 	.word	0x080090e5
 8008fe0:	08009105 	.word	0x08009105
 8008fe4:	08009125 	.word	0x08009125
 8008fe8:	08009153 	.word	0x08009153
 8008fec:	08009215 	.word	0x08009215
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f000 812c 	beq.w	8009256 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2201      	movs	r2, #1
 8009002:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8009004:	20c8      	movs	r0, #200	; 0xc8
 8009006:	f003 faf4 	bl	800c5f2 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f003 fa63 	bl	800c4d6 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009010:	e121      	b.n	8009256 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009018:	2b01      	cmp	r3, #1
 800901a:	f040 811e 	bne.w	800925a <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2202      	movs	r2, #2
 8009022:	701a      	strb	r2, [r3, #0]
    }
    break;
 8009024:	e119      	b.n	800925a <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8009026:	2064      	movs	r0, #100	; 0x64
 8009028:	f003 fae3 	bl	800c5f2 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f003 fa2d 	bl	800c48c <USBH_LL_GetSpeed>
 8009032:	4603      	mov	r3, r0
 8009034:	461a      	mov	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2205      	movs	r2, #5
 8009040:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8009042:	2100      	movs	r1, #0
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 ffe3 	bl	800a010 <USBH_AllocPipe>
 800904a:	4603      	mov	r3, r0
 800904c:	461a      	mov	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8009052:	2180      	movs	r1, #128	; 0x80
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 ffdb 	bl	800a010 <USBH_AllocPipe>
 800905a:	4603      	mov	r3, r0
 800905c:	461a      	mov	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	7919      	ldrb	r1, [r3, #4]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8009076:	b292      	uxth	r2, r2
 8009078:	9202      	str	r2, [sp, #8]
 800907a:	2200      	movs	r2, #0
 800907c:	9201      	str	r2, [sp, #4]
 800907e:	9300      	str	r3, [sp, #0]
 8009080:	4603      	mov	r3, r0
 8009082:	2280      	movs	r2, #128	; 0x80
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 ffa4 	bl	8009fd2 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	7959      	ldrb	r1, [r3, #5]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800909e:	b292      	uxth	r2, r2
 80090a0:	9202      	str	r2, [sp, #8]
 80090a2:	2200      	movs	r2, #0
 80090a4:	9201      	str	r2, [sp, #4]
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	4603      	mov	r3, r0
 80090aa:	2200      	movs	r2, #0
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 ff90 	bl	8009fd2 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80090b2:	e0e3      	b.n	800927c <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 f8e7 	bl	8009288 <USBH_HandleEnum>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f040 80ce 	bne.w	800925e <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d103      	bne.n	80090dc <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2208      	movs	r2, #8
 80090d8:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 80090da:	e0c0      	b.n	800925e <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2207      	movs	r2, #7
 80090e0:	701a      	strb	r2, [r3, #0]
    break;
 80090e2:	e0bc      	b.n	800925e <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f000 80b9 	beq.w	8009262 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80090f6:	2101      	movs	r1, #1
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2208      	movs	r2, #8
 8009100:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009102:	e0ae      	b.n	8009262 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800910a:	b29b      	uxth	r3, r3
 800910c:	4619      	mov	r1, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fb4a 	bl	80097a8 <USBH_SetCfg>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	f040 80a5 	bne.w	8009266 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2209      	movs	r2, #9
 8009120:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8009122:	e0a0      	b.n	8009266 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800912a:	f003 0320 	and.w	r3, r3, #32
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00b      	beq.n	800914a <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009132:	2101      	movs	r1, #1
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fb5a 	bl	80097ee <USBH_SetFeature>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	f040 8094 	bne.w	800926a <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	220a      	movs	r2, #10
 8009146:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8009148:	e08f      	b.n	800926a <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	220a      	movs	r2, #10
 800914e:	701a      	strb	r2, [r3, #0]
    break;
 8009150:	e08b      	b.n	800926a <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 8088 	beq.w	800926e <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009166:	2300      	movs	r3, #0
 8009168:	73fb      	strb	r3, [r7, #15]
 800916a:	e017      	b.n	800919c <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800916c:	7bfb      	ldrb	r3, [r7, #15]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	33dc      	adds	r3, #220	; 0xdc
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4413      	add	r3, r2
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	791a      	ldrb	r2, [r3, #4]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8009180:	429a      	cmp	r2, r3
 8009182:	d108      	bne.n	8009196 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	33dc      	adds	r3, #220	; 0xdc
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009196:	7bfb      	ldrb	r3, [r7, #15]
 8009198:	3301      	adds	r3, #1
 800919a:	73fb      	strb	r3, [r7, #15]
 800919c:	7bfb      	ldrb	r3, [r7, #15]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d0e4      	beq.n	800916c <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d016      	beq.n	80091da <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	4798      	blx	r3
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d109      	bne.n	80091d2 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2206      	movs	r2, #6
 80091c2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80091ca:	2103      	movs	r1, #3
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80091d0:	e04d      	b.n	800926e <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	220d      	movs	r2, #13
 80091d6:	701a      	strb	r2, [r3, #0]
    break;
 80091d8:	e049      	b.n	800926e <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	220d      	movs	r2, #13
 80091de:	701a      	strb	r2, [r3, #0]
    break;
 80091e0:	e045      	b.n	800926e <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00f      	beq.n	800920c <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	4798      	blx	r3
 80091f8:	4603      	mov	r3, r0
 80091fa:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 80091fc:	7bbb      	ldrb	r3, [r7, #14]
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	2b00      	cmp	r3, #0
 8009202:	d136      	bne.n	8009272 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	220b      	movs	r2, #11
 8009208:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800920a:	e032      	b.n	8009272 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	220d      	movs	r2, #13
 8009210:	701a      	strb	r2, [r3, #0]
    break;
 8009212:	e02e      	b.n	8009272 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800921a:	2b00      	cmp	r3, #0
 800921c:	d02b      	beq.n	8009276 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009224:	695b      	ldr	r3, [r3, #20]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	4798      	blx	r3
    }
    break;
 800922a:	e024      	b.n	8009276 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7ff fe59 	bl	8008ee4 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009238:	2b00      	cmp	r3, #0
 800923a:	d01e      	beq.n	800927a <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8009250:	e013      	b.n	800927a <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8009252:	bf00      	nop
 8009254:	e012      	b.n	800927c <USBH_Process+0x304>
    break;
 8009256:	bf00      	nop
 8009258:	e010      	b.n	800927c <USBH_Process+0x304>
    break;
 800925a:	bf00      	nop
 800925c:	e00e      	b.n	800927c <USBH_Process+0x304>
    break;
 800925e:	bf00      	nop
 8009260:	e00c      	b.n	800927c <USBH_Process+0x304>
    break;
 8009262:	bf00      	nop
 8009264:	e00a      	b.n	800927c <USBH_Process+0x304>
    break;
 8009266:	bf00      	nop
 8009268:	e008      	b.n	800927c <USBH_Process+0x304>
    break;
 800926a:	bf00      	nop
 800926c:	e006      	b.n	800927c <USBH_Process+0x304>
    break;
 800926e:	bf00      	nop
 8009270:	e004      	b.n	800927c <USBH_Process+0x304>
    break;
 8009272:	bf00      	nop
 8009274:	e002      	b.n	800927c <USBH_Process+0x304>
    break;
 8009276:	bf00      	nop
 8009278:	e000      	b.n	800927c <USBH_Process+0x304>
    break;
 800927a:	bf00      	nop
  }
 return USBH_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop

08009288 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b088      	sub	sp, #32
 800928c:	af04      	add	r7, sp, #16
 800928e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009290:	2301      	movs	r3, #1
 8009292:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	785b      	ldrb	r3, [r3, #1]
 8009298:	2b07      	cmp	r3, #7
 800929a:	f200 80f8 	bhi.w	800948e <USBH_HandleEnum+0x206>
 800929e:	a201      	add	r2, pc, #4	; (adr r2, 80092a4 <USBH_HandleEnum+0x1c>)
 80092a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a4:	080092c5 	.word	0x080092c5
 80092a8:	08009337 	.word	0x08009337
 80092ac:	0800934f 	.word	0x0800934f
 80092b0:	080093c5 	.word	0x080093c5
 80092b4:	080093db 	.word	0x080093db
 80092b8:	080093f7 	.word	0x080093f7
 80092bc:	0800942b 	.word	0x0800942b
 80092c0:	0800945f 	.word	0x0800945f
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80092c4:	2108      	movs	r1, #8
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f99e 	bl	8009608 <USBH_Get_DevDesc>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f040 80df 	bne.w	8009492 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2201      	movs	r2, #1
 80092e2:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	7919      	ldrb	r1, [r3, #4]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80092f8:	b292      	uxth	r2, r2
 80092fa:	9202      	str	r2, [sp, #8]
 80092fc:	2200      	movs	r2, #0
 80092fe:	9201      	str	r2, [sp, #4]
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	4603      	mov	r3, r0
 8009304:	2280      	movs	r2, #128	; 0x80
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 fe63 	bl	8009fd2 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	7959      	ldrb	r1, [r3, #5]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009320:	b292      	uxth	r2, r2
 8009322:	9202      	str	r2, [sp, #8]
 8009324:	2200      	movs	r2, #0
 8009326:	9201      	str	r2, [sp, #4]
 8009328:	9300      	str	r3, [sp, #0]
 800932a:	4603      	mov	r3, r0
 800932c:	2200      	movs	r2, #0
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 fe4f 	bl	8009fd2 <USBH_OpenPipe>

    }
    break;
 8009334:	e0ad      	b.n	8009492 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8009336:	2112      	movs	r1, #18
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f965 	bl	8009608 <USBH_Get_DevDesc>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	f040 80a8 	bne.w	8009496 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2202      	movs	r2, #2
 800934a:	705a      	strb	r2, [r3, #1]

    }
    break;
 800934c:	e0a3      	b.n	8009496 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800934e:	2101      	movs	r1, #1
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fa05 	bl	8009760 <USBH_SetAddress>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	f040 809e 	bne.w	800949a <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 800935e:	2002      	movs	r0, #2
 8009360:	f003 f947 	bl	800c5f2 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2203      	movs	r2, #3
 8009370:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	7919      	ldrb	r1, [r3, #4]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009386:	b292      	uxth	r2, r2
 8009388:	9202      	str	r2, [sp, #8]
 800938a:	2200      	movs	r2, #0
 800938c:	9201      	str	r2, [sp, #4]
 800938e:	9300      	str	r3, [sp, #0]
 8009390:	4603      	mov	r3, r0
 8009392:	2280      	movs	r2, #128	; 0x80
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fe1c 	bl	8009fd2 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	7959      	ldrb	r1, [r3, #5]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80093ae:	b292      	uxth	r2, r2
 80093b0:	9202      	str	r2, [sp, #8]
 80093b2:	2200      	movs	r2, #0
 80093b4:	9201      	str	r2, [sp, #4]
 80093b6:	9300      	str	r3, [sp, #0]
 80093b8:	4603      	mov	r3, r0
 80093ba:	2200      	movs	r2, #0
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 fe08 	bl	8009fd2 <USBH_OpenPipe>
    }
    break;
 80093c2:	e06a      	b.n	800949a <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80093c4:	2109      	movs	r1, #9
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f946 	bl	8009658 <USBH_Get_CfgDesc>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d165      	bne.n	800949e <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2204      	movs	r2, #4
 80093d6:	705a      	strb	r2, [r3, #1]
    }
    break;
 80093d8:	e061      	b.n	800949e <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 80093e0:	4619      	mov	r1, r3
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f938 	bl	8009658 <USBH_Get_CfgDesc>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d159      	bne.n	80094a2 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2205      	movs	r2, #5
 80093f2:	705a      	strb	r2, [r3, #1]
    }
    break;
 80093f4:	e055      	b.n	80094a2 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d010      	beq.n	8009422 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800940c:	23ff      	movs	r3, #255	; 0xff
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f946 	bl	80096a0 <USBH_Get_StringDesc>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d145      	bne.n	80094a6 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2206      	movs	r2, #6
 800941e:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009420:	e041      	b.n	80094a6 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2206      	movs	r2, #6
 8009426:	705a      	strb	r2, [r3, #1]
    break;
 8009428:	e03d      	b.n	80094a6 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8009430:	2b00      	cmp	r3, #0
 8009432:	d010      	beq.n	8009456 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009440:	23ff      	movs	r3, #255	; 0xff
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f92c 	bl	80096a0 <USBH_Get_StringDesc>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d12d      	bne.n	80094aa <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2207      	movs	r2, #7
 8009452:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009454:	e029      	b.n	80094aa <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2207      	movs	r2, #7
 800945a:	705a      	strb	r2, [r3, #1]
    break;
 800945c:	e025      	b.n	80094aa <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00f      	beq.n	8009488 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009474:	23ff      	movs	r3, #255	; 0xff
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f912 	bl	80096a0 <USBH_Get_StringDesc>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d115      	bne.n	80094ae <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009486:	e012      	b.n	80094ae <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8009488:	2300      	movs	r3, #0
 800948a:	73fb      	strb	r3, [r7, #15]
    break;
 800948c:	e00f      	b.n	80094ae <USBH_HandleEnum+0x226>

  default:
    break;
 800948e:	bf00      	nop
 8009490:	e00e      	b.n	80094b0 <USBH_HandleEnum+0x228>
    break;
 8009492:	bf00      	nop
 8009494:	e00c      	b.n	80094b0 <USBH_HandleEnum+0x228>
    break;
 8009496:	bf00      	nop
 8009498:	e00a      	b.n	80094b0 <USBH_HandleEnum+0x228>
    break;
 800949a:	bf00      	nop
 800949c:	e008      	b.n	80094b0 <USBH_HandleEnum+0x228>
    break;
 800949e:	bf00      	nop
 80094a0:	e006      	b.n	80094b0 <USBH_HandleEnum+0x228>
    break;
 80094a2:	bf00      	nop
 80094a4:	e004      	b.n	80094b0 <USBH_HandleEnum+0x228>
    break;
 80094a6:	bf00      	nop
 80094a8:	e002      	b.n	80094b0 <USBH_HandleEnum+0x228>
    break;
 80094aa:	bf00      	nop
 80094ac:	e000      	b.n	80094b0 <USBH_HandleEnum+0x228>
    break;
 80094ae:	bf00      	nop
  }
  return Status;
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop

080094bc <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80094ca:	1c5a      	adds	r2, r3, #1
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f804 	bl	80094e0 <USBH_HandleSof>
}
 80094d8:	bf00      	nop
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	2b0b      	cmp	r3, #11
 80094f0:	d10a      	bne.n	8009508 <USBH_HandleSof+0x28>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d005      	beq.n	8009508 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	4798      	blx	r3
  }
}
 8009508:	bf00      	nop
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8009520:	bf00      	nop
}
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800953c:	bf00      	nop
}
 800953e:	370c      	adds	r7, #12
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8009556:	4618      	mov	r0, r3
 8009558:	370c      	adds	r7, #12
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b082      	sub	sp, #8
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	b2db      	uxtb	r3, r3
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10f      	bne.n	8009594 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00e      	beq.n	80095a4 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800958c:	2104      	movs	r1, #4
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	4798      	blx	r3
 8009592:	e007      	b.n	80095a4 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800959a:	2b01      	cmp	r3, #1
 800959c:	d102      	bne.n	80095a4 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2202      	movs	r2, #2
 80095a2:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b082      	sub	sp, #8
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f002 ff4d 	bl	800c456 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	791b      	ldrb	r3, [r3, #4]
 80095c0:	4619      	mov	r1, r3
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 fd42 	bl	800a04c <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	795b      	ldrb	r3, [r3, #5]
 80095cc:	4619      	mov	r1, r3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fd3c 	bl	800a04c <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d005      	beq.n	80095f2 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80095ec:	2105      	movs	r1, #5
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f002 ff14 	bl	800c420 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2203      	movs	r2, #3
 80095fc:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af02      	add	r7, sp, #8
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800961a:	78fb      	ldrb	r3, [r7, #3]
 800961c:	b29b      	uxth	r3, r3
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	4613      	mov	r3, r2
 8009622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009626:	2100      	movs	r1, #0
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 f864 	bl	80096f6 <USBH_GetDescriptor>
 800962e:	4603      	mov	r3, r0
 8009630:	73fb      	strb	r3, [r7, #15]
 8009632:	7bfb      	ldrb	r3, [r7, #15]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10a      	bne.n	800964e <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f203 3022 	addw	r0, r3, #802	; 0x322
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009644:	78fa      	ldrb	r2, [r7, #3]
 8009646:	b292      	uxth	r2, r2
 8009648:	4619      	mov	r1, r3
 800964a:	f000 f8f4 	bl	8009836 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800964e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af02      	add	r7, sp, #8
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	460b      	mov	r3, r1
 8009662:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	331c      	adds	r3, #28
 8009668:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800966a:	887b      	ldrh	r3, [r7, #2]
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009674:	2100      	movs	r1, #0
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f83d 	bl	80096f6 <USBH_GetDescriptor>
 800967c:	4603      	mov	r3, r0
 800967e:	72fb      	strb	r3, [r7, #11]
 8009680:	7afb      	ldrb	r3, [r7, #11]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d107      	bne.n	8009696 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800968c:	887a      	ldrh	r2, [r7, #2]
 800968e:	68f9      	ldr	r1, [r7, #12]
 8009690:	4618      	mov	r0, r3
 8009692:	f000 f940 	bl	8009916 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8009696:	7afb      	ldrb	r3, [r7, #11]
}
 8009698:	4618      	mov	r0, r3
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b088      	sub	sp, #32
 80096a4:	af02      	add	r7, sp, #8
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	607a      	str	r2, [r7, #4]
 80096aa:	461a      	mov	r2, r3
 80096ac:	460b      	mov	r3, r1
 80096ae:	72fb      	strb	r3, [r7, #11]
 80096b0:	4613      	mov	r3, r2
 80096b2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80096b4:	7afb      	ldrb	r3, [r7, #11]
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80096bc:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80096c4:	893b      	ldrh	r3, [r7, #8]
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	460b      	mov	r3, r1
 80096ca:	2100      	movs	r1, #0
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f000 f812 	bl	80096f6 <USBH_GetDescriptor>
 80096d2:	4603      	mov	r3, r0
 80096d4:	75fb      	strb	r3, [r7, #23]
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d107      	bne.n	80096ec <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80096e2:	893a      	ldrh	r2, [r7, #8]
 80096e4:	6879      	ldr	r1, [r7, #4]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 fa13 	bl	8009b12 <USBH_ParseStringDesc>
  }
  return status;
 80096ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3718      	adds	r7, #24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b084      	sub	sp, #16
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	60f8      	str	r0, [r7, #12]
 80096fe:	607b      	str	r3, [r7, #4]
 8009700:	460b      	mov	r3, r1
 8009702:	72fb      	strb	r3, [r7, #11]
 8009704:	4613      	mov	r3, r2
 8009706:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	789b      	ldrb	r3, [r3, #2]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d11c      	bne.n	800974a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009710:	7afb      	ldrb	r3, [r7, #11]
 8009712:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009716:	b2da      	uxtb	r2, r3
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2206      	movs	r2, #6
 8009720:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	893a      	ldrh	r2, [r7, #8]
 8009726:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009728:	893b      	ldrh	r3, [r7, #8]
 800972a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800972e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009732:	d104      	bne.n	800973e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f240 4209 	movw	r2, #1033	; 0x409
 800973a:	829a      	strh	r2, [r3, #20]
 800973c:	e002      	b.n	8009744 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	8b3a      	ldrh	r2, [r7, #24]
 8009748:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800974a:	8b3b      	ldrh	r3, [r7, #24]
 800974c:	461a      	mov	r2, r3
 800974e:	6879      	ldr	r1, [r7, #4]
 8009750:	68f8      	ldr	r0, [r7, #12]
 8009752:	f000 fa2c 	bl	8009bae <USBH_CtlReq>
 8009756:	4603      	mov	r3, r0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	460b      	mov	r3, r1
 800976a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	789b      	ldrb	r3, [r3, #2]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d10f      	bne.n	8009794 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2205      	movs	r2, #5
 800977e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009780:	78fb      	ldrb	r3, [r7, #3]
 8009782:	b29a      	uxth	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009794:	2200      	movs	r2, #0
 8009796:	2100      	movs	r1, #0
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fa08 	bl	8009bae <USBH_CtlReq>
 800979e:	4603      	mov	r3, r0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	460b      	mov	r3, r1
 80097b2:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	789b      	ldrb	r3, [r3, #2]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d10e      	bne.n	80097da <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2209      	movs	r2, #9
 80097c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	887a      	ldrh	r2, [r7, #2]
 80097cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 80097da:	2200      	movs	r2, #0
 80097dc:	2100      	movs	r1, #0
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 f9e5 	bl	8009bae <USBH_CtlReq>
 80097e4:	4603      	mov	r3, r0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b082      	sub	sp, #8
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	460b      	mov	r3, r1
 80097f8:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	789b      	ldrb	r3, [r3, #2]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d10f      	bne.n	8009822 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2203      	movs	r2, #3
 800980c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800980e:	78fb      	ldrb	r3, [r7, #3]
 8009810:	b29a      	uxth	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009822:	2200      	movs	r2, #0
 8009824:	2100      	movs	r1, #0
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f9c1 	bl	8009bae <USBH_CtlReq>
 800982c:	4603      	mov	r3, r0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8009836:	b480      	push	{r7}
 8009838:	b085      	sub	sp, #20
 800983a:	af00      	add	r7, sp, #0
 800983c:	60f8      	str	r0, [r7, #12]
 800983e:	60b9      	str	r1, [r7, #8]
 8009840:	4613      	mov	r3, r2
 8009842:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	781a      	ldrb	r2, [r3, #0]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	785a      	ldrb	r2, [r3, #1]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	3302      	adds	r3, #2
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	b29a      	uxth	r2, r3
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	3303      	adds	r3, #3
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	b29b      	uxth	r3, r3
 8009864:	021b      	lsls	r3, r3, #8
 8009866:	b29b      	uxth	r3, r3
 8009868:	4313      	orrs	r3, r2
 800986a:	b29a      	uxth	r2, r3
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	791a      	ldrb	r2, [r3, #4]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	795a      	ldrb	r2, [r3, #5]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	799a      	ldrb	r2, [r3, #6]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	79da      	ldrb	r2, [r3, #7]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009890:	88fb      	ldrh	r3, [r7, #6]
 8009892:	2b08      	cmp	r3, #8
 8009894:	d939      	bls.n	800990a <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	3308      	adds	r3, #8
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	b29a      	uxth	r2, r3
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	3309      	adds	r3, #9
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	021b      	lsls	r3, r3, #8
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	4313      	orrs	r3, r2
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	330a      	adds	r3, #10
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	b29a      	uxth	r2, r3
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	330b      	adds	r3, #11
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	021b      	lsls	r3, r3, #8
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	4313      	orrs	r3, r2
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	330c      	adds	r3, #12
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	330d      	adds	r3, #13
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	b29b      	uxth	r3, r3
 80098de:	021b      	lsls	r3, r3, #8
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	4313      	orrs	r3, r2
 80098e4:	b29a      	uxth	r2, r3
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	7b9a      	ldrb	r2, [r3, #14]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	7bda      	ldrb	r2, [r3, #15]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	7c1a      	ldrb	r2, [r3, #16]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	7c5a      	ldrb	r2, [r3, #17]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	745a      	strb	r2, [r3, #17]
  }
}
 800990a:	bf00      	nop
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr

08009916 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b08a      	sub	sp, #40	; 0x28
 800991a:	af00      	add	r7, sp, #0
 800991c:	60f8      	str	r0, [r7, #12]
 800991e:	60b9      	str	r1, [r7, #8]
 8009920:	4613      	mov	r3, r2
 8009922:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009928:	2300      	movs	r3, #0
 800992a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800992e:	2300      	movs	r3, #0
 8009930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	781a      	ldrb	r2, [r3, #0]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	785a      	ldrb	r2, [r3, #1]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	3302      	adds	r3, #2
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	b29a      	uxth	r2, r3
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	3303      	adds	r3, #3
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	b29b      	uxth	r3, r3
 8009958:	021b      	lsls	r3, r3, #8
 800995a:	b29b      	uxth	r3, r3
 800995c:	4313      	orrs	r3, r2
 800995e:	b29a      	uxth	r2, r3
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	791a      	ldrb	r2, [r3, #4]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	795a      	ldrb	r2, [r3, #5]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	799a      	ldrb	r2, [r3, #6]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	79da      	ldrb	r2, [r3, #7]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	7a1a      	ldrb	r2, [r3, #8]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800998c:	88fb      	ldrh	r3, [r7, #6]
 800998e:	2b09      	cmp	r3, #9
 8009990:	d95f      	bls.n	8009a52 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009992:	2309      	movs	r3, #9
 8009994:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009996:	2300      	movs	r3, #0
 8009998:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800999a:	e051      	b.n	8009a40 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800999c:	f107 0316 	add.w	r3, r7, #22
 80099a0:	4619      	mov	r1, r3
 80099a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099a4:	f000 f8e8 	bl	8009b78 <USBH_GetNextDesc>
 80099a8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	785b      	ldrb	r3, [r3, #1]
 80099ae:	2b04      	cmp	r3, #4
 80099b0:	d146      	bne.n	8009a40 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80099b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099b6:	221a      	movs	r2, #26
 80099b8:	fb02 f303 	mul.w	r3, r2, r3
 80099bc:	3308      	adds	r3, #8
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	4413      	add	r3, r2
 80099c2:	3302      	adds	r3, #2
 80099c4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 80099c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099c8:	69f8      	ldr	r0, [r7, #28]
 80099ca:	f000 f846 	bl	8009a5a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80099ce:	2300      	movs	r3, #0
 80099d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80099d4:	2300      	movs	r3, #0
 80099d6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80099d8:	e022      	b.n	8009a20 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 80099da:	f107 0316 	add.w	r3, r7, #22
 80099de:	4619      	mov	r1, r3
 80099e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099e2:	f000 f8c9 	bl	8009b78 <USBH_GetNextDesc>
 80099e6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	785b      	ldrb	r3, [r3, #1]
 80099ec:	2b05      	cmp	r3, #5
 80099ee:	d117      	bne.n	8009a20 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80099f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099f4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80099f8:	3201      	adds	r2, #1
 80099fa:	00d2      	lsls	r2, r2, #3
 80099fc:	211a      	movs	r1, #26
 80099fe:	fb01 f303 	mul.w	r3, r1, r3
 8009a02:	4413      	add	r3, r2
 8009a04:	3308      	adds	r3, #8
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	4413      	add	r3, r2
 8009a0a:	3304      	adds	r3, #4
 8009a0c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8009a0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a10:	69b8      	ldr	r0, [r7, #24]
 8009a12:	f000 f851 	bl	8009ab8 <USBH_ParseEPDesc>
            ep_ix++;
 8009a16:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	791b      	ldrb	r3, [r3, #4]
 8009a24:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d204      	bcs.n	8009a36 <USBH_ParseCfgDesc+0x120>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	885a      	ldrh	r2, [r3, #2]
 8009a30:	8afb      	ldrh	r3, [r7, #22]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d8d1      	bhi.n	80099da <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009a36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009a40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d804      	bhi.n	8009a52 <USBH_ParseCfgDesc+0x13c>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	885a      	ldrh	r2, [r3, #2]
 8009a4c:	8afb      	ldrh	r3, [r7, #22]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d8a4      	bhi.n	800999c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009a52:	bf00      	nop
 8009a54:	3728      	adds	r7, #40	; 0x28
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8009a5a:	b480      	push	{r7}
 8009a5c:	b083      	sub	sp, #12
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
 8009a62:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	781a      	ldrb	r2, [r3, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	785a      	ldrb	r2, [r3, #1]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	789a      	ldrb	r2, [r3, #2]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	78da      	ldrb	r2, [r3, #3]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	791a      	ldrb	r2, [r3, #4]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	795a      	ldrb	r2, [r3, #5]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	799a      	ldrb	r2, [r3, #6]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	79da      	ldrb	r2, [r3, #7]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	7a1a      	ldrb	r2, [r3, #8]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	721a      	strb	r2, [r3, #8]
}
 8009aac:	bf00      	nop
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	781a      	ldrb	r2, [r3, #0]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	785a      	ldrb	r2, [r3, #1]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	789a      	ldrb	r2, [r3, #2]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	78da      	ldrb	r2, [r3, #3]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	3305      	adds	r3, #5
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	021b      	lsls	r3, r3, #8
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	4313      	orrs	r3, r2
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	799a      	ldrb	r2, [r3, #6]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	719a      	strb	r2, [r3, #6]
}
 8009b06:	bf00      	nop
 8009b08:	370c      	adds	r7, #12
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr

08009b12 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8009b12:	b480      	push	{r7}
 8009b14:	b087      	sub	sp, #28
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	60f8      	str	r0, [r7, #12]
 8009b1a:	60b9      	str	r1, [r7, #8]
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	3301      	adds	r3, #1
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	2b03      	cmp	r3, #3
 8009b28:	d120      	bne.n	8009b6c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	1e9a      	subs	r2, r3, #2
 8009b30:	88fb      	ldrh	r3, [r7, #6]
 8009b32:	4293      	cmp	r3, r2
 8009b34:	bf28      	it	cs
 8009b36:	4613      	movcs	r3, r2
 8009b38:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3302      	adds	r3, #2
 8009b3e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009b40:	2300      	movs	r3, #0
 8009b42:	82fb      	strh	r3, [r7, #22]
 8009b44:	e00b      	b.n	8009b5e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009b46:	8afb      	ldrh	r3, [r7, #22]
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	781a      	ldrb	r2, [r3, #0]
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	3301      	adds	r3, #1
 8009b56:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009b58:	8afb      	ldrh	r3, [r7, #22]
 8009b5a:	3302      	adds	r3, #2
 8009b5c:	82fb      	strh	r3, [r7, #22]
 8009b5e:	8afa      	ldrh	r2, [r7, #22]
 8009b60:	8abb      	ldrh	r3, [r7, #20]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d3ef      	bcc.n	8009b46 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	701a      	strb	r2, [r3, #0]
  }
}
 8009b6c:	bf00      	nop
 8009b6e:	371c      	adds	r7, #28
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	881a      	ldrh	r2, [r3, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	4413      	add	r3, r2
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3714      	adds	r7, #20
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr

08009bae <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b086      	sub	sp, #24
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	60f8      	str	r0, [r7, #12]
 8009bb6:	60b9      	str	r1, [r7, #8]
 8009bb8:	4613      	mov	r3, r2
 8009bba:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	789b      	ldrb	r3, [r3, #2]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d002      	beq.n	8009bce <USBH_CtlReq+0x20>
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d00f      	beq.n	8009bec <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8009bcc:	e034      	b.n	8009c38 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	88fa      	ldrh	r2, [r7, #6]
 8009bd8:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2202      	movs	r2, #2
 8009be4:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8009be6:	2301      	movs	r3, #1
 8009be8:	75fb      	strb	r3, [r7, #23]
    break;
 8009bea:	e025      	b.n	8009c38 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f000 f829 	bl	8009c44 <USBH_HandleControl>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8009bf6:	7dfb      	ldrb	r3, [r7, #23]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d108      	bne.n	8009c0e <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	75fb      	strb	r3, [r7, #23]
    break;
 8009c0c:	e013      	b.n	8009c36 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8009c0e:	7dfb      	ldrb	r3, [r7, #23]
 8009c10:	2b03      	cmp	r3, #3
 8009c12:	d108      	bne.n	8009c26 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2201      	movs	r2, #1
 8009c18:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8009c20:	2303      	movs	r3, #3
 8009c22:	75fb      	strb	r3, [r7, #23]
    break;
 8009c24:	e007      	b.n	8009c36 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8009c26:	7dfb      	ldrb	r3, [r7, #23]
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	d104      	bne.n	8009c36 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8009c32:	2302      	movs	r3, #2
 8009c34:	75fb      	strb	r3, [r7, #23]
    break;
 8009c36:	bf00      	nop
  }
  return status;
 8009c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3718      	adds	r7, #24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
	...

08009c44 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b086      	sub	sp, #24
 8009c48:	af02      	add	r7, sp, #8
 8009c4a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009c50:	2300      	movs	r3, #0
 8009c52:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	7e1b      	ldrb	r3, [r3, #24]
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	2b0a      	cmp	r3, #10
 8009c5c:	f200 814c 	bhi.w	8009ef8 <USBH_HandleControl+0x2b4>
 8009c60:	a201      	add	r2, pc, #4	; (adr r2, 8009c68 <USBH_HandleControl+0x24>)
 8009c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c66:	bf00      	nop
 8009c68:	08009c95 	.word	0x08009c95
 8009c6c:	08009caf 	.word	0x08009caf
 8009c70:	08009d19 	.word	0x08009d19
 8009c74:	08009d3f 	.word	0x08009d3f
 8009c78:	08009d77 	.word	0x08009d77
 8009c7c:	08009da3 	.word	0x08009da3
 8009c80:	08009df5 	.word	0x08009df5
 8009c84:	08009e17 	.word	0x08009e17
 8009c88:	08009e53 	.word	0x08009e53
 8009c8c:	08009e7b 	.word	0x08009e7b
 8009c90:	08009eb9 	.word	0x08009eb9
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f103 0110 	add.w	r1, r3, #16
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	795b      	ldrb	r3, [r3, #5]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 f939 	bl	8009f18 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2202      	movs	r2, #2
 8009caa:	761a      	strb	r2, [r3, #24]
    break;
 8009cac:	e12f      	b.n	8009f0e <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	795b      	ldrb	r3, [r3, #5]
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f002 fc89 	bl	800c5cc <USBH_LL_GetURBState>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8009cbe:	7bbb      	ldrb	r3, [r7, #14]
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d11e      	bne.n	8009d02 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	7c1b      	ldrb	r3, [r3, #16]
 8009cc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ccc:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	8adb      	ldrh	r3, [r3, #22]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00a      	beq.n	8009cec <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8009cd6:	7b7b      	ldrb	r3, [r7, #13]
 8009cd8:	2b80      	cmp	r3, #128	; 0x80
 8009cda:	d103      	bne.n	8009ce4 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2203      	movs	r2, #3
 8009ce0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009ce2:	e10b      	b.n	8009efc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2205      	movs	r2, #5
 8009ce8:	761a      	strb	r2, [r3, #24]
    break;
 8009cea:	e107      	b.n	8009efc <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8009cec:	7b7b      	ldrb	r3, [r7, #13]
 8009cee:	2b80      	cmp	r3, #128	; 0x80
 8009cf0:	d103      	bne.n	8009cfa <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2209      	movs	r2, #9
 8009cf6:	761a      	strb	r2, [r3, #24]
    break;
 8009cf8:	e100      	b.n	8009efc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2207      	movs	r2, #7
 8009cfe:	761a      	strb	r2, [r3, #24]
    break;
 8009d00:	e0fc      	b.n	8009efc <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009d02:	7bbb      	ldrb	r3, [r7, #14]
 8009d04:	2b04      	cmp	r3, #4
 8009d06:	d003      	beq.n	8009d10 <USBH_HandleControl+0xcc>
 8009d08:	7bbb      	ldrb	r3, [r7, #14]
 8009d0a:	2b02      	cmp	r3, #2
 8009d0c:	f040 80f6 	bne.w	8009efc <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	220b      	movs	r2, #11
 8009d14:	761a      	strb	r2, [r3, #24]
    break;
 8009d16:	e0f1      	b.n	8009efc <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6899      	ldr	r1, [r3, #8]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	899a      	ldrh	r2, [r3, #12]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	791b      	ldrb	r3, [r3, #4]
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 f930 	bl	8009f96 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2204      	movs	r2, #4
 8009d3a:	761a      	strb	r2, [r3, #24]
    break;
 8009d3c:	e0e7      	b.n	8009f0e <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	791b      	ldrb	r3, [r3, #4]
 8009d42:	4619      	mov	r1, r3
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f002 fc41 	bl	800c5cc <USBH_LL_GetURBState>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8009d4e:	7bbb      	ldrb	r3, [r7, #14]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d102      	bne.n	8009d5a <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2209      	movs	r2, #9
 8009d58:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8009d5a:	7bbb      	ldrb	r3, [r7, #14]
 8009d5c:	2b05      	cmp	r3, #5
 8009d5e:	d102      	bne.n	8009d66 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8009d60:	2303      	movs	r3, #3
 8009d62:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009d64:	e0cc      	b.n	8009f00 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8009d66:	7bbb      	ldrb	r3, [r7, #14]
 8009d68:	2b04      	cmp	r3, #4
 8009d6a:	f040 80c9 	bne.w	8009f00 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	220b      	movs	r2, #11
 8009d72:	761a      	strb	r2, [r3, #24]
    break;
 8009d74:	e0c4      	b.n	8009f00 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6899      	ldr	r1, [r3, #8]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	899a      	ldrh	r2, [r3, #12]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	7958      	ldrb	r0, [r3, #5]
 8009d82:	2301      	movs	r3, #1
 8009d84:	9300      	str	r3, [sp, #0]
 8009d86:	4603      	mov	r3, r0
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f8df 	bl	8009f4c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2206      	movs	r2, #6
 8009d9e:	761a      	strb	r2, [r3, #24]
    break;
 8009da0:	e0b5      	b.n	8009f0e <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	795b      	ldrb	r3, [r3, #5]
 8009da6:	4619      	mov	r1, r3
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f002 fc0f 	bl	800c5cc <USBH_LL_GetURBState>
 8009dae:	4603      	mov	r3, r0
 8009db0:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8009db2:	7bbb      	ldrb	r3, [r7, #14]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d103      	bne.n	8009dc0 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2207      	movs	r2, #7
 8009dbc:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009dbe:	e0a1      	b.n	8009f04 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8009dc0:	7bbb      	ldrb	r3, [r7, #14]
 8009dc2:	2b05      	cmp	r3, #5
 8009dc4:	d105      	bne.n	8009dd2 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	220c      	movs	r2, #12
 8009dca:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8009dcc:	2303      	movs	r3, #3
 8009dce:	73fb      	strb	r3, [r7, #15]
    break;
 8009dd0:	e098      	b.n	8009f04 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8009dd2:	7bbb      	ldrb	r3, [r7, #14]
 8009dd4:	2b02      	cmp	r3, #2
 8009dd6:	d103      	bne.n	8009de0 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2205      	movs	r2, #5
 8009ddc:	761a      	strb	r2, [r3, #24]
    break;
 8009dde:	e091      	b.n	8009f04 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8009de0:	7bbb      	ldrb	r3, [r7, #14]
 8009de2:	2b04      	cmp	r3, #4
 8009de4:	f040 808e 	bne.w	8009f04 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	220b      	movs	r2, #11
 8009dec:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8009dee:	2302      	movs	r3, #2
 8009df0:	73fb      	strb	r3, [r7, #15]
    break;
 8009df2:	e087      	b.n	8009f04 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	791b      	ldrb	r3, [r3, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 f8ca 	bl	8009f96 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2208      	movs	r2, #8
 8009e12:	761a      	strb	r2, [r3, #24]

    break;
 8009e14:	e07b      	b.n	8009f0e <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	791b      	ldrb	r3, [r3, #4]
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f002 fbd5 	bl	800c5cc <USBH_LL_GetURBState>
 8009e22:	4603      	mov	r3, r0
 8009e24:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8009e26:	7bbb      	ldrb	r3, [r7, #14]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d105      	bne.n	8009e38 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	220d      	movs	r2, #13
 8009e30:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8009e32:	2300      	movs	r3, #0
 8009e34:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009e36:	e067      	b.n	8009f08 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8009e38:	7bbb      	ldrb	r3, [r7, #14]
 8009e3a:	2b04      	cmp	r3, #4
 8009e3c:	d103      	bne.n	8009e46 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	220b      	movs	r2, #11
 8009e42:	761a      	strb	r2, [r3, #24]
    break;
 8009e44:	e060      	b.n	8009f08 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8009e46:	7bbb      	ldrb	r3, [r7, #14]
 8009e48:	2b05      	cmp	r3, #5
 8009e4a:	d15d      	bne.n	8009f08 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e50:	e05a      	b.n	8009f08 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	795a      	ldrb	r2, [r3, #5]
 8009e56:	2301      	movs	r3, #1
 8009e58:	9300      	str	r3, [sp, #0]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	2100      	movs	r1, #0
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 f873 	bl	8009f4c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	220a      	movs	r2, #10
 8009e76:	761a      	strb	r2, [r3, #24]
    break;
 8009e78:	e049      	b.n	8009f0e <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	795b      	ldrb	r3, [r3, #5]
 8009e7e:	4619      	mov	r1, r3
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f002 fba3 	bl	800c5cc <USBH_LL_GetURBState>
 8009e86:	4603      	mov	r3, r0
 8009e88:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8009e8a:	7bbb      	ldrb	r3, [r7, #14]
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d105      	bne.n	8009e9c <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8009e90:	2300      	movs	r3, #0
 8009e92:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	220d      	movs	r2, #13
 8009e98:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8009e9a:	e037      	b.n	8009f0c <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8009e9c:	7bbb      	ldrb	r3, [r7, #14]
 8009e9e:	2b02      	cmp	r3, #2
 8009ea0:	d103      	bne.n	8009eaa <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2209      	movs	r2, #9
 8009ea6:	761a      	strb	r2, [r3, #24]
    break;
 8009ea8:	e030      	b.n	8009f0c <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8009eaa:	7bbb      	ldrb	r3, [r7, #14]
 8009eac:	2b04      	cmp	r3, #4
 8009eae:	d12d      	bne.n	8009f0c <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	220b      	movs	r2, #11
 8009eb4:	761a      	strb	r2, [r3, #24]
    break;
 8009eb6:	e029      	b.n	8009f0c <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	7e5b      	ldrb	r3, [r3, #25]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	765a      	strb	r2, [r3, #25]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	7e5b      	ldrb	r3, [r3, #25]
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d809      	bhi.n	8009ee0 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f002 fac2 	bl	800c456 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8009ede:	e016      	b.n	8009f0e <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009ee6:	2106      	movs	r1, #6
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8009ef2:	2302      	movs	r3, #2
 8009ef4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ef6:	e00a      	b.n	8009f0e <USBH_HandleControl+0x2ca>

  default:
    break;
 8009ef8:	bf00      	nop
 8009efa:	e008      	b.n	8009f0e <USBH_HandleControl+0x2ca>
    break;
 8009efc:	bf00      	nop
 8009efe:	e006      	b.n	8009f0e <USBH_HandleControl+0x2ca>
    break;
 8009f00:	bf00      	nop
 8009f02:	e004      	b.n	8009f0e <USBH_HandleControl+0x2ca>
    break;
 8009f04:	bf00      	nop
 8009f06:	e002      	b.n	8009f0e <USBH_HandleControl+0x2ca>
    break;
 8009f08:	bf00      	nop
 8009f0a:	e000      	b.n	8009f0e <USBH_HandleControl+0x2ca>
    break;
 8009f0c:	bf00      	nop
  }
  return status;
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b088      	sub	sp, #32
 8009f1c:	af04      	add	r7, sp, #16
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	4613      	mov	r3, r2
 8009f24:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009f26:	79f9      	ldrb	r1, [r7, #7]
 8009f28:	2300      	movs	r3, #0
 8009f2a:	9303      	str	r3, [sp, #12]
 8009f2c:	2308      	movs	r3, #8
 8009f2e:	9302      	str	r3, [sp, #8]
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	9301      	str	r3, [sp, #4]
 8009f34:	2300      	movs	r3, #0
 8009f36:	9300      	str	r3, [sp, #0]
 8009f38:	2300      	movs	r3, #0
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	f002 fb14 	bl	800c56a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009f42:	2300      	movs	r3, #0
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3710      	adds	r7, #16
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b088      	sub	sp, #32
 8009f50:	af04      	add	r7, sp, #16
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	4611      	mov	r1, r2
 8009f58:	461a      	mov	r2, r3
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	80fb      	strh	r3, [r7, #6]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d001      	beq.n	8009f70 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009f70:	7979      	ldrb	r1, [r7, #5]
 8009f72:	7e3b      	ldrb	r3, [r7, #24]
 8009f74:	9303      	str	r3, [sp, #12]
 8009f76:	88fb      	ldrh	r3, [r7, #6]
 8009f78:	9302      	str	r3, [sp, #8]
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	9301      	str	r3, [sp, #4]
 8009f7e:	2301      	movs	r3, #1
 8009f80:	9300      	str	r3, [sp, #0]
 8009f82:	2300      	movs	r3, #0
 8009f84:	2200      	movs	r2, #0
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f002 faef 	bl	800c56a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b088      	sub	sp, #32
 8009f9a:	af04      	add	r7, sp, #16
 8009f9c:	60f8      	str	r0, [r7, #12]
 8009f9e:	60b9      	str	r1, [r7, #8]
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	80fb      	strh	r3, [r7, #6]
 8009fa8:	4613      	mov	r3, r2
 8009faa:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009fac:	7979      	ldrb	r1, [r7, #5]
 8009fae:	2300      	movs	r3, #0
 8009fb0:	9303      	str	r3, [sp, #12]
 8009fb2:	88fb      	ldrh	r3, [r7, #6]
 8009fb4:	9302      	str	r3, [sp, #8]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	9301      	str	r3, [sp, #4]
 8009fba:	2301      	movs	r3, #1
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	68f8      	ldr	r0, [r7, #12]
 8009fc4:	f002 fad1 	bl	800c56a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009fc8:	2300      	movs	r3, #0

}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b086      	sub	sp, #24
 8009fd6:	af04      	add	r7, sp, #16
 8009fd8:	6078      	str	r0, [r7, #4]
 8009fda:	4608      	mov	r0, r1
 8009fdc:	4611      	mov	r1, r2
 8009fde:	461a      	mov	r2, r3
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	70fb      	strb	r3, [r7, #3]
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	70bb      	strb	r3, [r7, #2]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8009fec:	7878      	ldrb	r0, [r7, #1]
 8009fee:	78ba      	ldrb	r2, [r7, #2]
 8009ff0:	78f9      	ldrb	r1, [r7, #3]
 8009ff2:	8b3b      	ldrh	r3, [r7, #24]
 8009ff4:	9302      	str	r3, [sp, #8]
 8009ff6:	7d3b      	ldrb	r3, [r7, #20]
 8009ff8:	9301      	str	r3, [sp, #4]
 8009ffa:	7c3b      	ldrb	r3, [r7, #16]
 8009ffc:	9300      	str	r3, [sp, #0]
 8009ffe:	4603      	mov	r3, r0
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f002 fa83 	bl	800c50c <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800a006:	2300      	movs	r3, #0

}
 800a008:	4618      	mov	r0, r3
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	460b      	mov	r3, r1
 800a01a:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 f831 	bl	800a084 <USBH_GetFreePipe>
 800a022:	4603      	mov	r3, r0
 800a024:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a026:	89fb      	ldrh	r3, [r7, #14]
 800a028:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d007      	beq.n	800a040 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800a030:	78fb      	ldrb	r3, [r7, #3]
 800a032:	89fa      	ldrh	r2, [r7, #14]
 800a034:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	32e0      	adds	r2, #224	; 0xe0
 800a03c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800a040:	89fb      	ldrh	r3, [r7, #14]
 800a042:	b2db      	uxtb	r3, r3
}
 800a044:	4618      	mov	r0, r3
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	460b      	mov	r3, r1
 800a056:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800a058:	78fb      	ldrb	r3, [r7, #3]
 800a05a:	2b0a      	cmp	r3, #10
 800a05c:	d80b      	bhi.n	800a076 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800a05e:	78fa      	ldrb	r2, [r7, #3]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	32e0      	adds	r2, #224	; 0xe0
 800a064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a068:	78fa      	ldrb	r2, [r7, #3]
 800a06a:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	32e0      	adds	r2, #224	; 0xe0
 800a072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800a084:	b480      	push	{r7}
 800a086:	b085      	sub	sp, #20
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a08c:	2300      	movs	r3, #0
 800a08e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a090:	2300      	movs	r3, #0
 800a092:	73fb      	strb	r3, [r7, #15]
 800a094:	e00e      	b.n	800a0b4 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a096:	7bfa      	ldrb	r2, [r7, #15]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	32e0      	adds	r2, #224	; 0xe0
 800a09c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d102      	bne.n	800a0ae <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800a0a8:	7bfb      	ldrb	r3, [r7, #15]
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	e007      	b.n	800a0be <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	73fb      	strb	r3, [r7, #15]
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
 800a0b6:	2b0a      	cmp	r3, #10
 800a0b8:	d9ed      	bls.n	800a096 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800a0ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3714      	adds	r7, #20
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
	...

0800a0cc <blink_game_state_led>:
	HAL_Delay(1000);
	HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, INVERTED_OFF);
	HAL_Delay(1000);
}

void blink_game_state_led(game_state_t state) {
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	71fb      	strb	r3, [r7, #7]
	switch (state) {
 800a0d6:	79fb      	ldrb	r3, [r7, #7]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d002      	beq.n	800a0e2 <blink_game_state_led+0x16>
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d012      	beq.n	800a106 <blink_game_state_led+0x3a>
		HAL_GPIO_WritePin(GAME_STATE_LED_GPIO_Port, GAME_STATE_LED_Pin, 0);
		HAL_Delay(500);
	case STARTED:
		HAL_GPIO_WritePin(GAME_STATE_LED_GPIO_Port, GAME_STATE_LED_Pin, 0);
	default:
		break;
 800a0e0:	e016      	b.n	800a110 <blink_game_state_led+0x44>
		HAL_GPIO_WritePin(GAME_STATE_LED_GPIO_Port, GAME_STATE_LED_Pin, 1);
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	2180      	movs	r1, #128	; 0x80
 800a0e6:	480d      	ldr	r0, [pc, #52]	; (800a11c <blink_game_state_led+0x50>)
 800a0e8:	f7f8 f928 	bl	800233c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800a0ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a0f0:	f7f7 f91e 	bl	8001330 <HAL_Delay>
		HAL_GPIO_WritePin(GAME_STATE_LED_GPIO_Port, GAME_STATE_LED_Pin, 0);
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	2180      	movs	r1, #128	; 0x80
 800a0f8:	4808      	ldr	r0, [pc, #32]	; (800a11c <blink_game_state_led+0x50>)
 800a0fa:	f7f8 f91f 	bl	800233c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800a0fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a102:	f7f7 f915 	bl	8001330 <HAL_Delay>
		HAL_GPIO_WritePin(GAME_STATE_LED_GPIO_Port, GAME_STATE_LED_Pin, 0);
 800a106:	2200      	movs	r2, #0
 800a108:	2180      	movs	r1, #128	; 0x80
 800a10a:	4804      	ldr	r0, [pc, #16]	; (800a11c <blink_game_state_led+0x50>)
 800a10c:	f7f8 f916 	bl	800233c <HAL_GPIO_WritePin>
		break;
 800a110:	bf00      	nop
	}
}
 800a112:	bf00      	nop
 800a114:	3708      	adds	r7, #8
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	40020800 	.word	0x40020800

0800a120 <generate_random_number>:

int generate_random_number(void) {
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
	unsigned int rand = HAL_RNG_GetRandomNumber(&hrng);
 800a126:	4809      	ldr	r0, [pc, #36]	; (800a14c <generate_random_number+0x2c>)
 800a128:	f7fb fcd5 	bl	8005ad6 <HAL_RNG_GetRandomNumber>
 800a12c:	6078      	str	r0, [r7, #4]
	return rand % 10;
 800a12e:	6879      	ldr	r1, [r7, #4]
 800a130:	4b07      	ldr	r3, [pc, #28]	; (800a150 <generate_random_number+0x30>)
 800a132:	fba3 2301 	umull	r2, r3, r3, r1
 800a136:	08da      	lsrs	r2, r3, #3
 800a138:	4613      	mov	r3, r2
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	4413      	add	r3, r2
 800a13e:	005b      	lsls	r3, r3, #1
 800a140:	1aca      	subs	r2, r1, r3
 800a142:	4613      	mov	r3, r2
}
 800a144:	4618      	mov	r0, r3
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	200008dc 	.word	0x200008dc
 800a150:	cccccccd 	.word	0xcccccccd

0800a154 <start_single_player_game>:
	random_counter++;
	random = generate_random_number();
	HAL_Delay(1000);
}

void start_single_player_game(void) {
 800a154:	b580      	push	{r7, lr}
 800a156:	af00      	add	r7, sp, #0
	random = generate_random_number() * 1000;
 800a158:	f7ff ffe2 	bl	800a120 <generate_random_number>
 800a15c:	4602      	mov	r2, r0
 800a15e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a162:	fb03 f302 	mul.w	r3, r3, r2
 800a166:	461a      	mov	r2, r3
 800a168:	4b0f      	ldr	r3, [pc, #60]	; (800a1a8 <start_single_player_game+0x54>)
 800a16a:	601a      	str	r2, [r3, #0]
	HAL_Delay(random);
 800a16c:	4b0e      	ldr	r3, [pc, #56]	; (800a1a8 <start_single_player_game+0x54>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4618      	mov	r0, r3
 800a172:	f7f7 f8dd 	bl	8001330 <HAL_Delay>
	if(game_state == FINISHED) {
 800a176:	4b0d      	ldr	r3, [pc, #52]	; (800a1ac <start_single_player_game+0x58>)
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d011      	beq.n	800a1a2 <start_single_player_game+0x4e>
		return;
	} else if(game_state == STARTED) {
 800a17e:	4b0b      	ldr	r3, [pc, #44]	; (800a1ac <start_single_player_game+0x58>)
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	2b01      	cmp	r3, #1
 800a184:	d10e      	bne.n	800a1a4 <start_single_player_game+0x50>
		HAL_GPIO_WritePin(GAME_STATE_LED_GPIO_Port, GAME_STATE_LED_Pin, 1);
 800a186:	2201      	movs	r2, #1
 800a188:	2180      	movs	r1, #128	; 0x80
 800a18a:	4809      	ldr	r0, [pc, #36]	; (800a1b0 <start_single_player_game+0x5c>)
 800a18c:	f7f8 f8d6 	bl	800233c <HAL_GPIO_WritePin>
		player_one_timer_start = HAL_GetTick();
 800a190:	f7f7 f8c2 	bl	8001318 <HAL_GetTick>
 800a194:	4602      	mov	r2, r0
 800a196:	4b07      	ldr	r3, [pc, #28]	; (800a1b4 <start_single_player_game+0x60>)
 800a198:	601a      	str	r2, [r3, #0]
		game_state = REACTION;
 800a19a:	4b04      	ldr	r3, [pc, #16]	; (800a1ac <start_single_player_game+0x58>)
 800a19c:	2202      	movs	r2, #2
 800a19e:	701a      	strb	r2, [r3, #0]
 800a1a0:	e000      	b.n	800a1a4 <start_single_player_game+0x50>
		return;
 800a1a2:	bf00      	nop
	}
	//HAL_GPIO_WritePin(GAME_STATE_LED_GPIO_Port, GAME_STATE_LED_Pin, 1);
	//player_one_timer_start = HAL_GetTick();
}
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	20000380 	.word	0x20000380
 800a1ac:	20000200 	.word	0x20000200
 800a1b0:	40020800 	.word	0x40020800
 800a1b4:	2000096c 	.word	0x2000096c

0800a1b8 <print_player_stats>:
int measure_player_one_reaction(void) {
	int start_timer = HAL_GetTick();
	return player_one_reaction = HAL_GetTick() - start_timer;
}

void print_player_stats(void) {
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b0c2      	sub	sp, #264	; 0x108
 800a1bc:	af00      	add	r7, sp, #0
	char tmp[256];
	int i = 1;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	for(; i <= round_counter; ++i) {
 800a1c4:	e00c      	b.n	800a1e0 <print_player_stats+0x28>
		sprintf(tmp, "Round %d: %d", i, player_one_reaction);
 800a1c6:	4b10      	ldr	r3, [pc, #64]	; (800a208 <print_player_stats+0x50>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	1d38      	adds	r0, r7, #4
 800a1cc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800a1d0:	490e      	ldr	r1, [pc, #56]	; (800a20c <print_player_stats+0x54>)
 800a1d2:	f002 fb59 	bl	800c888 <siprintf>
	for(; i <= round_counter; ++i) {
 800a1d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1da:	3301      	adds	r3, #1
 800a1dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a1e0:	4b0b      	ldr	r3, [pc, #44]	; (800a210 <print_player_stats+0x58>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	ddec      	ble.n	800a1c6 <print_player_stats+0xe>
	}
	BSP_LCD_DisplayStringAtLine(i, tmp);
 800a1ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	1d3a      	adds	r2, r7, #4
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7f6 fc5c 	bl	8000ab4 <BSP_LCD_DisplayStringAtLine>

}
 800a1fc:	bf00      	nop
 800a1fe:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	20000878 	.word	0x20000878
 800a20c:	0800cf3c 	.word	0x0800cf3c
 800a210:	20000204 	.word	0x20000204

0800a214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a218:	f7f7 f85c 	bl	80012d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a21c:	f000 f874 	bl	800a308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a220:	f000 ff5e 	bl	800b0e0 <MX_GPIO_Init>
  MX_DMA2D_Init();
 800a224:	f000 f92e 	bl	800a484 <MX_DMA2D_Init>
  MX_FMC_Init();
 800a228:	f000 ff0a 	bl	800b040 <MX_FMC_Init>
  MX_I2C1_Init();
 800a22c:	f000 f95c 	bl	800a4e8 <MX_I2C1_Init>
  MX_I2C3_Init();
 800a230:	f000 f99a 	bl	800a568 <MX_I2C3_Init>
  MX_LTDC_Init();
 800a234:	f000 f9d8 	bl	800a5e8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800a238:	f000 fa58 	bl	800a6ec <MX_QUADSPI_Init>
  MX_RTC_Init();
 800a23c:	f000 fa96 	bl	800a76c <MX_RTC_Init>
  MX_SAI2_Init();
 800a240:	f000 fb3c 	bl	800a8bc <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 800a244:	f000 fbe2 	bl	800aa0c <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 800a248:	f000 fc10 	bl	800aa6c <MX_SPI2_Init>
  MX_TIM1_Init();
 800a24c:	f000 fc4c 	bl	800aae8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800a250:	f000 fcf6 	bl	800ac40 <MX_TIM2_Init>
  MX_TIM3_Init();
 800a254:	f000 fd6a 	bl	800ad2c <MX_TIM3_Init>
  MX_TIM5_Init();
 800a258:	f000 fdb6 	bl	800adc8 <MX_TIM5_Init>
  MX_TIM8_Init();
 800a25c:	f000 fe2a 	bl	800aeb4 <MX_TIM8_Init>
  MX_TIM12_Init();
 800a260:	f000 fe7a 	bl	800af58 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800a264:	f000 febc 	bl	800afe0 <MX_USART1_UART_Init>
  MX_RNG_Init();
 800a268:	f000 fa6c 	bl	800a744 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 800a26c:	f7f6 f9a0 	bl	80005b0 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 800a270:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800a274:	2001      	movs	r0, #1
 800a276:	f7f6 fa33 	bl	80006e0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 800a27a:	2001      	movs	r0, #1
 800a27c:	f7f6 fa90 	bl	80007a0 <BSP_LCD_SelectLayer>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800a280:	481d      	ldr	r0, [pc, #116]	; (800a2f8 <main+0xe4>)
 800a282:	f7f6 fab7 	bl	80007f4 <BSP_LCD_SetFont>
  //BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800a286:	f04f 30ff 	mov.w	r0, #4294967295
 800a28a:	f7f6 fa99 	bl	80007c0 <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800a28e:	f04f 30ff 	mov.w	r0, #4294967295
 800a292:	f7f6 fadf 	bl	8000854 <BSP_LCD_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(game_state == WAITING) {
 800a296:	4b19      	ldr	r3, [pc, #100]	; (800a2fc <main+0xe8>)
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d103      	bne.n	800a2a6 <main+0x92>
		  blink_game_state_led(WAITING);
 800a29e:	2000      	movs	r0, #0
 800a2a0:	f7ff ff14 	bl	800a0cc <blink_game_state_led>
 800a2a4:	e024      	b.n	800a2f0 <main+0xdc>
	  } else if(game_state == STARTED) {
 800a2a6:	4b15      	ldr	r3, [pc, #84]	; (800a2fc <main+0xe8>)
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d105      	bne.n	800a2ba <main+0xa6>
		  blink_game_state_led(STARTED);
 800a2ae:	2001      	movs	r0, #1
 800a2b0:	f7ff ff0c 	bl	800a0cc <blink_game_state_led>
		  start_single_player_game();
 800a2b4:	f7ff ff4e 	bl	800a154 <start_single_player_game>
 800a2b8:	e01a      	b.n	800a2f0 <main+0xdc>
		  //game_state = REACTION;
	  } else if(game_state == REACTION) {
 800a2ba:	4b10      	ldr	r3, [pc, #64]	; (800a2fc <main+0xe8>)
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d016      	beq.n	800a2f0 <main+0xdc>

	  } else if(game_state == FINISHED) {
 800a2c2:	4b0e      	ldr	r3, [pc, #56]	; (800a2fc <main+0xe8>)
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	2b03      	cmp	r3, #3
 800a2c8:	d112      	bne.n	800a2f0 <main+0xdc>
		  HAL_Delay(3000);
 800a2ca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a2ce:	f7f7 f82f 	bl	8001330 <HAL_Delay>
		  HAL_GPIO_WritePin(RGB_RED_GPIO_Port, RGB_RED_Pin, INVERTED_OFF);
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	2140      	movs	r1, #64	; 0x40
 800a2d6:	480a      	ldr	r0, [pc, #40]	; (800a300 <main+0xec>)
 800a2d8:	f7f8 f830 	bl	800233c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, INVERTED_OFF);
 800a2dc:	2201      	movs	r2, #1
 800a2de:	2110      	movs	r1, #16
 800a2e0:	4808      	ldr	r0, [pc, #32]	; (800a304 <main+0xf0>)
 800a2e2:	f7f8 f82b 	bl	800233c <HAL_GPIO_WritePin>
		  print_player_stats();
 800a2e6:	f7ff ff67 	bl	800a1b8 <print_player_stats>
		  game_state = WAITING;
 800a2ea:	4b04      	ldr	r3, [pc, #16]	; (800a2fc <main+0xe8>)
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	701a      	strb	r2, [r3, #0]
	  }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800a2f0:	f002 f838 	bl	800c364 <MX_USB_HOST_Process>
	  if(game_state == WAITING) {
 800a2f4:	e7cf      	b.n	800a296 <main+0x82>
 800a2f6:	bf00      	nop
 800a2f8:	20000000 	.word	0x20000000
 800a2fc:	20000200 	.word	0x20000200
 800a300:	40020800 	.word	0x40020800
 800a304:	40020400 	.word	0x40020400

0800a308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b0b4      	sub	sp, #208	; 0xd0
 800a30c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a30e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a312:	2230      	movs	r2, #48	; 0x30
 800a314:	2100      	movs	r1, #0
 800a316:	4618      	mov	r0, r3
 800a318:	f002 f9f6 	bl	800c708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a31c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a320:	2200      	movs	r2, #0
 800a322:	601a      	str	r2, [r3, #0]
 800a324:	605a      	str	r2, [r3, #4]
 800a326:	609a      	str	r2, [r3, #8]
 800a328:	60da      	str	r2, [r3, #12]
 800a32a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a32c:	f107 0308 	add.w	r3, r7, #8
 800a330:	2284      	movs	r2, #132	; 0x84
 800a332:	2100      	movs	r1, #0
 800a334:	4618      	mov	r0, r3
 800a336:	f002 f9e7 	bl	800c708 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800a33a:	f7fa f891 	bl	8004460 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a33e:	4b4e      	ldr	r3, [pc, #312]	; (800a478 <SystemClock_Config+0x170>)
 800a340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a342:	4a4d      	ldr	r2, [pc, #308]	; (800a478 <SystemClock_Config+0x170>)
 800a344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a348:	6413      	str	r3, [r2, #64]	; 0x40
 800a34a:	4b4b      	ldr	r3, [pc, #300]	; (800a478 <SystemClock_Config+0x170>)
 800a34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a352:	607b      	str	r3, [r7, #4]
 800a354:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a356:	4b49      	ldr	r3, [pc, #292]	; (800a47c <SystemClock_Config+0x174>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a48      	ldr	r2, [pc, #288]	; (800a47c <SystemClock_Config+0x174>)
 800a35c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a360:	6013      	str	r3, [r2, #0]
 800a362:	4b46      	ldr	r3, [pc, #280]	; (800a47c <SystemClock_Config+0x174>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a36a:	603b      	str	r3, [r7, #0]
 800a36c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800a36e:	2309      	movs	r3, #9
 800a370:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a374:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a378:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800a37c:	2301      	movs	r3, #1
 800a37e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a382:	2302      	movs	r3, #2
 800a384:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a388:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a38c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800a390:	2319      	movs	r3, #25
 800a392:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800a396:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a39a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a39e:	2302      	movs	r3, #2
 800a3a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800a3a4:	2309      	movs	r3, #9
 800a3a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a3aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fa f986 	bl	80046c0 <HAL_RCC_OscConfig>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800a3ba:	f001 f91d 	bl	800b5f8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800a3be:	f7fa f85f 	bl	8004480 <HAL_PWREx_EnableOverDrive>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d001      	beq.n	800a3cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800a3c8:	f001 f916 	bl	800b5f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a3cc:	230f      	movs	r3, #15
 800a3ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a3de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a3e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a3e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800a3ee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a3f2:	2106      	movs	r1, #6
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7fa fbd3 	bl	8004ba0 <HAL_RCC_ClockConfig>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d001      	beq.n	800a404 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800a400:	f001 f8fa 	bl	800b5f8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 800a404:	4b1e      	ldr	r3, [pc, #120]	; (800a480 <SystemClock_Config+0x178>)
 800a406:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800a408:	2364      	movs	r3, #100	; 0x64
 800a40a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800a40c:	2302      	movs	r3, #2
 800a40e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800a410:	2302      	movs	r3, #2
 800a412:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800a414:	2302      	movs	r3, #2
 800a416:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800a418:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800a41c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800a41e:	2305      	movs	r3, #5
 800a420:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800a422:	2302      	movs	r3, #2
 800a424:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800a426:	2303      	movs	r3, #3
 800a428:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800a42a:	2301      	movs	r3, #1
 800a42c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800a42e:	2301      	movs	r3, #1
 800a430:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800a432:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a436:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800a438:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a43c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800a43e:	2300      	movs	r3, #0
 800a440:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a442:	2300      	movs	r3, #0
 800a444:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800a446:	2300      	movs	r3, #0
 800a448:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800a44a:	2300      	movs	r3, #0
 800a44c:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800a44e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a452:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800a456:	2300      	movs	r3, #0
 800a458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a45c:	f107 0308 	add.w	r3, r7, #8
 800a460:	4618      	mov	r0, r3
 800a462:	f7fa fd9d 	bl	8004fa0 <HAL_RCCEx_PeriphCLKConfig>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d001      	beq.n	800a470 <SystemClock_Config+0x168>
  {
    Error_Handler();
 800a46c:	f001 f8c4 	bl	800b5f8 <Error_Handler>
  }
}
 800a470:	bf00      	nop
 800a472:	37d0      	adds	r7, #208	; 0xd0
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	40023800 	.word	0x40023800
 800a47c:	40007000 	.word	0x40007000
 800a480:	01b14068 	.word	0x01b14068

0800a484 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800a488:	4b15      	ldr	r3, [pc, #84]	; (800a4e0 <MX_DMA2D_Init+0x5c>)
 800a48a:	4a16      	ldr	r2, [pc, #88]	; (800a4e4 <MX_DMA2D_Init+0x60>)
 800a48c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800a48e:	4b14      	ldr	r3, [pc, #80]	; (800a4e0 <MX_DMA2D_Init+0x5c>)
 800a490:	2200      	movs	r2, #0
 800a492:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800a494:	4b12      	ldr	r3, [pc, #72]	; (800a4e0 <MX_DMA2D_Init+0x5c>)
 800a496:	2200      	movs	r2, #0
 800a498:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800a49a:	4b11      	ldr	r3, [pc, #68]	; (800a4e0 <MX_DMA2D_Init+0x5c>)
 800a49c:	2200      	movs	r2, #0
 800a49e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800a4a0:	4b0f      	ldr	r3, [pc, #60]	; (800a4e0 <MX_DMA2D_Init+0x5c>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800a4a6:	4b0e      	ldr	r3, [pc, #56]	; (800a4e0 <MX_DMA2D_Init+0x5c>)
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800a4ac:	4b0c      	ldr	r3, [pc, #48]	; (800a4e0 <MX_DMA2D_Init+0x5c>)
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800a4b2:	4b0b      	ldr	r3, [pc, #44]	; (800a4e0 <MX_DMA2D_Init+0x5c>)
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800a4b8:	4809      	ldr	r0, [pc, #36]	; (800a4e0 <MX_DMA2D_Init+0x5c>)
 800a4ba:	f7f7 f9f9 	bl	80018b0 <HAL_DMA2D_Init>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d001      	beq.n	800a4c8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800a4c4:	f001 f898 	bl	800b5f8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800a4c8:	2101      	movs	r1, #1
 800a4ca:	4805      	ldr	r0, [pc, #20]	; (800a4e0 <MX_DMA2D_Init+0x5c>)
 800a4cc:	f7f7 fc5e 	bl	8001d8c <HAL_DMA2D_ConfigLayer>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d001      	beq.n	800a4da <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800a4d6:	f001 f88f 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800a4da:	bf00      	nop
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	200008ec 	.word	0x200008ec
 800a4e4:	4002b000 	.word	0x4002b000

0800a4e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a4ec:	4b1b      	ldr	r3, [pc, #108]	; (800a55c <MX_I2C1_Init+0x74>)
 800a4ee:	4a1c      	ldr	r2, [pc, #112]	; (800a560 <MX_I2C1_Init+0x78>)
 800a4f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800a4f2:	4b1a      	ldr	r3, [pc, #104]	; (800a55c <MX_I2C1_Init+0x74>)
 800a4f4:	4a1b      	ldr	r2, [pc, #108]	; (800a564 <MX_I2C1_Init+0x7c>)
 800a4f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800a4f8:	4b18      	ldr	r3, [pc, #96]	; (800a55c <MX_I2C1_Init+0x74>)
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a4fe:	4b17      	ldr	r3, [pc, #92]	; (800a55c <MX_I2C1_Init+0x74>)
 800a500:	2201      	movs	r2, #1
 800a502:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a504:	4b15      	ldr	r3, [pc, #84]	; (800a55c <MX_I2C1_Init+0x74>)
 800a506:	2200      	movs	r2, #0
 800a508:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800a50a:	4b14      	ldr	r3, [pc, #80]	; (800a55c <MX_I2C1_Init+0x74>)
 800a50c:	2200      	movs	r2, #0
 800a50e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a510:	4b12      	ldr	r3, [pc, #72]	; (800a55c <MX_I2C1_Init+0x74>)
 800a512:	2200      	movs	r2, #0
 800a514:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a516:	4b11      	ldr	r3, [pc, #68]	; (800a55c <MX_I2C1_Init+0x74>)
 800a518:	2200      	movs	r2, #0
 800a51a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a51c:	4b0f      	ldr	r3, [pc, #60]	; (800a55c <MX_I2C1_Init+0x74>)
 800a51e:	2200      	movs	r2, #0
 800a520:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a522:	480e      	ldr	r0, [pc, #56]	; (800a55c <MX_I2C1_Init+0x74>)
 800a524:	f7f9 fafc 	bl	8003b20 <HAL_I2C_Init>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d001      	beq.n	800a532 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800a52e:	f001 f863 	bl	800b5f8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a532:	2100      	movs	r1, #0
 800a534:	4809      	ldr	r0, [pc, #36]	; (800a55c <MX_I2C1_Init+0x74>)
 800a536:	f7f9 fb83 	bl	8003c40 <HAL_I2CEx_ConfigAnalogFilter>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d001      	beq.n	800a544 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800a540:	f001 f85a 	bl	800b5f8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800a544:	2100      	movs	r1, #0
 800a546:	4805      	ldr	r0, [pc, #20]	; (800a55c <MX_I2C1_Init+0x74>)
 800a548:	f7f9 fbc5 	bl	8003cd6 <HAL_I2CEx_ConfigDigitalFilter>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d001      	beq.n	800a556 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800a552:	f001 f851 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a556:	bf00      	nop
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	20000544 	.word	0x20000544
 800a560:	40005400 	.word	0x40005400
 800a564:	00c0eaff 	.word	0x00c0eaff

0800a568 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800a56c:	4b1b      	ldr	r3, [pc, #108]	; (800a5dc <MX_I2C3_Init+0x74>)
 800a56e:	4a1c      	ldr	r2, [pc, #112]	; (800a5e0 <MX_I2C3_Init+0x78>)
 800a570:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800a572:	4b1a      	ldr	r3, [pc, #104]	; (800a5dc <MX_I2C3_Init+0x74>)
 800a574:	4a1b      	ldr	r2, [pc, #108]	; (800a5e4 <MX_I2C3_Init+0x7c>)
 800a576:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800a578:	4b18      	ldr	r3, [pc, #96]	; (800a5dc <MX_I2C3_Init+0x74>)
 800a57a:	2200      	movs	r2, #0
 800a57c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a57e:	4b17      	ldr	r3, [pc, #92]	; (800a5dc <MX_I2C3_Init+0x74>)
 800a580:	2201      	movs	r2, #1
 800a582:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a584:	4b15      	ldr	r3, [pc, #84]	; (800a5dc <MX_I2C3_Init+0x74>)
 800a586:	2200      	movs	r2, #0
 800a588:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800a58a:	4b14      	ldr	r3, [pc, #80]	; (800a5dc <MX_I2C3_Init+0x74>)
 800a58c:	2200      	movs	r2, #0
 800a58e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a590:	4b12      	ldr	r3, [pc, #72]	; (800a5dc <MX_I2C3_Init+0x74>)
 800a592:	2200      	movs	r2, #0
 800a594:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a596:	4b11      	ldr	r3, [pc, #68]	; (800a5dc <MX_I2C3_Init+0x74>)
 800a598:	2200      	movs	r2, #0
 800a59a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a59c:	4b0f      	ldr	r3, [pc, #60]	; (800a5dc <MX_I2C3_Init+0x74>)
 800a59e:	2200      	movs	r2, #0
 800a5a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800a5a2:	480e      	ldr	r0, [pc, #56]	; (800a5dc <MX_I2C3_Init+0x74>)
 800a5a4:	f7f9 fabc 	bl	8003b20 <HAL_I2C_Init>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d001      	beq.n	800a5b2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800a5ae:	f001 f823 	bl	800b5f8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	4809      	ldr	r0, [pc, #36]	; (800a5dc <MX_I2C3_Init+0x74>)
 800a5b6:	f7f9 fb43 	bl	8003c40 <HAL_I2CEx_ConfigAnalogFilter>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d001      	beq.n	800a5c4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800a5c0:	f001 f81a 	bl	800b5f8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	4805      	ldr	r0, [pc, #20]	; (800a5dc <MX_I2C3_Init+0x74>)
 800a5c8:	f7f9 fb85 	bl	8003cd6 <HAL_I2CEx_ConfigDigitalFilter>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d001      	beq.n	800a5d6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800a5d2:	f001 f811 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800a5d6:	bf00      	nop
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	20000384 	.word	0x20000384
 800a5e0:	40005c00 	.word	0x40005c00
 800a5e4:	00c0eaff 	.word	0x00c0eaff

0800a5e8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b08e      	sub	sp, #56	; 0x38
 800a5ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800a5ee:	1d3b      	adds	r3, r7, #4
 800a5f0:	2234      	movs	r2, #52	; 0x34
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f002 f887 	bl	800c708 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800a5fa:	4b3a      	ldr	r3, [pc, #232]	; (800a6e4 <MX_LTDC_Init+0xfc>)
 800a5fc:	4a3a      	ldr	r2, [pc, #232]	; (800a6e8 <MX_LTDC_Init+0x100>)
 800a5fe:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800a600:	4b38      	ldr	r3, [pc, #224]	; (800a6e4 <MX_LTDC_Init+0xfc>)
 800a602:	2200      	movs	r2, #0
 800a604:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800a606:	4b37      	ldr	r3, [pc, #220]	; (800a6e4 <MX_LTDC_Init+0xfc>)
 800a608:	2200      	movs	r2, #0
 800a60a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800a60c:	4b35      	ldr	r3, [pc, #212]	; (800a6e4 <MX_LTDC_Init+0xfc>)
 800a60e:	2200      	movs	r2, #0
 800a610:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800a612:	4b34      	ldr	r3, [pc, #208]	; (800a6e4 <MX_LTDC_Init+0xfc>)
 800a614:	2200      	movs	r2, #0
 800a616:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800a618:	4b32      	ldr	r3, [pc, #200]	; (800a6e4 <MX_LTDC_Init+0xfc>)
 800a61a:	2228      	movs	r2, #40	; 0x28
 800a61c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800a61e:	4b31      	ldr	r3, [pc, #196]	; (800a6e4 <MX_LTDC_Init+0xfc>)
 800a620:	2209      	movs	r2, #9
 800a622:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800a624:	4b2f      	ldr	r3, [pc, #188]	; (800a6e4 <MX_LTDC_Init+0xfc>)
 800a626:	2235      	movs	r2, #53	; 0x35
 800a628:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800a62a:	4b2e      	ldr	r3, [pc, #184]	; (800a6e4 <MX_LTDC_Init+0xfc>)
 800a62c:	220b      	movs	r2, #11
 800a62e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800a630:	4b2c      	ldr	r3, [pc, #176]	; (800a6e4 <MX_LTDC_Init+0xfc>)
 800a632:	f240 2215 	movw	r2, #533	; 0x215
 800a636:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800a638:	4b2a      	ldr	r3, [pc, #168]	; (800a6e4 <MX_LTDC_Init+0xfc>)
 800a63a:	f240 121b 	movw	r2, #283	; 0x11b
 800a63e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800a640:	4b28      	ldr	r3, [pc, #160]	; (800a6e4 <MX_LTDC_Init+0xfc>)
 800a642:	f240 2235 	movw	r2, #565	; 0x235
 800a646:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800a648:	4b26      	ldr	r3, [pc, #152]	; (800a6e4 <MX_LTDC_Init+0xfc>)
 800a64a:	f240 121d 	movw	r2, #285	; 0x11d
 800a64e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800a650:	4b24      	ldr	r3, [pc, #144]	; (800a6e4 <MX_LTDC_Init+0xfc>)
 800a652:	2200      	movs	r2, #0
 800a654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800a658:	4b22      	ldr	r3, [pc, #136]	; (800a6e4 <MX_LTDC_Init+0xfc>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800a660:	4b20      	ldr	r3, [pc, #128]	; (800a6e4 <MX_LTDC_Init+0xfc>)
 800a662:	2200      	movs	r2, #0
 800a664:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800a668:	481e      	ldr	r0, [pc, #120]	; (800a6e4 <MX_LTDC_Init+0xfc>)
 800a66a:	f7f9 fb81 	bl	8003d70 <HAL_LTDC_Init>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d001      	beq.n	800a678 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800a674:	f000 ffc0 	bl	800b5f8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800a678:	2300      	movs	r3, #0
 800a67a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800a67c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800a680:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800a686:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a68a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800a68c:	2302      	movs	r3, #2
 800a68e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800a690:	23ff      	movs	r3, #255	; 0xff
 800a692:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800a694:	2300      	movs	r3, #0
 800a696:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800a698:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a69c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800a69e:	2307      	movs	r3, #7
 800a6a0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800a6a2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800a6a6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800a6a8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800a6ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800a6ae:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a6b2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800a6c6:	1d3b      	adds	r3, r7, #4
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	4805      	ldr	r0, [pc, #20]	; (800a6e4 <MX_LTDC_Init+0xfc>)
 800a6ce:	f7f9 fce1 	bl	8004094 <HAL_LTDC_ConfigLayer>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d001      	beq.n	800a6dc <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800a6d8:	f000 ff8e 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800a6dc:	bf00      	nop
 800a6de:	3738      	adds	r7, #56	; 0x38
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	200006b8 	.word	0x200006b8
 800a6e8:	40016800 	.word	0x40016800

0800a6ec <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800a6f0:	4b12      	ldr	r3, [pc, #72]	; (800a73c <MX_QUADSPI_Init+0x50>)
 800a6f2:	4a13      	ldr	r2, [pc, #76]	; (800a740 <MX_QUADSPI_Init+0x54>)
 800a6f4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800a6f6:	4b11      	ldr	r3, [pc, #68]	; (800a73c <MX_QUADSPI_Init+0x50>)
 800a6f8:	22ff      	movs	r2, #255	; 0xff
 800a6fa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800a6fc:	4b0f      	ldr	r3, [pc, #60]	; (800a73c <MX_QUADSPI_Init+0x50>)
 800a6fe:	2201      	movs	r2, #1
 800a700:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800a702:	4b0e      	ldr	r3, [pc, #56]	; (800a73c <MX_QUADSPI_Init+0x50>)
 800a704:	2200      	movs	r2, #0
 800a706:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800a708:	4b0c      	ldr	r3, [pc, #48]	; (800a73c <MX_QUADSPI_Init+0x50>)
 800a70a:	2201      	movs	r2, #1
 800a70c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800a70e:	4b0b      	ldr	r3, [pc, #44]	; (800a73c <MX_QUADSPI_Init+0x50>)
 800a710:	2200      	movs	r2, #0
 800a712:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800a714:	4b09      	ldr	r3, [pc, #36]	; (800a73c <MX_QUADSPI_Init+0x50>)
 800a716:	2200      	movs	r2, #0
 800a718:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800a71a:	4b08      	ldr	r3, [pc, #32]	; (800a73c <MX_QUADSPI_Init+0x50>)
 800a71c:	2200      	movs	r2, #0
 800a71e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800a720:	4b06      	ldr	r3, [pc, #24]	; (800a73c <MX_QUADSPI_Init+0x50>)
 800a722:	2200      	movs	r2, #0
 800a724:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800a726:	4805      	ldr	r0, [pc, #20]	; (800a73c <MX_QUADSPI_Init+0x50>)
 800a728:	f7f9 fefa 	bl	8004520 <HAL_QSPI_Init>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d001      	beq.n	800a736 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800a732:	f000 ff61 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800a736:	bf00      	nop
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	20000a30 	.word	0x20000a30
 800a740:	a0001000 	.word	0xa0001000

0800a744 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800a748:	4b06      	ldr	r3, [pc, #24]	; (800a764 <MX_RNG_Init+0x20>)
 800a74a:	4a07      	ldr	r2, [pc, #28]	; (800a768 <MX_RNG_Init+0x24>)
 800a74c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800a74e:	4805      	ldr	r0, [pc, #20]	; (800a764 <MX_RNG_Init+0x20>)
 800a750:	f7fb f948 	bl	80059e4 <HAL_RNG_Init>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d001      	beq.n	800a75e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800a75a:	f000 ff4d 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800a75e:	bf00      	nop
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	200008dc 	.word	0x200008dc
 800a768:	50060800 	.word	0x50060800

0800a76c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b092      	sub	sp, #72	; 0x48
 800a770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800a772:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a776:	2200      	movs	r2, #0
 800a778:	601a      	str	r2, [r3, #0]
 800a77a:	605a      	str	r2, [r3, #4]
 800a77c:	609a      	str	r2, [r3, #8]
 800a77e:	60da      	str	r2, [r3, #12]
 800a780:	611a      	str	r2, [r3, #16]
 800a782:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800a784:	2300      	movs	r3, #0
 800a786:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800a788:	463b      	mov	r3, r7
 800a78a:	222c      	movs	r2, #44	; 0x2c
 800a78c:	2100      	movs	r1, #0
 800a78e:	4618      	mov	r0, r3
 800a790:	f001 ffba 	bl	800c708 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800a794:	4b47      	ldr	r3, [pc, #284]	; (800a8b4 <MX_RTC_Init+0x148>)
 800a796:	4a48      	ldr	r2, [pc, #288]	; (800a8b8 <MX_RTC_Init+0x14c>)
 800a798:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a79a:	4b46      	ldr	r3, [pc, #280]	; (800a8b4 <MX_RTC_Init+0x148>)
 800a79c:	2200      	movs	r2, #0
 800a79e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a7a0:	4b44      	ldr	r3, [pc, #272]	; (800a8b4 <MX_RTC_Init+0x148>)
 800a7a2:	227f      	movs	r2, #127	; 0x7f
 800a7a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a7a6:	4b43      	ldr	r3, [pc, #268]	; (800a8b4 <MX_RTC_Init+0x148>)
 800a7a8:	22ff      	movs	r2, #255	; 0xff
 800a7aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a7ac:	4b41      	ldr	r3, [pc, #260]	; (800a8b4 <MX_RTC_Init+0x148>)
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a7b2:	4b40      	ldr	r3, [pc, #256]	; (800a8b4 <MX_RTC_Init+0x148>)
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a7b8:	4b3e      	ldr	r3, [pc, #248]	; (800a8b4 <MX_RTC_Init+0x148>)
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a7be:	483d      	ldr	r0, [pc, #244]	; (800a8b4 <MX_RTC_Init+0x148>)
 800a7c0:	f7fb f99e 	bl	8005b00 <HAL_RTC_Init>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d001      	beq.n	800a7ce <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800a7ca:	f000 ff15 	bl	800b5f8 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800a7e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	4830      	ldr	r0, [pc, #192]	; (800a8b4 <MX_RTC_Init+0x148>)
 800a7f2:	f7fb fa01 	bl	8005bf8 <HAL_RTC_SetTime>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d001      	beq.n	800a800 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800a7fc:	f000 fefc 	bl	800b5f8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800a800:	2301      	movs	r3, #1
 800a802:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800a806:	2301      	movs	r3, #1
 800a808:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 800a80c:	2301      	movs	r3, #1
 800a80e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800a812:	2300      	movs	r3, #0
 800a814:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800a818:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a81c:	2201      	movs	r2, #1
 800a81e:	4619      	mov	r1, r3
 800a820:	4824      	ldr	r0, [pc, #144]	; (800a8b4 <MX_RTC_Init+0x148>)
 800a822:	f7fb faa7 	bl	8005d74 <HAL_RTC_SetDate>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d001      	beq.n	800a830 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800a82c:	f000 fee4 	bl	800b5f8 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800a830:	2300      	movs	r3, #0
 800a832:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800a834:	2300      	movs	r3, #0
 800a836:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800a838:	2300      	movs	r3, #0
 800a83a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800a83c:	2300      	movs	r3, #0
 800a83e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a840:	2300      	movs	r3, #0
 800a842:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a844:	2300      	movs	r3, #0
 800a846:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800a848:	2300      	movs	r3, #0
 800a84a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800a84c:	2300      	movs	r3, #0
 800a84e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800a850:	2300      	movs	r3, #0
 800a852:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 800a854:	2301      	movs	r3, #1
 800a856:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800a85a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a85e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800a860:	463b      	mov	r3, r7
 800a862:	2201      	movs	r2, #1
 800a864:	4619      	mov	r1, r3
 800a866:	4813      	ldr	r0, [pc, #76]	; (800a8b4 <MX_RTC_Init+0x148>)
 800a868:	f7fb fb2c 	bl	8005ec4 <HAL_RTC_SetAlarm>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d001      	beq.n	800a876 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800a872:	f000 fec1 	bl	800b5f8 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 800a876:	2301      	movs	r3, #1
 800a878:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 800a87c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a880:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800a882:	463b      	mov	r3, r7
 800a884:	2201      	movs	r2, #1
 800a886:	4619      	mov	r1, r3
 800a888:	480a      	ldr	r0, [pc, #40]	; (800a8b4 <MX_RTC_Init+0x148>)
 800a88a:	f7fb fb1b 	bl	8005ec4 <HAL_RTC_SetAlarm>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d001      	beq.n	800a898 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 800a894:	f000 feb0 	bl	800b5f8 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800a898:	2202      	movs	r2, #2
 800a89a:	2100      	movs	r1, #0
 800a89c:	4805      	ldr	r0, [pc, #20]	; (800a8b4 <MX_RTC_Init+0x148>)
 800a89e:	f7fb fc9b 	bl	80061d8 <HAL_RTCEx_SetTimeStamp>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d001      	beq.n	800a8ac <MX_RTC_Init+0x140>
  {
    Error_Handler();
 800a8a8:	f000 fea6 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a8ac:	bf00      	nop
 800a8ae:	3748      	adds	r7, #72	; 0x48
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	2000087c 	.word	0x2000087c
 800a8b8:	40002800 	.word	0x40002800

0800a8bc <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800a8c0:	4b4d      	ldr	r3, [pc, #308]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a8c2:	4a4e      	ldr	r2, [pc, #312]	; (800a9fc <MX_SAI2_Init+0x140>)
 800a8c4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800a8c6:	4b4c      	ldr	r3, [pc, #304]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800a8cc:	4b4a      	ldr	r3, [pc, #296]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800a8d2:	4b49      	ldr	r3, [pc, #292]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a8d4:	2240      	movs	r2, #64	; 0x40
 800a8d6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800a8d8:	4b47      	ldr	r3, [pc, #284]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a8da:	2200      	movs	r2, #0
 800a8dc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a8de:	4b46      	ldr	r3, [pc, #280]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800a8e4:	4b44      	ldr	r3, [pc, #272]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800a8ea:	4b43      	ldr	r3, [pc, #268]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800a8f0:	4b41      	ldr	r3, [pc, #260]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800a8f6:	4b40      	ldr	r3, [pc, #256]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800a8fc:	4b3e      	ldr	r3, [pc, #248]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a8fe:	4a40      	ldr	r2, [pc, #256]	; (800aa00 <MX_SAI2_Init+0x144>)
 800a900:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800a902:	4b3d      	ldr	r3, [pc, #244]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a904:	2200      	movs	r2, #0
 800a906:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800a908:	4b3b      	ldr	r3, [pc, #236]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a90a:	2200      	movs	r2, #0
 800a90c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800a90e:	4b3a      	ldr	r3, [pc, #232]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a910:	2200      	movs	r2, #0
 800a912:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800a914:	4b38      	ldr	r3, [pc, #224]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a916:	2200      	movs	r2, #0
 800a918:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800a91a:	4b37      	ldr	r3, [pc, #220]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a91c:	2208      	movs	r2, #8
 800a91e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800a920:	4b35      	ldr	r3, [pc, #212]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a922:	2201      	movs	r2, #1
 800a924:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800a926:	4b34      	ldr	r3, [pc, #208]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a928:	2200      	movs	r2, #0
 800a92a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a92c:	4b32      	ldr	r3, [pc, #200]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a92e:	2200      	movs	r2, #0
 800a930:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800a932:	4b31      	ldr	r3, [pc, #196]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a934:	2200      	movs	r2, #0
 800a936:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800a938:	4b2f      	ldr	r3, [pc, #188]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a93a:	2200      	movs	r2, #0
 800a93c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800a93e:	4b2e      	ldr	r3, [pc, #184]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a940:	2200      	movs	r2, #0
 800a942:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800a944:	4b2c      	ldr	r3, [pc, #176]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a946:	2201      	movs	r2, #1
 800a948:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800a94a:	4b2b      	ldr	r3, [pc, #172]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a94c:	2200      	movs	r2, #0
 800a94e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800a950:	4829      	ldr	r0, [pc, #164]	; (800a9f8 <MX_SAI2_Init+0x13c>)
 800a952:	f7fb fc97 	bl	8006284 <HAL_SAI_Init>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d001      	beq.n	800a960 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 800a95c:	f000 fe4c 	bl	800b5f8 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800a960:	4b28      	ldr	r3, [pc, #160]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a962:	4a29      	ldr	r2, [pc, #164]	; (800aa08 <MX_SAI2_Init+0x14c>)
 800a964:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800a966:	4b27      	ldr	r3, [pc, #156]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a968:	2200      	movs	r2, #0
 800a96a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800a96c:	4b25      	ldr	r3, [pc, #148]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a96e:	2203      	movs	r2, #3
 800a970:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800a972:	4b24      	ldr	r3, [pc, #144]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a974:	2240      	movs	r2, #64	; 0x40
 800a976:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800a978:	4b22      	ldr	r3, [pc, #136]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a97a:	2200      	movs	r2, #0
 800a97c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a97e:	4b21      	ldr	r3, [pc, #132]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a980:	2200      	movs	r2, #0
 800a982:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800a984:	4b1f      	ldr	r3, [pc, #124]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a986:	2201      	movs	r2, #1
 800a988:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800a98a:	4b1e      	ldr	r3, [pc, #120]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a98c:	2200      	movs	r2, #0
 800a98e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800a990:	4b1c      	ldr	r3, [pc, #112]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a992:	2200      	movs	r2, #0
 800a994:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800a996:	4b1b      	ldr	r3, [pc, #108]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a998:	2200      	movs	r2, #0
 800a99a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800a99c:	4b19      	ldr	r3, [pc, #100]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a99e:	2200      	movs	r2, #0
 800a9a0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800a9a2:	4b18      	ldr	r3, [pc, #96]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800a9a8:	4b16      	ldr	r3, [pc, #88]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800a9ae:	4b15      	ldr	r3, [pc, #84]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a9b0:	2208      	movs	r2, #8
 800a9b2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800a9b4:	4b13      	ldr	r3, [pc, #76]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800a9ba:	4b12      	ldr	r3, [pc, #72]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a9c0:	4b10      	ldr	r3, [pc, #64]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800a9c6:	4b0f      	ldr	r3, [pc, #60]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800a9cc:	4b0d      	ldr	r3, [pc, #52]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800a9d2:	4b0c      	ldr	r3, [pc, #48]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800a9d8:	4b0a      	ldr	r3, [pc, #40]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a9da:	2201      	movs	r2, #1
 800a9dc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800a9de:	4b09      	ldr	r3, [pc, #36]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800a9e4:	4807      	ldr	r0, [pc, #28]	; (800aa04 <MX_SAI2_Init+0x148>)
 800a9e6:	f7fb fc4d 	bl	8006284 <HAL_SAI_Init>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d001      	beq.n	800a9f4 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 800a9f0:	f000 fe02 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800a9f4:	bf00      	nop
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	200004c0 	.word	0x200004c0
 800a9fc:	40015c04 	.word	0x40015c04
 800aa00:	0002ee00 	.word	0x0002ee00
 800aa04:	200002fc 	.word	0x200002fc
 800aa08:	40015c24 	.word	0x40015c24

0800aa0c <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 800aa10:	4b15      	ldr	r3, [pc, #84]	; (800aa68 <MX_SPDIFRX_Init+0x5c>)
 800aa12:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800aa16:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800aa18:	4b13      	ldr	r3, [pc, #76]	; (800aa68 <MX_SPDIFRX_Init+0x5c>)
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800aa1e:	4b12      	ldr	r3, [pc, #72]	; (800aa68 <MX_SPDIFRX_Init+0x5c>)
 800aa20:	2200      	movs	r2, #0
 800aa22:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800aa24:	4b10      	ldr	r3, [pc, #64]	; (800aa68 <MX_SPDIFRX_Init+0x5c>)
 800aa26:	2200      	movs	r2, #0
 800aa28:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800aa2a:	4b0f      	ldr	r3, [pc, #60]	; (800aa68 <MX_SPDIFRX_Init+0x5c>)
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 800aa30:	4b0d      	ldr	r3, [pc, #52]	; (800aa68 <MX_SPDIFRX_Init+0x5c>)
 800aa32:	2200      	movs	r2, #0
 800aa34:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800aa36:	4b0c      	ldr	r3, [pc, #48]	; (800aa68 <MX_SPDIFRX_Init+0x5c>)
 800aa38:	2200      	movs	r2, #0
 800aa3a:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 800aa3c:	4b0a      	ldr	r3, [pc, #40]	; (800aa68 <MX_SPDIFRX_Init+0x5c>)
 800aa3e:	2200      	movs	r2, #0
 800aa40:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800aa42:	4b09      	ldr	r3, [pc, #36]	; (800aa68 <MX_SPDIFRX_Init+0x5c>)
 800aa44:	2200      	movs	r2, #0
 800aa46:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800aa48:	4b07      	ldr	r3, [pc, #28]	; (800aa68 <MX_SPDIFRX_Init+0x5c>)
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800aa4e:	4b06      	ldr	r3, [pc, #24]	; (800aa68 <MX_SPDIFRX_Init+0x5c>)
 800aa50:	2200      	movs	r2, #0
 800aa52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800aa54:	4804      	ldr	r0, [pc, #16]	; (800aa68 <MX_SPDIFRX_Init+0x5c>)
 800aa56:	f7fb fe3d 	bl	80066d4 <HAL_SPDIFRX_Init>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d001      	beq.n	800aa64 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 800aa60:	f000 fdca 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800aa64:	bf00      	nop
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	20000474 	.word	0x20000474

0800aa6c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800aa70:	4b1b      	ldr	r3, [pc, #108]	; (800aae0 <MX_SPI2_Init+0x74>)
 800aa72:	4a1c      	ldr	r2, [pc, #112]	; (800aae4 <MX_SPI2_Init+0x78>)
 800aa74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800aa76:	4b1a      	ldr	r3, [pc, #104]	; (800aae0 <MX_SPI2_Init+0x74>)
 800aa78:	f44f 7282 	mov.w	r2, #260	; 0x104
 800aa7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800aa7e:	4b18      	ldr	r3, [pc, #96]	; (800aae0 <MX_SPI2_Init+0x74>)
 800aa80:	2200      	movs	r2, #0
 800aa82:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800aa84:	4b16      	ldr	r3, [pc, #88]	; (800aae0 <MX_SPI2_Init+0x74>)
 800aa86:	f44f 7240 	mov.w	r2, #768	; 0x300
 800aa8a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800aa8c:	4b14      	ldr	r3, [pc, #80]	; (800aae0 <MX_SPI2_Init+0x74>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800aa92:	4b13      	ldr	r3, [pc, #76]	; (800aae0 <MX_SPI2_Init+0x74>)
 800aa94:	2200      	movs	r2, #0
 800aa96:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800aa98:	4b11      	ldr	r3, [pc, #68]	; (800aae0 <MX_SPI2_Init+0x74>)
 800aa9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa9e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aaa0:	4b0f      	ldr	r3, [pc, #60]	; (800aae0 <MX_SPI2_Init+0x74>)
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800aaa6:	4b0e      	ldr	r3, [pc, #56]	; (800aae0 <MX_SPI2_Init+0x74>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800aaac:	4b0c      	ldr	r3, [pc, #48]	; (800aae0 <MX_SPI2_Init+0x74>)
 800aaae:	2200      	movs	r2, #0
 800aab0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aab2:	4b0b      	ldr	r3, [pc, #44]	; (800aae0 <MX_SPI2_Init+0x74>)
 800aab4:	2200      	movs	r2, #0
 800aab6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800aab8:	4b09      	ldr	r3, [pc, #36]	; (800aae0 <MX_SPI2_Init+0x74>)
 800aaba:	2207      	movs	r2, #7
 800aabc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800aabe:	4b08      	ldr	r3, [pc, #32]	; (800aae0 <MX_SPI2_Init+0x74>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800aac4:	4b06      	ldr	r3, [pc, #24]	; (800aae0 <MX_SPI2_Init+0x74>)
 800aac6:	2208      	movs	r2, #8
 800aac8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800aaca:	4805      	ldr	r0, [pc, #20]	; (800aae0 <MX_SPI2_Init+0x74>)
 800aacc:	f7fb fe5e 	bl	800678c <HAL_SPI_Init>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d001      	beq.n	800aada <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800aad6:	f000 fd8f 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800aada:	bf00      	nop
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	200003d0 	.word	0x200003d0
 800aae4:	40003800 	.word	0x40003800

0800aae8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b09a      	sub	sp, #104	; 0x68
 800aaec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800aaee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	601a      	str	r2, [r3, #0]
 800aaf6:	605a      	str	r2, [r3, #4]
 800aaf8:	609a      	str	r2, [r3, #8]
 800aafa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aafc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ab00:	2200      	movs	r2, #0
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	605a      	str	r2, [r3, #4]
 800ab06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ab08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	601a      	str	r2, [r3, #0]
 800ab10:	605a      	str	r2, [r3, #4]
 800ab12:	609a      	str	r2, [r3, #8]
 800ab14:	60da      	str	r2, [r3, #12]
 800ab16:	611a      	str	r2, [r3, #16]
 800ab18:	615a      	str	r2, [r3, #20]
 800ab1a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800ab1c:	1d3b      	adds	r3, r7, #4
 800ab1e:	222c      	movs	r2, #44	; 0x2c
 800ab20:	2100      	movs	r1, #0
 800ab22:	4618      	mov	r0, r3
 800ab24:	f001 fdf0 	bl	800c708 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800ab28:	4b43      	ldr	r3, [pc, #268]	; (800ac38 <MX_TIM1_Init+0x150>)
 800ab2a:	4a44      	ldr	r2, [pc, #272]	; (800ac3c <MX_TIM1_Init+0x154>)
 800ab2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800ab2e:	4b42      	ldr	r3, [pc, #264]	; (800ac38 <MX_TIM1_Init+0x150>)
 800ab30:	2200      	movs	r2, #0
 800ab32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ab34:	4b40      	ldr	r3, [pc, #256]	; (800ac38 <MX_TIM1_Init+0x150>)
 800ab36:	2200      	movs	r2, #0
 800ab38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800ab3a:	4b3f      	ldr	r3, [pc, #252]	; (800ac38 <MX_TIM1_Init+0x150>)
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ab40:	4b3d      	ldr	r3, [pc, #244]	; (800ac38 <MX_TIM1_Init+0x150>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800ab46:	4b3c      	ldr	r3, [pc, #240]	; (800ac38 <MX_TIM1_Init+0x150>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ab4c:	4b3a      	ldr	r3, [pc, #232]	; (800ac38 <MX_TIM1_Init+0x150>)
 800ab4e:	2200      	movs	r2, #0
 800ab50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800ab52:	4839      	ldr	r0, [pc, #228]	; (800ac38 <MX_TIM1_Init+0x150>)
 800ab54:	f7fb feac 	bl	80068b0 <HAL_TIM_Base_Init>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d001      	beq.n	800ab62 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800ab5e:	f000 fd4b 	bl	800b5f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ab62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab66:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800ab68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	4832      	ldr	r0, [pc, #200]	; (800ac38 <MX_TIM1_Init+0x150>)
 800ab70:	f7fc f956 	bl	8006e20 <HAL_TIM_ConfigClockSource>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d001      	beq.n	800ab7e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800ab7a:	f000 fd3d 	bl	800b5f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800ab7e:	482e      	ldr	r0, [pc, #184]	; (800ac38 <MX_TIM1_Init+0x150>)
 800ab80:	f7fb feec 	bl	800695c <HAL_TIM_PWM_Init>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d001      	beq.n	800ab8e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800ab8a:	f000 fd35 	bl	800b5f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800ab92:	2300      	movs	r3, #0
 800ab94:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ab96:	2300      	movs	r3, #0
 800ab98:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800ab9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ab9e:	4619      	mov	r1, r3
 800aba0:	4825      	ldr	r0, [pc, #148]	; (800ac38 <MX_TIM1_Init+0x150>)
 800aba2:	f7fc fdb7 	bl	8007714 <HAL_TIMEx_MasterConfigSynchronization>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d001      	beq.n	800abb0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800abac:	f000 fd24 	bl	800b5f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800abb0:	2360      	movs	r3, #96	; 0x60
 800abb2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800abb4:	2300      	movs	r3, #0
 800abb6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800abb8:	2300      	movs	r3, #0
 800abba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800abbc:	2300      	movs	r3, #0
 800abbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800abc0:	2300      	movs	r3, #0
 800abc2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800abc4:	2300      	movs	r3, #0
 800abc6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800abc8:	2300      	movs	r3, #0
 800abca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800abcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800abd0:	2200      	movs	r2, #0
 800abd2:	4619      	mov	r1, r3
 800abd4:	4818      	ldr	r0, [pc, #96]	; (800ac38 <MX_TIM1_Init+0x150>)
 800abd6:	f7fc f80b 	bl	8006bf0 <HAL_TIM_PWM_ConfigChannel>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d001      	beq.n	800abe4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800abe0:	f000 fd0a 	bl	800b5f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800abe4:	2300      	movs	r3, #0
 800abe6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800abe8:	2300      	movs	r3, #0
 800abea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800abec:	2300      	movs	r3, #0
 800abee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800abf4:	2300      	movs	r3, #0
 800abf6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800abf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800abfc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800abfe:	2300      	movs	r3, #0
 800ac00:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800ac02:	2300      	movs	r3, #0
 800ac04:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800ac06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ac0a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800ac10:	2300      	movs	r3, #0
 800ac12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800ac14:	1d3b      	adds	r3, r7, #4
 800ac16:	4619      	mov	r1, r3
 800ac18:	4807      	ldr	r0, [pc, #28]	; (800ac38 <MX_TIM1_Init+0x150>)
 800ac1a:	f7fc fdd7 	bl	80077cc <HAL_TIMEx_ConfigBreakDeadTime>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d001      	beq.n	800ac28 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800ac24:	f000 fce8 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800ac28:	4803      	ldr	r0, [pc, #12]	; (800ac38 <MX_TIM1_Init+0x150>)
 800ac2a:	f001 f873 	bl	800bd14 <HAL_TIM_MspPostInit>

}
 800ac2e:	bf00      	nop
 800ac30:	3768      	adds	r7, #104	; 0x68
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	2000089c 	.word	0x2000089c
 800ac3c:	40010000 	.word	0x40010000

0800ac40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b08e      	sub	sp, #56	; 0x38
 800ac44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ac46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	601a      	str	r2, [r3, #0]
 800ac4e:	605a      	str	r2, [r3, #4]
 800ac50:	609a      	str	r2, [r3, #8]
 800ac52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ac54:	f107 031c 	add.w	r3, r7, #28
 800ac58:	2200      	movs	r2, #0
 800ac5a:	601a      	str	r2, [r3, #0]
 800ac5c:	605a      	str	r2, [r3, #4]
 800ac5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ac60:	463b      	mov	r3, r7
 800ac62:	2200      	movs	r2, #0
 800ac64:	601a      	str	r2, [r3, #0]
 800ac66:	605a      	str	r2, [r3, #4]
 800ac68:	609a      	str	r2, [r3, #8]
 800ac6a:	60da      	str	r2, [r3, #12]
 800ac6c:	611a      	str	r2, [r3, #16]
 800ac6e:	615a      	str	r2, [r3, #20]
 800ac70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800ac72:	4b2d      	ldr	r3, [pc, #180]	; (800ad28 <MX_TIM2_Init+0xe8>)
 800ac74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ac78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800ac7a:	4b2b      	ldr	r3, [pc, #172]	; (800ad28 <MX_TIM2_Init+0xe8>)
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac80:	4b29      	ldr	r3, [pc, #164]	; (800ad28 <MX_TIM2_Init+0xe8>)
 800ac82:	2200      	movs	r2, #0
 800ac84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800ac86:	4b28      	ldr	r3, [pc, #160]	; (800ad28 <MX_TIM2_Init+0xe8>)
 800ac88:	2200      	movs	r2, #0
 800ac8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ac8c:	4b26      	ldr	r3, [pc, #152]	; (800ad28 <MX_TIM2_Init+0xe8>)
 800ac8e:	2200      	movs	r2, #0
 800ac90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac92:	4b25      	ldr	r3, [pc, #148]	; (800ad28 <MX_TIM2_Init+0xe8>)
 800ac94:	2200      	movs	r2, #0
 800ac96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800ac98:	4823      	ldr	r0, [pc, #140]	; (800ad28 <MX_TIM2_Init+0xe8>)
 800ac9a:	f7fb fe09 	bl	80068b0 <HAL_TIM_Base_Init>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d001      	beq.n	800aca8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800aca4:	f000 fca8 	bl	800b5f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800aca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800acae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800acb2:	4619      	mov	r1, r3
 800acb4:	481c      	ldr	r0, [pc, #112]	; (800ad28 <MX_TIM2_Init+0xe8>)
 800acb6:	f7fc f8b3 	bl	8006e20 <HAL_TIM_ConfigClockSource>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d001      	beq.n	800acc4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800acc0:	f000 fc9a 	bl	800b5f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800acc4:	4818      	ldr	r0, [pc, #96]	; (800ad28 <MX_TIM2_Init+0xe8>)
 800acc6:	f7fb fe49 	bl	800695c <HAL_TIM_PWM_Init>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d001      	beq.n	800acd4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800acd0:	f000 fc92 	bl	800b5f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800acd4:	2300      	movs	r3, #0
 800acd6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800acd8:	2300      	movs	r3, #0
 800acda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800acdc:	f107 031c 	add.w	r3, r7, #28
 800ace0:	4619      	mov	r1, r3
 800ace2:	4811      	ldr	r0, [pc, #68]	; (800ad28 <MX_TIM2_Init+0xe8>)
 800ace4:	f7fc fd16 	bl	8007714 <HAL_TIMEx_MasterConfigSynchronization>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d001      	beq.n	800acf2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800acee:	f000 fc83 	bl	800b5f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800acf2:	2360      	movs	r3, #96	; 0x60
 800acf4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800acfa:	2300      	movs	r3, #0
 800acfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800acfe:	2300      	movs	r3, #0
 800ad00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ad02:	463b      	mov	r3, r7
 800ad04:	2200      	movs	r2, #0
 800ad06:	4619      	mov	r1, r3
 800ad08:	4807      	ldr	r0, [pc, #28]	; (800ad28 <MX_TIM2_Init+0xe8>)
 800ad0a:	f7fb ff71 	bl	8006bf0 <HAL_TIM_PWM_ConfigChannel>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d001      	beq.n	800ad18 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800ad14:	f000 fc70 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800ad18:	4803      	ldr	r0, [pc, #12]	; (800ad28 <MX_TIM2_Init+0xe8>)
 800ad1a:	f000 fffb 	bl	800bd14 <HAL_TIM_MspPostInit>

}
 800ad1e:	bf00      	nop
 800ad20:	3738      	adds	r7, #56	; 0x38
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	2000092c 	.word	0x2000092c

0800ad2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b088      	sub	sp, #32
 800ad30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ad32:	f107 0310 	add.w	r3, r7, #16
 800ad36:	2200      	movs	r2, #0
 800ad38:	601a      	str	r2, [r3, #0]
 800ad3a:	605a      	str	r2, [r3, #4]
 800ad3c:	609a      	str	r2, [r3, #8]
 800ad3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ad40:	1d3b      	adds	r3, r7, #4
 800ad42:	2200      	movs	r2, #0
 800ad44:	601a      	str	r2, [r3, #0]
 800ad46:	605a      	str	r2, [r3, #4]
 800ad48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800ad4a:	4b1d      	ldr	r3, [pc, #116]	; (800adc0 <MX_TIM3_Init+0x94>)
 800ad4c:	4a1d      	ldr	r2, [pc, #116]	; (800adc4 <MX_TIM3_Init+0x98>)
 800ad4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800ad50:	4b1b      	ldr	r3, [pc, #108]	; (800adc0 <MX_TIM3_Init+0x94>)
 800ad52:	2200      	movs	r2, #0
 800ad54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ad56:	4b1a      	ldr	r3, [pc, #104]	; (800adc0 <MX_TIM3_Init+0x94>)
 800ad58:	2200      	movs	r2, #0
 800ad5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800ad5c:	4b18      	ldr	r3, [pc, #96]	; (800adc0 <MX_TIM3_Init+0x94>)
 800ad5e:	2200      	movs	r2, #0
 800ad60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ad62:	4b17      	ldr	r3, [pc, #92]	; (800adc0 <MX_TIM3_Init+0x94>)
 800ad64:	2200      	movs	r2, #0
 800ad66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ad68:	4b15      	ldr	r3, [pc, #84]	; (800adc0 <MX_TIM3_Init+0x94>)
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800ad6e:	4814      	ldr	r0, [pc, #80]	; (800adc0 <MX_TIM3_Init+0x94>)
 800ad70:	f7fb fd9e 	bl	80068b0 <HAL_TIM_Base_Init>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d001      	beq.n	800ad7e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800ad7a:	f000 fc3d 	bl	800b5f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ad7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800ad84:	f107 0310 	add.w	r3, r7, #16
 800ad88:	4619      	mov	r1, r3
 800ad8a:	480d      	ldr	r0, [pc, #52]	; (800adc0 <MX_TIM3_Init+0x94>)
 800ad8c:	f7fc f848 	bl	8006e20 <HAL_TIM_ConfigClockSource>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d001      	beq.n	800ad9a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800ad96:	f000 fc2f 	bl	800b5f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ada2:	1d3b      	adds	r3, r7, #4
 800ada4:	4619      	mov	r1, r3
 800ada6:	4806      	ldr	r0, [pc, #24]	; (800adc0 <MX_TIM3_Init+0x94>)
 800ada8:	f7fc fcb4 	bl	8007714 <HAL_TIMEx_MasterConfigSynchronization>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d001      	beq.n	800adb6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800adb2:	f000 fc21 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800adb6:	bf00      	nop
 800adb8:	3720      	adds	r7, #32
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	20000678 	.word	0x20000678
 800adc4:	40000400 	.word	0x40000400

0800adc8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b08e      	sub	sp, #56	; 0x38
 800adcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800adce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800add2:	2200      	movs	r2, #0
 800add4:	601a      	str	r2, [r3, #0]
 800add6:	605a      	str	r2, [r3, #4]
 800add8:	609a      	str	r2, [r3, #8]
 800adda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800addc:	f107 031c 	add.w	r3, r7, #28
 800ade0:	2200      	movs	r2, #0
 800ade2:	601a      	str	r2, [r3, #0]
 800ade4:	605a      	str	r2, [r3, #4]
 800ade6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ade8:	463b      	mov	r3, r7
 800adea:	2200      	movs	r2, #0
 800adec:	601a      	str	r2, [r3, #0]
 800adee:	605a      	str	r2, [r3, #4]
 800adf0:	609a      	str	r2, [r3, #8]
 800adf2:	60da      	str	r2, [r3, #12]
 800adf4:	611a      	str	r2, [r3, #16]
 800adf6:	615a      	str	r2, [r3, #20]
 800adf8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800adfa:	4b2c      	ldr	r3, [pc, #176]	; (800aeac <MX_TIM5_Init+0xe4>)
 800adfc:	4a2c      	ldr	r2, [pc, #176]	; (800aeb0 <MX_TIM5_Init+0xe8>)
 800adfe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800ae00:	4b2a      	ldr	r3, [pc, #168]	; (800aeac <MX_TIM5_Init+0xe4>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ae06:	4b29      	ldr	r3, [pc, #164]	; (800aeac <MX_TIM5_Init+0xe4>)
 800ae08:	2200      	movs	r2, #0
 800ae0a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 800ae0c:	4b27      	ldr	r3, [pc, #156]	; (800aeac <MX_TIM5_Init+0xe4>)
 800ae0e:	2200      	movs	r2, #0
 800ae10:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ae12:	4b26      	ldr	r3, [pc, #152]	; (800aeac <MX_TIM5_Init+0xe4>)
 800ae14:	2200      	movs	r2, #0
 800ae16:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ae18:	4b24      	ldr	r3, [pc, #144]	; (800aeac <MX_TIM5_Init+0xe4>)
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800ae1e:	4823      	ldr	r0, [pc, #140]	; (800aeac <MX_TIM5_Init+0xe4>)
 800ae20:	f7fb fd46 	bl	80068b0 <HAL_TIM_Base_Init>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d001      	beq.n	800ae2e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800ae2a:	f000 fbe5 	bl	800b5f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ae2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae32:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800ae34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ae38:	4619      	mov	r1, r3
 800ae3a:	481c      	ldr	r0, [pc, #112]	; (800aeac <MX_TIM5_Init+0xe4>)
 800ae3c:	f7fb fff0 	bl	8006e20 <HAL_TIM_ConfigClockSource>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d001      	beq.n	800ae4a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800ae46:	f000 fbd7 	bl	800b5f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800ae4a:	4818      	ldr	r0, [pc, #96]	; (800aeac <MX_TIM5_Init+0xe4>)
 800ae4c:	f7fb fd86 	bl	800695c <HAL_TIM_PWM_Init>
 800ae50:	4603      	mov	r3, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d001      	beq.n	800ae5a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800ae56:	f000 fbcf 	bl	800b5f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800ae62:	f107 031c 	add.w	r3, r7, #28
 800ae66:	4619      	mov	r1, r3
 800ae68:	4810      	ldr	r0, [pc, #64]	; (800aeac <MX_TIM5_Init+0xe4>)
 800ae6a:	f7fc fc53 	bl	8007714 <HAL_TIMEx_MasterConfigSynchronization>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d001      	beq.n	800ae78 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800ae74:	f000 fbc0 	bl	800b5f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ae78:	2360      	movs	r3, #96	; 0x60
 800ae7a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ae80:	2300      	movs	r3, #0
 800ae82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ae84:	2300      	movs	r3, #0
 800ae86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800ae88:	463b      	mov	r3, r7
 800ae8a:	220c      	movs	r2, #12
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	4807      	ldr	r0, [pc, #28]	; (800aeac <MX_TIM5_Init+0xe4>)
 800ae90:	f7fb feae 	bl	8006bf0 <HAL_TIM_PWM_ConfigChannel>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d001      	beq.n	800ae9e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800ae9a:	f000 fbad 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800ae9e:	4803      	ldr	r0, [pc, #12]	; (800aeac <MX_TIM5_Init+0xe4>)
 800aea0:	f000 ff38 	bl	800bd14 <HAL_TIM_MspPostInit>

}
 800aea4:	bf00      	nop
 800aea6:	3738      	adds	r7, #56	; 0x38
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	20000638 	.word	0x20000638
 800aeb0:	40000c00 	.word	0x40000c00

0800aeb4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b088      	sub	sp, #32
 800aeb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800aeba:	f107 0310 	add.w	r3, r7, #16
 800aebe:	2200      	movs	r2, #0
 800aec0:	601a      	str	r2, [r3, #0]
 800aec2:	605a      	str	r2, [r3, #4]
 800aec4:	609a      	str	r2, [r3, #8]
 800aec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aec8:	1d3b      	adds	r3, r7, #4
 800aeca:	2200      	movs	r2, #0
 800aecc:	601a      	str	r2, [r3, #0]
 800aece:	605a      	str	r2, [r3, #4]
 800aed0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800aed2:	4b1f      	ldr	r3, [pc, #124]	; (800af50 <MX_TIM8_Init+0x9c>)
 800aed4:	4a1f      	ldr	r2, [pc, #124]	; (800af54 <MX_TIM8_Init+0xa0>)
 800aed6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800aed8:	4b1d      	ldr	r3, [pc, #116]	; (800af50 <MX_TIM8_Init+0x9c>)
 800aeda:	2200      	movs	r2, #0
 800aedc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aede:	4b1c      	ldr	r3, [pc, #112]	; (800af50 <MX_TIM8_Init+0x9c>)
 800aee0:	2200      	movs	r2, #0
 800aee2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 800aee4:	4b1a      	ldr	r3, [pc, #104]	; (800af50 <MX_TIM8_Init+0x9c>)
 800aee6:	2200      	movs	r2, #0
 800aee8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aeea:	4b19      	ldr	r3, [pc, #100]	; (800af50 <MX_TIM8_Init+0x9c>)
 800aeec:	2200      	movs	r2, #0
 800aeee:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800aef0:	4b17      	ldr	r3, [pc, #92]	; (800af50 <MX_TIM8_Init+0x9c>)
 800aef2:	2200      	movs	r2, #0
 800aef4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aef6:	4b16      	ldr	r3, [pc, #88]	; (800af50 <MX_TIM8_Init+0x9c>)
 800aef8:	2200      	movs	r2, #0
 800aefa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800aefc:	4814      	ldr	r0, [pc, #80]	; (800af50 <MX_TIM8_Init+0x9c>)
 800aefe:	f7fb fcd7 	bl	80068b0 <HAL_TIM_Base_Init>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d001      	beq.n	800af0c <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800af08:	f000 fb76 	bl	800b5f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800af0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800af12:	f107 0310 	add.w	r3, r7, #16
 800af16:	4619      	mov	r1, r3
 800af18:	480d      	ldr	r0, [pc, #52]	; (800af50 <MX_TIM8_Init+0x9c>)
 800af1a:	f7fb ff81 	bl	8006e20 <HAL_TIM_ConfigClockSource>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d001      	beq.n	800af28 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 800af24:	f000 fb68 	bl	800b5f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800af28:	2300      	movs	r3, #0
 800af2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800af2c:	2300      	movs	r3, #0
 800af2e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800af30:	2300      	movs	r3, #0
 800af32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800af34:	1d3b      	adds	r3, r7, #4
 800af36:	4619      	mov	r1, r3
 800af38:	4805      	ldr	r0, [pc, #20]	; (800af50 <MX_TIM8_Init+0x9c>)
 800af3a:	f7fc fbeb 	bl	8007714 <HAL_TIMEx_MasterConfigSynchronization>
 800af3e:	4603      	mov	r3, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d001      	beq.n	800af48 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800af44:	f000 fb58 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800af48:	bf00      	nop
 800af4a:	3720      	adds	r7, #32
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	20000434 	.word	0x20000434
 800af54:	40010400 	.word	0x40010400

0800af58 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b088      	sub	sp, #32
 800af5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800af5e:	1d3b      	adds	r3, r7, #4
 800af60:	2200      	movs	r2, #0
 800af62:	601a      	str	r2, [r3, #0]
 800af64:	605a      	str	r2, [r3, #4]
 800af66:	609a      	str	r2, [r3, #8]
 800af68:	60da      	str	r2, [r3, #12]
 800af6a:	611a      	str	r2, [r3, #16]
 800af6c:	615a      	str	r2, [r3, #20]
 800af6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800af70:	4b19      	ldr	r3, [pc, #100]	; (800afd8 <MX_TIM12_Init+0x80>)
 800af72:	4a1a      	ldr	r2, [pc, #104]	; (800afdc <MX_TIM12_Init+0x84>)
 800af74:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800af76:	4b18      	ldr	r3, [pc, #96]	; (800afd8 <MX_TIM12_Init+0x80>)
 800af78:	2200      	movs	r2, #0
 800af7a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af7c:	4b16      	ldr	r3, [pc, #88]	; (800afd8 <MX_TIM12_Init+0x80>)
 800af7e:	2200      	movs	r2, #0
 800af80:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 800af82:	4b15      	ldr	r3, [pc, #84]	; (800afd8 <MX_TIM12_Init+0x80>)
 800af84:	2200      	movs	r2, #0
 800af86:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800af88:	4b13      	ldr	r3, [pc, #76]	; (800afd8 <MX_TIM12_Init+0x80>)
 800af8a:	2200      	movs	r2, #0
 800af8c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800af8e:	4b12      	ldr	r3, [pc, #72]	; (800afd8 <MX_TIM12_Init+0x80>)
 800af90:	2200      	movs	r2, #0
 800af92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800af94:	4810      	ldr	r0, [pc, #64]	; (800afd8 <MX_TIM12_Init+0x80>)
 800af96:	f7fb fce1 	bl	800695c <HAL_TIM_PWM_Init>
 800af9a:	4603      	mov	r3, r0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d001      	beq.n	800afa4 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 800afa0:	f000 fb2a 	bl	800b5f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800afa4:	2360      	movs	r3, #96	; 0x60
 800afa6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800afa8:	2300      	movs	r3, #0
 800afaa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800afac:	2300      	movs	r3, #0
 800afae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800afb0:	2300      	movs	r3, #0
 800afb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800afb4:	1d3b      	adds	r3, r7, #4
 800afb6:	2200      	movs	r2, #0
 800afb8:	4619      	mov	r1, r3
 800afba:	4807      	ldr	r0, [pc, #28]	; (800afd8 <MX_TIM12_Init+0x80>)
 800afbc:	f7fb fe18 	bl	8006bf0 <HAL_TIM_PWM_ConfigChannel>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d001      	beq.n	800afca <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 800afc6:	f000 fb17 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800afca:	4803      	ldr	r0, [pc, #12]	; (800afd8 <MX_TIM12_Init+0x80>)
 800afcc:	f000 fea2 	bl	800bd14 <HAL_TIM_MspPostInit>

}
 800afd0:	bf00      	nop
 800afd2:	3720      	adds	r7, #32
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	20000970 	.word	0x20000970
 800afdc:	40001800 	.word	0x40001800

0800afe0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800afe4:	4b14      	ldr	r3, [pc, #80]	; (800b038 <MX_USART1_UART_Init+0x58>)
 800afe6:	4a15      	ldr	r2, [pc, #84]	; (800b03c <MX_USART1_UART_Init+0x5c>)
 800afe8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800afea:	4b13      	ldr	r3, [pc, #76]	; (800b038 <MX_USART1_UART_Init+0x58>)
 800afec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800aff0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800aff2:	4b11      	ldr	r3, [pc, #68]	; (800b038 <MX_USART1_UART_Init+0x58>)
 800aff4:	2200      	movs	r2, #0
 800aff6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800aff8:	4b0f      	ldr	r3, [pc, #60]	; (800b038 <MX_USART1_UART_Init+0x58>)
 800affa:	2200      	movs	r2, #0
 800affc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800affe:	4b0e      	ldr	r3, [pc, #56]	; (800b038 <MX_USART1_UART_Init+0x58>)
 800b000:	2200      	movs	r2, #0
 800b002:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b004:	4b0c      	ldr	r3, [pc, #48]	; (800b038 <MX_USART1_UART_Init+0x58>)
 800b006:	220c      	movs	r2, #12
 800b008:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b00a:	4b0b      	ldr	r3, [pc, #44]	; (800b038 <MX_USART1_UART_Init+0x58>)
 800b00c:	2200      	movs	r2, #0
 800b00e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b010:	4b09      	ldr	r3, [pc, #36]	; (800b038 <MX_USART1_UART_Init+0x58>)
 800b012:	2200      	movs	r2, #0
 800b014:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b016:	4b08      	ldr	r3, [pc, #32]	; (800b038 <MX_USART1_UART_Init+0x58>)
 800b018:	2200      	movs	r2, #0
 800b01a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b01c:	4b06      	ldr	r3, [pc, #24]	; (800b038 <MX_USART1_UART_Init+0x58>)
 800b01e:	2200      	movs	r2, #0
 800b020:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b022:	4805      	ldr	r0, [pc, #20]	; (800b038 <MX_USART1_UART_Init+0x58>)
 800b024:	f7fc fc6e 	bl	8007904 <HAL_UART_Init>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d001      	beq.n	800b032 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800b02e:	f000 fae3 	bl	800b5f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b032:	bf00      	nop
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	200007f8 	.word	0x200007f8
 800b03c:	40011000 	.word	0x40011000

0800b040 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b088      	sub	sp, #32
 800b044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800b046:	1d3b      	adds	r3, r7, #4
 800b048:	2200      	movs	r2, #0
 800b04a:	601a      	str	r2, [r3, #0]
 800b04c:	605a      	str	r2, [r3, #4]
 800b04e:	609a      	str	r2, [r3, #8]
 800b050:	60da      	str	r2, [r3, #12]
 800b052:	611a      	str	r2, [r3, #16]
 800b054:	615a      	str	r2, [r3, #20]
 800b056:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800b058:	4b1f      	ldr	r3, [pc, #124]	; (800b0d8 <MX_FMC_Init+0x98>)
 800b05a:	4a20      	ldr	r2, [pc, #128]	; (800b0dc <MX_FMC_Init+0x9c>)
 800b05c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800b05e:	4b1e      	ldr	r3, [pc, #120]	; (800b0d8 <MX_FMC_Init+0x98>)
 800b060:	2200      	movs	r2, #0
 800b062:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800b064:	4b1c      	ldr	r3, [pc, #112]	; (800b0d8 <MX_FMC_Init+0x98>)
 800b066:	2200      	movs	r2, #0
 800b068:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800b06a:	4b1b      	ldr	r3, [pc, #108]	; (800b0d8 <MX_FMC_Init+0x98>)
 800b06c:	2204      	movs	r2, #4
 800b06e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800b070:	4b19      	ldr	r3, [pc, #100]	; (800b0d8 <MX_FMC_Init+0x98>)
 800b072:	2210      	movs	r2, #16
 800b074:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800b076:	4b18      	ldr	r3, [pc, #96]	; (800b0d8 <MX_FMC_Init+0x98>)
 800b078:	2240      	movs	r2, #64	; 0x40
 800b07a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800b07c:	4b16      	ldr	r3, [pc, #88]	; (800b0d8 <MX_FMC_Init+0x98>)
 800b07e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800b082:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800b084:	4b14      	ldr	r3, [pc, #80]	; (800b0d8 <MX_FMC_Init+0x98>)
 800b086:	2200      	movs	r2, #0
 800b088:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800b08a:	4b13      	ldr	r3, [pc, #76]	; (800b0d8 <MX_FMC_Init+0x98>)
 800b08c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b090:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800b092:	4b11      	ldr	r3, [pc, #68]	; (800b0d8 <MX_FMC_Init+0x98>)
 800b094:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b098:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800b09a:	4b0f      	ldr	r3, [pc, #60]	; (800b0d8 <MX_FMC_Init+0x98>)
 800b09c:	2200      	movs	r2, #0
 800b09e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800b0a0:	2302      	movs	r3, #2
 800b0a2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800b0a4:	2307      	movs	r3, #7
 800b0a6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800b0a8:	2304      	movs	r3, #4
 800b0aa:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800b0ac:	2307      	movs	r3, #7
 800b0ae:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800b0b4:	2302      	movs	r3, #2
 800b0b6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800b0bc:	1d3b      	adds	r3, r7, #4
 800b0be:	4619      	mov	r1, r3
 800b0c0:	4805      	ldr	r0, [pc, #20]	; (800b0d8 <MX_FMC_Init+0x98>)
 800b0c2:	f7fb fa87 	bl	80065d4 <HAL_SDRAM_Init>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d001      	beq.n	800b0d0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800b0cc:	f000 fa94 	bl	800b5f8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800b0d0:	bf00      	nop
 800b0d2:	3720      	adds	r7, #32
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	200009b0 	.word	0x200009b0
 800b0dc:	a0000140 	.word	0xa0000140

0800b0e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b090      	sub	sp, #64	; 0x40
 800b0e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	601a      	str	r2, [r3, #0]
 800b0ee:	605a      	str	r2, [r3, #4]
 800b0f0:	609a      	str	r2, [r3, #8]
 800b0f2:	60da      	str	r2, [r3, #12]
 800b0f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b0f6:	4bb0      	ldr	r3, [pc, #704]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b0f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0fa:	4aaf      	ldr	r2, [pc, #700]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b0fc:	f043 0310 	orr.w	r3, r3, #16
 800b100:	6313      	str	r3, [r2, #48]	; 0x30
 800b102:	4bad      	ldr	r3, [pc, #692]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b106:	f003 0310 	and.w	r3, r3, #16
 800b10a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b10e:	4baa      	ldr	r3, [pc, #680]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b112:	4aa9      	ldr	r2, [pc, #676]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b118:	6313      	str	r3, [r2, #48]	; 0x30
 800b11a:	4ba7      	ldr	r3, [pc, #668]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b11c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b11e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b122:	627b      	str	r3, [r7, #36]	; 0x24
 800b124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b126:	4ba4      	ldr	r3, [pc, #656]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b12a:	4aa3      	ldr	r2, [pc, #652]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b12c:	f043 0302 	orr.w	r3, r3, #2
 800b130:	6313      	str	r3, [r2, #48]	; 0x30
 800b132:	4ba1      	ldr	r3, [pc, #644]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b136:	f003 0302 	and.w	r3, r3, #2
 800b13a:	623b      	str	r3, [r7, #32]
 800b13c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b13e:	4b9e      	ldr	r3, [pc, #632]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b142:	4a9d      	ldr	r2, [pc, #628]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b144:	f043 0308 	orr.w	r3, r3, #8
 800b148:	6313      	str	r3, [r2, #48]	; 0x30
 800b14a:	4b9b      	ldr	r3, [pc, #620]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b14e:	f003 0308 	and.w	r3, r3, #8
 800b152:	61fb      	str	r3, [r7, #28]
 800b154:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b156:	4b98      	ldr	r3, [pc, #608]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b15a:	4a97      	ldr	r2, [pc, #604]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b15c:	f043 0304 	orr.w	r3, r3, #4
 800b160:	6313      	str	r3, [r2, #48]	; 0x30
 800b162:	4b95      	ldr	r3, [pc, #596]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b166:	f003 0304 	and.w	r3, r3, #4
 800b16a:	61bb      	str	r3, [r7, #24]
 800b16c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b16e:	4b92      	ldr	r3, [pc, #584]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b172:	4a91      	ldr	r2, [pc, #580]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b174:	f043 0301 	orr.w	r3, r3, #1
 800b178:	6313      	str	r3, [r2, #48]	; 0x30
 800b17a:	4b8f      	ldr	r3, [pc, #572]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b17e:	f003 0301 	and.w	r3, r3, #1
 800b182:	617b      	str	r3, [r7, #20]
 800b184:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800b186:	4b8c      	ldr	r3, [pc, #560]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b18a:	4a8b      	ldr	r2, [pc, #556]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b18c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b190:	6313      	str	r3, [r2, #48]	; 0x30
 800b192:	4b89      	ldr	r3, [pc, #548]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b19a:	613b      	str	r3, [r7, #16]
 800b19c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800b19e:	4b86      	ldr	r3, [pc, #536]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1a2:	4a85      	ldr	r2, [pc, #532]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b1a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1a8:	6313      	str	r3, [r2, #48]	; 0x30
 800b1aa:	4b83      	ldr	r3, [pc, #524]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1b2:	60fb      	str	r3, [r7, #12]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800b1b6:	4b80      	ldr	r3, [pc, #512]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ba:	4a7f      	ldr	r2, [pc, #508]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b1bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b1c0:	6313      	str	r3, [r2, #48]	; 0x30
 800b1c2:	4b7d      	ldr	r3, [pc, #500]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b1c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1ca:	60bb      	str	r3, [r7, #8]
 800b1cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800b1ce:	4b7a      	ldr	r3, [pc, #488]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b1d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1d2:	4a79      	ldr	r2, [pc, #484]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b1d4:	f043 0320 	orr.w	r3, r3, #32
 800b1d8:	6313      	str	r3, [r2, #48]	; 0x30
 800b1da:	4b77      	ldr	r3, [pc, #476]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b1dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1de:	f003 0320 	and.w	r3, r3, #32
 800b1e2:	607b      	str	r3, [r7, #4]
 800b1e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b1e6:	4b74      	ldr	r3, [pc, #464]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b1e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ea:	4a73      	ldr	r2, [pc, #460]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b1ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1f0:	6313      	str	r3, [r2, #48]	; 0x30
 800b1f2:	4b71      	ldr	r3, [pc, #452]	; (800b3b8 <MX_GPIO_Init+0x2d8>)
 800b1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1fa:	603b      	str	r3, [r7, #0]
 800b1fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, GPIO_PIN_SET);
 800b1fe:	2201      	movs	r2, #1
 800b200:	2110      	movs	r1, #16
 800b202:	486e      	ldr	r0, [pc, #440]	; (800b3bc <MX_GPIO_Init+0x2dc>)
 800b204:	f7f7 f89a 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800b208:	2201      	movs	r2, #1
 800b20a:	2120      	movs	r1, #32
 800b20c:	486c      	ldr	r0, [pc, #432]	; (800b3c0 <MX_GPIO_Init+0x2e0>)
 800b20e:	f7f7 f895 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800b212:	2200      	movs	r2, #0
 800b214:	210c      	movs	r1, #12
 800b216:	486b      	ldr	r0, [pc, #428]	; (800b3c4 <MX_GPIO_Init+0x2e4>)
 800b218:	f7f7 f890 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800b21c:	2201      	movs	r2, #1
 800b21e:	2108      	movs	r1, #8
 800b220:	4869      	ldr	r0, [pc, #420]	; (800b3c8 <MX_GPIO_Init+0x2e8>)
 800b222:	f7f7 f88b 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800b226:	2201      	movs	r2, #1
 800b228:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b22c:	4865      	ldr	r0, [pc, #404]	; (800b3c4 <MX_GPIO_Init+0x2e4>)
 800b22e:	f7f7 f885 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800b232:	2200      	movs	r2, #0
 800b234:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b238:	4864      	ldr	r0, [pc, #400]	; (800b3cc <MX_GPIO_Init+0x2ec>)
 800b23a:	f7f7 f87f 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GAME_STATE_LED_GPIO_Port, GAME_STATE_LED_Pin, GPIO_PIN_RESET);
 800b23e:	2200      	movs	r2, #0
 800b240:	2180      	movs	r1, #128	; 0x80
 800b242:	4863      	ldr	r0, [pc, #396]	; (800b3d0 <MX_GPIO_Init+0x2f0>)
 800b244:	f7f7 f87a 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_RED_GPIO_Port, RGB_RED_Pin, GPIO_PIN_SET);
 800b248:	2201      	movs	r2, #1
 800b24a:	2140      	movs	r1, #64	; 0x40
 800b24c:	4860      	ldr	r0, [pc, #384]	; (800b3d0 <MX_GPIO_Init+0x2f0>)
 800b24e:	f7f7 f875 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800b252:	2200      	movs	r2, #0
 800b254:	2188      	movs	r1, #136	; 0x88
 800b256:	485f      	ldr	r0, [pc, #380]	; (800b3d4 <MX_GPIO_Init+0x2f4>)
 800b258:	f7f7 f870 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_BLUE_GPIO_Port, RGB_BLUE_Pin, GPIO_PIN_SET);
 800b25c:	2201      	movs	r2, #1
 800b25e:	2140      	movs	r1, #64	; 0x40
 800b260:	485c      	ldr	r0, [pc, #368]	; (800b3d4 <MX_GPIO_Init+0x2f4>)
 800b262:	f7f7 f86b 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800b266:	2308      	movs	r3, #8
 800b268:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b26a:	2300      	movs	r3, #0
 800b26c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b26e:	2300      	movs	r3, #0
 800b270:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800b272:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b276:	4619      	mov	r1, r3
 800b278:	4857      	ldr	r0, [pc, #348]	; (800b3d8 <MX_GPIO_Init+0x2f8>)
 800b27a:	f7f6 feb5 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800b27e:	f643 4323 	movw	r3, #15395	; 0x3c23
 800b282:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b284:	2302      	movs	r3, #2
 800b286:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b288:	2300      	movs	r3, #0
 800b28a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b28c:	2303      	movs	r3, #3
 800b28e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800b290:	230a      	movs	r3, #10
 800b292:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b294:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b298:	4619      	mov	r1, r3
 800b29a:	4848      	ldr	r0, [pc, #288]	; (800b3bc <MX_GPIO_Init+0x2dc>)
 800b29c:	f7f6 fea4 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RGB_GREEN_Pin */
  GPIO_InitStruct.Pin = RGB_GREEN_Pin;
 800b2a0:	2310      	movs	r3, #16
 800b2a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(RGB_GREEN_GPIO_Port, &GPIO_InitStruct);
 800b2b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	4841      	ldr	r0, [pc, #260]	; (800b3bc <MX_GPIO_Init+0x2dc>)
 800b2b8:	f7f6 fe96 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800b2bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b2ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	4842      	ldr	r0, [pc, #264]	; (800b3dc <MX_GPIO_Init+0x2fc>)
 800b2d2:	f7f6 fe89 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800b2d6:	2340      	movs	r3, #64	; 0x40
 800b2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800b2da:	4b41      	ldr	r3, [pc, #260]	; (800b3e0 <MX_GPIO_Init+0x300>)
 800b2dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800b2e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	4835      	ldr	r0, [pc, #212]	; (800b3c0 <MX_GPIO_Init+0x2e0>)
 800b2ea:	f7f6 fe7d 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800b2ee:	2320      	movs	r3, #32
 800b2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800b2fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b302:	4619      	mov	r1, r3
 800b304:	482e      	ldr	r0, [pc, #184]	; (800b3c0 <MX_GPIO_Init+0x2e0>)
 800b306:	f7f6 fe6f 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800b30a:	f241 030c 	movw	r3, #4108	; 0x100c
 800b30e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b310:	2301      	movs	r3, #1
 800b312:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b314:	2300      	movs	r3, #0
 800b316:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b318:	2300      	movs	r3, #0
 800b31a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b31c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b320:	4619      	mov	r1, r3
 800b322:	4828      	ldr	r0, [pc, #160]	; (800b3c4 <MX_GPIO_Init+0x2e4>)
 800b324:	f7f6 fe60 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800b328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b32c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b32e:	2300      	movs	r3, #0
 800b330:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b332:	2300      	movs	r3, #0
 800b334:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800b336:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b33a:	4619      	mov	r1, r3
 800b33c:	4824      	ldr	r0, [pc, #144]	; (800b3d0 <MX_GPIO_Init+0x2f0>)
 800b33e:	f7f6 fe53 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800b342:	2308      	movs	r3, #8
 800b344:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b346:	2301      	movs	r3, #1
 800b348:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b34a:	2300      	movs	r3, #0
 800b34c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b34e:	2300      	movs	r3, #0
 800b350:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800b352:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b356:	4619      	mov	r1, r3
 800b358:	481b      	ldr	r0, [pc, #108]	; (800b3c8 <MX_GPIO_Init+0x2e8>)
 800b35a:	f7f6 fe45 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800b35e:	2310      	movs	r3, #16
 800b360:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b362:	2300      	movs	r3, #0
 800b364:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b366:	2300      	movs	r3, #0
 800b368:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800b36a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b36e:	4619      	mov	r1, r3
 800b370:	4813      	ldr	r0, [pc, #76]	; (800b3c0 <MX_GPIO_Init+0x2e0>)
 800b372:	f7f6 fe39 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800b376:	f248 0304 	movw	r3, #32772	; 0x8004
 800b37a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b37c:	2300      	movs	r3, #0
 800b37e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b380:	2300      	movs	r3, #0
 800b382:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b388:	4619      	mov	r1, r3
 800b38a:	4810      	ldr	r0, [pc, #64]	; (800b3cc <MX_GPIO_Init+0x2ec>)
 800b38c:	f7f6 fe2c 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800b390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b394:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b396:	2301      	movs	r3, #1
 800b398:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b39a:	2300      	movs	r3, #0
 800b39c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800b3a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	4808      	ldr	r0, [pc, #32]	; (800b3cc <MX_GPIO_Init+0x2ec>)
 800b3aa:	f7f6 fe1d 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800b3ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3b4:	e016      	b.n	800b3e4 <MX_GPIO_Init+0x304>
 800b3b6:	bf00      	nop
 800b3b8:	40023800 	.word	0x40023800
 800b3bc:	40020400 	.word	0x40020400
 800b3c0:	40020c00 	.word	0x40020c00
 800b3c4:	40022000 	.word	0x40022000
 800b3c8:	40022800 	.word	0x40022800
 800b3cc:	40021c00 	.word	0x40021c00
 800b3d0:	40020800 	.word	0x40020800
 800b3d4:	40021800 	.word	0x40021800
 800b3d8:	40021000 	.word	0x40021000
 800b3dc:	40022400 	.word	0x40022400
 800b3e0:	10120000 	.word	0x10120000
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800b3e4:	4b47      	ldr	r3, [pc, #284]	; (800b504 <MX_GPIO_Init+0x424>)
 800b3e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800b3ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	4845      	ldr	r0, [pc, #276]	; (800b508 <MX_GPIO_Init+0x428>)
 800b3f4:	f7f6 fdf8 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GAME_STATE_LED_Pin RGB_RED_Pin */
  GPIO_InitStruct.Pin = GAME_STATE_LED_Pin|RGB_RED_Pin;
 800b3f8:	23c0      	movs	r3, #192	; 0xc0
 800b3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b400:	2300      	movs	r3, #0
 800b402:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b404:	2300      	movs	r3, #0
 800b406:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b408:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b40c:	4619      	mov	r1, r3
 800b40e:	483f      	ldr	r0, [pc, #252]	; (800b50c <MX_GPIO_Init+0x42c>)
 800b410:	f7f6 fdea 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800b414:	2310      	movs	r3, #16
 800b416:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b418:	2302      	movs	r3, #2
 800b41a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b41c:	2300      	movs	r3, #0
 800b41e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b420:	2303      	movs	r3, #3
 800b422:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800b424:	230a      	movs	r3, #10
 800b426:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800b428:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b42c:	4619      	mov	r1, r3
 800b42e:	4838      	ldr	r0, [pc, #224]	; (800b510 <MX_GPIO_Init+0x430>)
 800b430:	f7f6 fdda 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin RGB_BLUE_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|RGB_BLUE_Pin|EXT_RST_Pin;
 800b434:	23c8      	movs	r3, #200	; 0xc8
 800b436:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b438:	2301      	movs	r3, #1
 800b43a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b43c:	2300      	movs	r3, #0
 800b43e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b440:	2300      	movs	r3, #0
 800b442:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b444:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b448:	4619      	mov	r1, r3
 800b44a:	4832      	ldr	r0, [pc, #200]	; (800b514 <MX_GPIO_Init+0x434>)
 800b44c:	f7f6 fdcc 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PLAYER_ONE_BTN_Pin */
  GPIO_InitStruct.Pin = PLAYER_ONE_BTN_Pin;
 800b450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b454:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b456:	4b30      	ldr	r3, [pc, #192]	; (800b518 <MX_GPIO_Init+0x438>)
 800b458:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b45a:	2302      	movs	r3, #2
 800b45c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(PLAYER_ONE_BTN_GPIO_Port, &GPIO_InitStruct);
 800b45e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b462:	4619      	mov	r1, r3
 800b464:	482d      	ldr	r0, [pc, #180]	; (800b51c <MX_GPIO_Init+0x43c>)
 800b466:	f7f6 fdbf 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800b46a:	2305      	movs	r3, #5
 800b46c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b46e:	2302      	movs	r3, #2
 800b470:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b472:	2300      	movs	r3, #0
 800b474:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b476:	2303      	movs	r3, #3
 800b478:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800b47a:	230a      	movs	r3, #10
 800b47c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b47e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b482:	4619      	mov	r1, r3
 800b484:	4821      	ldr	r0, [pc, #132]	; (800b50c <MX_GPIO_Init+0x42c>)
 800b486:	f7f6 fdaf 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800b48a:	2304      	movs	r3, #4
 800b48c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b48e:	2300      	movs	r3, #0
 800b490:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b492:	2300      	movs	r3, #0
 800b494:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800b496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b49a:	4619      	mov	r1, r3
 800b49c:	481d      	ldr	r0, [pc, #116]	; (800b514 <MX_GPIO_Init+0x434>)
 800b49e:	f7f6 fda3 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_GAME_BTN_Pin */
  GPIO_InitStruct.Pin = START_GAME_BTN_Pin;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b4a6:	4b1c      	ldr	r3, [pc, #112]	; (800b518 <MX_GPIO_Init+0x438>)
 800b4a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b4aa:	2302      	movs	r3, #2
 800b4ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(START_GAME_BTN_GPIO_Port, &GPIO_InitStruct);
 800b4ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	481a      	ldr	r0, [pc, #104]	; (800b520 <MX_GPIO_Init+0x440>)
 800b4b6:	f7f6 fd97 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800b4ba:	2328      	movs	r3, #40	; 0x28
 800b4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4be:	2302      	movs	r3, #2
 800b4c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4c6:	2303      	movs	r3, #3
 800b4c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800b4ca:	230a      	movs	r3, #10
 800b4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b4ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	4812      	ldr	r0, [pc, #72]	; (800b520 <MX_GPIO_Init+0x440>)
 800b4d6:	f7f6 fd87 	bl	8001fe8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800b4da:	2200      	movs	r2, #0
 800b4dc:	2101      	movs	r1, #1
 800b4de:	2006      	movs	r0, #6
 800b4e0:	f7f6 f800 	bl	80014e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800b4e4:	2006      	movs	r0, #6
 800b4e6:	f7f6 f819 	bl	800151c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	2101      	movs	r1, #1
 800b4ee:	2028      	movs	r0, #40	; 0x28
 800b4f0:	f7f5 fff8 	bl	80014e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800b4f4:	2028      	movs	r0, #40	; 0x28
 800b4f6:	f7f6 f811 	bl	800151c <HAL_NVIC_EnableIRQ>

}
 800b4fa:	bf00      	nop
 800b4fc:	3740      	adds	r7, #64	; 0x40
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	10120000 	.word	0x10120000
 800b508:	40022000 	.word	0x40022000
 800b50c:	40020800 	.word	0x40020800
 800b510:	40021c00 	.word	0x40021c00
 800b514:	40021800 	.word	0x40021800
 800b518:	10110000 	.word	0x10110000
 800b51c:	40021400 	.word	0x40021400
 800b520:	40020000 	.word	0x40020000

0800b524 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	4603      	mov	r3, r0
 800b52c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == START_GAME_BTN_Pin && game_state == WAITING) {
 800b52e:	88fb      	ldrh	r3, [r7, #6]
 800b530:	2b01      	cmp	r3, #1
 800b532:	d106      	bne.n	800b542 <HAL_GPIO_EXTI_Callback+0x1e>
 800b534:	4b20      	ldr	r3, [pc, #128]	; (800b5b8 <HAL_GPIO_EXTI_Callback+0x94>)
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d102      	bne.n	800b542 <HAL_GPIO_EXTI_Callback+0x1e>
		game_state = STARTED;
 800b53c:	4b1e      	ldr	r3, [pc, #120]	; (800b5b8 <HAL_GPIO_EXTI_Callback+0x94>)
 800b53e:	2201      	movs	r2, #1
 800b540:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == PLAYER_ONE_BTN_Pin) {
 800b542:	88fb      	ldrh	r3, [r7, #6]
 800b544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b548:	d131      	bne.n	800b5ae <HAL_GPIO_EXTI_Callback+0x8a>
		if(game_state == STARTED) {
 800b54a:	4b1b      	ldr	r3, [pc, #108]	; (800b5b8 <HAL_GPIO_EXTI_Callback+0x94>)
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d110      	bne.n	800b574 <HAL_GPIO_EXTI_Callback+0x50>
			HAL_GPIO_WritePin(RGB_RED_GPIO_Port, RGB_RED_Pin, INVERTED_ON);
 800b552:	2200      	movs	r2, #0
 800b554:	2140      	movs	r1, #64	; 0x40
 800b556:	4819      	ldr	r0, [pc, #100]	; (800b5bc <HAL_GPIO_EXTI_Callback+0x98>)
 800b558:	f7f6 fef0 	bl	800233c <HAL_GPIO_WritePin>
			player_one_reaction = 0;
 800b55c:	4b18      	ldr	r3, [pc, #96]	; (800b5c0 <HAL_GPIO_EXTI_Callback+0x9c>)
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]
			game_state = FINISHED;
 800b562:	4b15      	ldr	r3, [pc, #84]	; (800b5b8 <HAL_GPIO_EXTI_Callback+0x94>)
 800b564:	2203      	movs	r2, #3
 800b566:	701a      	strb	r2, [r3, #0]
			round_counter++;
 800b568:	4b16      	ldr	r3, [pc, #88]	; (800b5c4 <HAL_GPIO_EXTI_Callback+0xa0>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	3301      	adds	r3, #1
 800b56e:	4a15      	ldr	r2, [pc, #84]	; (800b5c4 <HAL_GPIO_EXTI_Callback+0xa0>)
 800b570:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, INVERTED_ON);
			game_state = FINISHED;
			round_counter++;
		}
	}
}
 800b572:	e01c      	b.n	800b5ae <HAL_GPIO_EXTI_Callback+0x8a>
		} else if(game_state == REACTION) {
 800b574:	4b10      	ldr	r3, [pc, #64]	; (800b5b8 <HAL_GPIO_EXTI_Callback+0x94>)
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	2b02      	cmp	r3, #2
 800b57a:	d118      	bne.n	800b5ae <HAL_GPIO_EXTI_Callback+0x8a>
			player_one_timer_end = HAL_GetTick();
 800b57c:	f7f5 fecc 	bl	8001318 <HAL_GetTick>
 800b580:	4602      	mov	r2, r0
 800b582:	4b11      	ldr	r3, [pc, #68]	; (800b5c8 <HAL_GPIO_EXTI_Callback+0xa4>)
 800b584:	601a      	str	r2, [r3, #0]
			player_one_reaction = player_one_timer_end - player_one_timer_start;
 800b586:	4b10      	ldr	r3, [pc, #64]	; (800b5c8 <HAL_GPIO_EXTI_Callback+0xa4>)
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	4b10      	ldr	r3, [pc, #64]	; (800b5cc <HAL_GPIO_EXTI_Callback+0xa8>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	1ad3      	subs	r3, r2, r3
 800b590:	4a0b      	ldr	r2, [pc, #44]	; (800b5c0 <HAL_GPIO_EXTI_Callback+0x9c>)
 800b592:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin, INVERTED_ON);
 800b594:	2200      	movs	r2, #0
 800b596:	2110      	movs	r1, #16
 800b598:	480d      	ldr	r0, [pc, #52]	; (800b5d0 <HAL_GPIO_EXTI_Callback+0xac>)
 800b59a:	f7f6 fecf 	bl	800233c <HAL_GPIO_WritePin>
			game_state = FINISHED;
 800b59e:	4b06      	ldr	r3, [pc, #24]	; (800b5b8 <HAL_GPIO_EXTI_Callback+0x94>)
 800b5a0:	2203      	movs	r2, #3
 800b5a2:	701a      	strb	r2, [r3, #0]
			round_counter++;
 800b5a4:	4b07      	ldr	r3, [pc, #28]	; (800b5c4 <HAL_GPIO_EXTI_Callback+0xa0>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	4a06      	ldr	r2, [pc, #24]	; (800b5c4 <HAL_GPIO_EXTI_Callback+0xa0>)
 800b5ac:	6013      	str	r3, [r2, #0]
}
 800b5ae:	bf00      	nop
 800b5b0:	3708      	adds	r7, #8
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	20000200 	.word	0x20000200
 800b5bc:	40020800 	.word	0x40020800
 800b5c0:	20000878 	.word	0x20000878
 800b5c4:	20000204 	.word	0x20000204
 800b5c8:	200009e4 	.word	0x200009e4
 800b5cc:	2000096c 	.word	0x2000096c
 800b5d0:	40020400 	.word	0x40020400

0800b5d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4a04      	ldr	r2, [pc, #16]	; (800b5f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d101      	bne.n	800b5ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800b5e6:	f7f5 fe83 	bl	80012f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800b5ea:	bf00      	nop
 800b5ec:	3708      	adds	r7, #8
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	40001000 	.word	0x40001000

0800b5f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800b5fc:	bf00      	nop
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
	...

0800b608 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800b60e:	4b0f      	ldr	r3, [pc, #60]	; (800b64c <HAL_MspInit+0x44>)
 800b610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b612:	4a0e      	ldr	r2, [pc, #56]	; (800b64c <HAL_MspInit+0x44>)
 800b614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b618:	6413      	str	r3, [r2, #64]	; 0x40
 800b61a:	4b0c      	ldr	r3, [pc, #48]	; (800b64c <HAL_MspInit+0x44>)
 800b61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b61e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b622:	607b      	str	r3, [r7, #4]
 800b624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b626:	4b09      	ldr	r3, [pc, #36]	; (800b64c <HAL_MspInit+0x44>)
 800b628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b62a:	4a08      	ldr	r2, [pc, #32]	; (800b64c <HAL_MspInit+0x44>)
 800b62c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b630:	6453      	str	r3, [r2, #68]	; 0x44
 800b632:	4b06      	ldr	r3, [pc, #24]	; (800b64c <HAL_MspInit+0x44>)
 800b634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b63a:	603b      	str	r3, [r7, #0]
 800b63c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b63e:	bf00      	nop
 800b640:	370c      	adds	r7, #12
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	40023800 	.word	0x40023800

0800b650 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a0d      	ldr	r2, [pc, #52]	; (800b694 <HAL_DMA2D_MspInit+0x44>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d113      	bne.n	800b68a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800b662:	4b0d      	ldr	r3, [pc, #52]	; (800b698 <HAL_DMA2D_MspInit+0x48>)
 800b664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b666:	4a0c      	ldr	r2, [pc, #48]	; (800b698 <HAL_DMA2D_MspInit+0x48>)
 800b668:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b66c:	6313      	str	r3, [r2, #48]	; 0x30
 800b66e:	4b0a      	ldr	r3, [pc, #40]	; (800b698 <HAL_DMA2D_MspInit+0x48>)
 800b670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b672:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b676:	60fb      	str	r3, [r7, #12]
 800b678:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800b67a:	2200      	movs	r2, #0
 800b67c:	2100      	movs	r1, #0
 800b67e:	205a      	movs	r0, #90	; 0x5a
 800b680:	f7f5 ff30 	bl	80014e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800b684:	205a      	movs	r0, #90	; 0x5a
 800b686:	f7f5 ff49 	bl	800151c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800b68a:	bf00      	nop
 800b68c:	3710      	adds	r7, #16
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	4002b000 	.word	0x4002b000
 800b698:	40023800 	.word	0x40023800

0800b69c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b08c      	sub	sp, #48	; 0x30
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6a4:	f107 031c 	add.w	r3, r7, #28
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	601a      	str	r2, [r3, #0]
 800b6ac:	605a      	str	r2, [r3, #4]
 800b6ae:	609a      	str	r2, [r3, #8]
 800b6b0:	60da      	str	r2, [r3, #12]
 800b6b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a2f      	ldr	r2, [pc, #188]	; (800b778 <HAL_I2C_MspInit+0xdc>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d129      	bne.n	800b712 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b6be:	4b2f      	ldr	r3, [pc, #188]	; (800b77c <HAL_I2C_MspInit+0xe0>)
 800b6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c2:	4a2e      	ldr	r2, [pc, #184]	; (800b77c <HAL_I2C_MspInit+0xe0>)
 800b6c4:	f043 0302 	orr.w	r3, r3, #2
 800b6c8:	6313      	str	r3, [r2, #48]	; 0x30
 800b6ca:	4b2c      	ldr	r3, [pc, #176]	; (800b77c <HAL_I2C_MspInit+0xe0>)
 800b6cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ce:	f003 0302 	and.w	r3, r3, #2
 800b6d2:	61bb      	str	r3, [r7, #24]
 800b6d4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800b6d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b6da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b6dc:	2312      	movs	r3, #18
 800b6de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b6e8:	2304      	movs	r3, #4
 800b6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b6ec:	f107 031c 	add.w	r3, r7, #28
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	4823      	ldr	r0, [pc, #140]	; (800b780 <HAL_I2C_MspInit+0xe4>)
 800b6f4:	f7f6 fc78 	bl	8001fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b6f8:	4b20      	ldr	r3, [pc, #128]	; (800b77c <HAL_I2C_MspInit+0xe0>)
 800b6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6fc:	4a1f      	ldr	r2, [pc, #124]	; (800b77c <HAL_I2C_MspInit+0xe0>)
 800b6fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b702:	6413      	str	r3, [r2, #64]	; 0x40
 800b704:	4b1d      	ldr	r3, [pc, #116]	; (800b77c <HAL_I2C_MspInit+0xe0>)
 800b706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b70c:	617b      	str	r3, [r7, #20]
 800b70e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800b710:	e02d      	b.n	800b76e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a1b      	ldr	r2, [pc, #108]	; (800b784 <HAL_I2C_MspInit+0xe8>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d128      	bne.n	800b76e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800b71c:	4b17      	ldr	r3, [pc, #92]	; (800b77c <HAL_I2C_MspInit+0xe0>)
 800b71e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b720:	4a16      	ldr	r2, [pc, #88]	; (800b77c <HAL_I2C_MspInit+0xe0>)
 800b722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b726:	6313      	str	r3, [r2, #48]	; 0x30
 800b728:	4b14      	ldr	r3, [pc, #80]	; (800b77c <HAL_I2C_MspInit+0xe0>)
 800b72a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b72c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b730:	613b      	str	r3, [r7, #16]
 800b732:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800b734:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800b738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b73a:	2312      	movs	r3, #18
 800b73c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b73e:	2301      	movs	r3, #1
 800b740:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b742:	2303      	movs	r3, #3
 800b744:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800b746:	2304      	movs	r3, #4
 800b748:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b74a:	f107 031c 	add.w	r3, r7, #28
 800b74e:	4619      	mov	r1, r3
 800b750:	480d      	ldr	r0, [pc, #52]	; (800b788 <HAL_I2C_MspInit+0xec>)
 800b752:	f7f6 fc49 	bl	8001fe8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800b756:	4b09      	ldr	r3, [pc, #36]	; (800b77c <HAL_I2C_MspInit+0xe0>)
 800b758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b75a:	4a08      	ldr	r2, [pc, #32]	; (800b77c <HAL_I2C_MspInit+0xe0>)
 800b75c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b760:	6413      	str	r3, [r2, #64]	; 0x40
 800b762:	4b06      	ldr	r3, [pc, #24]	; (800b77c <HAL_I2C_MspInit+0xe0>)
 800b764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b766:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b76a:	60fb      	str	r3, [r7, #12]
 800b76c:	68fb      	ldr	r3, [r7, #12]
}
 800b76e:	bf00      	nop
 800b770:	3730      	adds	r7, #48	; 0x30
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	40005400 	.word	0x40005400
 800b77c:	40023800 	.word	0x40023800
 800b780:	40020400 	.word	0x40020400
 800b784:	40005c00 	.word	0x40005c00
 800b788:	40021c00 	.word	0x40021c00

0800b78c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b08e      	sub	sp, #56	; 0x38
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b798:	2200      	movs	r2, #0
 800b79a:	601a      	str	r2, [r3, #0]
 800b79c:	605a      	str	r2, [r3, #4]
 800b79e:	609a      	str	r2, [r3, #8]
 800b7a0:	60da      	str	r2, [r3, #12]
 800b7a2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4a55      	ldr	r2, [pc, #340]	; (800b900 <HAL_LTDC_MspInit+0x174>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	f040 80a3 	bne.w	800b8f6 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800b7b0:	4b54      	ldr	r3, [pc, #336]	; (800b904 <HAL_LTDC_MspInit+0x178>)
 800b7b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7b4:	4a53      	ldr	r2, [pc, #332]	; (800b904 <HAL_LTDC_MspInit+0x178>)
 800b7b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b7ba:	6453      	str	r3, [r2, #68]	; 0x44
 800b7bc:	4b51      	ldr	r3, [pc, #324]	; (800b904 <HAL_LTDC_MspInit+0x178>)
 800b7be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b7c4:	623b      	str	r3, [r7, #32]
 800b7c6:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b7c8:	4b4e      	ldr	r3, [pc, #312]	; (800b904 <HAL_LTDC_MspInit+0x178>)
 800b7ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7cc:	4a4d      	ldr	r2, [pc, #308]	; (800b904 <HAL_LTDC_MspInit+0x178>)
 800b7ce:	f043 0310 	orr.w	r3, r3, #16
 800b7d2:	6313      	str	r3, [r2, #48]	; 0x30
 800b7d4:	4b4b      	ldr	r3, [pc, #300]	; (800b904 <HAL_LTDC_MspInit+0x178>)
 800b7d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7d8:	f003 0310 	and.w	r3, r3, #16
 800b7dc:	61fb      	str	r3, [r7, #28]
 800b7de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800b7e0:	4b48      	ldr	r3, [pc, #288]	; (800b904 <HAL_LTDC_MspInit+0x178>)
 800b7e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e4:	4a47      	ldr	r2, [pc, #284]	; (800b904 <HAL_LTDC_MspInit+0x178>)
 800b7e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b7ea:	6313      	str	r3, [r2, #48]	; 0x30
 800b7ec:	4b45      	ldr	r3, [pc, #276]	; (800b904 <HAL_LTDC_MspInit+0x178>)
 800b7ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b7f4:	61bb      	str	r3, [r7, #24]
 800b7f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800b7f8:	4b42      	ldr	r3, [pc, #264]	; (800b904 <HAL_LTDC_MspInit+0x178>)
 800b7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7fc:	4a41      	ldr	r2, [pc, #260]	; (800b904 <HAL_LTDC_MspInit+0x178>)
 800b7fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b802:	6313      	str	r3, [r2, #48]	; 0x30
 800b804:	4b3f      	ldr	r3, [pc, #252]	; (800b904 <HAL_LTDC_MspInit+0x178>)
 800b806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b80c:	617b      	str	r3, [r7, #20]
 800b80e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b810:	4b3c      	ldr	r3, [pc, #240]	; (800b904 <HAL_LTDC_MspInit+0x178>)
 800b812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b814:	4a3b      	ldr	r2, [pc, #236]	; (800b904 <HAL_LTDC_MspInit+0x178>)
 800b816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b81a:	6313      	str	r3, [r2, #48]	; 0x30
 800b81c:	4b39      	ldr	r3, [pc, #228]	; (800b904 <HAL_LTDC_MspInit+0x178>)
 800b81e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b824:	613b      	str	r3, [r7, #16]
 800b826:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800b828:	4b36      	ldr	r3, [pc, #216]	; (800b904 <HAL_LTDC_MspInit+0x178>)
 800b82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b82c:	4a35      	ldr	r2, [pc, #212]	; (800b904 <HAL_LTDC_MspInit+0x178>)
 800b82e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b832:	6313      	str	r3, [r2, #48]	; 0x30
 800b834:	4b33      	ldr	r3, [pc, #204]	; (800b904 <HAL_LTDC_MspInit+0x178>)
 800b836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b83c:	60fb      	str	r3, [r7, #12]
 800b83e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800b840:	2310      	movs	r3, #16
 800b842:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b844:	2302      	movs	r3, #2
 800b846:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b848:	2300      	movs	r3, #0
 800b84a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b84c:	2300      	movs	r3, #0
 800b84e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800b850:	230e      	movs	r3, #14
 800b852:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800b854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b858:	4619      	mov	r1, r3
 800b85a:	482b      	ldr	r0, [pc, #172]	; (800b908 <HAL_LTDC_MspInit+0x17c>)
 800b85c:	f7f6 fbc4 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800b860:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800b864:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b866:	2302      	movs	r3, #2
 800b868:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b86a:	2300      	movs	r3, #0
 800b86c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b86e:	2300      	movs	r3, #0
 800b870:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800b872:	230e      	movs	r3, #14
 800b874:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800b876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b87a:	4619      	mov	r1, r3
 800b87c:	4823      	ldr	r0, [pc, #140]	; (800b90c <HAL_LTDC_MspInit+0x180>)
 800b87e:	f7f6 fbb3 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800b882:	23f7      	movs	r3, #247	; 0xf7
 800b884:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b886:	2302      	movs	r3, #2
 800b888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b88a:	2300      	movs	r3, #0
 800b88c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b88e:	2300      	movs	r3, #0
 800b890:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800b892:	230e      	movs	r3, #14
 800b894:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800b896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b89a:	4619      	mov	r1, r3
 800b89c:	481c      	ldr	r0, [pc, #112]	; (800b910 <HAL_LTDC_MspInit+0x184>)
 800b89e:	f7f6 fba3 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800b8a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8a8:	2302      	movs	r3, #2
 800b8aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800b8b4:	2309      	movs	r3, #9
 800b8b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800b8b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8bc:	4619      	mov	r1, r3
 800b8be:	4815      	ldr	r0, [pc, #84]	; (800b914 <HAL_LTDC_MspInit+0x188>)
 800b8c0:	f7f6 fb92 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800b8c4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800b8c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8ca:	2302      	movs	r3, #2
 800b8cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800b8d6:	230e      	movs	r3, #14
 800b8d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b8da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8de:	4619      	mov	r1, r3
 800b8e0:	480d      	ldr	r0, [pc, #52]	; (800b918 <HAL_LTDC_MspInit+0x18c>)
 800b8e2:	f7f6 fb81 	bl	8001fe8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	2100      	movs	r1, #0
 800b8ea:	2058      	movs	r0, #88	; 0x58
 800b8ec:	f7f5 fdfa 	bl	80014e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800b8f0:	2058      	movs	r0, #88	; 0x58
 800b8f2:	f7f5 fe13 	bl	800151c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800b8f6:	bf00      	nop
 800b8f8:	3738      	adds	r7, #56	; 0x38
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	40016800 	.word	0x40016800
 800b904:	40023800 	.word	0x40023800
 800b908:	40021000 	.word	0x40021000
 800b90c:	40022400 	.word	0x40022400
 800b910:	40022800 	.word	0x40022800
 800b914:	40021800 	.word	0x40021800
 800b918:	40022000 	.word	0x40022000

0800b91c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b08c      	sub	sp, #48	; 0x30
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b924:	f107 031c 	add.w	r3, r7, #28
 800b928:	2200      	movs	r2, #0
 800b92a:	601a      	str	r2, [r3, #0]
 800b92c:	605a      	str	r2, [r3, #4]
 800b92e:	609a      	str	r2, [r3, #8]
 800b930:	60da      	str	r2, [r3, #12]
 800b932:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a3b      	ldr	r2, [pc, #236]	; (800ba28 <HAL_QSPI_MspInit+0x10c>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d170      	bne.n	800ba20 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800b93e:	4b3b      	ldr	r3, [pc, #236]	; (800ba2c <HAL_QSPI_MspInit+0x110>)
 800b940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b942:	4a3a      	ldr	r2, [pc, #232]	; (800ba2c <HAL_QSPI_MspInit+0x110>)
 800b944:	f043 0302 	orr.w	r3, r3, #2
 800b948:	6393      	str	r3, [r2, #56]	; 0x38
 800b94a:	4b38      	ldr	r3, [pc, #224]	; (800ba2c <HAL_QSPI_MspInit+0x110>)
 800b94c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b94e:	f003 0302 	and.w	r3, r3, #2
 800b952:	61bb      	str	r3, [r7, #24]
 800b954:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b956:	4b35      	ldr	r3, [pc, #212]	; (800ba2c <HAL_QSPI_MspInit+0x110>)
 800b958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b95a:	4a34      	ldr	r2, [pc, #208]	; (800ba2c <HAL_QSPI_MspInit+0x110>)
 800b95c:	f043 0310 	orr.w	r3, r3, #16
 800b960:	6313      	str	r3, [r2, #48]	; 0x30
 800b962:	4b32      	ldr	r3, [pc, #200]	; (800ba2c <HAL_QSPI_MspInit+0x110>)
 800b964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b966:	f003 0310 	and.w	r3, r3, #16
 800b96a:	617b      	str	r3, [r7, #20]
 800b96c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b96e:	4b2f      	ldr	r3, [pc, #188]	; (800ba2c <HAL_QSPI_MspInit+0x110>)
 800b970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b972:	4a2e      	ldr	r2, [pc, #184]	; (800ba2c <HAL_QSPI_MspInit+0x110>)
 800b974:	f043 0302 	orr.w	r3, r3, #2
 800b978:	6313      	str	r3, [r2, #48]	; 0x30
 800b97a:	4b2c      	ldr	r3, [pc, #176]	; (800ba2c <HAL_QSPI_MspInit+0x110>)
 800b97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b97e:	f003 0302 	and.w	r3, r3, #2
 800b982:	613b      	str	r3, [r7, #16]
 800b984:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b986:	4b29      	ldr	r3, [pc, #164]	; (800ba2c <HAL_QSPI_MspInit+0x110>)
 800b988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b98a:	4a28      	ldr	r2, [pc, #160]	; (800ba2c <HAL_QSPI_MspInit+0x110>)
 800b98c:	f043 0308 	orr.w	r3, r3, #8
 800b990:	6313      	str	r3, [r2, #48]	; 0x30
 800b992:	4b26      	ldr	r3, [pc, #152]	; (800ba2c <HAL_QSPI_MspInit+0x110>)
 800b994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b996:	f003 0308 	and.w	r3, r3, #8
 800b99a:	60fb      	str	r3, [r7, #12]
 800b99c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800b99e:	2304      	movs	r3, #4
 800b9a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9a2:	2302      	movs	r3, #2
 800b9a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b9aa:	2303      	movs	r3, #3
 800b9ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800b9ae:	2309      	movs	r3, #9
 800b9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800b9b2:	f107 031c 	add.w	r3, r7, #28
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	481d      	ldr	r0, [pc, #116]	; (800ba30 <HAL_QSPI_MspInit+0x114>)
 800b9ba:	f7f6 fb15 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800b9be:	2340      	movs	r3, #64	; 0x40
 800b9c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9c2:	2302      	movs	r3, #2
 800b9c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b9ca:	2303      	movs	r3, #3
 800b9cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800b9ce:	230a      	movs	r3, #10
 800b9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800b9d2:	f107 031c 	add.w	r3, r7, #28
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	4816      	ldr	r0, [pc, #88]	; (800ba34 <HAL_QSPI_MspInit+0x118>)
 800b9da:	f7f6 fb05 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b9de:	2304      	movs	r3, #4
 800b9e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9e2:	2302      	movs	r3, #2
 800b9e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b9ea:	2303      	movs	r3, #3
 800b9ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800b9ee:	2309      	movs	r3, #9
 800b9f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b9f2:	f107 031c 	add.w	r3, r7, #28
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	480e      	ldr	r0, [pc, #56]	; (800ba34 <HAL_QSPI_MspInit+0x118>)
 800b9fa:	f7f6 faf5 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800b9fe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ba02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba04:	2302      	movs	r3, #2
 800ba06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba0c:	2303      	movs	r3, #3
 800ba0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800ba10:	2309      	movs	r3, #9
 800ba12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ba14:	f107 031c 	add.w	r3, r7, #28
 800ba18:	4619      	mov	r1, r3
 800ba1a:	4807      	ldr	r0, [pc, #28]	; (800ba38 <HAL_QSPI_MspInit+0x11c>)
 800ba1c:	f7f6 fae4 	bl	8001fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800ba20:	bf00      	nop
 800ba22:	3730      	adds	r7, #48	; 0x30
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	a0001000 	.word	0xa0001000
 800ba2c:	40023800 	.word	0x40023800
 800ba30:	40021000 	.word	0x40021000
 800ba34:	40020400 	.word	0x40020400
 800ba38:	40020c00 	.word	0x40020c00

0800ba3c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b085      	sub	sp, #20
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a0a      	ldr	r2, [pc, #40]	; (800ba74 <HAL_RNG_MspInit+0x38>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d10b      	bne.n	800ba66 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800ba4e:	4b0a      	ldr	r3, [pc, #40]	; (800ba78 <HAL_RNG_MspInit+0x3c>)
 800ba50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba52:	4a09      	ldr	r2, [pc, #36]	; (800ba78 <HAL_RNG_MspInit+0x3c>)
 800ba54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba58:	6353      	str	r3, [r2, #52]	; 0x34
 800ba5a:	4b07      	ldr	r3, [pc, #28]	; (800ba78 <HAL_RNG_MspInit+0x3c>)
 800ba5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba62:	60fb      	str	r3, [r7, #12]
 800ba64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800ba66:	bf00      	nop
 800ba68:	3714      	adds	r7, #20
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	50060800 	.word	0x50060800
 800ba78:	40023800 	.word	0x40023800

0800ba7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4a07      	ldr	r2, [pc, #28]	; (800baa8 <HAL_RTC_MspInit+0x2c>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d105      	bne.n	800ba9a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ba8e:	4b07      	ldr	r3, [pc, #28]	; (800baac <HAL_RTC_MspInit+0x30>)
 800ba90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba92:	4a06      	ldr	r2, [pc, #24]	; (800baac <HAL_RTC_MspInit+0x30>)
 800ba94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba98:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800ba9a:	bf00      	nop
 800ba9c:	370c      	adds	r7, #12
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop
 800baa8:	40002800 	.word	0x40002800
 800baac:	40023800 	.word	0x40023800

0800bab0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b08a      	sub	sp, #40	; 0x28
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bab8:	f107 0314 	add.w	r3, r7, #20
 800babc:	2200      	movs	r2, #0
 800babe:	601a      	str	r2, [r3, #0]
 800bac0:	605a      	str	r2, [r3, #4]
 800bac2:	609a      	str	r2, [r3, #8]
 800bac4:	60da      	str	r2, [r3, #12]
 800bac6:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800bad0:	d127      	bne.n	800bb22 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800bad2:	4b16      	ldr	r3, [pc, #88]	; (800bb2c <HAL_SPDIFRX_MspInit+0x7c>)
 800bad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bad6:	4a15      	ldr	r2, [pc, #84]	; (800bb2c <HAL_SPDIFRX_MspInit+0x7c>)
 800bad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800badc:	6413      	str	r3, [r2, #64]	; 0x40
 800bade:	4b13      	ldr	r3, [pc, #76]	; (800bb2c <HAL_SPDIFRX_MspInit+0x7c>)
 800bae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bae6:	613b      	str	r3, [r7, #16]
 800bae8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800baea:	4b10      	ldr	r3, [pc, #64]	; (800bb2c <HAL_SPDIFRX_MspInit+0x7c>)
 800baec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baee:	4a0f      	ldr	r2, [pc, #60]	; (800bb2c <HAL_SPDIFRX_MspInit+0x7c>)
 800baf0:	f043 0308 	orr.w	r3, r3, #8
 800baf4:	6313      	str	r3, [r2, #48]	; 0x30
 800baf6:	4b0d      	ldr	r3, [pc, #52]	; (800bb2c <HAL_SPDIFRX_MspInit+0x7c>)
 800baf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bafa:	f003 0308 	and.w	r3, r3, #8
 800bafe:	60fb      	str	r3, [r7, #12]
 800bb00:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800bb02:	2380      	movs	r3, #128	; 0x80
 800bb04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb06:	2302      	movs	r3, #2
 800bb08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800bb12:	2308      	movs	r3, #8
 800bb14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800bb16:	f107 0314 	add.w	r3, r7, #20
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	4804      	ldr	r0, [pc, #16]	; (800bb30 <HAL_SPDIFRX_MspInit+0x80>)
 800bb1e:	f7f6 fa63 	bl	8001fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800bb22:	bf00      	nop
 800bb24:	3728      	adds	r7, #40	; 0x28
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	40023800 	.word	0x40023800
 800bb30:	40020c00 	.word	0x40020c00

0800bb34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b08a      	sub	sp, #40	; 0x28
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb3c:	f107 0314 	add.w	r3, r7, #20
 800bb40:	2200      	movs	r2, #0
 800bb42:	601a      	str	r2, [r3, #0]
 800bb44:	605a      	str	r2, [r3, #4]
 800bb46:	609a      	str	r2, [r3, #8]
 800bb48:	60da      	str	r2, [r3, #12]
 800bb4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a25      	ldr	r2, [pc, #148]	; (800bbe8 <HAL_SPI_MspInit+0xb4>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d144      	bne.n	800bbe0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800bb56:	4b25      	ldr	r3, [pc, #148]	; (800bbec <HAL_SPI_MspInit+0xb8>)
 800bb58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb5a:	4a24      	ldr	r2, [pc, #144]	; (800bbec <HAL_SPI_MspInit+0xb8>)
 800bb5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bb60:	6413      	str	r3, [r2, #64]	; 0x40
 800bb62:	4b22      	ldr	r3, [pc, #136]	; (800bbec <HAL_SPI_MspInit+0xb8>)
 800bb64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb6a:	613b      	str	r3, [r7, #16]
 800bb6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800bb6e:	4b1f      	ldr	r3, [pc, #124]	; (800bbec <HAL_SPI_MspInit+0xb8>)
 800bb70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb72:	4a1e      	ldr	r2, [pc, #120]	; (800bbec <HAL_SPI_MspInit+0xb8>)
 800bb74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb78:	6313      	str	r3, [r2, #48]	; 0x30
 800bb7a:	4b1c      	ldr	r3, [pc, #112]	; (800bbec <HAL_SPI_MspInit+0xb8>)
 800bb7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb82:	60fb      	str	r3, [r7, #12]
 800bb84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bb86:	4b19      	ldr	r3, [pc, #100]	; (800bbec <HAL_SPI_MspInit+0xb8>)
 800bb88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb8a:	4a18      	ldr	r2, [pc, #96]	; (800bbec <HAL_SPI_MspInit+0xb8>)
 800bb8c:	f043 0302 	orr.w	r3, r3, #2
 800bb90:	6313      	str	r3, [r2, #48]	; 0x30
 800bb92:	4b16      	ldr	r3, [pc, #88]	; (800bbec <HAL_SPI_MspInit+0xb8>)
 800bb94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb96:	f003 0302 	and.w	r3, r3, #2
 800bb9a:	60bb      	str	r3, [r7, #8]
 800bb9c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800bb9e:	2302      	movs	r3, #2
 800bba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bba2:	2302      	movs	r3, #2
 800bba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bba6:	2300      	movs	r3, #0
 800bba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800bbae:	2305      	movs	r3, #5
 800bbb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800bbb2:	f107 0314 	add.w	r3, r7, #20
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	480d      	ldr	r0, [pc, #52]	; (800bbf0 <HAL_SPI_MspInit+0xbc>)
 800bbba:	f7f6 fa15 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800bbbe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800bbc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbc4:	2302      	movs	r3, #2
 800bbc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800bbd0:	2305      	movs	r3, #5
 800bbd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bbd4:	f107 0314 	add.w	r3, r7, #20
 800bbd8:	4619      	mov	r1, r3
 800bbda:	4806      	ldr	r0, [pc, #24]	; (800bbf4 <HAL_SPI_MspInit+0xc0>)
 800bbdc:	f7f6 fa04 	bl	8001fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800bbe0:	bf00      	nop
 800bbe2:	3728      	adds	r7, #40	; 0x28
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	40003800 	.word	0x40003800
 800bbec:	40023800 	.word	0x40023800
 800bbf0:	40022000 	.word	0x40022000
 800bbf4:	40020400 	.word	0x40020400

0800bbf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b089      	sub	sp, #36	; 0x24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4a2e      	ldr	r2, [pc, #184]	; (800bcc0 <HAL_TIM_Base_MspInit+0xc8>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d10c      	bne.n	800bc24 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800bc0a:	4b2e      	ldr	r3, [pc, #184]	; (800bcc4 <HAL_TIM_Base_MspInit+0xcc>)
 800bc0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc0e:	4a2d      	ldr	r2, [pc, #180]	; (800bcc4 <HAL_TIM_Base_MspInit+0xcc>)
 800bc10:	f043 0301 	orr.w	r3, r3, #1
 800bc14:	6453      	str	r3, [r2, #68]	; 0x44
 800bc16:	4b2b      	ldr	r3, [pc, #172]	; (800bcc4 <HAL_TIM_Base_MspInit+0xcc>)
 800bc18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc1a:	f003 0301 	and.w	r3, r3, #1
 800bc1e:	61fb      	str	r3, [r7, #28]
 800bc20:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800bc22:	e046      	b.n	800bcb2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc2c:	d10c      	bne.n	800bc48 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800bc2e:	4b25      	ldr	r3, [pc, #148]	; (800bcc4 <HAL_TIM_Base_MspInit+0xcc>)
 800bc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc32:	4a24      	ldr	r2, [pc, #144]	; (800bcc4 <HAL_TIM_Base_MspInit+0xcc>)
 800bc34:	f043 0301 	orr.w	r3, r3, #1
 800bc38:	6413      	str	r3, [r2, #64]	; 0x40
 800bc3a:	4b22      	ldr	r3, [pc, #136]	; (800bcc4 <HAL_TIM_Base_MspInit+0xcc>)
 800bc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc3e:	f003 0301 	and.w	r3, r3, #1
 800bc42:	61bb      	str	r3, [r7, #24]
 800bc44:	69bb      	ldr	r3, [r7, #24]
}
 800bc46:	e034      	b.n	800bcb2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4a1e      	ldr	r2, [pc, #120]	; (800bcc8 <HAL_TIM_Base_MspInit+0xd0>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d10c      	bne.n	800bc6c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800bc52:	4b1c      	ldr	r3, [pc, #112]	; (800bcc4 <HAL_TIM_Base_MspInit+0xcc>)
 800bc54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc56:	4a1b      	ldr	r2, [pc, #108]	; (800bcc4 <HAL_TIM_Base_MspInit+0xcc>)
 800bc58:	f043 0302 	orr.w	r3, r3, #2
 800bc5c:	6413      	str	r3, [r2, #64]	; 0x40
 800bc5e:	4b19      	ldr	r3, [pc, #100]	; (800bcc4 <HAL_TIM_Base_MspInit+0xcc>)
 800bc60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc62:	f003 0302 	and.w	r3, r3, #2
 800bc66:	617b      	str	r3, [r7, #20]
 800bc68:	697b      	ldr	r3, [r7, #20]
}
 800bc6a:	e022      	b.n	800bcb2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a16      	ldr	r2, [pc, #88]	; (800bccc <HAL_TIM_Base_MspInit+0xd4>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d10c      	bne.n	800bc90 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800bc76:	4b13      	ldr	r3, [pc, #76]	; (800bcc4 <HAL_TIM_Base_MspInit+0xcc>)
 800bc78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc7a:	4a12      	ldr	r2, [pc, #72]	; (800bcc4 <HAL_TIM_Base_MspInit+0xcc>)
 800bc7c:	f043 0308 	orr.w	r3, r3, #8
 800bc80:	6413      	str	r3, [r2, #64]	; 0x40
 800bc82:	4b10      	ldr	r3, [pc, #64]	; (800bcc4 <HAL_TIM_Base_MspInit+0xcc>)
 800bc84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc86:	f003 0308 	and.w	r3, r3, #8
 800bc8a:	613b      	str	r3, [r7, #16]
 800bc8c:	693b      	ldr	r3, [r7, #16]
}
 800bc8e:	e010      	b.n	800bcb2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4a0e      	ldr	r2, [pc, #56]	; (800bcd0 <HAL_TIM_Base_MspInit+0xd8>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d10b      	bne.n	800bcb2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800bc9a:	4b0a      	ldr	r3, [pc, #40]	; (800bcc4 <HAL_TIM_Base_MspInit+0xcc>)
 800bc9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc9e:	4a09      	ldr	r2, [pc, #36]	; (800bcc4 <HAL_TIM_Base_MspInit+0xcc>)
 800bca0:	f043 0302 	orr.w	r3, r3, #2
 800bca4:	6453      	str	r3, [r2, #68]	; 0x44
 800bca6:	4b07      	ldr	r3, [pc, #28]	; (800bcc4 <HAL_TIM_Base_MspInit+0xcc>)
 800bca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcaa:	f003 0302 	and.w	r3, r3, #2
 800bcae:	60fb      	str	r3, [r7, #12]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
}
 800bcb2:	bf00      	nop
 800bcb4:	3724      	adds	r7, #36	; 0x24
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr
 800bcbe:	bf00      	nop
 800bcc0:	40010000 	.word	0x40010000
 800bcc4:	40023800 	.word	0x40023800
 800bcc8:	40000400 	.word	0x40000400
 800bccc:	40000c00 	.word	0x40000c00
 800bcd0:	40010400 	.word	0x40010400

0800bcd4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a0a      	ldr	r2, [pc, #40]	; (800bd0c <HAL_TIM_PWM_MspInit+0x38>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d10b      	bne.n	800bcfe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800bce6:	4b0a      	ldr	r3, [pc, #40]	; (800bd10 <HAL_TIM_PWM_MspInit+0x3c>)
 800bce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcea:	4a09      	ldr	r2, [pc, #36]	; (800bd10 <HAL_TIM_PWM_MspInit+0x3c>)
 800bcec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcf0:	6413      	str	r3, [r2, #64]	; 0x40
 800bcf2:	4b07      	ldr	r3, [pc, #28]	; (800bd10 <HAL_TIM_PWM_MspInit+0x3c>)
 800bcf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcfa:	60fb      	str	r3, [r7, #12]
 800bcfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800bcfe:	bf00      	nop
 800bd00:	3714      	adds	r7, #20
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	40001800 	.word	0x40001800
 800bd10:	40023800 	.word	0x40023800

0800bd14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b08c      	sub	sp, #48	; 0x30
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd1c:	f107 031c 	add.w	r3, r7, #28
 800bd20:	2200      	movs	r2, #0
 800bd22:	601a      	str	r2, [r3, #0]
 800bd24:	605a      	str	r2, [r3, #4]
 800bd26:	609a      	str	r2, [r3, #8]
 800bd28:	60da      	str	r2, [r3, #12]
 800bd2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a45      	ldr	r2, [pc, #276]	; (800be48 <HAL_TIM_MspPostInit+0x134>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d11d      	bne.n	800bd72 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd36:	4b45      	ldr	r3, [pc, #276]	; (800be4c <HAL_TIM_MspPostInit+0x138>)
 800bd38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd3a:	4a44      	ldr	r2, [pc, #272]	; (800be4c <HAL_TIM_MspPostInit+0x138>)
 800bd3c:	f043 0301 	orr.w	r3, r3, #1
 800bd40:	6313      	str	r3, [r2, #48]	; 0x30
 800bd42:	4b42      	ldr	r3, [pc, #264]	; (800be4c <HAL_TIM_MspPostInit+0x138>)
 800bd44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd46:	f003 0301 	and.w	r3, r3, #1
 800bd4a:	61bb      	str	r3, [r7, #24]
 800bd4c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800bd4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd54:	2302      	movs	r3, #2
 800bd56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800bd60:	2301      	movs	r3, #1
 800bd62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800bd64:	f107 031c 	add.w	r3, r7, #28
 800bd68:	4619      	mov	r1, r3
 800bd6a:	4839      	ldr	r0, [pc, #228]	; (800be50 <HAL_TIM_MspPostInit+0x13c>)
 800bd6c:	f7f6 f93c 	bl	8001fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800bd70:	e065      	b.n	800be3e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM2)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd7a:	d11d      	bne.n	800bdb8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd7c:	4b33      	ldr	r3, [pc, #204]	; (800be4c <HAL_TIM_MspPostInit+0x138>)
 800bd7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd80:	4a32      	ldr	r2, [pc, #200]	; (800be4c <HAL_TIM_MspPostInit+0x138>)
 800bd82:	f043 0301 	orr.w	r3, r3, #1
 800bd86:	6313      	str	r3, [r2, #48]	; 0x30
 800bd88:	4b30      	ldr	r3, [pc, #192]	; (800be4c <HAL_TIM_MspPostInit+0x138>)
 800bd8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd8c:	f003 0301 	and.w	r3, r3, #1
 800bd90:	617b      	str	r3, [r7, #20]
 800bd92:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800bd94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd9a:	2302      	movs	r3, #2
 800bd9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bda2:	2300      	movs	r3, #0
 800bda4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800bda6:	2301      	movs	r3, #1
 800bda8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800bdaa:	f107 031c 	add.w	r3, r7, #28
 800bdae:	4619      	mov	r1, r3
 800bdb0:	4827      	ldr	r0, [pc, #156]	; (800be50 <HAL_TIM_MspPostInit+0x13c>)
 800bdb2:	f7f6 f919 	bl	8001fe8 <HAL_GPIO_Init>
}
 800bdb6:	e042      	b.n	800be3e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4a25      	ldr	r2, [pc, #148]	; (800be54 <HAL_TIM_MspPostInit+0x140>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d11c      	bne.n	800bdfc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800bdc2:	4b22      	ldr	r3, [pc, #136]	; (800be4c <HAL_TIM_MspPostInit+0x138>)
 800bdc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdc6:	4a21      	ldr	r2, [pc, #132]	; (800be4c <HAL_TIM_MspPostInit+0x138>)
 800bdc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdcc:	6313      	str	r3, [r2, #48]	; 0x30
 800bdce:	4b1f      	ldr	r3, [pc, #124]	; (800be4c <HAL_TIM_MspPostInit+0x138>)
 800bdd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdd6:	613b      	str	r3, [r7, #16]
 800bdd8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800bdda:	2301      	movs	r3, #1
 800bddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdde:	2302      	movs	r3, #2
 800bde0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bde2:	2300      	movs	r3, #0
 800bde4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bde6:	2300      	movs	r3, #0
 800bde8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800bdea:	2302      	movs	r3, #2
 800bdec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800bdee:	f107 031c 	add.w	r3, r7, #28
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	4818      	ldr	r0, [pc, #96]	; (800be58 <HAL_TIM_MspPostInit+0x144>)
 800bdf6:	f7f6 f8f7 	bl	8001fe8 <HAL_GPIO_Init>
}
 800bdfa:	e020      	b.n	800be3e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM12)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a16      	ldr	r2, [pc, #88]	; (800be5c <HAL_TIM_MspPostInit+0x148>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d11b      	bne.n	800be3e <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800be06:	4b11      	ldr	r3, [pc, #68]	; (800be4c <HAL_TIM_MspPostInit+0x138>)
 800be08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be0a:	4a10      	ldr	r2, [pc, #64]	; (800be4c <HAL_TIM_MspPostInit+0x138>)
 800be0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be10:	6313      	str	r3, [r2, #48]	; 0x30
 800be12:	4b0e      	ldr	r3, [pc, #56]	; (800be4c <HAL_TIM_MspPostInit+0x138>)
 800be14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be1a:	60fb      	str	r3, [r7, #12]
 800be1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800be1e:	2340      	movs	r3, #64	; 0x40
 800be20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be22:	2302      	movs	r3, #2
 800be24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be26:	2300      	movs	r3, #0
 800be28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800be2a:	2300      	movs	r3, #0
 800be2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800be2e:	2309      	movs	r3, #9
 800be30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800be32:	f107 031c 	add.w	r3, r7, #28
 800be36:	4619      	mov	r1, r3
 800be38:	4809      	ldr	r0, [pc, #36]	; (800be60 <HAL_TIM_MspPostInit+0x14c>)
 800be3a:	f7f6 f8d5 	bl	8001fe8 <HAL_GPIO_Init>
}
 800be3e:	bf00      	nop
 800be40:	3730      	adds	r7, #48	; 0x30
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	40010000 	.word	0x40010000
 800be4c:	40023800 	.word	0x40023800
 800be50:	40020000 	.word	0x40020000
 800be54:	40000c00 	.word	0x40000c00
 800be58:	40022000 	.word	0x40022000
 800be5c:	40001800 	.word	0x40001800
 800be60:	40021c00 	.word	0x40021c00

0800be64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b08a      	sub	sp, #40	; 0x28
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be6c:	f107 0314 	add.w	r3, r7, #20
 800be70:	2200      	movs	r2, #0
 800be72:	601a      	str	r2, [r3, #0]
 800be74:	605a      	str	r2, [r3, #4]
 800be76:	609a      	str	r2, [r3, #8]
 800be78:	60da      	str	r2, [r3, #12]
 800be7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a25      	ldr	r2, [pc, #148]	; (800bf18 <HAL_UART_MspInit+0xb4>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d144      	bne.n	800bf10 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800be86:	4b25      	ldr	r3, [pc, #148]	; (800bf1c <HAL_UART_MspInit+0xb8>)
 800be88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be8a:	4a24      	ldr	r2, [pc, #144]	; (800bf1c <HAL_UART_MspInit+0xb8>)
 800be8c:	f043 0310 	orr.w	r3, r3, #16
 800be90:	6453      	str	r3, [r2, #68]	; 0x44
 800be92:	4b22      	ldr	r3, [pc, #136]	; (800bf1c <HAL_UART_MspInit+0xb8>)
 800be94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be96:	f003 0310 	and.w	r3, r3, #16
 800be9a:	613b      	str	r3, [r7, #16]
 800be9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800be9e:	4b1f      	ldr	r3, [pc, #124]	; (800bf1c <HAL_UART_MspInit+0xb8>)
 800bea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bea2:	4a1e      	ldr	r2, [pc, #120]	; (800bf1c <HAL_UART_MspInit+0xb8>)
 800bea4:	f043 0302 	orr.w	r3, r3, #2
 800bea8:	6313      	str	r3, [r2, #48]	; 0x30
 800beaa:	4b1c      	ldr	r3, [pc, #112]	; (800bf1c <HAL_UART_MspInit+0xb8>)
 800beac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beae:	f003 0302 	and.w	r3, r3, #2
 800beb2:	60fb      	str	r3, [r7, #12]
 800beb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800beb6:	4b19      	ldr	r3, [pc, #100]	; (800bf1c <HAL_UART_MspInit+0xb8>)
 800beb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beba:	4a18      	ldr	r2, [pc, #96]	; (800bf1c <HAL_UART_MspInit+0xb8>)
 800bebc:	f043 0301 	orr.w	r3, r3, #1
 800bec0:	6313      	str	r3, [r2, #48]	; 0x30
 800bec2:	4b16      	ldr	r3, [pc, #88]	; (800bf1c <HAL_UART_MspInit+0xb8>)
 800bec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bec6:	f003 0301 	and.w	r3, r3, #1
 800beca:	60bb      	str	r3, [r7, #8]
 800becc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800bece:	2380      	movs	r3, #128	; 0x80
 800bed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bed2:	2302      	movs	r3, #2
 800bed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bed6:	2300      	movs	r3, #0
 800bed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800beda:	2300      	movs	r3, #0
 800bedc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800bede:	2307      	movs	r3, #7
 800bee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800bee2:	f107 0314 	add.w	r3, r7, #20
 800bee6:	4619      	mov	r1, r3
 800bee8:	480d      	ldr	r0, [pc, #52]	; (800bf20 <HAL_UART_MspInit+0xbc>)
 800beea:	f7f6 f87d 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800beee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bef4:	2302      	movs	r3, #2
 800bef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bef8:	2300      	movs	r3, #0
 800befa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800befc:	2300      	movs	r3, #0
 800befe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800bf00:	2307      	movs	r3, #7
 800bf02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800bf04:	f107 0314 	add.w	r3, r7, #20
 800bf08:	4619      	mov	r1, r3
 800bf0a:	4806      	ldr	r0, [pc, #24]	; (800bf24 <HAL_UART_MspInit+0xc0>)
 800bf0c:	f7f6 f86c 	bl	8001fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800bf10:	bf00      	nop
 800bf12:	3728      	adds	r7, #40	; 0x28
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	40011000 	.word	0x40011000
 800bf1c:	40023800 	.word	0x40023800
 800bf20:	40020400 	.word	0x40020400
 800bf24:	40020000 	.word	0x40020000

0800bf28 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b086      	sub	sp, #24
 800bf2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800bf2e:	1d3b      	adds	r3, r7, #4
 800bf30:	2200      	movs	r2, #0
 800bf32:	601a      	str	r2, [r3, #0]
 800bf34:	605a      	str	r2, [r3, #4]
 800bf36:	609a      	str	r2, [r3, #8]
 800bf38:	60da      	str	r2, [r3, #12]
 800bf3a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800bf3c:	4b3a      	ldr	r3, [pc, #232]	; (800c028 <HAL_FMC_MspInit+0x100>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d16d      	bne.n	800c020 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800bf44:	4b38      	ldr	r3, [pc, #224]	; (800c028 <HAL_FMC_MspInit+0x100>)
 800bf46:	2201      	movs	r2, #1
 800bf48:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800bf4a:	4b38      	ldr	r3, [pc, #224]	; (800c02c <HAL_FMC_MspInit+0x104>)
 800bf4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf4e:	4a37      	ldr	r2, [pc, #220]	; (800c02c <HAL_FMC_MspInit+0x104>)
 800bf50:	f043 0301 	orr.w	r3, r3, #1
 800bf54:	6393      	str	r3, [r2, #56]	; 0x38
 800bf56:	4b35      	ldr	r3, [pc, #212]	; (800c02c <HAL_FMC_MspInit+0x104>)
 800bf58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf5a:	f003 0301 	and.w	r3, r3, #1
 800bf5e:	603b      	str	r3, [r7, #0]
 800bf60:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800bf62:	f64f 7383 	movw	r3, #65411	; 0xff83
 800bf66:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf68:	2302      	movs	r3, #2
 800bf6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf70:	2303      	movs	r3, #3
 800bf72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bf74:	230c      	movs	r3, #12
 800bf76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bf78:	1d3b      	adds	r3, r7, #4
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	482c      	ldr	r0, [pc, #176]	; (800c030 <HAL_FMC_MspInit+0x108>)
 800bf7e:	f7f6 f833 	bl	8001fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800bf82:	f248 1333 	movw	r3, #33075	; 0x8133
 800bf86:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf88:	2302      	movs	r3, #2
 800bf8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf90:	2303      	movs	r3, #3
 800bf92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bf94:	230c      	movs	r3, #12
 800bf96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bf98:	1d3b      	adds	r3, r7, #4
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	4825      	ldr	r0, [pc, #148]	; (800c034 <HAL_FMC_MspInit+0x10c>)
 800bf9e:	f7f6 f823 	bl	8001fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800bfa2:	f24c 7303 	movw	r3, #50947	; 0xc703
 800bfa6:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfa8:	2302      	movs	r3, #2
 800bfaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfac:	2300      	movs	r3, #0
 800bfae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfb0:	2303      	movs	r3, #3
 800bfb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bfb4:	230c      	movs	r3, #12
 800bfb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bfb8:	1d3b      	adds	r3, r7, #4
 800bfba:	4619      	mov	r1, r3
 800bfbc:	481e      	ldr	r0, [pc, #120]	; (800c038 <HAL_FMC_MspInit+0x110>)
 800bfbe:	f7f6 f813 	bl	8001fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800bfc2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800bfc6:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfc8:	2302      	movs	r3, #2
 800bfca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfd0:	2303      	movs	r3, #3
 800bfd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bfd4:	230c      	movs	r3, #12
 800bfd6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800bfd8:	1d3b      	adds	r3, r7, #4
 800bfda:	4619      	mov	r1, r3
 800bfdc:	4817      	ldr	r0, [pc, #92]	; (800c03c <HAL_FMC_MspInit+0x114>)
 800bfde:	f7f6 f803 	bl	8001fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800bfe2:	2328      	movs	r3, #40	; 0x28
 800bfe4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfe6:	2302      	movs	r3, #2
 800bfe8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfea:	2300      	movs	r3, #0
 800bfec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfee:	2303      	movs	r3, #3
 800bff0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bff2:	230c      	movs	r3, #12
 800bff4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800bff6:	1d3b      	adds	r3, r7, #4
 800bff8:	4619      	mov	r1, r3
 800bffa:	4811      	ldr	r0, [pc, #68]	; (800c040 <HAL_FMC_MspInit+0x118>)
 800bffc:	f7f5 fff4 	bl	8001fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800c000:	2308      	movs	r3, #8
 800c002:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c004:	2302      	movs	r3, #2
 800c006:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c008:	2300      	movs	r3, #0
 800c00a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c00c:	2303      	movs	r3, #3
 800c00e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800c010:	230c      	movs	r3, #12
 800c012:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800c014:	1d3b      	adds	r3, r7, #4
 800c016:	4619      	mov	r1, r3
 800c018:	480a      	ldr	r0, [pc, #40]	; (800c044 <HAL_FMC_MspInit+0x11c>)
 800c01a:	f7f5 ffe5 	bl	8001fe8 <HAL_GPIO_Init>
 800c01e:	e000      	b.n	800c022 <HAL_FMC_MspInit+0xfa>
    return;
 800c020:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800c022:	3718      	adds	r7, #24
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}
 800c028:	20000208 	.word	0x20000208
 800c02c:	40023800 	.word	0x40023800
 800c030:	40021000 	.word	0x40021000
 800c034:	40021800 	.word	0x40021800
 800c038:	40020c00 	.word	0x40020c00
 800c03c:	40021400 	.word	0x40021400
 800c040:	40021c00 	.word	0x40021c00
 800c044:	40020800 	.word	0x40020800

0800c048 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800c050:	f7ff ff6a 	bl	800bf28 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800c054:	bf00      	nop
 800c056:	3708      	adds	r7, #8
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b08a      	sub	sp, #40	; 0x28
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a2b      	ldr	r2, [pc, #172]	; (800c118 <HAL_SAI_MspInit+0xbc>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d124      	bne.n	800c0b8 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800c06e:	4b2b      	ldr	r3, [pc, #172]	; (800c11c <HAL_SAI_MspInit+0xc0>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d10b      	bne.n	800c08e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800c076:	4b2a      	ldr	r3, [pc, #168]	; (800c120 <HAL_SAI_MspInit+0xc4>)
 800c078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c07a:	4a29      	ldr	r2, [pc, #164]	; (800c120 <HAL_SAI_MspInit+0xc4>)
 800c07c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c080:	6453      	str	r3, [r2, #68]	; 0x44
 800c082:	4b27      	ldr	r3, [pc, #156]	; (800c120 <HAL_SAI_MspInit+0xc4>)
 800c084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c086:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c08a:	613b      	str	r3, [r7, #16]
 800c08c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800c08e:	4b23      	ldr	r3, [pc, #140]	; (800c11c <HAL_SAI_MspInit+0xc0>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	3301      	adds	r3, #1
 800c094:	4a21      	ldr	r2, [pc, #132]	; (800c11c <HAL_SAI_MspInit+0xc0>)
 800c096:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800c098:	23f0      	movs	r3, #240	; 0xf0
 800c09a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c09c:	2302      	movs	r3, #2
 800c09e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800c0a8:	230a      	movs	r3, #10
 800c0aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800c0ac:	f107 0314 	add.w	r3, r7, #20
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	481c      	ldr	r0, [pc, #112]	; (800c124 <HAL_SAI_MspInit+0xc8>)
 800c0b4:	f7f5 ff98 	bl	8001fe8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a1a      	ldr	r2, [pc, #104]	; (800c128 <HAL_SAI_MspInit+0xcc>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d125      	bne.n	800c10e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800c0c2:	4b16      	ldr	r3, [pc, #88]	; (800c11c <HAL_SAI_MspInit+0xc0>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d10b      	bne.n	800c0e2 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800c0ca:	4b15      	ldr	r3, [pc, #84]	; (800c120 <HAL_SAI_MspInit+0xc4>)
 800c0cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ce:	4a14      	ldr	r2, [pc, #80]	; (800c120 <HAL_SAI_MspInit+0xc4>)
 800c0d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c0d4:	6453      	str	r3, [r2, #68]	; 0x44
 800c0d6:	4b12      	ldr	r3, [pc, #72]	; (800c120 <HAL_SAI_MspInit+0xc4>)
 800c0d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0de:	60fb      	str	r3, [r7, #12]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800c0e2:	4b0e      	ldr	r3, [pc, #56]	; (800c11c <HAL_SAI_MspInit+0xc0>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	4a0c      	ldr	r2, [pc, #48]	; (800c11c <HAL_SAI_MspInit+0xc0>)
 800c0ea:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800c0ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0f2:	2302      	movs	r3, #2
 800c0f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800c0fe:	230a      	movs	r3, #10
 800c100:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800c102:	f107 0314 	add.w	r3, r7, #20
 800c106:	4619      	mov	r1, r3
 800c108:	4808      	ldr	r0, [pc, #32]	; (800c12c <HAL_SAI_MspInit+0xd0>)
 800c10a:	f7f5 ff6d 	bl	8001fe8 <HAL_GPIO_Init>

    }
}
 800c10e:	bf00      	nop
 800c110:	3728      	adds	r7, #40	; 0x28
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	40015c04 	.word	0x40015c04
 800c11c:	2000020c 	.word	0x2000020c
 800c120:	40023800 	.word	0x40023800
 800c124:	40022000 	.word	0x40022000
 800c128:	40015c24 	.word	0x40015c24
 800c12c:	40021800 	.word	0x40021800

0800c130 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b08c      	sub	sp, #48	; 0x30
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800c138:	2300      	movs	r3, #0
 800c13a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800c13c:	2300      	movs	r3, #0
 800c13e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800c140:	2200      	movs	r2, #0
 800c142:	6879      	ldr	r1, [r7, #4]
 800c144:	2036      	movs	r0, #54	; 0x36
 800c146:	f7f5 f9cd 	bl	80014e4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800c14a:	2036      	movs	r0, #54	; 0x36
 800c14c:	f7f5 f9e6 	bl	800151c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800c150:	4b1f      	ldr	r3, [pc, #124]	; (800c1d0 <HAL_InitTick+0xa0>)
 800c152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c154:	4a1e      	ldr	r2, [pc, #120]	; (800c1d0 <HAL_InitTick+0xa0>)
 800c156:	f043 0310 	orr.w	r3, r3, #16
 800c15a:	6413      	str	r3, [r2, #64]	; 0x40
 800c15c:	4b1c      	ldr	r3, [pc, #112]	; (800c1d0 <HAL_InitTick+0xa0>)
 800c15e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c160:	f003 0310 	and.w	r3, r3, #16
 800c164:	60fb      	str	r3, [r7, #12]
 800c166:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c168:	f107 0210 	add.w	r2, r7, #16
 800c16c:	f107 0314 	add.w	r3, r7, #20
 800c170:	4611      	mov	r1, r2
 800c172:	4618      	mov	r0, r3
 800c174:	f7f8 fee2 	bl	8004f3c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800c178:	f7f8 feb8 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
 800c17c:	4603      	mov	r3, r0
 800c17e:	005b      	lsls	r3, r3, #1
 800c180:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800c182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c184:	4a13      	ldr	r2, [pc, #76]	; (800c1d4 <HAL_InitTick+0xa4>)
 800c186:	fba2 2303 	umull	r2, r3, r2, r3
 800c18a:	0c9b      	lsrs	r3, r3, #18
 800c18c:	3b01      	subs	r3, #1
 800c18e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800c190:	4b11      	ldr	r3, [pc, #68]	; (800c1d8 <HAL_InitTick+0xa8>)
 800c192:	4a12      	ldr	r2, [pc, #72]	; (800c1dc <HAL_InitTick+0xac>)
 800c194:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800c196:	4b10      	ldr	r3, [pc, #64]	; (800c1d8 <HAL_InitTick+0xa8>)
 800c198:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c19c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800c19e:	4a0e      	ldr	r2, [pc, #56]	; (800c1d8 <HAL_InitTick+0xa8>)
 800c1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800c1a4:	4b0c      	ldr	r3, [pc, #48]	; (800c1d8 <HAL_InitTick+0xa8>)
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c1aa:	4b0b      	ldr	r3, [pc, #44]	; (800c1d8 <HAL_InitTick+0xa8>)
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800c1b0:	4809      	ldr	r0, [pc, #36]	; (800c1d8 <HAL_InitTick+0xa8>)
 800c1b2:	f7fa fb7d 	bl	80068b0 <HAL_TIM_Base_Init>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d104      	bne.n	800c1c6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800c1bc:	4806      	ldr	r0, [pc, #24]	; (800c1d8 <HAL_InitTick+0xa8>)
 800c1be:	f7fa fba3 	bl	8006908 <HAL_TIM_Base_Start_IT>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	e000      	b.n	800c1c8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800c1c6:	2301      	movs	r3, #1
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3730      	adds	r7, #48	; 0x30
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	40023800 	.word	0x40023800
 800c1d4:	431bde83 	.word	0x431bde83
 800c1d8:	20000a7c 	.word	0x20000a7c
 800c1dc:	40001000 	.word	0x40001000

0800c1e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c1e4:	bf00      	nop
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ec:	4770      	bx	lr

0800c1ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c1ee:	b480      	push	{r7}
 800c1f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c1f2:	e7fe      	b.n	800c1f2 <HardFault_Handler+0x4>

0800c1f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c1f8:	e7fe      	b.n	800c1f8 <MemManage_Handler+0x4>

0800c1fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c1fa:	b480      	push	{r7}
 800c1fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c1fe:	e7fe      	b.n	800c1fe <BusFault_Handler+0x4>

0800c200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c200:	b480      	push	{r7}
 800c202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c204:	e7fe      	b.n	800c204 <UsageFault_Handler+0x4>

0800c206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c206:	b480      	push	{r7}
 800c208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c20a:	bf00      	nop
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr

0800c214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c214:	b480      	push	{r7}
 800c216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c218:	bf00      	nop
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr

0800c222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c222:	b480      	push	{r7}
 800c224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c226:	bf00      	nop
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800c234:	2001      	movs	r0, #1
 800c236:	f7f6 f89b 	bl	8002370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800c23a:	bf00      	nop
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800c23e:	b580      	push	{r7, lr}
 800c240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800c242:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c246:	f7f6 f893 	bl	8002370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800c24a:	bf00      	nop
 800c24c:	bd80      	pop	{r7, pc}
	...

0800c250 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800c254:	4802      	ldr	r0, [pc, #8]	; (800c260 <TIM6_DAC_IRQHandler+0x10>)
 800c256:	f7fa fbac 	bl	80069b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800c25a:	bf00      	nop
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	20000a7c 	.word	0x20000a7c

0800c264 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800c268:	4802      	ldr	r0, [pc, #8]	; (800c274 <OTG_FS_IRQHandler+0x10>)
 800c26a:	f7f6 fa99 	bl	80027a0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800c26e:	bf00      	nop
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	20000e88 	.word	0x20000e88

0800c278 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800c27c:	4802      	ldr	r0, [pc, #8]	; (800c288 <LTDC_IRQHandler+0x10>)
 800c27e:	f7f7 fe47 	bl	8003f10 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800c282:	bf00      	nop
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	200006b8 	.word	0x200006b8

0800c28c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800c290:	4802      	ldr	r0, [pc, #8]	; (800c29c <DMA2D_IRQHandler+0x10>)
 800c292:	f7f5 fc6b 	bl	8001b6c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800c296:	bf00      	nop
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	200008ec 	.word	0x200008ec

0800c2a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800c2a8:	4b11      	ldr	r3, [pc, #68]	; (800c2f0 <_sbrk+0x50>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d102      	bne.n	800c2b6 <_sbrk+0x16>
		heap_end = &end;
 800c2b0:	4b0f      	ldr	r3, [pc, #60]	; (800c2f0 <_sbrk+0x50>)
 800c2b2:	4a10      	ldr	r2, [pc, #64]	; (800c2f4 <_sbrk+0x54>)
 800c2b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800c2b6:	4b0e      	ldr	r3, [pc, #56]	; (800c2f0 <_sbrk+0x50>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800c2bc:	4b0c      	ldr	r3, [pc, #48]	; (800c2f0 <_sbrk+0x50>)
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	4413      	add	r3, r2
 800c2c4:	466a      	mov	r2, sp
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d907      	bls.n	800c2da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800c2ca:	f000 f9f3 	bl	800c6b4 <__errno>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	230c      	movs	r3, #12
 800c2d2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800c2d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c2d8:	e006      	b.n	800c2e8 <_sbrk+0x48>
	}

	heap_end += incr;
 800c2da:	4b05      	ldr	r3, [pc, #20]	; (800c2f0 <_sbrk+0x50>)
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4413      	add	r3, r2
 800c2e2:	4a03      	ldr	r2, [pc, #12]	; (800c2f0 <_sbrk+0x50>)
 800c2e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3710      	adds	r7, #16
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	20000210 	.word	0x20000210
 800c2f4:	20001150 	.word	0x20001150

0800c2f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c2fc:	4b15      	ldr	r3, [pc, #84]	; (800c354 <SystemInit+0x5c>)
 800c2fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c302:	4a14      	ldr	r2, [pc, #80]	; (800c354 <SystemInit+0x5c>)
 800c304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c30c:	4b12      	ldr	r3, [pc, #72]	; (800c358 <SystemInit+0x60>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4a11      	ldr	r2, [pc, #68]	; (800c358 <SystemInit+0x60>)
 800c312:	f043 0301 	orr.w	r3, r3, #1
 800c316:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c318:	4b0f      	ldr	r3, [pc, #60]	; (800c358 <SystemInit+0x60>)
 800c31a:	2200      	movs	r2, #0
 800c31c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c31e:	4b0e      	ldr	r3, [pc, #56]	; (800c358 <SystemInit+0x60>)
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	490d      	ldr	r1, [pc, #52]	; (800c358 <SystemInit+0x60>)
 800c324:	4b0d      	ldr	r3, [pc, #52]	; (800c35c <SystemInit+0x64>)
 800c326:	4013      	ands	r3, r2
 800c328:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800c32a:	4b0b      	ldr	r3, [pc, #44]	; (800c358 <SystemInit+0x60>)
 800c32c:	4a0c      	ldr	r2, [pc, #48]	; (800c360 <SystemInit+0x68>)
 800c32e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c330:	4b09      	ldr	r3, [pc, #36]	; (800c358 <SystemInit+0x60>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4a08      	ldr	r2, [pc, #32]	; (800c358 <SystemInit+0x60>)
 800c336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c33a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800c33c:	4b06      	ldr	r3, [pc, #24]	; (800c358 <SystemInit+0x60>)
 800c33e:	2200      	movs	r2, #0
 800c340:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c342:	4b04      	ldr	r3, [pc, #16]	; (800c354 <SystemInit+0x5c>)
 800c344:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c348:	609a      	str	r2, [r3, #8]
#endif
}
 800c34a:	bf00      	nop
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr
 800c354:	e000ed00 	.word	0xe000ed00
 800c358:	40023800 	.word	0x40023800
 800c35c:	fef6ffff 	.word	0xfef6ffff
 800c360:	24003010 	.word	0x24003010

0800c364 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c368:	4802      	ldr	r0, [pc, #8]	; (800c374 <MX_USB_HOST_Process+0x10>)
 800c36a:	f7fc fe05 	bl	8008f78 <USBH_Process>
}
 800c36e:	bf00      	nop
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	20000abc 	.word	0x20000abc

0800c378 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c386:	4618      	mov	r0, r3
 800c388:	f7fd f898 	bl	80094bc <USBH_LL_IncTimer>
}
 800c38c:	bf00      	nop
 800c38e:	3708      	adds	r7, #8
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7fd f8dd 	bl	8009562 <USBH_LL_Connect>
}
 800c3a8:	bf00      	nop
 800c3aa:	3708      	adds	r7, #8
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7fd f8f5 	bl	80095ae <USBH_LL_Disconnect>
}
 800c3c4:	bf00      	nop
 800c3c6:	3708      	adds	r7, #8
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	70fb      	strb	r3, [r7, #3]
 800c3d8:	4613      	mov	r3, r2
 800c3da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c3dc:	bf00      	nop
 800c3de:	370c      	adds	r7, #12
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr

0800c3e8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7fd f88a 	bl	8009510 <USBH_LL_PortEnabled>
} 
 800c3fc:	bf00      	nop
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c412:	4618      	mov	r0, r3
 800c414:	f7fd f88a 	bl	800952c <USBH_LL_PortDisabled>
} 
 800c418:	bf00      	nop
 800c41a:	3708      	adds	r7, #8
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c428:	2300      	movs	r3, #0
 800c42a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c42c:	2300      	movs	r3, #0
 800c42e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c436:	4618      	mov	r0, r3
 800c438:	f7f6 fab8 	bl	80029ac <HAL_HCD_Start>
 800c43c:	4603      	mov	r3, r0
 800c43e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c440:	7bfb      	ldrb	r3, [r7, #15]
 800c442:	4618      	mov	r0, r3
 800c444:	f000 f8e0 	bl	800c608 <USBH_Get_USB_Status>
 800c448:	4603      	mov	r3, r0
 800c44a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c44c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3710      	adds	r7, #16
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}

0800c456 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c456:	b580      	push	{r7, lr}
 800c458:	b084      	sub	sp, #16
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c45e:	2300      	movs	r3, #0
 800c460:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c462:	2300      	movs	r3, #0
 800c464:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7f6 fac0 	bl	80029f2 <HAL_HCD_Stop>
 800c472:	4603      	mov	r3, r0
 800c474:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c476:	7bfb      	ldrb	r3, [r7, #15]
 800c478:	4618      	mov	r0, r3
 800c47a:	f000 f8c5 	bl	800c608 <USBH_Get_USB_Status>
 800c47e:	4603      	mov	r3, r0
 800c480:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800c482:	7bbb      	ldrb	r3, [r7, #14]
}
 800c484:	4618      	mov	r0, r3
 800c486:	3710      	adds	r7, #16
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c494:	2301      	movs	r3, #1
 800c496:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7f6 fae7 	bl	8002a72 <HAL_HCD_GetCurrentSpeed>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d007      	beq.n	800c4ba <USBH_LL_GetSpeed+0x2e>
 800c4aa:	2b01      	cmp	r3, #1
 800c4ac:	d302      	bcc.n	800c4b4 <USBH_LL_GetSpeed+0x28>
 800c4ae:	2b02      	cmp	r3, #2
 800c4b0:	d006      	beq.n	800c4c0 <USBH_LL_GetSpeed+0x34>
 800c4b2:	e008      	b.n	800c4c6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c4b8:	e008      	b.n	800c4cc <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	73fb      	strb	r3, [r7, #15]
    break;
 800c4be:	e005      	b.n	800c4cc <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c4c0:	2302      	movs	r3, #2
 800c4c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c4c4:	e002      	b.n	800c4cc <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	73fb      	strb	r3, [r7, #15]
    break;
 800c4ca:	bf00      	nop
  }
  return  speed;
 800c4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3710      	adds	r7, #16
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b084      	sub	sp, #16
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f7f6 fa9d 	bl	8002a2c <HAL_HCD_ResetPort>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800c4f6:	7bfb      	ldrb	r3, [r7, #15]
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f000 f885 	bl	800c608 <USBH_Get_USB_Status>
 800c4fe:	4603      	mov	r3, r0
 800c500:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c502:	7bbb      	ldrb	r3, [r7, #14]
}
 800c504:	4618      	mov	r0, r3
 800c506:	3710      	adds	r7, #16
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c50c:	b590      	push	{r4, r7, lr}
 800c50e:	b089      	sub	sp, #36	; 0x24
 800c510:	af04      	add	r7, sp, #16
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	4608      	mov	r0, r1
 800c516:	4611      	mov	r1, r2
 800c518:	461a      	mov	r2, r3
 800c51a:	4603      	mov	r3, r0
 800c51c:	70fb      	strb	r3, [r7, #3]
 800c51e:	460b      	mov	r3, r1
 800c520:	70bb      	strb	r3, [r7, #2]
 800c522:	4613      	mov	r3, r2
 800c524:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c526:	2300      	movs	r3, #0
 800c528:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c52a:	2300      	movs	r3, #0
 800c52c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800c534:	787c      	ldrb	r4, [r7, #1]
 800c536:	78ba      	ldrb	r2, [r7, #2]
 800c538:	78f9      	ldrb	r1, [r7, #3]
 800c53a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c53c:	9302      	str	r3, [sp, #8]
 800c53e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c542:	9301      	str	r3, [sp, #4]
 800c544:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c548:	9300      	str	r3, [sp, #0]
 800c54a:	4623      	mov	r3, r4
 800c54c:	f7f5 ff28 	bl	80023a0 <HAL_HCD_HC_Init>
 800c550:	4603      	mov	r3, r0
 800c552:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c554:	7bfb      	ldrb	r3, [r7, #15]
 800c556:	4618      	mov	r0, r3
 800c558:	f000 f856 	bl	800c608 <USBH_Get_USB_Status>
 800c55c:	4603      	mov	r3, r0
 800c55e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c560:	7bbb      	ldrb	r3, [r7, #14]
}
 800c562:	4618      	mov	r0, r3
 800c564:	3714      	adds	r7, #20
 800c566:	46bd      	mov	sp, r7
 800c568:	bd90      	pop	{r4, r7, pc}

0800c56a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c56a:	b590      	push	{r4, r7, lr}
 800c56c:	b089      	sub	sp, #36	; 0x24
 800c56e:	af04      	add	r7, sp, #16
 800c570:	6078      	str	r0, [r7, #4]
 800c572:	4608      	mov	r0, r1
 800c574:	4611      	mov	r1, r2
 800c576:	461a      	mov	r2, r3
 800c578:	4603      	mov	r3, r0
 800c57a:	70fb      	strb	r3, [r7, #3]
 800c57c:	460b      	mov	r3, r1
 800c57e:	70bb      	strb	r3, [r7, #2]
 800c580:	4613      	mov	r3, r2
 800c582:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c584:	2300      	movs	r3, #0
 800c586:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c588:	2300      	movs	r3, #0
 800c58a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800c592:	787c      	ldrb	r4, [r7, #1]
 800c594:	78ba      	ldrb	r2, [r7, #2]
 800c596:	78f9      	ldrb	r1, [r7, #3]
 800c598:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c59c:	9303      	str	r3, [sp, #12]
 800c59e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c5a0:	9302      	str	r3, [sp, #8]
 800c5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a4:	9301      	str	r3, [sp, #4]
 800c5a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5aa:	9300      	str	r3, [sp, #0]
 800c5ac:	4623      	mov	r3, r4
 800c5ae:	f7f5 ff8f 	bl	80024d0 <HAL_HCD_HC_SubmitRequest>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c5b6:	7bfb      	ldrb	r3, [r7, #15]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f000 f825 	bl	800c608 <USBH_Get_USB_Status>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c5c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3714      	adds	r7, #20
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd90      	pop	{r4, r7, pc}

0800c5cc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c5de:	78fa      	ldrb	r2, [r7, #3]
 800c5e0:	4611      	mov	r1, r2
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7f6 fa30 	bl	8002a48 <HAL_HCD_HC_GetURBState>
 800c5e8:	4603      	mov	r3, r0
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3708      	adds	r7, #8
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}

0800c5f2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c5f2:	b580      	push	{r7, lr}
 800c5f4:	b082      	sub	sp, #8
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f7f4 fe98 	bl	8001330 <HAL_Delay>
}
 800c600:	bf00      	nop
 800c602:	3708      	adds	r7, #8
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c608:	b480      	push	{r7}
 800c60a:	b085      	sub	sp, #20
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	4603      	mov	r3, r0
 800c610:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c612:	2300      	movs	r3, #0
 800c614:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c616:	79fb      	ldrb	r3, [r7, #7]
 800c618:	2b03      	cmp	r3, #3
 800c61a:	d817      	bhi.n	800c64c <USBH_Get_USB_Status+0x44>
 800c61c:	a201      	add	r2, pc, #4	; (adr r2, 800c624 <USBH_Get_USB_Status+0x1c>)
 800c61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c622:	bf00      	nop
 800c624:	0800c635 	.word	0x0800c635
 800c628:	0800c63b 	.word	0x0800c63b
 800c62c:	0800c641 	.word	0x0800c641
 800c630:	0800c647 	.word	0x0800c647
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c634:	2300      	movs	r3, #0
 800c636:	73fb      	strb	r3, [r7, #15]
    break;
 800c638:	e00b      	b.n	800c652 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c63a:	2302      	movs	r3, #2
 800c63c:	73fb      	strb	r3, [r7, #15]
    break;
 800c63e:	e008      	b.n	800c652 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c640:	2301      	movs	r3, #1
 800c642:	73fb      	strb	r3, [r7, #15]
    break;
 800c644:	e005      	b.n	800c652 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c646:	2302      	movs	r3, #2
 800c648:	73fb      	strb	r3, [r7, #15]
    break;
 800c64a:	e002      	b.n	800c652 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c64c:	2302      	movs	r3, #2
 800c64e:	73fb      	strb	r3, [r7, #15]
    break;
 800c650:	bf00      	nop
  }
  return usb_status;
 800c652:	7bfb      	ldrb	r3, [r7, #15]
}
 800c654:	4618      	mov	r0, r3
 800c656:	3714      	adds	r7, #20
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr

0800c660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800c660:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c698 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c664:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c666:	e003      	b.n	800c670 <LoopCopyDataInit>

0800c668 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c668:	4b0c      	ldr	r3, [pc, #48]	; (800c69c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c66a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c66c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c66e:	3104      	adds	r1, #4

0800c670 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c670:	480b      	ldr	r0, [pc, #44]	; (800c6a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c672:	4b0c      	ldr	r3, [pc, #48]	; (800c6a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c674:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c676:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c678:	d3f6      	bcc.n	800c668 <CopyDataInit>
  ldr  r2, =_sbss
 800c67a:	4a0b      	ldr	r2, [pc, #44]	; (800c6a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c67c:	e002      	b.n	800c684 <LoopFillZerobss>

0800c67e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c67e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c680:	f842 3b04 	str.w	r3, [r2], #4

0800c684 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c684:	4b09      	ldr	r3, [pc, #36]	; (800c6ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c686:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c688:	d3f9      	bcc.n	800c67e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800c68a:	f7ff fe35 	bl	800c2f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c68e:	f000 f817 	bl	800c6c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c692:	f7fd fdbf 	bl	800a214 <main>
  bx  lr    
 800c696:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800c698:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800c69c:	0800ea68 	.word	0x0800ea68
  ldr  r0, =_sdata
 800c6a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c6a4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 800c6a8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800c6ac:	20001150 	.word	0x20001150

0800c6b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c6b0:	e7fe      	b.n	800c6b0 <ADC_IRQHandler>
	...

0800c6b4 <__errno>:
 800c6b4:	4b01      	ldr	r3, [pc, #4]	; (800c6bc <__errno+0x8>)
 800c6b6:	6818      	ldr	r0, [r3, #0]
 800c6b8:	4770      	bx	lr
 800c6ba:	bf00      	nop
 800c6bc:	20000010 	.word	0x20000010

0800c6c0 <__libc_init_array>:
 800c6c0:	b570      	push	{r4, r5, r6, lr}
 800c6c2:	4e0d      	ldr	r6, [pc, #52]	; (800c6f8 <__libc_init_array+0x38>)
 800c6c4:	4c0d      	ldr	r4, [pc, #52]	; (800c6fc <__libc_init_array+0x3c>)
 800c6c6:	1ba4      	subs	r4, r4, r6
 800c6c8:	10a4      	asrs	r4, r4, #2
 800c6ca:	2500      	movs	r5, #0
 800c6cc:	42a5      	cmp	r5, r4
 800c6ce:	d109      	bne.n	800c6e4 <__libc_init_array+0x24>
 800c6d0:	4e0b      	ldr	r6, [pc, #44]	; (800c700 <__libc_init_array+0x40>)
 800c6d2:	4c0c      	ldr	r4, [pc, #48]	; (800c704 <__libc_init_array+0x44>)
 800c6d4:	f000 fc26 	bl	800cf24 <_init>
 800c6d8:	1ba4      	subs	r4, r4, r6
 800c6da:	10a4      	asrs	r4, r4, #2
 800c6dc:	2500      	movs	r5, #0
 800c6de:	42a5      	cmp	r5, r4
 800c6e0:	d105      	bne.n	800c6ee <__libc_init_array+0x2e>
 800c6e2:	bd70      	pop	{r4, r5, r6, pc}
 800c6e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c6e8:	4798      	blx	r3
 800c6ea:	3501      	adds	r5, #1
 800c6ec:	e7ee      	b.n	800c6cc <__libc_init_array+0xc>
 800c6ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c6f2:	4798      	blx	r3
 800c6f4:	3501      	adds	r5, #1
 800c6f6:	e7f2      	b.n	800c6de <__libc_init_array+0x1e>
 800c6f8:	0800ea60 	.word	0x0800ea60
 800c6fc:	0800ea60 	.word	0x0800ea60
 800c700:	0800ea60 	.word	0x0800ea60
 800c704:	0800ea64 	.word	0x0800ea64

0800c708 <memset>:
 800c708:	4402      	add	r2, r0
 800c70a:	4603      	mov	r3, r0
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d100      	bne.n	800c712 <memset+0xa>
 800c710:	4770      	bx	lr
 800c712:	f803 1b01 	strb.w	r1, [r3], #1
 800c716:	e7f9      	b.n	800c70c <memset+0x4>

0800c718 <_free_r>:
 800c718:	b538      	push	{r3, r4, r5, lr}
 800c71a:	4605      	mov	r5, r0
 800c71c:	2900      	cmp	r1, #0
 800c71e:	d045      	beq.n	800c7ac <_free_r+0x94>
 800c720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c724:	1f0c      	subs	r4, r1, #4
 800c726:	2b00      	cmp	r3, #0
 800c728:	bfb8      	it	lt
 800c72a:	18e4      	addlt	r4, r4, r3
 800c72c:	f000 f8cc 	bl	800c8c8 <__malloc_lock>
 800c730:	4a1f      	ldr	r2, [pc, #124]	; (800c7b0 <_free_r+0x98>)
 800c732:	6813      	ldr	r3, [r2, #0]
 800c734:	4610      	mov	r0, r2
 800c736:	b933      	cbnz	r3, 800c746 <_free_r+0x2e>
 800c738:	6063      	str	r3, [r4, #4]
 800c73a:	6014      	str	r4, [r2, #0]
 800c73c:	4628      	mov	r0, r5
 800c73e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c742:	f000 b8c2 	b.w	800c8ca <__malloc_unlock>
 800c746:	42a3      	cmp	r3, r4
 800c748:	d90c      	bls.n	800c764 <_free_r+0x4c>
 800c74a:	6821      	ldr	r1, [r4, #0]
 800c74c:	1862      	adds	r2, r4, r1
 800c74e:	4293      	cmp	r3, r2
 800c750:	bf04      	itt	eq
 800c752:	681a      	ldreq	r2, [r3, #0]
 800c754:	685b      	ldreq	r3, [r3, #4]
 800c756:	6063      	str	r3, [r4, #4]
 800c758:	bf04      	itt	eq
 800c75a:	1852      	addeq	r2, r2, r1
 800c75c:	6022      	streq	r2, [r4, #0]
 800c75e:	6004      	str	r4, [r0, #0]
 800c760:	e7ec      	b.n	800c73c <_free_r+0x24>
 800c762:	4613      	mov	r3, r2
 800c764:	685a      	ldr	r2, [r3, #4]
 800c766:	b10a      	cbz	r2, 800c76c <_free_r+0x54>
 800c768:	42a2      	cmp	r2, r4
 800c76a:	d9fa      	bls.n	800c762 <_free_r+0x4a>
 800c76c:	6819      	ldr	r1, [r3, #0]
 800c76e:	1858      	adds	r0, r3, r1
 800c770:	42a0      	cmp	r0, r4
 800c772:	d10b      	bne.n	800c78c <_free_r+0x74>
 800c774:	6820      	ldr	r0, [r4, #0]
 800c776:	4401      	add	r1, r0
 800c778:	1858      	adds	r0, r3, r1
 800c77a:	4282      	cmp	r2, r0
 800c77c:	6019      	str	r1, [r3, #0]
 800c77e:	d1dd      	bne.n	800c73c <_free_r+0x24>
 800c780:	6810      	ldr	r0, [r2, #0]
 800c782:	6852      	ldr	r2, [r2, #4]
 800c784:	605a      	str	r2, [r3, #4]
 800c786:	4401      	add	r1, r0
 800c788:	6019      	str	r1, [r3, #0]
 800c78a:	e7d7      	b.n	800c73c <_free_r+0x24>
 800c78c:	d902      	bls.n	800c794 <_free_r+0x7c>
 800c78e:	230c      	movs	r3, #12
 800c790:	602b      	str	r3, [r5, #0]
 800c792:	e7d3      	b.n	800c73c <_free_r+0x24>
 800c794:	6820      	ldr	r0, [r4, #0]
 800c796:	1821      	adds	r1, r4, r0
 800c798:	428a      	cmp	r2, r1
 800c79a:	bf04      	itt	eq
 800c79c:	6811      	ldreq	r1, [r2, #0]
 800c79e:	6852      	ldreq	r2, [r2, #4]
 800c7a0:	6062      	str	r2, [r4, #4]
 800c7a2:	bf04      	itt	eq
 800c7a4:	1809      	addeq	r1, r1, r0
 800c7a6:	6021      	streq	r1, [r4, #0]
 800c7a8:	605c      	str	r4, [r3, #4]
 800c7aa:	e7c7      	b.n	800c73c <_free_r+0x24>
 800c7ac:	bd38      	pop	{r3, r4, r5, pc}
 800c7ae:	bf00      	nop
 800c7b0:	20000214 	.word	0x20000214

0800c7b4 <_malloc_r>:
 800c7b4:	b570      	push	{r4, r5, r6, lr}
 800c7b6:	1ccd      	adds	r5, r1, #3
 800c7b8:	f025 0503 	bic.w	r5, r5, #3
 800c7bc:	3508      	adds	r5, #8
 800c7be:	2d0c      	cmp	r5, #12
 800c7c0:	bf38      	it	cc
 800c7c2:	250c      	movcc	r5, #12
 800c7c4:	2d00      	cmp	r5, #0
 800c7c6:	4606      	mov	r6, r0
 800c7c8:	db01      	blt.n	800c7ce <_malloc_r+0x1a>
 800c7ca:	42a9      	cmp	r1, r5
 800c7cc:	d903      	bls.n	800c7d6 <_malloc_r+0x22>
 800c7ce:	230c      	movs	r3, #12
 800c7d0:	6033      	str	r3, [r6, #0]
 800c7d2:	2000      	movs	r0, #0
 800c7d4:	bd70      	pop	{r4, r5, r6, pc}
 800c7d6:	f000 f877 	bl	800c8c8 <__malloc_lock>
 800c7da:	4a21      	ldr	r2, [pc, #132]	; (800c860 <_malloc_r+0xac>)
 800c7dc:	6814      	ldr	r4, [r2, #0]
 800c7de:	4621      	mov	r1, r4
 800c7e0:	b991      	cbnz	r1, 800c808 <_malloc_r+0x54>
 800c7e2:	4c20      	ldr	r4, [pc, #128]	; (800c864 <_malloc_r+0xb0>)
 800c7e4:	6823      	ldr	r3, [r4, #0]
 800c7e6:	b91b      	cbnz	r3, 800c7f0 <_malloc_r+0x3c>
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	f000 f83d 	bl	800c868 <_sbrk_r>
 800c7ee:	6020      	str	r0, [r4, #0]
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	f000 f838 	bl	800c868 <_sbrk_r>
 800c7f8:	1c43      	adds	r3, r0, #1
 800c7fa:	d124      	bne.n	800c846 <_malloc_r+0x92>
 800c7fc:	230c      	movs	r3, #12
 800c7fe:	6033      	str	r3, [r6, #0]
 800c800:	4630      	mov	r0, r6
 800c802:	f000 f862 	bl	800c8ca <__malloc_unlock>
 800c806:	e7e4      	b.n	800c7d2 <_malloc_r+0x1e>
 800c808:	680b      	ldr	r3, [r1, #0]
 800c80a:	1b5b      	subs	r3, r3, r5
 800c80c:	d418      	bmi.n	800c840 <_malloc_r+0x8c>
 800c80e:	2b0b      	cmp	r3, #11
 800c810:	d90f      	bls.n	800c832 <_malloc_r+0x7e>
 800c812:	600b      	str	r3, [r1, #0]
 800c814:	50cd      	str	r5, [r1, r3]
 800c816:	18cc      	adds	r4, r1, r3
 800c818:	4630      	mov	r0, r6
 800c81a:	f000 f856 	bl	800c8ca <__malloc_unlock>
 800c81e:	f104 000b 	add.w	r0, r4, #11
 800c822:	1d23      	adds	r3, r4, #4
 800c824:	f020 0007 	bic.w	r0, r0, #7
 800c828:	1ac3      	subs	r3, r0, r3
 800c82a:	d0d3      	beq.n	800c7d4 <_malloc_r+0x20>
 800c82c:	425a      	negs	r2, r3
 800c82e:	50e2      	str	r2, [r4, r3]
 800c830:	e7d0      	b.n	800c7d4 <_malloc_r+0x20>
 800c832:	428c      	cmp	r4, r1
 800c834:	684b      	ldr	r3, [r1, #4]
 800c836:	bf16      	itet	ne
 800c838:	6063      	strne	r3, [r4, #4]
 800c83a:	6013      	streq	r3, [r2, #0]
 800c83c:	460c      	movne	r4, r1
 800c83e:	e7eb      	b.n	800c818 <_malloc_r+0x64>
 800c840:	460c      	mov	r4, r1
 800c842:	6849      	ldr	r1, [r1, #4]
 800c844:	e7cc      	b.n	800c7e0 <_malloc_r+0x2c>
 800c846:	1cc4      	adds	r4, r0, #3
 800c848:	f024 0403 	bic.w	r4, r4, #3
 800c84c:	42a0      	cmp	r0, r4
 800c84e:	d005      	beq.n	800c85c <_malloc_r+0xa8>
 800c850:	1a21      	subs	r1, r4, r0
 800c852:	4630      	mov	r0, r6
 800c854:	f000 f808 	bl	800c868 <_sbrk_r>
 800c858:	3001      	adds	r0, #1
 800c85a:	d0cf      	beq.n	800c7fc <_malloc_r+0x48>
 800c85c:	6025      	str	r5, [r4, #0]
 800c85e:	e7db      	b.n	800c818 <_malloc_r+0x64>
 800c860:	20000214 	.word	0x20000214
 800c864:	20000218 	.word	0x20000218

0800c868 <_sbrk_r>:
 800c868:	b538      	push	{r3, r4, r5, lr}
 800c86a:	4c06      	ldr	r4, [pc, #24]	; (800c884 <_sbrk_r+0x1c>)
 800c86c:	2300      	movs	r3, #0
 800c86e:	4605      	mov	r5, r0
 800c870:	4608      	mov	r0, r1
 800c872:	6023      	str	r3, [r4, #0]
 800c874:	f7ff fd14 	bl	800c2a0 <_sbrk>
 800c878:	1c43      	adds	r3, r0, #1
 800c87a:	d102      	bne.n	800c882 <_sbrk_r+0x1a>
 800c87c:	6823      	ldr	r3, [r4, #0]
 800c87e:	b103      	cbz	r3, 800c882 <_sbrk_r+0x1a>
 800c880:	602b      	str	r3, [r5, #0]
 800c882:	bd38      	pop	{r3, r4, r5, pc}
 800c884:	2000114c 	.word	0x2000114c

0800c888 <siprintf>:
 800c888:	b40e      	push	{r1, r2, r3}
 800c88a:	b500      	push	{lr}
 800c88c:	b09c      	sub	sp, #112	; 0x70
 800c88e:	ab1d      	add	r3, sp, #116	; 0x74
 800c890:	9002      	str	r0, [sp, #8]
 800c892:	9006      	str	r0, [sp, #24]
 800c894:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c898:	4809      	ldr	r0, [pc, #36]	; (800c8c0 <siprintf+0x38>)
 800c89a:	9107      	str	r1, [sp, #28]
 800c89c:	9104      	str	r1, [sp, #16]
 800c89e:	4909      	ldr	r1, [pc, #36]	; (800c8c4 <siprintf+0x3c>)
 800c8a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8a4:	9105      	str	r1, [sp, #20]
 800c8a6:	6800      	ldr	r0, [r0, #0]
 800c8a8:	9301      	str	r3, [sp, #4]
 800c8aa:	a902      	add	r1, sp, #8
 800c8ac:	f000 f868 	bl	800c980 <_svfiprintf_r>
 800c8b0:	9b02      	ldr	r3, [sp, #8]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	701a      	strb	r2, [r3, #0]
 800c8b6:	b01c      	add	sp, #112	; 0x70
 800c8b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8bc:	b003      	add	sp, #12
 800c8be:	4770      	bx	lr
 800c8c0:	20000010 	.word	0x20000010
 800c8c4:	ffff0208 	.word	0xffff0208

0800c8c8 <__malloc_lock>:
 800c8c8:	4770      	bx	lr

0800c8ca <__malloc_unlock>:
 800c8ca:	4770      	bx	lr

0800c8cc <__ssputs_r>:
 800c8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8d0:	688e      	ldr	r6, [r1, #8]
 800c8d2:	429e      	cmp	r6, r3
 800c8d4:	4682      	mov	sl, r0
 800c8d6:	460c      	mov	r4, r1
 800c8d8:	4690      	mov	r8, r2
 800c8da:	4699      	mov	r9, r3
 800c8dc:	d837      	bhi.n	800c94e <__ssputs_r+0x82>
 800c8de:	898a      	ldrh	r2, [r1, #12]
 800c8e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c8e4:	d031      	beq.n	800c94a <__ssputs_r+0x7e>
 800c8e6:	6825      	ldr	r5, [r4, #0]
 800c8e8:	6909      	ldr	r1, [r1, #16]
 800c8ea:	1a6f      	subs	r7, r5, r1
 800c8ec:	6965      	ldr	r5, [r4, #20]
 800c8ee:	2302      	movs	r3, #2
 800c8f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8f4:	fb95 f5f3 	sdiv	r5, r5, r3
 800c8f8:	f109 0301 	add.w	r3, r9, #1
 800c8fc:	443b      	add	r3, r7
 800c8fe:	429d      	cmp	r5, r3
 800c900:	bf38      	it	cc
 800c902:	461d      	movcc	r5, r3
 800c904:	0553      	lsls	r3, r2, #21
 800c906:	d530      	bpl.n	800c96a <__ssputs_r+0x9e>
 800c908:	4629      	mov	r1, r5
 800c90a:	f7ff ff53 	bl	800c7b4 <_malloc_r>
 800c90e:	4606      	mov	r6, r0
 800c910:	b950      	cbnz	r0, 800c928 <__ssputs_r+0x5c>
 800c912:	230c      	movs	r3, #12
 800c914:	f8ca 3000 	str.w	r3, [sl]
 800c918:	89a3      	ldrh	r3, [r4, #12]
 800c91a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c91e:	81a3      	strh	r3, [r4, #12]
 800c920:	f04f 30ff 	mov.w	r0, #4294967295
 800c924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c928:	463a      	mov	r2, r7
 800c92a:	6921      	ldr	r1, [r4, #16]
 800c92c:	f000 faa8 	bl	800ce80 <memcpy>
 800c930:	89a3      	ldrh	r3, [r4, #12]
 800c932:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c93a:	81a3      	strh	r3, [r4, #12]
 800c93c:	6126      	str	r6, [r4, #16]
 800c93e:	6165      	str	r5, [r4, #20]
 800c940:	443e      	add	r6, r7
 800c942:	1bed      	subs	r5, r5, r7
 800c944:	6026      	str	r6, [r4, #0]
 800c946:	60a5      	str	r5, [r4, #8]
 800c948:	464e      	mov	r6, r9
 800c94a:	454e      	cmp	r6, r9
 800c94c:	d900      	bls.n	800c950 <__ssputs_r+0x84>
 800c94e:	464e      	mov	r6, r9
 800c950:	4632      	mov	r2, r6
 800c952:	4641      	mov	r1, r8
 800c954:	6820      	ldr	r0, [r4, #0]
 800c956:	f000 fa9e 	bl	800ce96 <memmove>
 800c95a:	68a3      	ldr	r3, [r4, #8]
 800c95c:	1b9b      	subs	r3, r3, r6
 800c95e:	60a3      	str	r3, [r4, #8]
 800c960:	6823      	ldr	r3, [r4, #0]
 800c962:	441e      	add	r6, r3
 800c964:	6026      	str	r6, [r4, #0]
 800c966:	2000      	movs	r0, #0
 800c968:	e7dc      	b.n	800c924 <__ssputs_r+0x58>
 800c96a:	462a      	mov	r2, r5
 800c96c:	f000 faac 	bl	800cec8 <_realloc_r>
 800c970:	4606      	mov	r6, r0
 800c972:	2800      	cmp	r0, #0
 800c974:	d1e2      	bne.n	800c93c <__ssputs_r+0x70>
 800c976:	6921      	ldr	r1, [r4, #16]
 800c978:	4650      	mov	r0, sl
 800c97a:	f7ff fecd 	bl	800c718 <_free_r>
 800c97e:	e7c8      	b.n	800c912 <__ssputs_r+0x46>

0800c980 <_svfiprintf_r>:
 800c980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c984:	461d      	mov	r5, r3
 800c986:	898b      	ldrh	r3, [r1, #12]
 800c988:	061f      	lsls	r7, r3, #24
 800c98a:	b09d      	sub	sp, #116	; 0x74
 800c98c:	4680      	mov	r8, r0
 800c98e:	460c      	mov	r4, r1
 800c990:	4616      	mov	r6, r2
 800c992:	d50f      	bpl.n	800c9b4 <_svfiprintf_r+0x34>
 800c994:	690b      	ldr	r3, [r1, #16]
 800c996:	b96b      	cbnz	r3, 800c9b4 <_svfiprintf_r+0x34>
 800c998:	2140      	movs	r1, #64	; 0x40
 800c99a:	f7ff ff0b 	bl	800c7b4 <_malloc_r>
 800c99e:	6020      	str	r0, [r4, #0]
 800c9a0:	6120      	str	r0, [r4, #16]
 800c9a2:	b928      	cbnz	r0, 800c9b0 <_svfiprintf_r+0x30>
 800c9a4:	230c      	movs	r3, #12
 800c9a6:	f8c8 3000 	str.w	r3, [r8]
 800c9aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ae:	e0c8      	b.n	800cb42 <_svfiprintf_r+0x1c2>
 800c9b0:	2340      	movs	r3, #64	; 0x40
 800c9b2:	6163      	str	r3, [r4, #20]
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c9b8:	2320      	movs	r3, #32
 800c9ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9be:	2330      	movs	r3, #48	; 0x30
 800c9c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9c4:	9503      	str	r5, [sp, #12]
 800c9c6:	f04f 0b01 	mov.w	fp, #1
 800c9ca:	4637      	mov	r7, r6
 800c9cc:	463d      	mov	r5, r7
 800c9ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c9d2:	b10b      	cbz	r3, 800c9d8 <_svfiprintf_r+0x58>
 800c9d4:	2b25      	cmp	r3, #37	; 0x25
 800c9d6:	d13e      	bne.n	800ca56 <_svfiprintf_r+0xd6>
 800c9d8:	ebb7 0a06 	subs.w	sl, r7, r6
 800c9dc:	d00b      	beq.n	800c9f6 <_svfiprintf_r+0x76>
 800c9de:	4653      	mov	r3, sl
 800c9e0:	4632      	mov	r2, r6
 800c9e2:	4621      	mov	r1, r4
 800c9e4:	4640      	mov	r0, r8
 800c9e6:	f7ff ff71 	bl	800c8cc <__ssputs_r>
 800c9ea:	3001      	adds	r0, #1
 800c9ec:	f000 80a4 	beq.w	800cb38 <_svfiprintf_r+0x1b8>
 800c9f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9f2:	4453      	add	r3, sl
 800c9f4:	9309      	str	r3, [sp, #36]	; 0x24
 800c9f6:	783b      	ldrb	r3, [r7, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	f000 809d 	beq.w	800cb38 <_svfiprintf_r+0x1b8>
 800c9fe:	2300      	movs	r3, #0
 800ca00:	f04f 32ff 	mov.w	r2, #4294967295
 800ca04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca08:	9304      	str	r3, [sp, #16]
 800ca0a:	9307      	str	r3, [sp, #28]
 800ca0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca10:	931a      	str	r3, [sp, #104]	; 0x68
 800ca12:	462f      	mov	r7, r5
 800ca14:	2205      	movs	r2, #5
 800ca16:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ca1a:	4850      	ldr	r0, [pc, #320]	; (800cb5c <_svfiprintf_r+0x1dc>)
 800ca1c:	f7f3 fbf8 	bl	8000210 <memchr>
 800ca20:	9b04      	ldr	r3, [sp, #16]
 800ca22:	b9d0      	cbnz	r0, 800ca5a <_svfiprintf_r+0xda>
 800ca24:	06d9      	lsls	r1, r3, #27
 800ca26:	bf44      	itt	mi
 800ca28:	2220      	movmi	r2, #32
 800ca2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ca2e:	071a      	lsls	r2, r3, #28
 800ca30:	bf44      	itt	mi
 800ca32:	222b      	movmi	r2, #43	; 0x2b
 800ca34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ca38:	782a      	ldrb	r2, [r5, #0]
 800ca3a:	2a2a      	cmp	r2, #42	; 0x2a
 800ca3c:	d015      	beq.n	800ca6a <_svfiprintf_r+0xea>
 800ca3e:	9a07      	ldr	r2, [sp, #28]
 800ca40:	462f      	mov	r7, r5
 800ca42:	2000      	movs	r0, #0
 800ca44:	250a      	movs	r5, #10
 800ca46:	4639      	mov	r1, r7
 800ca48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca4c:	3b30      	subs	r3, #48	; 0x30
 800ca4e:	2b09      	cmp	r3, #9
 800ca50:	d94d      	bls.n	800caee <_svfiprintf_r+0x16e>
 800ca52:	b1b8      	cbz	r0, 800ca84 <_svfiprintf_r+0x104>
 800ca54:	e00f      	b.n	800ca76 <_svfiprintf_r+0xf6>
 800ca56:	462f      	mov	r7, r5
 800ca58:	e7b8      	b.n	800c9cc <_svfiprintf_r+0x4c>
 800ca5a:	4a40      	ldr	r2, [pc, #256]	; (800cb5c <_svfiprintf_r+0x1dc>)
 800ca5c:	1a80      	subs	r0, r0, r2
 800ca5e:	fa0b f000 	lsl.w	r0, fp, r0
 800ca62:	4318      	orrs	r0, r3
 800ca64:	9004      	str	r0, [sp, #16]
 800ca66:	463d      	mov	r5, r7
 800ca68:	e7d3      	b.n	800ca12 <_svfiprintf_r+0x92>
 800ca6a:	9a03      	ldr	r2, [sp, #12]
 800ca6c:	1d11      	adds	r1, r2, #4
 800ca6e:	6812      	ldr	r2, [r2, #0]
 800ca70:	9103      	str	r1, [sp, #12]
 800ca72:	2a00      	cmp	r2, #0
 800ca74:	db01      	blt.n	800ca7a <_svfiprintf_r+0xfa>
 800ca76:	9207      	str	r2, [sp, #28]
 800ca78:	e004      	b.n	800ca84 <_svfiprintf_r+0x104>
 800ca7a:	4252      	negs	r2, r2
 800ca7c:	f043 0302 	orr.w	r3, r3, #2
 800ca80:	9207      	str	r2, [sp, #28]
 800ca82:	9304      	str	r3, [sp, #16]
 800ca84:	783b      	ldrb	r3, [r7, #0]
 800ca86:	2b2e      	cmp	r3, #46	; 0x2e
 800ca88:	d10c      	bne.n	800caa4 <_svfiprintf_r+0x124>
 800ca8a:	787b      	ldrb	r3, [r7, #1]
 800ca8c:	2b2a      	cmp	r3, #42	; 0x2a
 800ca8e:	d133      	bne.n	800caf8 <_svfiprintf_r+0x178>
 800ca90:	9b03      	ldr	r3, [sp, #12]
 800ca92:	1d1a      	adds	r2, r3, #4
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	9203      	str	r2, [sp, #12]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	bfb8      	it	lt
 800ca9c:	f04f 33ff 	movlt.w	r3, #4294967295
 800caa0:	3702      	adds	r7, #2
 800caa2:	9305      	str	r3, [sp, #20]
 800caa4:	4d2e      	ldr	r5, [pc, #184]	; (800cb60 <_svfiprintf_r+0x1e0>)
 800caa6:	7839      	ldrb	r1, [r7, #0]
 800caa8:	2203      	movs	r2, #3
 800caaa:	4628      	mov	r0, r5
 800caac:	f7f3 fbb0 	bl	8000210 <memchr>
 800cab0:	b138      	cbz	r0, 800cac2 <_svfiprintf_r+0x142>
 800cab2:	2340      	movs	r3, #64	; 0x40
 800cab4:	1b40      	subs	r0, r0, r5
 800cab6:	fa03 f000 	lsl.w	r0, r3, r0
 800caba:	9b04      	ldr	r3, [sp, #16]
 800cabc:	4303      	orrs	r3, r0
 800cabe:	3701      	adds	r7, #1
 800cac0:	9304      	str	r3, [sp, #16]
 800cac2:	7839      	ldrb	r1, [r7, #0]
 800cac4:	4827      	ldr	r0, [pc, #156]	; (800cb64 <_svfiprintf_r+0x1e4>)
 800cac6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800caca:	2206      	movs	r2, #6
 800cacc:	1c7e      	adds	r6, r7, #1
 800cace:	f7f3 fb9f 	bl	8000210 <memchr>
 800cad2:	2800      	cmp	r0, #0
 800cad4:	d038      	beq.n	800cb48 <_svfiprintf_r+0x1c8>
 800cad6:	4b24      	ldr	r3, [pc, #144]	; (800cb68 <_svfiprintf_r+0x1e8>)
 800cad8:	bb13      	cbnz	r3, 800cb20 <_svfiprintf_r+0x1a0>
 800cada:	9b03      	ldr	r3, [sp, #12]
 800cadc:	3307      	adds	r3, #7
 800cade:	f023 0307 	bic.w	r3, r3, #7
 800cae2:	3308      	adds	r3, #8
 800cae4:	9303      	str	r3, [sp, #12]
 800cae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cae8:	444b      	add	r3, r9
 800caea:	9309      	str	r3, [sp, #36]	; 0x24
 800caec:	e76d      	b.n	800c9ca <_svfiprintf_r+0x4a>
 800caee:	fb05 3202 	mla	r2, r5, r2, r3
 800caf2:	2001      	movs	r0, #1
 800caf4:	460f      	mov	r7, r1
 800caf6:	e7a6      	b.n	800ca46 <_svfiprintf_r+0xc6>
 800caf8:	2300      	movs	r3, #0
 800cafa:	3701      	adds	r7, #1
 800cafc:	9305      	str	r3, [sp, #20]
 800cafe:	4619      	mov	r1, r3
 800cb00:	250a      	movs	r5, #10
 800cb02:	4638      	mov	r0, r7
 800cb04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb08:	3a30      	subs	r2, #48	; 0x30
 800cb0a:	2a09      	cmp	r2, #9
 800cb0c:	d903      	bls.n	800cb16 <_svfiprintf_r+0x196>
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d0c8      	beq.n	800caa4 <_svfiprintf_r+0x124>
 800cb12:	9105      	str	r1, [sp, #20]
 800cb14:	e7c6      	b.n	800caa4 <_svfiprintf_r+0x124>
 800cb16:	fb05 2101 	mla	r1, r5, r1, r2
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	4607      	mov	r7, r0
 800cb1e:	e7f0      	b.n	800cb02 <_svfiprintf_r+0x182>
 800cb20:	ab03      	add	r3, sp, #12
 800cb22:	9300      	str	r3, [sp, #0]
 800cb24:	4622      	mov	r2, r4
 800cb26:	4b11      	ldr	r3, [pc, #68]	; (800cb6c <_svfiprintf_r+0x1ec>)
 800cb28:	a904      	add	r1, sp, #16
 800cb2a:	4640      	mov	r0, r8
 800cb2c:	f3af 8000 	nop.w
 800cb30:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cb34:	4681      	mov	r9, r0
 800cb36:	d1d6      	bne.n	800cae6 <_svfiprintf_r+0x166>
 800cb38:	89a3      	ldrh	r3, [r4, #12]
 800cb3a:	065b      	lsls	r3, r3, #25
 800cb3c:	f53f af35 	bmi.w	800c9aa <_svfiprintf_r+0x2a>
 800cb40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb42:	b01d      	add	sp, #116	; 0x74
 800cb44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb48:	ab03      	add	r3, sp, #12
 800cb4a:	9300      	str	r3, [sp, #0]
 800cb4c:	4622      	mov	r2, r4
 800cb4e:	4b07      	ldr	r3, [pc, #28]	; (800cb6c <_svfiprintf_r+0x1ec>)
 800cb50:	a904      	add	r1, sp, #16
 800cb52:	4640      	mov	r0, r8
 800cb54:	f000 f882 	bl	800cc5c <_printf_i>
 800cb58:	e7ea      	b.n	800cb30 <_svfiprintf_r+0x1b0>
 800cb5a:	bf00      	nop
 800cb5c:	0800ea24 	.word	0x0800ea24
 800cb60:	0800ea2a 	.word	0x0800ea2a
 800cb64:	0800ea2e 	.word	0x0800ea2e
 800cb68:	00000000 	.word	0x00000000
 800cb6c:	0800c8cd 	.word	0x0800c8cd

0800cb70 <_printf_common>:
 800cb70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb74:	4691      	mov	r9, r2
 800cb76:	461f      	mov	r7, r3
 800cb78:	688a      	ldr	r2, [r1, #8]
 800cb7a:	690b      	ldr	r3, [r1, #16]
 800cb7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb80:	4293      	cmp	r3, r2
 800cb82:	bfb8      	it	lt
 800cb84:	4613      	movlt	r3, r2
 800cb86:	f8c9 3000 	str.w	r3, [r9]
 800cb8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb8e:	4606      	mov	r6, r0
 800cb90:	460c      	mov	r4, r1
 800cb92:	b112      	cbz	r2, 800cb9a <_printf_common+0x2a>
 800cb94:	3301      	adds	r3, #1
 800cb96:	f8c9 3000 	str.w	r3, [r9]
 800cb9a:	6823      	ldr	r3, [r4, #0]
 800cb9c:	0699      	lsls	r1, r3, #26
 800cb9e:	bf42      	ittt	mi
 800cba0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cba4:	3302      	addmi	r3, #2
 800cba6:	f8c9 3000 	strmi.w	r3, [r9]
 800cbaa:	6825      	ldr	r5, [r4, #0]
 800cbac:	f015 0506 	ands.w	r5, r5, #6
 800cbb0:	d107      	bne.n	800cbc2 <_printf_common+0x52>
 800cbb2:	f104 0a19 	add.w	sl, r4, #25
 800cbb6:	68e3      	ldr	r3, [r4, #12]
 800cbb8:	f8d9 2000 	ldr.w	r2, [r9]
 800cbbc:	1a9b      	subs	r3, r3, r2
 800cbbe:	42ab      	cmp	r3, r5
 800cbc0:	dc28      	bgt.n	800cc14 <_printf_common+0xa4>
 800cbc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cbc6:	6822      	ldr	r2, [r4, #0]
 800cbc8:	3300      	adds	r3, #0
 800cbca:	bf18      	it	ne
 800cbcc:	2301      	movne	r3, #1
 800cbce:	0692      	lsls	r2, r2, #26
 800cbd0:	d42d      	bmi.n	800cc2e <_printf_common+0xbe>
 800cbd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbd6:	4639      	mov	r1, r7
 800cbd8:	4630      	mov	r0, r6
 800cbda:	47c0      	blx	r8
 800cbdc:	3001      	adds	r0, #1
 800cbde:	d020      	beq.n	800cc22 <_printf_common+0xb2>
 800cbe0:	6823      	ldr	r3, [r4, #0]
 800cbe2:	68e5      	ldr	r5, [r4, #12]
 800cbe4:	f8d9 2000 	ldr.w	r2, [r9]
 800cbe8:	f003 0306 	and.w	r3, r3, #6
 800cbec:	2b04      	cmp	r3, #4
 800cbee:	bf08      	it	eq
 800cbf0:	1aad      	subeq	r5, r5, r2
 800cbf2:	68a3      	ldr	r3, [r4, #8]
 800cbf4:	6922      	ldr	r2, [r4, #16]
 800cbf6:	bf0c      	ite	eq
 800cbf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbfc:	2500      	movne	r5, #0
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	bfc4      	itt	gt
 800cc02:	1a9b      	subgt	r3, r3, r2
 800cc04:	18ed      	addgt	r5, r5, r3
 800cc06:	f04f 0900 	mov.w	r9, #0
 800cc0a:	341a      	adds	r4, #26
 800cc0c:	454d      	cmp	r5, r9
 800cc0e:	d11a      	bne.n	800cc46 <_printf_common+0xd6>
 800cc10:	2000      	movs	r0, #0
 800cc12:	e008      	b.n	800cc26 <_printf_common+0xb6>
 800cc14:	2301      	movs	r3, #1
 800cc16:	4652      	mov	r2, sl
 800cc18:	4639      	mov	r1, r7
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	47c0      	blx	r8
 800cc1e:	3001      	adds	r0, #1
 800cc20:	d103      	bne.n	800cc2a <_printf_common+0xba>
 800cc22:	f04f 30ff 	mov.w	r0, #4294967295
 800cc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc2a:	3501      	adds	r5, #1
 800cc2c:	e7c3      	b.n	800cbb6 <_printf_common+0x46>
 800cc2e:	18e1      	adds	r1, r4, r3
 800cc30:	1c5a      	adds	r2, r3, #1
 800cc32:	2030      	movs	r0, #48	; 0x30
 800cc34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc38:	4422      	add	r2, r4
 800cc3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc42:	3302      	adds	r3, #2
 800cc44:	e7c5      	b.n	800cbd2 <_printf_common+0x62>
 800cc46:	2301      	movs	r3, #1
 800cc48:	4622      	mov	r2, r4
 800cc4a:	4639      	mov	r1, r7
 800cc4c:	4630      	mov	r0, r6
 800cc4e:	47c0      	blx	r8
 800cc50:	3001      	adds	r0, #1
 800cc52:	d0e6      	beq.n	800cc22 <_printf_common+0xb2>
 800cc54:	f109 0901 	add.w	r9, r9, #1
 800cc58:	e7d8      	b.n	800cc0c <_printf_common+0x9c>
	...

0800cc5c <_printf_i>:
 800cc5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cc64:	460c      	mov	r4, r1
 800cc66:	7e09      	ldrb	r1, [r1, #24]
 800cc68:	b085      	sub	sp, #20
 800cc6a:	296e      	cmp	r1, #110	; 0x6e
 800cc6c:	4617      	mov	r7, r2
 800cc6e:	4606      	mov	r6, r0
 800cc70:	4698      	mov	r8, r3
 800cc72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc74:	f000 80b3 	beq.w	800cdde <_printf_i+0x182>
 800cc78:	d822      	bhi.n	800ccc0 <_printf_i+0x64>
 800cc7a:	2963      	cmp	r1, #99	; 0x63
 800cc7c:	d036      	beq.n	800ccec <_printf_i+0x90>
 800cc7e:	d80a      	bhi.n	800cc96 <_printf_i+0x3a>
 800cc80:	2900      	cmp	r1, #0
 800cc82:	f000 80b9 	beq.w	800cdf8 <_printf_i+0x19c>
 800cc86:	2958      	cmp	r1, #88	; 0x58
 800cc88:	f000 8083 	beq.w	800cd92 <_printf_i+0x136>
 800cc8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cc94:	e032      	b.n	800ccfc <_printf_i+0xa0>
 800cc96:	2964      	cmp	r1, #100	; 0x64
 800cc98:	d001      	beq.n	800cc9e <_printf_i+0x42>
 800cc9a:	2969      	cmp	r1, #105	; 0x69
 800cc9c:	d1f6      	bne.n	800cc8c <_printf_i+0x30>
 800cc9e:	6820      	ldr	r0, [r4, #0]
 800cca0:	6813      	ldr	r3, [r2, #0]
 800cca2:	0605      	lsls	r5, r0, #24
 800cca4:	f103 0104 	add.w	r1, r3, #4
 800cca8:	d52a      	bpl.n	800cd00 <_printf_i+0xa4>
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	6011      	str	r1, [r2, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	da03      	bge.n	800ccba <_printf_i+0x5e>
 800ccb2:	222d      	movs	r2, #45	; 0x2d
 800ccb4:	425b      	negs	r3, r3
 800ccb6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ccba:	486f      	ldr	r0, [pc, #444]	; (800ce78 <_printf_i+0x21c>)
 800ccbc:	220a      	movs	r2, #10
 800ccbe:	e039      	b.n	800cd34 <_printf_i+0xd8>
 800ccc0:	2973      	cmp	r1, #115	; 0x73
 800ccc2:	f000 809d 	beq.w	800ce00 <_printf_i+0x1a4>
 800ccc6:	d808      	bhi.n	800ccda <_printf_i+0x7e>
 800ccc8:	296f      	cmp	r1, #111	; 0x6f
 800ccca:	d020      	beq.n	800cd0e <_printf_i+0xb2>
 800cccc:	2970      	cmp	r1, #112	; 0x70
 800ccce:	d1dd      	bne.n	800cc8c <_printf_i+0x30>
 800ccd0:	6823      	ldr	r3, [r4, #0]
 800ccd2:	f043 0320 	orr.w	r3, r3, #32
 800ccd6:	6023      	str	r3, [r4, #0]
 800ccd8:	e003      	b.n	800cce2 <_printf_i+0x86>
 800ccda:	2975      	cmp	r1, #117	; 0x75
 800ccdc:	d017      	beq.n	800cd0e <_printf_i+0xb2>
 800ccde:	2978      	cmp	r1, #120	; 0x78
 800cce0:	d1d4      	bne.n	800cc8c <_printf_i+0x30>
 800cce2:	2378      	movs	r3, #120	; 0x78
 800cce4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cce8:	4864      	ldr	r0, [pc, #400]	; (800ce7c <_printf_i+0x220>)
 800ccea:	e055      	b.n	800cd98 <_printf_i+0x13c>
 800ccec:	6813      	ldr	r3, [r2, #0]
 800ccee:	1d19      	adds	r1, r3, #4
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	6011      	str	r1, [r2, #0]
 800ccf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	e08c      	b.n	800ce1a <_printf_i+0x1be>
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	6011      	str	r1, [r2, #0]
 800cd04:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cd08:	bf18      	it	ne
 800cd0a:	b21b      	sxthne	r3, r3
 800cd0c:	e7cf      	b.n	800ccae <_printf_i+0x52>
 800cd0e:	6813      	ldr	r3, [r2, #0]
 800cd10:	6825      	ldr	r5, [r4, #0]
 800cd12:	1d18      	adds	r0, r3, #4
 800cd14:	6010      	str	r0, [r2, #0]
 800cd16:	0628      	lsls	r0, r5, #24
 800cd18:	d501      	bpl.n	800cd1e <_printf_i+0xc2>
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	e002      	b.n	800cd24 <_printf_i+0xc8>
 800cd1e:	0668      	lsls	r0, r5, #25
 800cd20:	d5fb      	bpl.n	800cd1a <_printf_i+0xbe>
 800cd22:	881b      	ldrh	r3, [r3, #0]
 800cd24:	4854      	ldr	r0, [pc, #336]	; (800ce78 <_printf_i+0x21c>)
 800cd26:	296f      	cmp	r1, #111	; 0x6f
 800cd28:	bf14      	ite	ne
 800cd2a:	220a      	movne	r2, #10
 800cd2c:	2208      	moveq	r2, #8
 800cd2e:	2100      	movs	r1, #0
 800cd30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd34:	6865      	ldr	r5, [r4, #4]
 800cd36:	60a5      	str	r5, [r4, #8]
 800cd38:	2d00      	cmp	r5, #0
 800cd3a:	f2c0 8095 	blt.w	800ce68 <_printf_i+0x20c>
 800cd3e:	6821      	ldr	r1, [r4, #0]
 800cd40:	f021 0104 	bic.w	r1, r1, #4
 800cd44:	6021      	str	r1, [r4, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d13d      	bne.n	800cdc6 <_printf_i+0x16a>
 800cd4a:	2d00      	cmp	r5, #0
 800cd4c:	f040 808e 	bne.w	800ce6c <_printf_i+0x210>
 800cd50:	4665      	mov	r5, ip
 800cd52:	2a08      	cmp	r2, #8
 800cd54:	d10b      	bne.n	800cd6e <_printf_i+0x112>
 800cd56:	6823      	ldr	r3, [r4, #0]
 800cd58:	07db      	lsls	r3, r3, #31
 800cd5a:	d508      	bpl.n	800cd6e <_printf_i+0x112>
 800cd5c:	6923      	ldr	r3, [r4, #16]
 800cd5e:	6862      	ldr	r2, [r4, #4]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	bfde      	ittt	le
 800cd64:	2330      	movle	r3, #48	; 0x30
 800cd66:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd6e:	ebac 0305 	sub.w	r3, ip, r5
 800cd72:	6123      	str	r3, [r4, #16]
 800cd74:	f8cd 8000 	str.w	r8, [sp]
 800cd78:	463b      	mov	r3, r7
 800cd7a:	aa03      	add	r2, sp, #12
 800cd7c:	4621      	mov	r1, r4
 800cd7e:	4630      	mov	r0, r6
 800cd80:	f7ff fef6 	bl	800cb70 <_printf_common>
 800cd84:	3001      	adds	r0, #1
 800cd86:	d14d      	bne.n	800ce24 <_printf_i+0x1c8>
 800cd88:	f04f 30ff 	mov.w	r0, #4294967295
 800cd8c:	b005      	add	sp, #20
 800cd8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd92:	4839      	ldr	r0, [pc, #228]	; (800ce78 <_printf_i+0x21c>)
 800cd94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cd98:	6813      	ldr	r3, [r2, #0]
 800cd9a:	6821      	ldr	r1, [r4, #0]
 800cd9c:	1d1d      	adds	r5, r3, #4
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	6015      	str	r5, [r2, #0]
 800cda2:	060a      	lsls	r2, r1, #24
 800cda4:	d50b      	bpl.n	800cdbe <_printf_i+0x162>
 800cda6:	07ca      	lsls	r2, r1, #31
 800cda8:	bf44      	itt	mi
 800cdaa:	f041 0120 	orrmi.w	r1, r1, #32
 800cdae:	6021      	strmi	r1, [r4, #0]
 800cdb0:	b91b      	cbnz	r3, 800cdba <_printf_i+0x15e>
 800cdb2:	6822      	ldr	r2, [r4, #0]
 800cdb4:	f022 0220 	bic.w	r2, r2, #32
 800cdb8:	6022      	str	r2, [r4, #0]
 800cdba:	2210      	movs	r2, #16
 800cdbc:	e7b7      	b.n	800cd2e <_printf_i+0xd2>
 800cdbe:	064d      	lsls	r5, r1, #25
 800cdc0:	bf48      	it	mi
 800cdc2:	b29b      	uxthmi	r3, r3
 800cdc4:	e7ef      	b.n	800cda6 <_printf_i+0x14a>
 800cdc6:	4665      	mov	r5, ip
 800cdc8:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdcc:	fb02 3311 	mls	r3, r2, r1, r3
 800cdd0:	5cc3      	ldrb	r3, [r0, r3]
 800cdd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	2900      	cmp	r1, #0
 800cdda:	d1f5      	bne.n	800cdc8 <_printf_i+0x16c>
 800cddc:	e7b9      	b.n	800cd52 <_printf_i+0xf6>
 800cdde:	6813      	ldr	r3, [r2, #0]
 800cde0:	6825      	ldr	r5, [r4, #0]
 800cde2:	6961      	ldr	r1, [r4, #20]
 800cde4:	1d18      	adds	r0, r3, #4
 800cde6:	6010      	str	r0, [r2, #0]
 800cde8:	0628      	lsls	r0, r5, #24
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	d501      	bpl.n	800cdf2 <_printf_i+0x196>
 800cdee:	6019      	str	r1, [r3, #0]
 800cdf0:	e002      	b.n	800cdf8 <_printf_i+0x19c>
 800cdf2:	066a      	lsls	r2, r5, #25
 800cdf4:	d5fb      	bpl.n	800cdee <_printf_i+0x192>
 800cdf6:	8019      	strh	r1, [r3, #0]
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	6123      	str	r3, [r4, #16]
 800cdfc:	4665      	mov	r5, ip
 800cdfe:	e7b9      	b.n	800cd74 <_printf_i+0x118>
 800ce00:	6813      	ldr	r3, [r2, #0]
 800ce02:	1d19      	adds	r1, r3, #4
 800ce04:	6011      	str	r1, [r2, #0]
 800ce06:	681d      	ldr	r5, [r3, #0]
 800ce08:	6862      	ldr	r2, [r4, #4]
 800ce0a:	2100      	movs	r1, #0
 800ce0c:	4628      	mov	r0, r5
 800ce0e:	f7f3 f9ff 	bl	8000210 <memchr>
 800ce12:	b108      	cbz	r0, 800ce18 <_printf_i+0x1bc>
 800ce14:	1b40      	subs	r0, r0, r5
 800ce16:	6060      	str	r0, [r4, #4]
 800ce18:	6863      	ldr	r3, [r4, #4]
 800ce1a:	6123      	str	r3, [r4, #16]
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce22:	e7a7      	b.n	800cd74 <_printf_i+0x118>
 800ce24:	6923      	ldr	r3, [r4, #16]
 800ce26:	462a      	mov	r2, r5
 800ce28:	4639      	mov	r1, r7
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	47c0      	blx	r8
 800ce2e:	3001      	adds	r0, #1
 800ce30:	d0aa      	beq.n	800cd88 <_printf_i+0x12c>
 800ce32:	6823      	ldr	r3, [r4, #0]
 800ce34:	079b      	lsls	r3, r3, #30
 800ce36:	d413      	bmi.n	800ce60 <_printf_i+0x204>
 800ce38:	68e0      	ldr	r0, [r4, #12]
 800ce3a:	9b03      	ldr	r3, [sp, #12]
 800ce3c:	4298      	cmp	r0, r3
 800ce3e:	bfb8      	it	lt
 800ce40:	4618      	movlt	r0, r3
 800ce42:	e7a3      	b.n	800cd8c <_printf_i+0x130>
 800ce44:	2301      	movs	r3, #1
 800ce46:	464a      	mov	r2, r9
 800ce48:	4639      	mov	r1, r7
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	47c0      	blx	r8
 800ce4e:	3001      	adds	r0, #1
 800ce50:	d09a      	beq.n	800cd88 <_printf_i+0x12c>
 800ce52:	3501      	adds	r5, #1
 800ce54:	68e3      	ldr	r3, [r4, #12]
 800ce56:	9a03      	ldr	r2, [sp, #12]
 800ce58:	1a9b      	subs	r3, r3, r2
 800ce5a:	42ab      	cmp	r3, r5
 800ce5c:	dcf2      	bgt.n	800ce44 <_printf_i+0x1e8>
 800ce5e:	e7eb      	b.n	800ce38 <_printf_i+0x1dc>
 800ce60:	2500      	movs	r5, #0
 800ce62:	f104 0919 	add.w	r9, r4, #25
 800ce66:	e7f5      	b.n	800ce54 <_printf_i+0x1f8>
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d1ac      	bne.n	800cdc6 <_printf_i+0x16a>
 800ce6c:	7803      	ldrb	r3, [r0, #0]
 800ce6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce76:	e76c      	b.n	800cd52 <_printf_i+0xf6>
 800ce78:	0800ea35 	.word	0x0800ea35
 800ce7c:	0800ea46 	.word	0x0800ea46

0800ce80 <memcpy>:
 800ce80:	b510      	push	{r4, lr}
 800ce82:	1e43      	subs	r3, r0, #1
 800ce84:	440a      	add	r2, r1
 800ce86:	4291      	cmp	r1, r2
 800ce88:	d100      	bne.n	800ce8c <memcpy+0xc>
 800ce8a:	bd10      	pop	{r4, pc}
 800ce8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce90:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce94:	e7f7      	b.n	800ce86 <memcpy+0x6>

0800ce96 <memmove>:
 800ce96:	4288      	cmp	r0, r1
 800ce98:	b510      	push	{r4, lr}
 800ce9a:	eb01 0302 	add.w	r3, r1, r2
 800ce9e:	d807      	bhi.n	800ceb0 <memmove+0x1a>
 800cea0:	1e42      	subs	r2, r0, #1
 800cea2:	4299      	cmp	r1, r3
 800cea4:	d00a      	beq.n	800cebc <memmove+0x26>
 800cea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ceaa:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ceae:	e7f8      	b.n	800cea2 <memmove+0xc>
 800ceb0:	4283      	cmp	r3, r0
 800ceb2:	d9f5      	bls.n	800cea0 <memmove+0xa>
 800ceb4:	1881      	adds	r1, r0, r2
 800ceb6:	1ad2      	subs	r2, r2, r3
 800ceb8:	42d3      	cmn	r3, r2
 800ceba:	d100      	bne.n	800cebe <memmove+0x28>
 800cebc:	bd10      	pop	{r4, pc}
 800cebe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cec2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cec6:	e7f7      	b.n	800ceb8 <memmove+0x22>

0800cec8 <_realloc_r>:
 800cec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceca:	4607      	mov	r7, r0
 800cecc:	4614      	mov	r4, r2
 800cece:	460e      	mov	r6, r1
 800ced0:	b921      	cbnz	r1, 800cedc <_realloc_r+0x14>
 800ced2:	4611      	mov	r1, r2
 800ced4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ced8:	f7ff bc6c 	b.w	800c7b4 <_malloc_r>
 800cedc:	b922      	cbnz	r2, 800cee8 <_realloc_r+0x20>
 800cede:	f7ff fc1b 	bl	800c718 <_free_r>
 800cee2:	4625      	mov	r5, r4
 800cee4:	4628      	mov	r0, r5
 800cee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cee8:	f000 f814 	bl	800cf14 <_malloc_usable_size_r>
 800ceec:	42a0      	cmp	r0, r4
 800ceee:	d20f      	bcs.n	800cf10 <_realloc_r+0x48>
 800cef0:	4621      	mov	r1, r4
 800cef2:	4638      	mov	r0, r7
 800cef4:	f7ff fc5e 	bl	800c7b4 <_malloc_r>
 800cef8:	4605      	mov	r5, r0
 800cefa:	2800      	cmp	r0, #0
 800cefc:	d0f2      	beq.n	800cee4 <_realloc_r+0x1c>
 800cefe:	4631      	mov	r1, r6
 800cf00:	4622      	mov	r2, r4
 800cf02:	f7ff ffbd 	bl	800ce80 <memcpy>
 800cf06:	4631      	mov	r1, r6
 800cf08:	4638      	mov	r0, r7
 800cf0a:	f7ff fc05 	bl	800c718 <_free_r>
 800cf0e:	e7e9      	b.n	800cee4 <_realloc_r+0x1c>
 800cf10:	4635      	mov	r5, r6
 800cf12:	e7e7      	b.n	800cee4 <_realloc_r+0x1c>

0800cf14 <_malloc_usable_size_r>:
 800cf14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf18:	1f18      	subs	r0, r3, #4
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	bfbc      	itt	lt
 800cf1e:	580b      	ldrlt	r3, [r1, r0]
 800cf20:	18c0      	addlt	r0, r0, r3
 800cf22:	4770      	bx	lr

0800cf24 <_init>:
 800cf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf26:	bf00      	nop
 800cf28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf2a:	bc08      	pop	{r3}
 800cf2c:	469e      	mov	lr, r3
 800cf2e:	4770      	bx	lr

0800cf30 <_fini>:
 800cf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf32:	bf00      	nop
 800cf34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf36:	bc08      	pop	{r3}
 800cf38:	469e      	mov	lr, r3
 800cf3a:	4770      	bx	lr
